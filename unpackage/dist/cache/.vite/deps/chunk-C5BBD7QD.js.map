{
  "version": 3,
  "sources": ["../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/webpack/universalModuleDefinition", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/webpack/bootstrap", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/pdf.worker.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/worker.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/shared/util.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/shared/compatibility.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/shared/is_node.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/primitives.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/pdf_manager.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/chunked_stream.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/core_utils.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/document.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/obj.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/parser.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/stream.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/ccitt_stream.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/ccitt.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/jbig2_stream.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/jbig2.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/arithmetic_decoder.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/jpeg_stream.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/jpg.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/jpx_stream.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/jpx.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/crypto.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/colorspace.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/image_utils.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/annotation.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/operator_list.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/evaluator.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/cmap.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/fonts.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/cff_parser.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/charsets.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/encodings.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/glyphlist.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/standard_fonts.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/unicode.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/font_renderer.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/type1_parser.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/pattern.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/bidi.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/metrics.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/function.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/ps_parser.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/murmurhash3.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/image.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/shared/message_handler.js", "../../../../../node_modules/pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf.worker/src/core/worker_stream.js"],
  "sourcesContent": ["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"pdfjs-dist/build/pdf.worker\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pdfjs-dist/build/pdf.worker\"] = factory();\n\telse\n\t\troot[\"pdfjs-dist/build/pdf.worker\"] = factory();\n})(this, function() {\nreturn ", " \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __w_pdfjs_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __w_pdfjs_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__w_pdfjs_require__.m = modules;\n\n \t// expose the module cache\n \t__w_pdfjs_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__w_pdfjs_require__.d = function(exports, name, getter) {\n \t\tif(!__w_pdfjs_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__w_pdfjs_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__w_pdfjs_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __w_pdfjs_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__w_pdfjs_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __w_pdfjs_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__w_pdfjs_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__w_pdfjs_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__w_pdfjs_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__w_pdfjs_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __w_pdfjs_require__(__w_pdfjs_require__.s = 0);\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WorkerMessageHandler } from \"./core/worker.js\";\n\n/* eslint-disable-next-line no-unused-vars */\nconst pdfjsVersion = PDFJSDev.eval(\"BUNDLE_VERSION\");\n/* eslint-disable-next-line no-unused-vars */\nconst pdfjsBuild = PDFJSDev.eval(\"BUNDLE_BUILD\");\n\nexport { WorkerMessageHandler };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AbortException,\n  arrayByteLength,\n  arraysToBytes,\n  createPromiseCapability,\n  getVerbosityLevel,\n  info,\n  InvalidPDFException,\n  MissingPDFException,\n  PasswordException,\n  setVerbosityLevel,\n  UnexpectedResponseException,\n  UnknownErrorException,\n  UNSUPPORTED_FEATURES,\n  VerbosityLevel,\n  warn,\n} from \"../shared/util.js\";\nimport { clearPrimitiveCaches, Ref } from \"./primitives.js\";\nimport { LocalPdfManager, NetworkPdfManager } from \"./pdf_manager.js\";\nimport { isNodeJS } from \"../shared/is_node.js\";\nimport { MessageHandler } from \"../shared/message_handler.js\";\nimport { PDFWorkerStream } from \"./worker_stream.js\";\nimport { XRefParseException } from \"./core_utils.js\";\n\nvar WorkerTask = (function WorkerTaskClosure() {\n  // eslint-disable-next-line no-shadow\n  function WorkerTask(name) {\n    this.name = name;\n    this.terminated = false;\n    this._capability = createPromiseCapability();\n  }\n\n  WorkerTask.prototype = {\n    get finished() {\n      return this._capability.promise;\n    },\n\n    finish() {\n      this._capability.resolve();\n    },\n\n    terminate() {\n      this.terminated = true;\n    },\n\n    ensureNotTerminated() {\n      if (this.terminated) {\n        throw new Error(\"Worker task was terminated\");\n      }\n    },\n  };\n\n  return WorkerTask;\n})();\n\nvar WorkerMessageHandler = {\n  setup(handler, port) {\n    var testMessageProcessed = false;\n    handler.on(\"test\", function wphSetupTest(data) {\n      if (testMessageProcessed) {\n        return; // we already processed 'test' message once\n      }\n      testMessageProcessed = true;\n\n      // check if Uint8Array can be sent to worker\n      if (!(data instanceof Uint8Array)) {\n        handler.send(\"test\", null);\n        return;\n      }\n      // making sure postMessage transfers are working\n      const supportTransfers = data[0] === 255;\n      handler.postMessageTransfers = supportTransfers;\n\n      handler.send(\"test\", { supportTransfers });\n    });\n\n    handler.on(\"configure\", function wphConfigure(data) {\n      setVerbosityLevel(data.verbosity);\n    });\n\n    handler.on(\"GetDocRequest\", function wphSetupDoc(data) {\n      return WorkerMessageHandler.createDocumentHandler(data, port);\n    });\n  },\n  createDocumentHandler(docParams, port) {\n    // This context is actually holds references on pdfManager and handler,\n    // until the latter is destroyed.\n    var pdfManager;\n    var terminated = false;\n    var cancelXHRs = null;\n    var WorkerTasks = [];\n    const verbosity = getVerbosityLevel();\n\n    const apiVersion = docParams.apiVersion;\n    const workerVersion =\n      typeof PDFJSDev !== \"undefined\" && !PDFJSDev.test(\"TESTING\")\n        ? PDFJSDev.eval(\"BUNDLE_VERSION\")\n        : null;\n    if (apiVersion !== workerVersion) {\n      throw new Error(\n        `The API version \"${apiVersion}\" does not match ` +\n          `the Worker version \"${workerVersion}\".`\n      );\n    }\n\n    if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) {\n      // Fail early, and predictably, rather than having (some) fonts fail to\n      // load/render with slightly cryptic error messages in environments where\n      // the `Array.prototype` has been *incorrectly* extended.\n      //\n      // PLEASE NOTE: We do *not* want to slow down font parsing by adding\n      //              `hasOwnProperty` checks all over the code-base.\n      const enumerableProperties = [];\n      for (const property in []) {\n        enumerableProperties.push(property);\n      }\n      if (enumerableProperties.length) {\n        throw new Error(\n          \"The `Array.prototype` contains unexpected enumerable properties: \" +\n            enumerableProperties.join(\", \") +\n            \"; thus breaking e.g. `for...in` iteration of `Array`s.\"\n        );\n      }\n\n      // Ensure that (primarily) Node.js users won't accidentally attempt to use\n      // a non-translated/non-polyfilled build of the library, since that would\n      // quickly fail anyway because of missing functionality (such as e.g.\n      // `ReadableStream` and `Promise.allSettled`).\n      if (\n        (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"SKIP_BABEL\")) &&\n        (typeof ReadableStream === \"undefined\" ||\n          typeof Promise.allSettled === \"undefined\")\n      ) {\n        throw new Error(\n          \"The browser/environment lacks native support for critical \" +\n            \"functionality used by the PDF.js library (e.g. \" +\n            \"`ReadableStream` and/or `Promise.allSettled`); \" +\n            \"please use an ES5-compatible build instead.\"\n        );\n      }\n    }\n\n    var docId = docParams.docId;\n    var docBaseUrl = docParams.docBaseUrl;\n    var workerHandlerName = docParams.docId + \"_worker\";\n    var handler = new MessageHandler(workerHandlerName, docId, port);\n\n    // Ensure that postMessage transfers are always correctly enabled/disabled,\n    // to prevent \"DataCloneError\" in browsers without transfers support.\n    handler.postMessageTransfers = docParams.postMessageTransfers;\n\n    function ensureNotTerminated() {\n      if (terminated) {\n        throw new Error(\"Worker was terminated\");\n      }\n    }\n\n    function startWorkerTask(task) {\n      WorkerTasks.push(task);\n    }\n\n    function finishWorkerTask(task) {\n      task.finish();\n      var i = WorkerTasks.indexOf(task);\n      WorkerTasks.splice(i, 1);\n    }\n\n    async function loadDocument(recoveryMode) {\n      await pdfManager.ensureDoc(\"checkHeader\");\n      await pdfManager.ensureDoc(\"parseStartXRef\");\n      await pdfManager.ensureDoc(\"parse\", [recoveryMode]);\n\n      if (!recoveryMode) {\n        // Check that at least the first page can be successfully loaded,\n        // since otherwise the XRef table is definitely not valid.\n        await pdfManager.ensureDoc(\"checkFirstPage\");\n      }\n\n      const [numPages, fingerprint] = await Promise.all([\n        pdfManager.ensureDoc(\"numPages\"),\n        pdfManager.ensureDoc(\"fingerprint\"),\n      ]);\n      return { numPages, fingerprint };\n    }\n\n    function getPdfManager(data, evaluatorOptions) {\n      var pdfManagerCapability = createPromiseCapability();\n      let newPdfManager;\n\n      var source = data.source;\n      if (source.data) {\n        try {\n          newPdfManager = new LocalPdfManager(\n            docId,\n            source.data,\n            source.password,\n            evaluatorOptions,\n            docBaseUrl\n          );\n          pdfManagerCapability.resolve(newPdfManager);\n        } catch (ex) {\n          pdfManagerCapability.reject(ex);\n        }\n        return pdfManagerCapability.promise;\n      }\n\n      var pdfStream,\n        cachedChunks = [];\n      try {\n        pdfStream = new PDFWorkerStream(handler);\n      } catch (ex) {\n        pdfManagerCapability.reject(ex);\n        return pdfManagerCapability.promise;\n      }\n\n      var fullRequest = pdfStream.getFullReader();\n      fullRequest.headersReady\n        .then(function () {\n          if (!fullRequest.isRangeSupported) {\n            return;\n          }\n\n          // We don't need auto-fetch when streaming is enabled.\n          var disableAutoFetch =\n            source.disableAutoFetch || fullRequest.isStreamingSupported;\n          newPdfManager = new NetworkPdfManager(\n            docId,\n            pdfStream,\n            {\n              msgHandler: handler,\n              password: source.password,\n              length: fullRequest.contentLength,\n              disableAutoFetch,\n              rangeChunkSize: source.rangeChunkSize,\n            },\n            evaluatorOptions,\n            docBaseUrl\n          );\n          // There may be a chance that `newPdfManager` is not initialized for\n          // the first few runs of `readchunk` block of code. Be sure to send\n          // all cached chunks, if any, to chunked_stream via pdf_manager.\n          for (let i = 0; i < cachedChunks.length; i++) {\n            newPdfManager.sendProgressiveData(cachedChunks[i]);\n          }\n\n          cachedChunks = [];\n          pdfManagerCapability.resolve(newPdfManager);\n          cancelXHRs = null;\n        })\n        .catch(function (reason) {\n          pdfManagerCapability.reject(reason);\n          cancelXHRs = null;\n        });\n\n      var loaded = 0;\n      var flushChunks = function () {\n        var pdfFile = arraysToBytes(cachedChunks);\n        if (source.length && pdfFile.length !== source.length) {\n          warn(\"reported HTTP length is different from actual\");\n        }\n        // the data is array, instantiating directly from it\n        try {\n          newPdfManager = new LocalPdfManager(\n            docId,\n            pdfFile,\n            source.password,\n            evaluatorOptions,\n            docBaseUrl\n          );\n          pdfManagerCapability.resolve(newPdfManager);\n        } catch (ex) {\n          pdfManagerCapability.reject(ex);\n        }\n        cachedChunks = [];\n      };\n      var readPromise = new Promise(function (resolve, reject) {\n        var readChunk = function ({ value, done }) {\n          try {\n            ensureNotTerminated();\n            if (done) {\n              if (!newPdfManager) {\n                flushChunks();\n              }\n              cancelXHRs = null;\n              return;\n            }\n\n            loaded += arrayByteLength(value);\n            if (!fullRequest.isStreamingSupported) {\n              handler.send(\"DocProgress\", {\n                loaded,\n                total: Math.max(loaded, fullRequest.contentLength || 0),\n              });\n            }\n\n            if (newPdfManager) {\n              newPdfManager.sendProgressiveData(value);\n            } else {\n              cachedChunks.push(value);\n            }\n\n            fullRequest.read().then(readChunk, reject);\n          } catch (e) {\n            reject(e);\n          }\n        };\n        fullRequest.read().then(readChunk, reject);\n      });\n      readPromise.catch(function (e) {\n        pdfManagerCapability.reject(e);\n        cancelXHRs = null;\n      });\n\n      cancelXHRs = function (reason) {\n        pdfStream.cancelAllRequests(reason);\n      };\n\n      return pdfManagerCapability.promise;\n    }\n\n    function setupDoc(data) {\n      function onSuccess(doc) {\n        ensureNotTerminated();\n        handler.send(\"GetDoc\", { pdfInfo: doc });\n      }\n\n      function onFailure(ex) {\n        ensureNotTerminated();\n\n        if (ex instanceof PasswordException) {\n          var task = new WorkerTask(`PasswordException: response ${ex.code}`);\n          startWorkerTask(task);\n\n          handler\n            .sendWithPromise(\"PasswordRequest\", ex)\n            .then(function ({ password }) {\n              finishWorkerTask(task);\n              pdfManager.updatePassword(password);\n              pdfManagerReady();\n            })\n            .catch(function () {\n              finishWorkerTask(task);\n              handler.send(\"DocException\", ex);\n            });\n        } else if (\n          ex instanceof InvalidPDFException ||\n          ex instanceof MissingPDFException ||\n          ex instanceof UnexpectedResponseException ||\n          ex instanceof UnknownErrorException\n        ) {\n          handler.send(\"DocException\", ex);\n        } else {\n          handler.send(\n            \"DocException\",\n            new UnknownErrorException(ex.message, ex.toString())\n          );\n        }\n      }\n\n      function pdfManagerReady() {\n        ensureNotTerminated();\n\n        loadDocument(false).then(\n          onSuccess,\n          function loadFailure(ex) {\n            ensureNotTerminated();\n\n            // Try again with recoveryMode == true\n            if (!(ex instanceof XRefParseException)) {\n              onFailure(ex);\n              return;\n            }\n            pdfManager.requestLoadedStream();\n            pdfManager.onLoadedStream().then(function () {\n              ensureNotTerminated();\n\n              loadDocument(true).then(onSuccess, onFailure);\n            });\n          },\n          onFailure\n        );\n      }\n\n      ensureNotTerminated();\n\n      var evaluatorOptions = {\n        maxImageSize: data.maxImageSize,\n        disableFontFace: data.disableFontFace,\n        ignoreErrors: data.ignoreErrors,\n        isEvalSupported: data.isEvalSupported,\n        fontExtraProperties: data.fontExtraProperties,\n      };\n\n      getPdfManager(data, evaluatorOptions)\n        .then(function (newPdfManager) {\n          if (terminated) {\n            // We were in a process of setting up the manager, but it got\n            // terminated in the middle.\n            newPdfManager.terminate(\n              new AbortException(\"Worker was terminated.\")\n            );\n            throw new Error(\"Worker was terminated\");\n          }\n          pdfManager = newPdfManager;\n\n          pdfManager.onLoadedStream().then(function (stream) {\n            handler.send(\"DataLoaded\", { length: stream.bytes.byteLength });\n          });\n        })\n        .then(pdfManagerReady, onFailure);\n    }\n\n    handler.on(\"GetPage\", function wphSetupGetPage(data) {\n      return pdfManager.getPage(data.pageIndex).then(function (page) {\n        return Promise.all([\n          pdfManager.ensure(page, \"rotate\"),\n          pdfManager.ensure(page, \"ref\"),\n          pdfManager.ensure(page, \"userUnit\"),\n          pdfManager.ensure(page, \"view\"),\n        ]).then(function ([rotate, ref, userUnit, view]) {\n          return {\n            rotate,\n            ref,\n            userUnit,\n            view,\n          };\n        });\n      });\n    });\n\n    handler.on(\"GetPageIndex\", function wphSetupGetPageIndex(data) {\n      var ref = Ref.get(data.ref.num, data.ref.gen);\n      var catalog = pdfManager.pdfDocument.catalog;\n      return catalog.getPageIndex(ref);\n    });\n\n    handler.on(\"GetDestinations\", function wphSetupGetDestinations(data) {\n      return pdfManager.ensureCatalog(\"destinations\");\n    });\n\n    handler.on(\"GetDestination\", function wphSetupGetDestination(data) {\n      return pdfManager.ensureCatalog(\"getDestination\", [data.id]);\n    });\n\n    handler.on(\"GetPageLabels\", function wphSetupGetPageLabels(data) {\n      return pdfManager.ensureCatalog(\"pageLabels\");\n    });\n\n    handler.on(\"GetPageLayout\", function wphSetupGetPageLayout(data) {\n      return pdfManager.ensureCatalog(\"pageLayout\");\n    });\n\n    handler.on(\"GetPageMode\", function wphSetupGetPageMode(data) {\n      return pdfManager.ensureCatalog(\"pageMode\");\n    });\n\n    handler.on(\"GetViewerPreferences\", function (data) {\n      return pdfManager.ensureCatalog(\"viewerPreferences\");\n    });\n\n    handler.on(\"GetOpenAction\", function (data) {\n      return pdfManager.ensureCatalog(\"openAction\");\n    });\n\n    handler.on(\"GetAttachments\", function wphSetupGetAttachments(data) {\n      return pdfManager.ensureCatalog(\"attachments\");\n    });\n\n    handler.on(\"GetJavaScript\", function wphSetupGetJavaScript(data) {\n      return pdfManager.ensureCatalog(\"javaScript\");\n    });\n\n    handler.on(\"GetOutline\", function wphSetupGetOutline(data) {\n      return pdfManager.ensureCatalog(\"documentOutline\");\n    });\n\n    handler.on(\"GetPermissions\", function (data) {\n      return pdfManager.ensureCatalog(\"permissions\");\n    });\n\n    handler.on(\"GetMetadata\", function wphSetupGetMetadata(data) {\n      return Promise.all([\n        pdfManager.ensureDoc(\"documentInfo\"),\n        pdfManager.ensureCatalog(\"metadata\"),\n      ]);\n    });\n\n    handler.on(\"GetData\", function wphSetupGetData(data) {\n      pdfManager.requestLoadedStream();\n      return pdfManager.onLoadedStream().then(function (stream) {\n        return stream.bytes;\n      });\n    });\n\n    handler.on(\"GetStats\", function wphSetupGetStats(data) {\n      return pdfManager.pdfDocument.xref.stats;\n    });\n\n    handler.on(\"GetAnnotations\", function ({ pageIndex, intent }) {\n      return pdfManager.getPage(pageIndex).then(function (page) {\n        return page.getAnnotationsData(intent);\n      });\n    });\n\n    handler.on(\n      \"GetOperatorList\",\n      function wphSetupRenderPage(data, sink) {\n        var pageIndex = data.pageIndex;\n        pdfManager.getPage(pageIndex).then(function (page) {\n          var task = new WorkerTask(`GetOperatorList: page ${pageIndex}`);\n          startWorkerTask(task);\n\n          // NOTE: Keep this condition in sync with the `info` helper function.\n          const start = verbosity >= VerbosityLevel.INFOS ? Date.now() : 0;\n\n          // Pre compile the pdf page and fetch the fonts/images.\n          page\n            .getOperatorList({\n              handler,\n              sink,\n              task,\n              intent: data.intent,\n              renderInteractiveForms: data.renderInteractiveForms,\n            })\n            .then(\n              function (operatorListInfo) {\n                finishWorkerTask(task);\n\n                if (start) {\n                  info(\n                    `page=${pageIndex + 1} - getOperatorList: time=` +\n                      `${Date.now() - start}ms, len=${operatorListInfo.length}`\n                  );\n                }\n                sink.close();\n              },\n              function (reason) {\n                finishWorkerTask(task);\n                if (task.terminated) {\n                  return; // ignoring errors from the terminated thread\n                }\n                // For compatibility with older behavior, generating unknown\n                // unsupported feature notification on errors.\n                handler.send(\"UnsupportedFeature\", {\n                  featureId: UNSUPPORTED_FEATURES.errorOperatorList,\n                });\n\n                sink.error(reason);\n\n                // TODO: Should `reason` be re-thrown here (currently that\n                //       casues \"Uncaught exception: ...\" messages in the\n                //       console)?\n              }\n            );\n        });\n      },\n      this\n    );\n\n    handler.on(\"GetTextContent\", function wphExtractText(data, sink) {\n      var pageIndex = data.pageIndex;\n      sink.onPull = function (desiredSize) {};\n      sink.onCancel = function (reason) {};\n\n      pdfManager.getPage(pageIndex).then(function (page) {\n        var task = new WorkerTask(\"GetTextContent: page \" + pageIndex);\n        startWorkerTask(task);\n\n        // NOTE: Keep this condition in sync with the `info` helper function.\n        const start = verbosity >= VerbosityLevel.INFOS ? Date.now() : 0;\n\n        page\n          .extractTextContent({\n            handler,\n            task,\n            sink,\n            normalizeWhitespace: data.normalizeWhitespace,\n            combineTextItems: data.combineTextItems,\n          })\n          .then(\n            function () {\n              finishWorkerTask(task);\n\n              if (start) {\n                info(\n                  `page=${pageIndex + 1} - getTextContent: time=` +\n                    `${Date.now() - start}ms`\n                );\n              }\n              sink.close();\n            },\n            function (reason) {\n              finishWorkerTask(task);\n              if (task.terminated) {\n                return; // ignoring errors from the terminated thread\n              }\n              sink.error(reason);\n\n              // TODO: Should `reason` be re-thrown here (currently that casues\n              //       \"Uncaught exception: ...\" messages in the console)?\n            }\n          );\n      });\n    });\n\n    handler.on(\"FontFallback\", function (data) {\n      return pdfManager.fontFallback(data.id, handler);\n    });\n\n    handler.on(\"Cleanup\", function wphCleanup(data) {\n      return pdfManager.cleanup(/* manuallyTriggered = */ true);\n    });\n\n    handler.on(\"Terminate\", function wphTerminate(data) {\n      terminated = true;\n\n      const waitOn = [];\n      if (pdfManager) {\n        pdfManager.terminate(new AbortException(\"Worker was terminated.\"));\n\n        const cleanupPromise = pdfManager.cleanup();\n        waitOn.push(cleanupPromise);\n\n        pdfManager = null;\n      } else {\n        clearPrimitiveCaches();\n      }\n      if (cancelXHRs) {\n        cancelXHRs(new AbortException(\"Worker was terminated.\"));\n      }\n\n      WorkerTasks.forEach(function (task) {\n        waitOn.push(task.finished);\n        task.terminate();\n      });\n\n      return Promise.all(waitOn).then(function () {\n        // Notice that even if we destroying handler, resolved response promise\n        // must be sent back.\n        handler.destroy();\n        handler = null;\n      });\n    });\n\n    handler.on(\"Ready\", function wphReady(data) {\n      setupDoc(docParams);\n      docParams = null; // we don't need docParams anymore -- saving memory.\n    });\n    return workerHandlerName;\n  },\n  initializeFromPort(port) {\n    var handler = new MessageHandler(\"worker\", \"main\", port);\n    WorkerMessageHandler.setup(handler, port);\n    handler.send(\"ready\", null);\n  },\n};\n\nfunction isMessagePort(maybePort) {\n  return (\n    typeof maybePort.postMessage === \"function\" && \"onmessage\" in maybePort\n  );\n}\n\n// Worker thread (and not Node.js)?\nif (\n  typeof window === \"undefined\" &&\n  !isNodeJS &&\n  typeof self !== \"undefined\" &&\n  isMessagePort(self)\n) {\n  WorkerMessageHandler.initializeFromPort(self);\n}\n\nexport { WorkerTask, WorkerMessageHandler };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint no-var: error */\n\nimport \"./compatibility.js\";\n\nconst IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];\nconst FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];\n\n// Permission flags from Table 22, Section 7.6.3.2 of the PDF specification.\nconst PermissionFlag = {\n  PRINT: 0x04,\n  MODIFY_CONTENTS: 0x08,\n  COPY: 0x10,\n  MODIFY_ANNOTATIONS: 0x20,\n  FILL_INTERACTIVE_FORMS: 0x100,\n  COPY_FOR_ACCESSIBILITY: 0x200,\n  ASSEMBLE: 0x400,\n  PRINT_HIGH_QUALITY: 0x800,\n};\n\nconst TextRenderingMode = {\n  FILL: 0,\n  STROKE: 1,\n  FILL_STROKE: 2,\n  INVISIBLE: 3,\n  FILL_ADD_TO_PATH: 4,\n  STROKE_ADD_TO_PATH: 5,\n  FILL_STROKE_ADD_TO_PATH: 6,\n  ADD_TO_PATH: 7,\n  FILL_STROKE_MASK: 3,\n  ADD_TO_PATH_FLAG: 4,\n};\n\nconst ImageKind = {\n  GRAYSCALE_1BPP: 1,\n  RGB_24BPP: 2,\n  RGBA_32BPP: 3,\n};\n\nconst AnnotationType = {\n  TEXT: 1,\n  LINK: 2,\n  FREETEXT: 3,\n  LINE: 4,\n  SQUARE: 5,\n  CIRCLE: 6,\n  POLYGON: 7,\n  POLYLINE: 8,\n  HIGHLIGHT: 9,\n  UNDERLINE: 10,\n  SQUIGGLY: 11,\n  STRIKEOUT: 12,\n  STAMP: 13,\n  CARET: 14,\n  INK: 15,\n  POPUP: 16,\n  FILEATTACHMENT: 17,\n  SOUND: 18,\n  MOVIE: 19,\n  WIDGET: 20,\n  SCREEN: 21,\n  PRINTERMARK: 22,\n  TRAPNET: 23,\n  WATERMARK: 24,\n  THREED: 25,\n  REDACT: 26,\n};\n\nconst AnnotationStateModelType = {\n  MARKED: \"Marked\",\n  REVIEW: \"Review\",\n};\n\nconst AnnotationMarkedState = {\n  MARKED: \"Marked\",\n  UNMARKED: \"Unmarked\",\n};\n\nconst AnnotationReviewState = {\n  ACCEPTED: \"Accepted\",\n  REJECTED: \"Rejected\",\n  CANCELLED: \"Cancelled\",\n  COMPLETED: \"Completed\",\n  NONE: \"None\",\n};\n\nconst AnnotationReplyType = {\n  GROUP: \"Group\",\n  REPLY: \"R\",\n};\n\nconst AnnotationFlag = {\n  INVISIBLE: 0x01,\n  HIDDEN: 0x02,\n  PRINT: 0x04,\n  NOZOOM: 0x08,\n  NOROTATE: 0x10,\n  NOVIEW: 0x20,\n  READONLY: 0x40,\n  LOCKED: 0x80,\n  TOGGLENOVIEW: 0x100,\n  LOCKEDCONTENTS: 0x200,\n};\n\nconst AnnotationFieldFlag = {\n  READONLY: 0x0000001,\n  REQUIRED: 0x0000002,\n  NOEXPORT: 0x0000004,\n  MULTILINE: 0x0001000,\n  PASSWORD: 0x0002000,\n  NOTOGGLETOOFF: 0x0004000,\n  RADIO: 0x0008000,\n  PUSHBUTTON: 0x0010000,\n  COMBO: 0x0020000,\n  EDIT: 0x0040000,\n  SORT: 0x0080000,\n  FILESELECT: 0x0100000,\n  MULTISELECT: 0x0200000,\n  DONOTSPELLCHECK: 0x0400000,\n  DONOTSCROLL: 0x0800000,\n  COMB: 0x1000000,\n  RICHTEXT: 0x2000000,\n  RADIOSINUNISON: 0x2000000,\n  COMMITONSELCHANGE: 0x4000000,\n};\n\nconst AnnotationBorderStyleType = {\n  SOLID: 1,\n  DASHED: 2,\n  BEVELED: 3,\n  INSET: 4,\n  UNDERLINE: 5,\n};\n\nconst StreamType = {\n  UNKNOWN: \"UNKNOWN\",\n  FLATE: \"FLATE\",\n  LZW: \"LZW\",\n  DCT: \"DCT\",\n  JPX: \"JPX\",\n  JBIG: \"JBIG\",\n  A85: \"A85\",\n  AHX: \"AHX\",\n  CCF: \"CCF\",\n  RLX: \"RLX\", // PDF short name is 'RL', but telemetry requires three chars.\n};\n\nconst FontType = {\n  UNKNOWN: \"UNKNOWN\",\n  TYPE1: \"TYPE1\",\n  TYPE1C: \"TYPE1C\",\n  CIDFONTTYPE0: \"CIDFONTTYPE0\",\n  CIDFONTTYPE0C: \"CIDFONTTYPE0C\",\n  TRUETYPE: \"TRUETYPE\",\n  CIDFONTTYPE2: \"CIDFONTTYPE2\",\n  TYPE3: \"TYPE3\",\n  OPENTYPE: \"OPENTYPE\",\n  TYPE0: \"TYPE0\",\n  MMTYPE1: \"MMTYPE1\",\n};\n\nconst VerbosityLevel = {\n  ERRORS: 0,\n  WARNINGS: 1,\n  INFOS: 5,\n};\n\nconst CMapCompressionType = {\n  NONE: 0,\n  BINARY: 1,\n  STREAM: 2,\n};\n\n// All the possible operations for an operator list.\nconst OPS = {\n  // Intentionally start from 1 so it is easy to spot bad operators that will be\n  // 0's.\n  dependency: 1,\n  setLineWidth: 2,\n  setLineCap: 3,\n  setLineJoin: 4,\n  setMiterLimit: 5,\n  setDash: 6,\n  setRenderingIntent: 7,\n  setFlatness: 8,\n  setGState: 9,\n  save: 10,\n  restore: 11,\n  transform: 12,\n  moveTo: 13,\n  lineTo: 14,\n  curveTo: 15,\n  curveTo2: 16,\n  curveTo3: 17,\n  closePath: 18,\n  rectangle: 19,\n  stroke: 20,\n  closeStroke: 21,\n  fill: 22,\n  eoFill: 23,\n  fillStroke: 24,\n  eoFillStroke: 25,\n  closeFillStroke: 26,\n  closeEOFillStroke: 27,\n  endPath: 28,\n  clip: 29,\n  eoClip: 30,\n  beginText: 31,\n  endText: 32,\n  setCharSpacing: 33,\n  setWordSpacing: 34,\n  setHScale: 35,\n  setLeading: 36,\n  setFont: 37,\n  setTextRenderingMode: 38,\n  setTextRise: 39,\n  moveText: 40,\n  setLeadingMoveText: 41,\n  setTextMatrix: 42,\n  nextLine: 43,\n  showText: 44,\n  showSpacedText: 45,\n  nextLineShowText: 46,\n  nextLineSetSpacingShowText: 47,\n  setCharWidth: 48,\n  setCharWidthAndBounds: 49,\n  setStrokeColorSpace: 50,\n  setFillColorSpace: 51,\n  setStrokeColor: 52,\n  setStrokeColorN: 53,\n  setFillColor: 54,\n  setFillColorN: 55,\n  setStrokeGray: 56,\n  setFillGray: 57,\n  setStrokeRGBColor: 58,\n  setFillRGBColor: 59,\n  setStrokeCMYKColor: 60,\n  setFillCMYKColor: 61,\n  shadingFill: 62,\n  beginInlineImage: 63,\n  beginImageData: 64,\n  endInlineImage: 65,\n  paintXObject: 66,\n  markPoint: 67,\n  markPointProps: 68,\n  beginMarkedContent: 69,\n  beginMarkedContentProps: 70,\n  endMarkedContent: 71,\n  beginCompat: 72,\n  endCompat: 73,\n  paintFormXObjectBegin: 74,\n  paintFormXObjectEnd: 75,\n  beginGroup: 76,\n  endGroup: 77,\n  beginAnnotations: 78,\n  endAnnotations: 79,\n  beginAnnotation: 80,\n  endAnnotation: 81,\n  paintJpegXObject: 82,\n  paintImageMaskXObject: 83,\n  paintImageMaskXObjectGroup: 84,\n  paintImageXObject: 85,\n  paintInlineImageXObject: 86,\n  paintInlineImageXObjectGroup: 87,\n  paintImageXObjectRepeat: 88,\n  paintImageMaskXObjectRepeat: 89,\n  paintSolidColorImageMask: 90,\n  constructPath: 91,\n};\n\nconst UNSUPPORTED_FEATURES = {\n  /** @deprecated unused */\n  unknown: \"unknown\",\n  forms: \"forms\",\n  javaScript: \"javaScript\",\n  smask: \"smask\",\n  shadingPattern: \"shadingPattern\",\n  /** @deprecated unused */\n  font: \"font\",\n  errorTilingPattern: \"errorTilingPattern\",\n  errorExtGState: \"errorExtGState\",\n  errorXObject: \"errorXObject\",\n  errorFontLoadType3: \"errorFontLoadType3\",\n  errorFontState: \"errorFontState\",\n  errorFontMissing: \"errorFontMissing\",\n  errorFontTranslate: \"errorFontTranslate\",\n  errorColorSpace: \"errorColorSpace\",\n  errorOperatorList: \"errorOperatorList\",\n  errorFontToUnicode: \"errorFontToUnicode\",\n  errorFontLoadNative: \"errorFontLoadNative\",\n  errorFontGetPath: \"errorFontGetPath\",\n};\n\nconst PasswordResponses = {\n  NEED_PASSWORD: 1,\n  INCORRECT_PASSWORD: 2,\n};\n\nlet verbosity = VerbosityLevel.WARNINGS;\n\nfunction setVerbosityLevel(level) {\n  if (Number.isInteger(level)) {\n    verbosity = level;\n  }\n}\n\nfunction getVerbosityLevel() {\n  return verbosity;\n}\n\n// A notice for devs. These are good for things that are helpful to devs, such\n// as warning that Workers were disabled, which is important to devs but not\n// end users.\nfunction info(msg) {\n  if (verbosity >= VerbosityLevel.INFOS) {\n    console.log(`Info: ${msg}`);\n  }\n}\n\n// Non-fatal warnings.\nfunction warn(msg) {\n  if (verbosity >= VerbosityLevel.WARNINGS) {\n    console.log(`Warning: ${msg}`);\n  }\n}\n\nfunction unreachable(msg) {\n  throw new Error(msg);\n}\n\nfunction assert(cond, msg) {\n  if (!cond) {\n    unreachable(msg);\n  }\n}\n\n// Checks if URLs have the same origin. For non-HTTP based URLs, returns false.\nfunction isSameOrigin(baseUrl, otherUrl) {\n  let base;\n  try {\n    base = new URL(baseUrl);\n    if (!base.origin || base.origin === \"null\") {\n      return false; // non-HTTP url\n    }\n  } catch (e) {\n    return false;\n  }\n\n  const other = new URL(otherUrl, base);\n  return base.origin === other.origin;\n}\n\n// Checks if URLs use one of the whitelisted protocols, e.g. to avoid XSS.\nfunction _isValidProtocol(url) {\n  if (!url) {\n    return false;\n  }\n  switch (url.protocol) {\n    case \"http:\":\n    case \"https:\":\n    case \"ftp:\":\n    case \"mailto:\":\n    case \"tel:\":\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Attempts to create a valid absolute URL.\n *\n * @param {URL|string} url - An absolute, or relative, URL.\n * @param {URL|string} baseUrl - An absolute URL.\n * @returns Either a valid {URL}, or `null` otherwise.\n */\nfunction createValidAbsoluteUrl(url, baseUrl) {\n  if (!url) {\n    return null;\n  }\n  try {\n    const absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);\n    if (_isValidProtocol(absoluteUrl)) {\n      return absoluteUrl;\n    }\n  } catch (ex) {\n    /* `new URL()` will throw on incorrect data. */\n  }\n  return null;\n}\n\nfunction shadow(obj, prop, value) {\n  Object.defineProperty(obj, prop, {\n    value,\n    enumerable: true,\n    configurable: true,\n    writable: false,\n  });\n  return value;\n}\n\nconst BaseException = (function BaseExceptionClosure() {\n  // eslint-disable-next-line no-shadow\n  function BaseException(message) {\n    if (this.constructor === BaseException) {\n      unreachable(\"Cannot initialize BaseException.\");\n    }\n    this.message = message;\n    this.name = this.constructor.name;\n  }\n  BaseException.prototype = new Error();\n  BaseException.constructor = BaseException;\n\n  return BaseException;\n})();\n\nclass PasswordException extends BaseException {\n  constructor(msg, code) {\n    super(msg);\n    this.code = code;\n  }\n}\n\nclass UnknownErrorException extends BaseException {\n  constructor(msg, details) {\n    super(msg);\n    this.details = details;\n  }\n}\n\nclass InvalidPDFException extends BaseException {}\n\nclass MissingPDFException extends BaseException {}\n\nclass UnexpectedResponseException extends BaseException {\n  constructor(msg, status) {\n    super(msg);\n    this.status = status;\n  }\n}\n\n/**\n * Error caused during parsing PDF data.\n */\nclass FormatError extends BaseException {}\n\n/**\n * Error used to indicate task cancellation.\n */\nclass AbortException extends BaseException {}\n\nconst NullCharactersRegExp = /\\x00/g;\n\nfunction removeNullCharacters(str) {\n  if (typeof str !== \"string\") {\n    warn(\"The argument for removeNullCharacters must be a string.\");\n    return str;\n  }\n  return str.replace(NullCharactersRegExp, \"\");\n}\n\nfunction bytesToString(bytes) {\n  assert(\n    bytes !== null && typeof bytes === \"object\" && bytes.length !== undefined,\n    \"Invalid argument for bytesToString\"\n  );\n  const length = bytes.length;\n  const MAX_ARGUMENT_COUNT = 8192;\n  if (length < MAX_ARGUMENT_COUNT) {\n    return String.fromCharCode.apply(null, bytes);\n  }\n  const strBuf = [];\n  for (let i = 0; i < length; i += MAX_ARGUMENT_COUNT) {\n    const chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);\n    const chunk = bytes.subarray(i, chunkEnd);\n    strBuf.push(String.fromCharCode.apply(null, chunk));\n  }\n  return strBuf.join(\"\");\n}\n\nfunction stringToBytes(str) {\n  assert(typeof str === \"string\", \"Invalid argument for stringToBytes\");\n  const length = str.length;\n  const bytes = new Uint8Array(length);\n  for (let i = 0; i < length; ++i) {\n    bytes[i] = str.charCodeAt(i) & 0xff;\n  }\n  return bytes;\n}\n\n/**\n * Gets length of the array (Array, Uint8Array, or string) in bytes.\n * @param {Array|Uint8Array|string} arr\n * @returns {number}\n */\nfunction arrayByteLength(arr) {\n  if (arr.length !== undefined) {\n    return arr.length;\n  }\n  assert(arr.byteLength !== undefined, \"arrayByteLength - invalid argument.\");\n  return arr.byteLength;\n}\n\n/**\n * Combines array items (arrays) into single Uint8Array object.\n * @param {Array} arr - the array of the arrays (Array, Uint8Array, or string).\n * @returns {Uint8Array}\n */\nfunction arraysToBytes(arr) {\n  const length = arr.length;\n  // Shortcut: if first and only item is Uint8Array, return it.\n  if (length === 1 && arr[0] instanceof Uint8Array) {\n    return arr[0];\n  }\n  let resultLength = 0;\n  for (let i = 0; i < length; i++) {\n    resultLength += arrayByteLength(arr[i]);\n  }\n  let pos = 0;\n  const data = new Uint8Array(resultLength);\n  for (let i = 0; i < length; i++) {\n    let item = arr[i];\n    if (!(item instanceof Uint8Array)) {\n      if (typeof item === \"string\") {\n        item = stringToBytes(item);\n      } else {\n        item = new Uint8Array(item);\n      }\n    }\n    const itemLength = item.byteLength;\n    data.set(item, pos);\n    pos += itemLength;\n  }\n  return data;\n}\n\nfunction string32(value) {\n  return String.fromCharCode(\n    (value >> 24) & 0xff,\n    (value >> 16) & 0xff,\n    (value >> 8) & 0xff,\n    value & 0xff\n  );\n}\n\n// Checks the endianness of the platform.\nfunction isLittleEndian() {\n  const buffer8 = new Uint8Array(4);\n  buffer8[0] = 1;\n  const view32 = new Uint32Array(buffer8.buffer, 0, 1);\n  return view32[0] === 1;\n}\nconst IsLittleEndianCached = {\n  get value() {\n    return shadow(this, \"value\", isLittleEndian());\n  },\n};\n\n// Checks if it's possible to eval JS expressions.\nfunction isEvalSupported() {\n  try {\n    new Function(\"\"); // eslint-disable-line no-new, no-new-func\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nconst IsEvalSupportedCached = {\n  get value() {\n    return shadow(this, \"value\", isEvalSupported());\n  },\n};\n\nconst rgbBuf = [\"rgb(\", 0, \",\", 0, \",\", 0, \")\"];\n\nclass Util {\n  // makeCssRgb() can be called thousands of times. Using ´rgbBuf` avoids\n  // creating many intermediate strings.\n  static makeCssRgb(r, g, b) {\n    rgbBuf[1] = r;\n    rgbBuf[3] = g;\n    rgbBuf[5] = b;\n    return rgbBuf.join(\"\");\n  }\n\n  // Concatenates two transformation matrices together and returns the result.\n  static transform(m1, m2) {\n    return [\n      m1[0] * m2[0] + m1[2] * m2[1],\n      m1[1] * m2[0] + m1[3] * m2[1],\n      m1[0] * m2[2] + m1[2] * m2[3],\n      m1[1] * m2[2] + m1[3] * m2[3],\n      m1[0] * m2[4] + m1[2] * m2[5] + m1[4],\n      m1[1] * m2[4] + m1[3] * m2[5] + m1[5],\n    ];\n  }\n\n  // For 2d affine transforms\n  static applyTransform(p, m) {\n    const xt = p[0] * m[0] + p[1] * m[2] + m[4];\n    const yt = p[0] * m[1] + p[1] * m[3] + m[5];\n    return [xt, yt];\n  }\n\n  static applyInverseTransform(p, m) {\n    const d = m[0] * m[3] - m[1] * m[2];\n    const xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;\n    const yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;\n    return [xt, yt];\n  }\n\n  // Applies the transform to the rectangle and finds the minimum axially\n  // aligned bounding box.\n  static getAxialAlignedBoundingBox(r, m) {\n    const p1 = Util.applyTransform(r, m);\n    const p2 = Util.applyTransform(r.slice(2, 4), m);\n    const p3 = Util.applyTransform([r[0], r[3]], m);\n    const p4 = Util.applyTransform([r[2], r[1]], m);\n    return [\n      Math.min(p1[0], p2[0], p3[0], p4[0]),\n      Math.min(p1[1], p2[1], p3[1], p4[1]),\n      Math.max(p1[0], p2[0], p3[0], p4[0]),\n      Math.max(p1[1], p2[1], p3[1], p4[1]),\n    ];\n  }\n\n  static inverseTransform(m) {\n    const d = m[0] * m[3] - m[1] * m[2];\n    return [\n      m[3] / d,\n      -m[1] / d,\n      -m[2] / d,\n      m[0] / d,\n      (m[2] * m[5] - m[4] * m[3]) / d,\n      (m[4] * m[1] - m[5] * m[0]) / d,\n    ];\n  }\n\n  // Apply a generic 3d matrix M on a 3-vector v:\n  //   | a b c |   | X |\n  //   | d e f | x | Y |\n  //   | g h i |   | Z |\n  // M is assumed to be serialized as [a,b,c,d,e,f,g,h,i],\n  // with v as [X,Y,Z]\n  static apply3dTransform(m, v) {\n    return [\n      m[0] * v[0] + m[1] * v[1] + m[2] * v[2],\n      m[3] * v[0] + m[4] * v[1] + m[5] * v[2],\n      m[6] * v[0] + m[7] * v[1] + m[8] * v[2],\n    ];\n  }\n\n  // This calculation uses Singular Value Decomposition.\n  // The SVD can be represented with formula A = USV. We are interested in the\n  // matrix S here because it represents the scale values.\n  static singularValueDecompose2dScale(m) {\n    const transpose = [m[0], m[2], m[1], m[3]];\n\n    // Multiply matrix m with its transpose.\n    const a = m[0] * transpose[0] + m[1] * transpose[2];\n    const b = m[0] * transpose[1] + m[1] * transpose[3];\n    const c = m[2] * transpose[0] + m[3] * transpose[2];\n    const d = m[2] * transpose[1] + m[3] * transpose[3];\n\n    // Solve the second degree polynomial to get roots.\n    const first = (a + d) / 2;\n    const second = Math.sqrt((a + d) * (a + d) - 4 * (a * d - c * b)) / 2;\n    const sx = first + second || 1;\n    const sy = first - second || 1;\n\n    // Scale values are the square roots of the eigenvalues.\n    return [Math.sqrt(sx), Math.sqrt(sy)];\n  }\n\n  // Normalize rectangle rect=[x1, y1, x2, y2] so that (x1,y1) < (x2,y2)\n  // For coordinate systems whose origin lies in the bottom-left, this\n  // means normalization to (BL,TR) ordering. For systems with origin in the\n  // top-left, this means (TL,BR) ordering.\n  static normalizeRect(rect) {\n    const r = rect.slice(0); // clone rect\n    if (rect[0] > rect[2]) {\n      r[0] = rect[2];\n      r[2] = rect[0];\n    }\n    if (rect[1] > rect[3]) {\n      r[1] = rect[3];\n      r[3] = rect[1];\n    }\n    return r;\n  }\n\n  // Returns a rectangle [x1, y1, x2, y2] corresponding to the\n  // intersection of rect1 and rect2. If no intersection, returns 'false'\n  // The rectangle coordinates of rect1, rect2 should be [x1, y1, x2, y2]\n  static intersect(rect1, rect2) {\n    function compare(a, b) {\n      return a - b;\n    }\n\n    // Order points along the axes\n    const orderedX = [rect1[0], rect1[2], rect2[0], rect2[2]].sort(compare);\n    const orderedY = [rect1[1], rect1[3], rect2[1], rect2[3]].sort(compare);\n    const result = [];\n\n    rect1 = Util.normalizeRect(rect1);\n    rect2 = Util.normalizeRect(rect2);\n\n    // X: first and second points belong to different rectangles?\n    if (\n      (orderedX[0] === rect1[0] && orderedX[1] === rect2[0]) ||\n      (orderedX[0] === rect2[0] && orderedX[1] === rect1[0])\n    ) {\n      // Intersection must be between second and third points\n      result[0] = orderedX[1];\n      result[2] = orderedX[2];\n    } else {\n      return null;\n    }\n\n    // Y: first and second points belong to different rectangles?\n    if (\n      (orderedY[0] === rect1[1] && orderedY[1] === rect2[1]) ||\n      (orderedY[0] === rect2[1] && orderedY[1] === rect1[1])\n    ) {\n      // Intersection must be between second and third points\n      result[1] = orderedY[1];\n      result[3] = orderedY[2];\n    } else {\n      return null;\n    }\n\n    return result;\n  }\n}\n\n// prettier-ignore\nconst PDFStringTranslateTable = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0x2D8, 0x2C7, 0x2C6, 0x2D9, 0x2DD, 0x2DB, 0x2DA, 0x2DC, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014,\n  0x2013, 0x192, 0x2044, 0x2039, 0x203A, 0x2212, 0x2030, 0x201E, 0x201C,\n  0x201D, 0x2018, 0x2019, 0x201A, 0x2122, 0xFB01, 0xFB02, 0x141, 0x152, 0x160,\n  0x178, 0x17D, 0x131, 0x142, 0x153, 0x161, 0x17E, 0, 0x20AC\n];\n\nfunction stringToPDFString(str) {\n  const length = str.length,\n    strBuf = [];\n  if (str[0] === \"\\xFE\" && str[1] === \"\\xFF\") {\n    // UTF16BE BOM\n    for (let i = 2; i < length; i += 2) {\n      strBuf.push(\n        String.fromCharCode((str.charCodeAt(i) << 8) | str.charCodeAt(i + 1))\n      );\n    }\n  } else if (str[0] === \"\\xFF\" && str[1] === \"\\xFE\") {\n    // UTF16LE BOM\n    for (let i = 2; i < length; i += 2) {\n      strBuf.push(\n        String.fromCharCode((str.charCodeAt(i + 1) << 8) | str.charCodeAt(i))\n      );\n    }\n  } else {\n    for (let i = 0; i < length; ++i) {\n      const code = PDFStringTranslateTable[str.charCodeAt(i)];\n      strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));\n    }\n  }\n  return strBuf.join(\"\");\n}\n\nfunction stringToUTF8String(str) {\n  return decodeURIComponent(escape(str));\n}\n\nfunction utf8StringToString(str) {\n  return unescape(encodeURIComponent(str));\n}\n\nfunction isEmptyObj(obj) {\n  for (const key in obj) {\n    return false;\n  }\n  return true;\n}\n\nfunction isBool(v) {\n  return typeof v === \"boolean\";\n}\n\nfunction isNum(v) {\n  return typeof v === \"number\";\n}\n\nfunction isString(v) {\n  return typeof v === \"string\";\n}\n\nfunction isArrayBuffer(v) {\n  return typeof v === \"object\" && v !== null && v.byteLength !== undefined;\n}\n\nfunction isArrayEqual(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n  return arr1.every(function (element, index) {\n    return element === arr2[index];\n  });\n}\n\n/**\n * Promise Capability object.\n *\n * @typedef {Object} PromiseCapability\n * @property {Promise} promise - A Promise object.\n * @property {boolean} settled - If the Promise has been fulfilled/rejected.\n * @property {function} resolve - Fulfills the Promise.\n * @property {function} reject - Rejects the Promise.\n */\n\n/**\n * Creates a promise capability object.\n * @alias createPromiseCapability\n *\n * @returns {PromiseCapability}\n */\nfunction createPromiseCapability() {\n  const capability = Object.create(null);\n  let isSettled = false;\n\n  Object.defineProperty(capability, \"settled\", {\n    get() {\n      return isSettled;\n    },\n  });\n  capability.promise = new Promise(function (resolve, reject) {\n    capability.resolve = function (data) {\n      isSettled = true;\n      resolve(data);\n    };\n    capability.reject = function (reason) {\n      isSettled = true;\n      reject(reason);\n    };\n  });\n  return capability;\n}\n\nconst createObjectURL = (function createObjectURLClosure() {\n  // Blob/createObjectURL is not available, falling back to data schema.\n  const digits =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n  // eslint-disable-next-line no-shadow\n  return function createObjectURL(data, contentType, forceDataSchema = false) {\n    if (!forceDataSchema && URL.createObjectURL) {\n      const blob = new Blob([data], { type: contentType });\n      return URL.createObjectURL(blob);\n    }\n\n    let buffer = `data:${contentType};base64,`;\n    for (let i = 0, ii = data.length; i < ii; i += 3) {\n      const b1 = data[i] & 0xff;\n      const b2 = data[i + 1] & 0xff;\n      const b3 = data[i + 2] & 0xff;\n      const d1 = b1 >> 2,\n        d2 = ((b1 & 3) << 4) | (b2 >> 4);\n      const d3 = i + 1 < ii ? ((b2 & 0xf) << 2) | (b3 >> 6) : 64;\n      const d4 = i + 2 < ii ? b3 & 0x3f : 64;\n      buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];\n    }\n    return buffer;\n  };\n})();\n\nexport {\n  BaseException,\n  FONT_IDENTITY_MATRIX,\n  IDENTITY_MATRIX,\n  OPS,\n  VerbosityLevel,\n  UNSUPPORTED_FEATURES,\n  AnnotationBorderStyleType,\n  AnnotationFieldFlag,\n  AnnotationFlag,\n  AnnotationMarkedState,\n  AnnotationReplyType,\n  AnnotationReviewState,\n  AnnotationStateModelType,\n  AnnotationType,\n  FontType,\n  ImageKind,\n  CMapCompressionType,\n  AbortException,\n  InvalidPDFException,\n  MissingPDFException,\n  PasswordException,\n  PasswordResponses,\n  PermissionFlag,\n  StreamType,\n  TextRenderingMode,\n  UnexpectedResponseException,\n  UnknownErrorException,\n  Util,\n  FormatError,\n  arrayByteLength,\n  arraysToBytes,\n  assert,\n  bytesToString,\n  createPromiseCapability,\n  createObjectURL,\n  getVerbosityLevel,\n  info,\n  isArrayBuffer,\n  isArrayEqual,\n  isBool,\n  isEmptyObj,\n  isNum,\n  isString,\n  isSameOrigin,\n  createValidAbsoluteUrl,\n  IsLittleEndianCached,\n  IsEvalSupportedCached,\n  removeNullCharacters,\n  setVerbosityLevel,\n  shadow,\n  string32,\n  stringToBytes,\n  stringToPDFString,\n  stringToUTF8String,\n  utf8StringToString,\n  warn,\n  unreachable,\n};\n", "/* Copyright 2017 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint no-var: error */\n\nimport { isNodeJS } from \"./is_node.js\";\n\n// Skip compatibility checks for modern builds and if we already ran the module.\nif (\n  (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"SKIP_BABEL\")) &&\n  (typeof globalThis === \"undefined\" || !globalThis._pdfjsCompatibilityChecked)\n) {\n  // Provides support for globalThis in legacy browsers.\n  // Support: IE11/Edge, Opera\n  if (typeof globalThis === \"undefined\" || globalThis.Math !== Math) {\n    // eslint-disable-next-line no-global-assign\n    globalThis = require(\"core-js/es/global-this\");\n  }\n  globalThis._pdfjsCompatibilityChecked = true;\n\n  const hasDOM = typeof window === \"object\" && typeof document === \"object\";\n  const userAgent =\n    (typeof navigator !== \"undefined\" && navigator.userAgent) || \"\";\n  const isIE = /Trident/.test(userAgent);\n\n  // Support: Node.js\n  (function checkNodeBtoa() {\n    if (globalThis.btoa || !isNodeJS) {\n      return;\n    }\n    globalThis.btoa = function (chars) {\n      // eslint-disable-next-line no-undef\n      return Buffer.from(chars, \"binary\").toString(\"base64\");\n    };\n  })();\n\n  // Support: Node.js\n  (function checkNodeAtob() {\n    if (globalThis.atob || !isNodeJS) {\n      return;\n    }\n    globalThis.atob = function (input) {\n      // eslint-disable-next-line no-undef\n      return Buffer.from(input, \"base64\").toString(\"binary\");\n    };\n  })();\n\n  // Provides support for ChildNode.remove in legacy browsers.\n  // Support: IE.\n  (function checkChildNodeRemove() {\n    if (!hasDOM) {\n      return;\n    }\n    if (typeof Element.prototype.remove !== \"undefined\") {\n      return;\n    }\n    Element.prototype.remove = function () {\n      if (this.parentNode) {\n        // eslint-disable-next-line mozilla/avoid-removeChild\n        this.parentNode.removeChild(this);\n      }\n    };\n  })();\n\n  // Provides support for DOMTokenList.prototype.{add, remove}, with more than\n  // one parameter, in legacy browsers.\n  // Support: IE\n  (function checkDOMTokenListAddRemove() {\n    if (!hasDOM || isNodeJS) {\n      return;\n    }\n    const div = document.createElement(\"div\");\n    div.classList.add(\"testOne\", \"testTwo\");\n\n    if (\n      div.classList.contains(\"testOne\") === true &&\n      div.classList.contains(\"testTwo\") === true\n    ) {\n      return;\n    }\n    const OriginalDOMTokenListAdd = DOMTokenList.prototype.add;\n    const OriginalDOMTokenListRemove = DOMTokenList.prototype.remove;\n\n    DOMTokenList.prototype.add = function (...tokens) {\n      for (const token of tokens) {\n        OriginalDOMTokenListAdd.call(this, token);\n      }\n    };\n    DOMTokenList.prototype.remove = function (...tokens) {\n      for (const token of tokens) {\n        OriginalDOMTokenListRemove.call(this, token);\n      }\n    };\n  })();\n\n  // Provides support for DOMTokenList.prototype.toggle, with the optional\n  // \"force\" parameter, in legacy browsers.\n  // Support: IE\n  (function checkDOMTokenListToggle() {\n    if (!hasDOM || isNodeJS) {\n      return;\n    }\n    const div = document.createElement(\"div\");\n    if (div.classList.toggle(\"test\", 0) === false) {\n      return;\n    }\n\n    DOMTokenList.prototype.toggle = function (token) {\n      const force =\n        arguments.length > 1 ? !!arguments[1] : !this.contains(token);\n      return this[force ? \"add\" : \"remove\"](token), force;\n    };\n  })();\n\n  // Provides support for window.history.{pushState, replaceState}, with the\n  // `url` parameter set to `undefined`, without breaking the document URL.\n  // Support: IE\n  (function checkWindowHistoryPushStateReplaceState() {\n    if (!hasDOM || !isIE) {\n      return;\n    }\n    const OriginalPushState = window.history.pushState;\n    const OriginalReplaceState = window.history.replaceState;\n\n    window.history.pushState = function (state, title, url) {\n      const args = url === undefined ? [state, title] : [state, title, url];\n      OriginalPushState.apply(this, args);\n    };\n    window.history.replaceState = function (state, title, url) {\n      const args = url === undefined ? [state, title] : [state, title, url];\n      OriginalReplaceState.apply(this, args);\n    };\n  })();\n\n  // Provides support for String.prototype.startsWith in legacy browsers.\n  // Support: IE, Chrome<41\n  (function checkStringStartsWith() {\n    if (String.prototype.startsWith) {\n      return;\n    }\n    require(\"core-js/es/string/starts-with.js\");\n  })();\n\n  // Provides support for String.prototype.endsWith in legacy browsers.\n  // Support: IE, Chrome<41\n  (function checkStringEndsWith() {\n    if (String.prototype.endsWith) {\n      return;\n    }\n    require(\"core-js/es/string/ends-with.js\");\n  })();\n\n  // Provides support for String.prototype.includes in legacy browsers.\n  // Support: IE, Chrome<41\n  (function checkStringIncludes() {\n    if (String.prototype.includes) {\n      return;\n    }\n    require(\"core-js/es/string/includes.js\");\n  })();\n\n  // Provides support for Array.prototype.includes in legacy browsers.\n  // Support: IE, Chrome<47\n  (function checkArrayIncludes() {\n    if (Array.prototype.includes) {\n      return;\n    }\n    require(\"core-js/es/array/includes.js\");\n  })();\n\n  // Provides support for Array.from in legacy browsers.\n  // Support: IE\n  (function checkArrayFrom() {\n    if (Array.from) {\n      return;\n    }\n    require(\"core-js/es/array/from.js\");\n  })();\n\n  // Provides support for Object.assign in legacy browsers.\n  // Support: IE\n  (function checkObjectAssign() {\n    if (Object.assign) {\n      return;\n    }\n    require(\"core-js/es/object/assign.js\");\n  })();\n\n  // Provides support for Math.log2 in legacy browsers.\n  // Support: IE, Chrome<38\n  (function checkMathLog2() {\n    if (Math.log2) {\n      return;\n    }\n    Math.log2 = require(\"core-js/es/math/log2.js\");\n  })();\n\n  // Provides support for Number.isNaN in legacy browsers.\n  // Support: IE.\n  (function checkNumberIsNaN() {\n    if (Number.isNaN) {\n      return;\n    }\n    Number.isNaN = require(\"core-js/es/number/is-nan.js\");\n  })();\n\n  // Provides support for Number.isInteger in legacy browsers.\n  // Support: IE, Chrome<34\n  (function checkNumberIsInteger() {\n    if (Number.isInteger) {\n      return;\n    }\n    Number.isInteger = require(\"core-js/es/number/is-integer.js\");\n  })();\n\n  // Provides support for TypedArray.prototype.slice in legacy browsers.\n  // Support: IE\n  (function checkTypedArraySlice() {\n    if (Uint8Array.prototype.slice) {\n      return;\n    }\n    require(\"core-js/es/typed-array/slice\");\n  })();\n\n  // Support: IE, Safari<11, Chrome<63\n  (function checkPromise() {\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"IMAGE_DECODERS\")) {\n      // The current image decoders are synchronous, hence `Promise` shouldn't\n      // need to be polyfilled for the IMAGE_DECODERS build target.\n      return;\n    }\n    if (globalThis.Promise && globalThis.Promise.allSettled) {\n      return;\n    }\n    globalThis.Promise = require(\"core-js/es/promise/index.js\");\n  })();\n\n  // Support: IE\n  (function checkURL() {\n    if (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"PRODUCTION\")) {\n      // Prevent \"require is not a function\" errors in development mode,\n      // since the `URL` constructor should be available in modern browers.\n      return;\n    } else if (!PDFJSDev.test(\"GENERIC\")) {\n      // The `URL` constructor is assumed to be available in the extension\n      // builds.\n      return;\n    } else if (PDFJSDev.test(\"IMAGE_DECODERS\")) {\n      // The current image decoders don't use the `URL` constructor, so it\n      // doesn't need to be polyfilled for the IMAGE_DECODERS build target.\n      return;\n    }\n    globalThis.URL = require(\"core-js/web/url.js\");\n  })();\n\n  // Support: IE, Node.js\n  (function checkReadableStream() {\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"IMAGE_DECODERS\")) {\n      // The current image decoders are synchronous, hence `ReadableStream`\n      // shouldn't need to be polyfilled for the IMAGE_DECODERS build target.\n      return;\n    }\n    let isReadableStreamSupported = false;\n\n    if (typeof ReadableStream !== \"undefined\") {\n      // MS Edge may say it has ReadableStream but they are not up to spec yet.\n      try {\n        // eslint-disable-next-line no-new\n        new ReadableStream({\n          start(controller) {\n            controller.close();\n          },\n        });\n        isReadableStreamSupported = true;\n      } catch (e) {\n        // The ReadableStream constructor cannot be used.\n      }\n    }\n    if (isReadableStreamSupported) {\n      return;\n    }\n    globalThis.ReadableStream = require(\"web-streams-polyfill/dist/ponyfill.js\").ReadableStream;\n  })();\n\n  // We want to support Map iteration, but it doesn't seem possible to easily\n  // test for that specifically; hence using a similarly unsupported property.\n  // Support: IE11\n  (function checkMapEntries() {\n    if (globalThis.Map && globalThis.Map.prototype.entries) {\n      return;\n    }\n    globalThis.Map = require(\"core-js/es/map/index.js\");\n  })();\n\n  // We want to support Set iteration, but it doesn't seem possible to easily\n  // test for that specifically; hence using a similarly unsupported property.\n  // Support: IE11\n  (function checkSetEntries() {\n    if (globalThis.Set && globalThis.Set.prototype.entries) {\n      return;\n    }\n    globalThis.Set = require(\"core-js/es/set/index.js\");\n  })();\n\n  // Support: IE<11, Safari<8, Chrome<36\n  (function checkWeakMap() {\n    if (globalThis.WeakMap) {\n      return;\n    }\n    globalThis.WeakMap = require(\"core-js/es/weak-map/index.js\");\n  })();\n\n  // Support: IE11\n  (function checkWeakSet() {\n    if (globalThis.WeakSet) {\n      return;\n    }\n    globalThis.WeakSet = require(\"core-js/es/weak-set/index.js\");\n  })();\n\n  // Provides support for String.codePointAt in legacy browsers.\n  // Support: IE11.\n  (function checkStringCodePointAt() {\n    if (String.prototype.codePointAt) {\n      return;\n    }\n    require(\"core-js/es/string/code-point-at.js\");\n  })();\n\n  // Provides support for String.fromCodePoint in legacy browsers.\n  // Support: IE11.\n  (function checkStringFromCodePoint() {\n    if (String.fromCodePoint) {\n      return;\n    }\n    String.fromCodePoint = require(\"core-js/es/string/from-code-point.js\");\n  })();\n\n  // Support: IE\n  (function checkSymbol() {\n    if (globalThis.Symbol) {\n      return;\n    }\n    require(\"core-js/es/symbol/index.js\");\n  })();\n\n  // Provides support for String.prototype.padStart in legacy browsers.\n  // Support: IE, Chrome<57\n  (function checkStringPadStart() {\n    if (String.prototype.padStart) {\n      return;\n    }\n    require(\"core-js/es/string/pad-start.js\");\n  })();\n\n  // Provides support for String.prototype.padEnd in legacy browsers.\n  // Support: IE, Chrome<57\n  (function checkStringPadEnd() {\n    if (String.prototype.padEnd) {\n      return;\n    }\n    require(\"core-js/es/string/pad-end.js\");\n  })();\n\n  // Provides support for Object.values in legacy browsers.\n  // Support: IE, Chrome<54\n  (function checkObjectValues() {\n    if (Object.values) {\n      return;\n    }\n    Object.values = require(\"core-js/es/object/values.js\");\n  })();\n}\n", "/* Copyright 2018 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals process */\n\n// NW.js / Electron is a browser context, but copies some Node.js objects; see\n// http://docs.nwjs.io/en/latest/For%20Users/Advanced/JavaScript%20Contexts%20in%20NW.js/#access-nodejs-and-nwjs-api-in-browser-context\n// https://electronjs.org/docs/api/process#processversionselectron\nconst isNodeJS =\n  typeof process === \"object\" &&\n  process + \"\" === \"[object process]\" &&\n  !process.versions.nw &&\n  !process.versions.electron;\n\nexport { isNodeJS };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* uses XRef */\n\nimport { assert, unreachable } from \"../shared/util.js\";\n\nvar EOF = {};\n\nvar Name = (function NameClosure() {\n  let nameCache = Object.create(null);\n\n  // eslint-disable-next-line no-shadow\n  function Name(name) {\n    this.name = name;\n  }\n\n  Name.prototype = {};\n\n  Name.get = function Name_get(name) {\n    var nameValue = nameCache[name];\n    // eslint-disable-next-line no-restricted-syntax\n    return nameValue ? nameValue : (nameCache[name] = new Name(name));\n  };\n\n  Name._clearCache = function () {\n    nameCache = Object.create(null);\n  };\n\n  return Name;\n})();\n\nvar Cmd = (function CmdClosure() {\n  let cmdCache = Object.create(null);\n\n  // eslint-disable-next-line no-shadow\n  function Cmd(cmd) {\n    this.cmd = cmd;\n  }\n\n  Cmd.prototype = {};\n\n  Cmd.get = function Cmd_get(cmd) {\n    var cmdValue = cmdCache[cmd];\n    // eslint-disable-next-line no-restricted-syntax\n    return cmdValue ? cmdValue : (cmdCache[cmd] = new Cmd(cmd));\n  };\n\n  Cmd._clearCache = function () {\n    cmdCache = Object.create(null);\n  };\n\n  return Cmd;\n})();\n\nvar Dict = (function DictClosure() {\n  var nonSerializable = function nonSerializableClosure() {\n    return nonSerializable; // creating closure on some variable\n  };\n\n  // xref is optional\n  // eslint-disable-next-line no-shadow\n  function Dict(xref) {\n    // Map should only be used internally, use functions below to access.\n    this._map = Object.create(null);\n    this.xref = xref;\n    this.objId = null;\n    this.suppressEncryption = false;\n    this.__nonSerializable__ = nonSerializable; // disable cloning of the Dict\n  }\n\n  Dict.prototype = {\n    assignXref: function Dict_assignXref(newXref) {\n      this.xref = newXref;\n    },\n\n    // automatically dereferences Ref objects\n    get(key1, key2, key3) {\n      let value = this._map[key1];\n      if (value === undefined && key2 !== undefined) {\n        value = this._map[key2];\n        if (value === undefined && key3 !== undefined) {\n          value = this._map[key3];\n        }\n      }\n      if (value instanceof Ref && this.xref) {\n        return this.xref.fetch(value, this.suppressEncryption);\n      }\n      return value;\n    },\n\n    // Same as get(), but returns a promise and uses fetchIfRefAsync().\n    async getAsync(key1, key2, key3) {\n      let value = this._map[key1];\n      if (value === undefined && key2 !== undefined) {\n        value = this._map[key2];\n        if (value === undefined && key3 !== undefined) {\n          value = this._map[key3];\n        }\n      }\n      if (value instanceof Ref && this.xref) {\n        return this.xref.fetchAsync(value, this.suppressEncryption);\n      }\n      return value;\n    },\n\n    // Same as get(), but dereferences all elements if the result is an Array.\n    getArray(key1, key2, key3) {\n      let value = this.get(key1, key2, key3);\n      if (!Array.isArray(value) || !this.xref) {\n        return value;\n      }\n      value = value.slice(); // Ensure that we don't modify the Dict data.\n      for (let i = 0, ii = value.length; i < ii; i++) {\n        if (!(value[i] instanceof Ref)) {\n          continue;\n        }\n        value[i] = this.xref.fetch(value[i], this.suppressEncryption);\n      }\n      return value;\n    },\n\n    // no dereferencing\n    getRaw: function Dict_getRaw(key) {\n      return this._map[key];\n    },\n\n    getKeys: function Dict_getKeys() {\n      return Object.keys(this._map);\n    },\n\n    set: function Dict_set(key, value) {\n      if (\n        (typeof PDFJSDev === \"undefined\" ||\n          PDFJSDev.test(\"!PRODUCTION || TESTING\")) &&\n        value === undefined\n      ) {\n        unreachable('Dict.set: The \"value\" cannot be undefined.');\n      }\n      this._map[key] = value;\n    },\n\n    has: function Dict_has(key) {\n      return this._map[key] !== undefined;\n    },\n\n    forEach: function Dict_forEach(callback) {\n      for (var key in this._map) {\n        callback(key, this.get(key));\n      }\n    },\n  };\n\n  Dict.empty = new Dict(null);\n\n  Dict.merge = function (xref, dictArray) {\n    const mergedDict = new Dict(xref);\n\n    for (let i = 0, ii = dictArray.length; i < ii; i++) {\n      const dict = dictArray[i];\n      if (!isDict(dict)) {\n        continue;\n      }\n      for (const keyName in dict._map) {\n        if (mergedDict._map[keyName] !== undefined) {\n          continue;\n        }\n        mergedDict._map[keyName] = dict._map[keyName];\n      }\n    }\n    return mergedDict;\n  };\n\n  return Dict;\n})();\n\nvar Ref = (function RefClosure() {\n  let refCache = Object.create(null);\n\n  // eslint-disable-next-line no-shadow\n  function Ref(num, gen) {\n    this.num = num;\n    this.gen = gen;\n  }\n\n  Ref.prototype = {\n    toString: function Ref_toString() {\n      // This function is hot, so we make the string as compact as possible.\n      // |this.gen| is almost always zero, so we treat that case specially.\n      if (this.gen === 0) {\n        return `${this.num}R`;\n      }\n      return `${this.num}R${this.gen}`;\n    },\n  };\n\n  Ref.get = function (num, gen) {\n    const key = gen === 0 ? `${num}R` : `${num}R${gen}`;\n    const refValue = refCache[key];\n    // eslint-disable-next-line no-restricted-syntax\n    return refValue ? refValue : (refCache[key] = new Ref(num, gen));\n  };\n\n  Ref._clearCache = function () {\n    refCache = Object.create(null);\n  };\n\n  return Ref;\n})();\n\n// The reference is identified by number and generation.\n// This structure stores only one instance of the reference.\nvar RefSet = (function RefSetClosure() {\n  // eslint-disable-next-line no-shadow\n  function RefSet() {\n    this.dict = Object.create(null);\n  }\n\n  RefSet.prototype = {\n    has: function RefSet_has(ref) {\n      return ref.toString() in this.dict;\n    },\n\n    put: function RefSet_put(ref) {\n      this.dict[ref.toString()] = true;\n    },\n\n    remove: function RefSet_remove(ref) {\n      delete this.dict[ref.toString()];\n    },\n  };\n\n  return RefSet;\n})();\n\nvar RefSetCache = (function RefSetCacheClosure() {\n  // eslint-disable-next-line no-shadow\n  function RefSetCache() {\n    this.dict = Object.create(null);\n  }\n\n  RefSetCache.prototype = {\n    get size() {\n      return Object.keys(this.dict).length;\n    },\n\n    get: function RefSetCache_get(ref) {\n      return this.dict[ref.toString()];\n    },\n\n    has: function RefSetCache_has(ref) {\n      return ref.toString() in this.dict;\n    },\n\n    put: function RefSetCache_put(ref, obj) {\n      this.dict[ref.toString()] = obj;\n    },\n\n    putAlias: function RefSetCache_putAlias(ref, aliasRef) {\n      this.dict[ref.toString()] = this.get(aliasRef);\n    },\n\n    forEach: function RefSetCache_forEach(callback) {\n      for (const i in this.dict) {\n        callback(this.dict[i]);\n      }\n    },\n\n    clear: function RefSetCache_clear() {\n      this.dict = Object.create(null);\n    },\n  };\n\n  return RefSetCache;\n})();\n\nfunction isEOF(v) {\n  return v === EOF;\n}\n\nfunction isName(v, name) {\n  return v instanceof Name && (name === undefined || v.name === name);\n}\n\nfunction isCmd(v, cmd) {\n  return v instanceof Cmd && (cmd === undefined || v.cmd === cmd);\n}\n\nfunction isDict(v, type) {\n  return (\n    v instanceof Dict && (type === undefined || isName(v.get(\"Type\"), type))\n  );\n}\n\nfunction isRef(v) {\n  return v instanceof Ref;\n}\n\nfunction isRefsEqual(v1, v2) {\n  if (\n    typeof PDFJSDev === \"undefined\" ||\n    PDFJSDev.test(\"!PRODUCTION || TESTING\")\n  ) {\n    assert(\n      v1 instanceof Ref && v2 instanceof Ref,\n      \"isRefsEqual: Both parameters should be `Ref`s.\"\n    );\n  }\n  return v1.num === v2.num && v1.gen === v2.gen;\n}\n\nfunction isStream(v) {\n  return typeof v === \"object\" && v !== null && v.getBytes !== undefined;\n}\n\nfunction clearPrimitiveCaches() {\n  Cmd._clearCache();\n  Name._clearCache();\n  Ref._clearCache();\n}\n\nexport {\n  EOF,\n  clearPrimitiveCaches,\n  Cmd,\n  Dict,\n  Name,\n  Ref,\n  RefSet,\n  RefSetCache,\n  isEOF,\n  isCmd,\n  isDict,\n  isName,\n  isRef,\n  isRefsEqual,\n  isStream,\n};\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createValidAbsoluteUrl,\n  shadow,\n  unreachable,\n  warn,\n} from \"../shared/util.js\";\nimport { ChunkedStreamManager } from \"./chunked_stream.js\";\nimport { MissingDataException } from \"./core_utils.js\";\nimport { PDFDocument } from \"./document.js\";\nimport { Stream } from \"./stream.js\";\n\nclass BasePdfManager {\n  constructor() {\n    if (this.constructor === BasePdfManager) {\n      unreachable(\"Cannot initialize BasePdfManager.\");\n    }\n  }\n\n  get docId() {\n    return this._docId;\n  }\n\n  get password() {\n    return this._password;\n  }\n\n  get docBaseUrl() {\n    let docBaseUrl = null;\n    if (this._docBaseUrl) {\n      const absoluteUrl = createValidAbsoluteUrl(this._docBaseUrl);\n      if (absoluteUrl) {\n        docBaseUrl = absoluteUrl.href;\n      } else {\n        warn(`Invalid absolute docBaseUrl: \"${this._docBaseUrl}\".`);\n      }\n    }\n    return shadow(this, \"docBaseUrl\", docBaseUrl);\n  }\n\n  onLoadedStream() {\n    unreachable(\"Abstract method `onLoadedStream` called\");\n  }\n\n  ensureDoc(prop, args) {\n    return this.ensure(this.pdfDocument, prop, args);\n  }\n\n  ensureXRef(prop, args) {\n    return this.ensure(this.pdfDocument.xref, prop, args);\n  }\n\n  ensureCatalog(prop, args) {\n    return this.ensure(this.pdfDocument.catalog, prop, args);\n  }\n\n  getPage(pageIndex) {\n    return this.pdfDocument.getPage(pageIndex);\n  }\n\n  fontFallback(id, handler) {\n    return this.pdfDocument.fontFallback(id, handler);\n  }\n\n  cleanup(manuallyTriggered = false) {\n    return this.pdfDocument.cleanup(manuallyTriggered);\n  }\n\n  async ensure(obj, prop, args) {\n    unreachable(\"Abstract method `ensure` called\");\n  }\n\n  requestRange(begin, end) {\n    unreachable(\"Abstract method `requestRange` called\");\n  }\n\n  requestLoadedStream() {\n    unreachable(\"Abstract method `requestLoadedStream` called\");\n  }\n\n  sendProgressiveData(chunk) {\n    unreachable(\"Abstract method `sendProgressiveData` called\");\n  }\n\n  updatePassword(password) {\n    this._password = password;\n  }\n\n  terminate(reason) {\n    unreachable(\"Abstract method `terminate` called\");\n  }\n}\n\nclass LocalPdfManager extends BasePdfManager {\n  constructor(docId, data, password, evaluatorOptions, docBaseUrl) {\n    super();\n\n    this._docId = docId;\n    this._password = password;\n    this._docBaseUrl = docBaseUrl;\n    this.evaluatorOptions = evaluatorOptions;\n\n    const stream = new Stream(data);\n    this.pdfDocument = new PDFDocument(this, stream);\n    this._loadedStreamPromise = Promise.resolve(stream);\n  }\n\n  async ensure(obj, prop, args) {\n    const value = obj[prop];\n    if (typeof value === \"function\") {\n      return value.apply(obj, args);\n    }\n    return value;\n  }\n\n  requestRange(begin, end) {\n    return Promise.resolve();\n  }\n\n  requestLoadedStream() {}\n\n  onLoadedStream() {\n    return this._loadedStreamPromise;\n  }\n\n  terminate(reason) {}\n}\n\nclass NetworkPdfManager extends BasePdfManager {\n  constructor(docId, pdfNetworkStream, args, evaluatorOptions, docBaseUrl) {\n    super();\n\n    this._docId = docId;\n    this._password = args.password;\n    this._docBaseUrl = docBaseUrl;\n    this.msgHandler = args.msgHandler;\n    this.evaluatorOptions = evaluatorOptions;\n\n    this.streamManager = new ChunkedStreamManager(pdfNetworkStream, {\n      msgHandler: args.msgHandler,\n      length: args.length,\n      disableAutoFetch: args.disableAutoFetch,\n      rangeChunkSize: args.rangeChunkSize,\n    });\n    this.pdfDocument = new PDFDocument(this, this.streamManager.getStream());\n  }\n\n  async ensure(obj, prop, args) {\n    try {\n      const value = obj[prop];\n      if (typeof value === \"function\") {\n        return value.apply(obj, args);\n      }\n      return value;\n    } catch (ex) {\n      if (!(ex instanceof MissingDataException)) {\n        throw ex;\n      }\n      await this.requestRange(ex.begin, ex.end);\n      return this.ensure(obj, prop, args);\n    }\n  }\n\n  requestRange(begin, end) {\n    return this.streamManager.requestRange(begin, end);\n  }\n\n  requestLoadedStream() {\n    this.streamManager.requestAllChunks();\n  }\n\n  sendProgressiveData(chunk) {\n    this.streamManager.onReceiveData({ chunk });\n  }\n\n  onLoadedStream() {\n    return this.streamManager.onLoadedStream();\n  }\n\n  terminate(reason) {\n    this.streamManager.abort(reason);\n  }\n}\n\nexport { LocalPdfManager, NetworkPdfManager };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint no-var: error */\n\nimport {\n  arrayByteLength,\n  arraysToBytes,\n  createPromiseCapability,\n  isEmptyObj,\n} from \"../shared/util.js\";\nimport { MissingDataException } from \"./core_utils.js\";\n\nclass ChunkedStream {\n  constructor(length, chunkSize, manager) {\n    this.bytes = new Uint8Array(length);\n    this.start = 0;\n    this.pos = 0;\n    this.end = length;\n    this.chunkSize = chunkSize;\n    this.loadedChunks = [];\n    this.numChunksLoaded = 0;\n    this.numChunks = Math.ceil(length / chunkSize);\n    this.manager = manager;\n    this.progressiveDataLength = 0;\n    this.lastSuccessfulEnsureByteChunk = -1; // Single-entry cache\n  }\n\n  // If a particular stream does not implement one or more of these methods,\n  // an error should be thrown.\n  getMissingChunks() {\n    const chunks = [];\n    for (let chunk = 0, n = this.numChunks; chunk < n; ++chunk) {\n      if (!this.loadedChunks[chunk]) {\n        chunks.push(chunk);\n      }\n    }\n    return chunks;\n  }\n\n  getBaseStreams() {\n    return [this];\n  }\n\n  allChunksLoaded() {\n    return this.numChunksLoaded === this.numChunks;\n  }\n\n  onReceiveData(begin, chunk) {\n    const chunkSize = this.chunkSize;\n    if (begin % chunkSize !== 0) {\n      throw new Error(`Bad begin offset: ${begin}`);\n    }\n\n    // Using `this.length` is inaccurate here since `this.start` can be moved\n    // (see the `moveStart` method).\n    const end = begin + chunk.byteLength;\n    if (end % chunkSize !== 0 && end !== this.bytes.length) {\n      throw new Error(`Bad end offset: ${end}`);\n    }\n\n    this.bytes.set(new Uint8Array(chunk), begin);\n    const beginChunk = Math.floor(begin / chunkSize);\n    const endChunk = Math.floor((end - 1) / chunkSize) + 1;\n\n    for (let curChunk = beginChunk; curChunk < endChunk; ++curChunk) {\n      if (!this.loadedChunks[curChunk]) {\n        this.loadedChunks[curChunk] = true;\n        ++this.numChunksLoaded;\n      }\n    }\n  }\n\n  onReceiveProgressiveData(data) {\n    let position = this.progressiveDataLength;\n    const beginChunk = Math.floor(position / this.chunkSize);\n\n    this.bytes.set(new Uint8Array(data), position);\n    position += data.byteLength;\n    this.progressiveDataLength = position;\n    const endChunk =\n      position >= this.end\n        ? this.numChunks\n        : Math.floor(position / this.chunkSize);\n\n    for (let curChunk = beginChunk; curChunk < endChunk; ++curChunk) {\n      if (!this.loadedChunks[curChunk]) {\n        this.loadedChunks[curChunk] = true;\n        ++this.numChunksLoaded;\n      }\n    }\n  }\n\n  ensureByte(pos) {\n    if (pos < this.progressiveDataLength) {\n      return;\n    }\n\n    const chunk = Math.floor(pos / this.chunkSize);\n    if (chunk === this.lastSuccessfulEnsureByteChunk) {\n      return;\n    }\n\n    if (!this.loadedChunks[chunk]) {\n      throw new MissingDataException(pos, pos + 1);\n    }\n    this.lastSuccessfulEnsureByteChunk = chunk;\n  }\n\n  ensureRange(begin, end) {\n    if (begin >= end) {\n      return;\n    }\n    if (end <= this.progressiveDataLength) {\n      return;\n    }\n\n    const chunkSize = this.chunkSize;\n    const beginChunk = Math.floor(begin / chunkSize);\n    const endChunk = Math.floor((end - 1) / chunkSize) + 1;\n    for (let chunk = beginChunk; chunk < endChunk; ++chunk) {\n      if (!this.loadedChunks[chunk]) {\n        throw new MissingDataException(begin, end);\n      }\n    }\n  }\n\n  nextEmptyChunk(beginChunk) {\n    const numChunks = this.numChunks;\n    for (let i = 0; i < numChunks; ++i) {\n      const chunk = (beginChunk + i) % numChunks; // Wrap around to beginning.\n      if (!this.loadedChunks[chunk]) {\n        return chunk;\n      }\n    }\n    return null;\n  }\n\n  hasChunk(chunk) {\n    return !!this.loadedChunks[chunk];\n  }\n\n  get length() {\n    return this.end - this.start;\n  }\n\n  get isEmpty() {\n    return this.length === 0;\n  }\n\n  getByte() {\n    const pos = this.pos;\n    if (pos >= this.end) {\n      return -1;\n    }\n    if (pos >= this.progressiveDataLength) {\n      this.ensureByte(pos);\n    }\n    return this.bytes[this.pos++];\n  }\n\n  getUint16() {\n    const b0 = this.getByte();\n    const b1 = this.getByte();\n    if (b0 === -1 || b1 === -1) {\n      return -1;\n    }\n    return (b0 << 8) + b1;\n  }\n\n  getInt32() {\n    const b0 = this.getByte();\n    const b1 = this.getByte();\n    const b2 = this.getByte();\n    const b3 = this.getByte();\n    return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\n  }\n\n  // Returns subarray of original buffer, should only be read.\n  getBytes(length, forceClamped = false) {\n    const bytes = this.bytes;\n    const pos = this.pos;\n    const strEnd = this.end;\n\n    if (!length) {\n      if (strEnd > this.progressiveDataLength) {\n        this.ensureRange(pos, strEnd);\n      }\n      const subarray = bytes.subarray(pos, strEnd);\n      // `this.bytes` is always a `Uint8Array` here.\n      return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\n    }\n\n    let end = pos + length;\n    if (end > strEnd) {\n      end = strEnd;\n    }\n    if (end > this.progressiveDataLength) {\n      this.ensureRange(pos, end);\n    }\n\n    this.pos = end;\n    const subarray = bytes.subarray(pos, end);\n    // `this.bytes` is always a `Uint8Array` here.\n    return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\n  }\n\n  peekByte() {\n    const peekedByte = this.getByte();\n    if (peekedByte !== -1) {\n      this.pos--;\n    }\n    return peekedByte;\n  }\n\n  peekBytes(length, forceClamped = false) {\n    const bytes = this.getBytes(length, forceClamped);\n    this.pos -= bytes.length;\n    return bytes;\n  }\n\n  getByteRange(begin, end) {\n    if (begin < 0) {\n      begin = 0;\n    }\n    if (end > this.end) {\n      end = this.end;\n    }\n    if (end > this.progressiveDataLength) {\n      this.ensureRange(begin, end);\n    }\n    return this.bytes.subarray(begin, end);\n  }\n\n  skip(n) {\n    if (!n) {\n      n = 1;\n    }\n    this.pos += n;\n  }\n\n  reset() {\n    this.pos = this.start;\n  }\n\n  moveStart() {\n    this.start = this.pos;\n  }\n\n  makeSubStream(start, length, dict) {\n    if (length) {\n      if (start + length > this.progressiveDataLength) {\n        this.ensureRange(start, start + length);\n      }\n    } else {\n      // When the `length` is undefined you do *not*, under any circumstances,\n      // want to fallback on calling `this.ensureRange(start, this.end)` since\n      // that would force the *entire* PDF file to be loaded, thus completely\n      // breaking the whole purpose of using streaming and/or range requests.\n      //\n      // However, not doing any checking here could very easily lead to wasted\n      // time/resources during e.g. parsing, since `MissingDataException`s will\n      // require data to be re-parsed, which we attempt to minimize by at least\n      // checking that the *beginning* of the data is available here.\n      if (start >= this.progressiveDataLength) {\n        this.ensureByte(start);\n      }\n    }\n\n    function ChunkedStreamSubstream() {}\n    ChunkedStreamSubstream.prototype = Object.create(this);\n    ChunkedStreamSubstream.prototype.getMissingChunks = function () {\n      const chunkSize = this.chunkSize;\n      const beginChunk = Math.floor(this.start / chunkSize);\n      const endChunk = Math.floor((this.end - 1) / chunkSize) + 1;\n      const missingChunks = [];\n      for (let chunk = beginChunk; chunk < endChunk; ++chunk) {\n        if (!this.loadedChunks[chunk]) {\n          missingChunks.push(chunk);\n        }\n      }\n      return missingChunks;\n    };\n    ChunkedStreamSubstream.prototype.allChunksLoaded = function () {\n      if (this.numChunksLoaded === this.numChunks) {\n        return true;\n      }\n      return this.getMissingChunks().length === 0;\n    };\n\n    const subStream = new ChunkedStreamSubstream();\n    subStream.pos = subStream.start = start;\n    subStream.end = start + length || this.end;\n    subStream.dict = dict;\n    return subStream;\n  }\n}\n\nclass ChunkedStreamManager {\n  constructor(pdfNetworkStream, args) {\n    this.length = args.length;\n    this.chunkSize = args.rangeChunkSize;\n    this.stream = new ChunkedStream(this.length, this.chunkSize, this);\n    this.pdfNetworkStream = pdfNetworkStream;\n    this.disableAutoFetch = args.disableAutoFetch;\n    this.msgHandler = args.msgHandler;\n\n    this.currRequestId = 0;\n\n    this.chunksNeededByRequest = Object.create(null);\n    this.requestsByChunk = Object.create(null);\n    this.promisesByRequest = Object.create(null);\n    this.progressiveDataLength = 0;\n    this.aborted = false;\n\n    this._loadedStreamCapability = createPromiseCapability();\n  }\n\n  onLoadedStream() {\n    return this._loadedStreamCapability.promise;\n  }\n\n  sendRequest(begin, end) {\n    const rangeReader = this.pdfNetworkStream.getRangeReader(begin, end);\n    if (!rangeReader.isStreamingSupported) {\n      rangeReader.onProgress = this.onProgress.bind(this);\n    }\n\n    let chunks = [],\n      loaded = 0;\n    const promise = new Promise((resolve, reject) => {\n      const readChunk = chunk => {\n        try {\n          if (!chunk.done) {\n            const data = chunk.value;\n            chunks.push(data);\n            loaded += arrayByteLength(data);\n            if (rangeReader.isStreamingSupported) {\n              this.onProgress({ loaded });\n            }\n            rangeReader.read().then(readChunk, reject);\n            return;\n          }\n          const chunkData = arraysToBytes(chunks);\n          chunks = null;\n          resolve(chunkData);\n        } catch (e) {\n          reject(e);\n        }\n      };\n      rangeReader.read().then(readChunk, reject);\n    });\n    promise.then(data => {\n      if (this.aborted) {\n        return; // Ignoring any data after abort.\n      }\n      this.onReceiveData({ chunk: data, begin });\n    });\n    // TODO check errors\n  }\n\n  /**\n   * Get all the chunks that are not yet loaded and group them into\n   * contiguous ranges to load in as few requests as possible.\n   */\n  requestAllChunks() {\n    const missingChunks = this.stream.getMissingChunks();\n    this._requestChunks(missingChunks);\n    return this._loadedStreamCapability.promise;\n  }\n\n  _requestChunks(chunks) {\n    const requestId = this.currRequestId++;\n\n    const chunksNeeded = Object.create(null);\n    this.chunksNeededByRequest[requestId] = chunksNeeded;\n    for (const chunk of chunks) {\n      if (!this.stream.hasChunk(chunk)) {\n        chunksNeeded[chunk] = true;\n      }\n    }\n\n    if (isEmptyObj(chunksNeeded)) {\n      return Promise.resolve();\n    }\n\n    const capability = createPromiseCapability();\n    this.promisesByRequest[requestId] = capability;\n\n    const chunksToRequest = [];\n    for (let chunk in chunksNeeded) {\n      chunk = chunk | 0;\n      if (!(chunk in this.requestsByChunk)) {\n        this.requestsByChunk[chunk] = [];\n        chunksToRequest.push(chunk);\n      }\n      this.requestsByChunk[chunk].push(requestId);\n    }\n\n    if (!chunksToRequest.length) {\n      return capability.promise;\n    }\n\n    const groupedChunksToRequest = this.groupChunks(chunksToRequest);\n    for (const groupedChunk of groupedChunksToRequest) {\n      const begin = groupedChunk.beginChunk * this.chunkSize;\n      const end = Math.min(groupedChunk.endChunk * this.chunkSize, this.length);\n      this.sendRequest(begin, end);\n    }\n\n    return capability.promise;\n  }\n\n  getStream() {\n    return this.stream;\n  }\n\n  /**\n   * Loads any chunks in the requested range that are not yet loaded.\n   */\n  requestRange(begin, end) {\n    end = Math.min(end, this.length);\n\n    const beginChunk = this.getBeginChunk(begin);\n    const endChunk = this.getEndChunk(end);\n\n    const chunks = [];\n    for (let chunk = beginChunk; chunk < endChunk; ++chunk) {\n      chunks.push(chunk);\n    }\n    return this._requestChunks(chunks);\n  }\n\n  requestRanges(ranges = []) {\n    const chunksToRequest = [];\n    for (const range of ranges) {\n      const beginChunk = this.getBeginChunk(range.begin);\n      const endChunk = this.getEndChunk(range.end);\n      for (let chunk = beginChunk; chunk < endChunk; ++chunk) {\n        if (!chunksToRequest.includes(chunk)) {\n          chunksToRequest.push(chunk);\n        }\n      }\n    }\n\n    chunksToRequest.sort(function (a, b) {\n      return a - b;\n    });\n    return this._requestChunks(chunksToRequest);\n  }\n\n  /**\n   * Groups a sorted array of chunks into as few contiguous larger\n   * chunks as possible.\n   */\n  groupChunks(chunks) {\n    const groupedChunks = [];\n    let beginChunk = -1;\n    let prevChunk = -1;\n\n    for (let i = 0, ii = chunks.length; i < ii; ++i) {\n      const chunk = chunks[i];\n      if (beginChunk < 0) {\n        beginChunk = chunk;\n      }\n\n      if (prevChunk >= 0 && prevChunk + 1 !== chunk) {\n        groupedChunks.push({ beginChunk, endChunk: prevChunk + 1 });\n        beginChunk = chunk;\n      }\n      if (i + 1 === chunks.length) {\n        groupedChunks.push({ beginChunk, endChunk: chunk + 1 });\n      }\n\n      prevChunk = chunk;\n    }\n    return groupedChunks;\n  }\n\n  onProgress(args) {\n    this.msgHandler.send(\"DocProgress\", {\n      loaded: this.stream.numChunksLoaded * this.chunkSize + args.loaded,\n      total: this.length,\n    });\n  }\n\n  onReceiveData(args) {\n    const chunk = args.chunk;\n    const isProgressive = args.begin === undefined;\n    const begin = isProgressive ? this.progressiveDataLength : args.begin;\n    const end = begin + chunk.byteLength;\n\n    const beginChunk = Math.floor(begin / this.chunkSize);\n    const endChunk =\n      end < this.length\n        ? Math.floor(end / this.chunkSize)\n        : Math.ceil(end / this.chunkSize);\n\n    if (isProgressive) {\n      this.stream.onReceiveProgressiveData(chunk);\n      this.progressiveDataLength = end;\n    } else {\n      this.stream.onReceiveData(begin, chunk);\n    }\n\n    if (this.stream.allChunksLoaded()) {\n      this._loadedStreamCapability.resolve(this.stream);\n    }\n\n    const loadedRequests = [];\n    for (let curChunk = beginChunk; curChunk < endChunk; ++curChunk) {\n      // The server might return more chunks than requested.\n      const requestIds = this.requestsByChunk[curChunk] || [];\n      delete this.requestsByChunk[curChunk];\n\n      for (const requestId of requestIds) {\n        const chunksNeeded = this.chunksNeededByRequest[requestId];\n        if (curChunk in chunksNeeded) {\n          delete chunksNeeded[curChunk];\n        }\n\n        if (!isEmptyObj(chunksNeeded)) {\n          continue;\n        }\n        loadedRequests.push(requestId);\n      }\n    }\n\n    // If there are no pending requests, automatically fetch the next\n    // unfetched chunk of the PDF file.\n    if (!this.disableAutoFetch && isEmptyObj(this.requestsByChunk)) {\n      let nextEmptyChunk;\n      if (this.stream.numChunksLoaded === 1) {\n        // This is a special optimization so that after fetching the first\n        // chunk, rather than fetching the second chunk, we fetch the last\n        // chunk.\n        const lastChunk = this.stream.numChunks - 1;\n        if (!this.stream.hasChunk(lastChunk)) {\n          nextEmptyChunk = lastChunk;\n        }\n      } else {\n        nextEmptyChunk = this.stream.nextEmptyChunk(endChunk);\n      }\n      if (Number.isInteger(nextEmptyChunk)) {\n        this._requestChunks([nextEmptyChunk]);\n      }\n    }\n\n    for (const requestId of loadedRequests) {\n      const capability = this.promisesByRequest[requestId];\n      delete this.promisesByRequest[requestId];\n      capability.resolve();\n    }\n\n    this.msgHandler.send(\"DocProgress\", {\n      loaded: this.stream.numChunksLoaded * this.chunkSize,\n      total: this.length,\n    });\n  }\n\n  onError(err) {\n    this._loadedStreamCapability.reject(err);\n  }\n\n  getBeginChunk(begin) {\n    return Math.floor(begin / this.chunkSize);\n  }\n\n  getEndChunk(end) {\n    return Math.floor((end - 1) / this.chunkSize) + 1;\n  }\n\n  abort(reason) {\n    this.aborted = true;\n    if (this.pdfNetworkStream) {\n      this.pdfNetworkStream.cancelAllRequests(reason);\n    }\n    for (const requestId in this.promisesByRequest) {\n      this.promisesByRequest[requestId].reject(reason);\n    }\n  }\n}\n\nexport { ChunkedStream, ChunkedStreamManager };\n", "/* Copyright 2019 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint no-var: error */\n\nimport { assert, BaseException, warn } from \"../shared/util.js\";\n\nfunction getLookupTableFactory(initializer) {\n  let lookup;\n  return function () {\n    if (initializer) {\n      lookup = Object.create(null);\n      initializer(lookup);\n      initializer = null;\n    }\n    return lookup;\n  };\n}\n\nclass MissingDataException extends BaseException {\n  constructor(begin, end) {\n    super(`Missing data [${begin}, ${end})`);\n    this.begin = begin;\n    this.end = end;\n  }\n}\n\nclass XRefEntryException extends BaseException {}\n\nclass XRefParseException extends BaseException {}\n\n/**\n * Get the value of an inheritable property.\n *\n * If the PDF specification explicitly lists a property in a dictionary as\n * inheritable, then the value of the property may be present in the dictionary\n * itself or in one or more parents of the dictionary.\n *\n * If the key is not found in the tree, `undefined` is returned. Otherwise,\n * the value for the key is returned or, if `stopWhenFound` is `false`, a list\n * of values is returned. To avoid infinite loops, the traversal is stopped when\n * the loop limit is reached.\n *\n * @param {Dict} dict - Dictionary from where to start the traversal.\n * @param {string} key - The key of the property to find the value for.\n * @param {boolean} getArray - Whether or not the value should be fetched as an\n *   array. The default value is `false`.\n * @param {boolean} stopWhenFound - Whether or not to stop the traversal when\n *   the key is found. If set to `false`, we always walk up the entire parent\n *   chain, for example to be able to find `\\Resources` placed on multiple\n *   levels of the tree. The default value is `true`.\n */\nfunction getInheritableProperty({\n  dict,\n  key,\n  getArray = false,\n  stopWhenFound = true,\n}) {\n  const LOOP_LIMIT = 100;\n  let loopCount = 0;\n  let values;\n\n  while (dict) {\n    const value = getArray ? dict.getArray(key) : dict.get(key);\n    if (value !== undefined) {\n      if (stopWhenFound) {\n        return value;\n      }\n      if (!values) {\n        values = [];\n      }\n      values.push(value);\n    }\n    if (++loopCount > LOOP_LIMIT) {\n      warn(`getInheritableProperty: maximum loop count exceeded for \"${key}\"`);\n      break;\n    }\n    dict = dict.get(\"Parent\");\n  }\n  return values;\n}\n\n// prettier-ignore\nconst ROMAN_NUMBER_MAP = [\n  \"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\",\n  \"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\",\n  \"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"\n];\n\n/**\n * Converts positive integers to (upper case) Roman numerals.\n * @param {number} number - The number that should be converted.\n * @param {boolean} lowerCase - Indicates if the result should be converted\n *   to lower case letters. The default value is `false`.\n * @returns {string} The resulting Roman number.\n */\nfunction toRomanNumerals(number, lowerCase = false) {\n  assert(\n    Number.isInteger(number) && number > 0,\n    \"The number should be a positive integer.\"\n  );\n  const romanBuf = [];\n  let pos;\n  // Thousands\n  while (number >= 1000) {\n    number -= 1000;\n    romanBuf.push(\"M\");\n  }\n  // Hundreds\n  pos = (number / 100) | 0;\n  number %= 100;\n  romanBuf.push(ROMAN_NUMBER_MAP[pos]);\n  // Tens\n  pos = (number / 10) | 0;\n  number %= 10;\n  romanBuf.push(ROMAN_NUMBER_MAP[10 + pos]);\n  // Ones\n  romanBuf.push(ROMAN_NUMBER_MAP[20 + number]);\n\n  const romanStr = romanBuf.join(\"\");\n  return lowerCase ? romanStr.toLowerCase() : romanStr;\n}\n\n// Calculate the base 2 logarithm of the number `x`. This differs from the\n// native function in the sense that it returns the ceiling value and that it\n// returns 0 instead of `Infinity`/`NaN` for `x` values smaller than/equal to 0.\nfunction log2(x) {\n  if (x <= 0) {\n    return 0;\n  }\n  return Math.ceil(Math.log2(x));\n}\n\nfunction readInt8(data, offset) {\n  return (data[offset] << 24) >> 24;\n}\n\nfunction readUint16(data, offset) {\n  return (data[offset] << 8) | data[offset + 1];\n}\n\nfunction readUint32(data, offset) {\n  return (\n    ((data[offset] << 24) |\n      (data[offset + 1] << 16) |\n      (data[offset + 2] << 8) |\n      data[offset + 3]) >>>\n    0\n  );\n}\n\n// Checks if ch is one of the following characters: SPACE, TAB, CR or LF.\nfunction isWhiteSpace(ch) {\n  return ch === 0x20 || ch === 0x09 || ch === 0x0d || ch === 0x0a;\n}\n\nexport {\n  getLookupTableFactory,\n  MissingDataException,\n  XRefEntryException,\n  XRefParseException,\n  getInheritableProperty,\n  toRomanNumerals,\n  log2,\n  readInt8,\n  readUint16,\n  readUint32,\n  isWhiteSpace,\n};\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint no-var: error */\n\nimport {\n  assert,\n  FormatError,\n  info,\n  InvalidPDFException,\n  isArrayBuffer,\n  isArrayEqual,\n  isBool,\n  isNum,\n  isString,\n  OPS,\n  shadow,\n  stringToBytes,\n  stringToPDFString,\n  Util,\n  warn,\n} from \"../shared/util.js\";\nimport { Catalog, ObjectLoader, XRef } from \"./obj.js\";\nimport {\n  clearPrimitiveCaches,\n  Dict,\n  isDict,\n  isName,\n  isStream,\n  Ref,\n} from \"./primitives.js\";\nimport {\n  getInheritableProperty,\n  isWhiteSpace,\n  MissingDataException,\n  XRefEntryException,\n  XRefParseException,\n} from \"./core_utils.js\";\nimport { NullStream, Stream, StreamsSequenceStream } from \"./stream.js\";\nimport { AnnotationFactory } from \"./annotation.js\";\nimport { calculateMD5 } from \"./crypto.js\";\nimport { Linearization } from \"./parser.js\";\nimport { OperatorList } from \"./operator_list.js\";\nimport { PartialEvaluator } from \"./evaluator.js\";\nimport { PDFFunctionFactory } from \"./function.js\";\n\nconst DEFAULT_USER_UNIT = 1.0;\nconst LETTER_SIZE_MEDIABOX = [0, 0, 612, 792];\n\nfunction isAnnotationRenderable(annotation, intent) {\n  return (\n    (intent === \"display\" && annotation.viewable) ||\n    (intent === \"print\" && annotation.printable)\n  );\n}\n\nclass Page {\n  constructor({\n    pdfManager,\n    xref,\n    pageIndex,\n    pageDict,\n    ref,\n    fontCache,\n    builtInCMapCache,\n    globalImageCache,\n    pdfFunctionFactory,\n  }) {\n    this.pdfManager = pdfManager;\n    this.pageIndex = pageIndex;\n    this.pageDict = pageDict;\n    this.xref = xref;\n    this.ref = ref;\n    this.fontCache = fontCache;\n    this.builtInCMapCache = builtInCMapCache;\n    this.globalImageCache = globalImageCache;\n    this.pdfFunctionFactory = pdfFunctionFactory;\n    this.evaluatorOptions = pdfManager.evaluatorOptions;\n    this.resourcesPromise = null;\n\n    const idCounters = {\n      obj: 0,\n    };\n    this.idFactory = {\n      createObjId() {\n        return `p${pageIndex}_${++idCounters.obj}`;\n      },\n      getDocId() {\n        return `g_${pdfManager.docId}`;\n      },\n    };\n  }\n\n  /**\n   * @private\n   */\n  _getInheritableProperty(key, getArray = false) {\n    const value = getInheritableProperty({\n      dict: this.pageDict,\n      key,\n      getArray,\n      stopWhenFound: false,\n    });\n    if (!Array.isArray(value)) {\n      return value;\n    }\n    if (value.length === 1 || !isDict(value[0])) {\n      return value[0];\n    }\n    return Dict.merge(this.xref, value);\n  }\n\n  get content() {\n    return this.pageDict.get(\"Contents\");\n  }\n\n  get resources() {\n    // For robustness: The spec states that a \\Resources entry has to be\n    // present, but can be empty. Some documents still omit it; in this case\n    // we return an empty dictionary.\n    return shadow(\n      this,\n      \"resources\",\n      this._getInheritableProperty(\"Resources\") || Dict.empty\n    );\n  }\n\n  _getBoundingBox(name) {\n    const box = this._getInheritableProperty(name, /* getArray = */ true);\n\n    if (Array.isArray(box) && box.length === 4) {\n      if (box[2] - box[0] !== 0 && box[3] - box[1] !== 0) {\n        return box;\n      }\n      warn(`Empty /${name} entry.`);\n    }\n    return null;\n  }\n\n  get mediaBox() {\n    // Reset invalid media box to letter size.\n    return shadow(\n      this,\n      \"mediaBox\",\n      this._getBoundingBox(\"MediaBox\") || LETTER_SIZE_MEDIABOX\n    );\n  }\n\n  get cropBox() {\n    // Reset invalid crop box to media box.\n    return shadow(\n      this,\n      \"cropBox\",\n      this._getBoundingBox(\"CropBox\") || this.mediaBox\n    );\n  }\n\n  get userUnit() {\n    let obj = this.pageDict.get(\"UserUnit\");\n    if (!isNum(obj) || obj <= 0) {\n      obj = DEFAULT_USER_UNIT;\n    }\n    return shadow(this, \"userUnit\", obj);\n  }\n\n  get view() {\n    // From the spec, 6th ed., p.963:\n    // \"The crop, bleed, trim, and art boxes should not ordinarily\n    // extend beyond the boundaries of the media box. If they do, they are\n    // effectively reduced to their intersection with the media box.\"\n    const { cropBox, mediaBox } = this;\n    let view;\n    if (cropBox === mediaBox || isArrayEqual(cropBox, mediaBox)) {\n      view = mediaBox;\n    } else {\n      const box = Util.intersect(cropBox, mediaBox);\n      if (box && box[2] - box[0] !== 0 && box[3] - box[1] !== 0) {\n        view = box;\n      } else {\n        warn(\"Empty /CropBox and /MediaBox intersection.\");\n      }\n    }\n    return shadow(this, \"view\", view || mediaBox);\n  }\n\n  get rotate() {\n    let rotate = this._getInheritableProperty(\"Rotate\") || 0;\n\n    // Normalize rotation so it's a multiple of 90 and between 0 and 270.\n    if (rotate % 90 !== 0) {\n      rotate = 0;\n    } else if (rotate >= 360) {\n      rotate = rotate % 360;\n    } else if (rotate < 0) {\n      // The spec doesn't cover negatives. Assume it's counterclockwise\n      // rotation. The following is the other implementation of modulo.\n      rotate = ((rotate % 360) + 360) % 360;\n    }\n    return shadow(this, \"rotate\", rotate);\n  }\n\n  getContentStream() {\n    const content = this.content;\n    let stream;\n\n    if (Array.isArray(content)) {\n      // Fetching the individual streams from the array.\n      const xref = this.xref;\n      const streams = [];\n      for (const subStream of content) {\n        streams.push(xref.fetchIfRef(subStream));\n      }\n      stream = new StreamsSequenceStream(streams);\n    } else if (isStream(content)) {\n      stream = content;\n    } else {\n      // Replace non-existent page content with empty content.\n      stream = new NullStream();\n    }\n    return stream;\n  }\n\n  loadResources(keys) {\n    if (!this.resourcesPromise) {\n      // TODO: add async `_getInheritableProperty` and remove this.\n      this.resourcesPromise = this.pdfManager.ensure(this, \"resources\");\n    }\n    return this.resourcesPromise.then(() => {\n      const objectLoader = new ObjectLoader(this.resources, keys, this.xref);\n      return objectLoader.load();\n    });\n  }\n\n  getOperatorList({ handler, sink, task, intent, renderInteractiveForms }) {\n    const contentStreamPromise = this.pdfManager.ensure(\n      this,\n      \"getContentStream\"\n    );\n    const resourcesPromise = this.loadResources([\n      \"ExtGState\",\n      \"ColorSpace\",\n      \"Pattern\",\n      \"Shading\",\n      \"XObject\",\n      \"Font\",\n    ]);\n\n    const partialEvaluator = new PartialEvaluator({\n      xref: this.xref,\n      handler,\n      pageIndex: this.pageIndex,\n      idFactory: this.idFactory,\n      fontCache: this.fontCache,\n      builtInCMapCache: this.builtInCMapCache,\n      globalImageCache: this.globalImageCache,\n      options: this.evaluatorOptions,\n      pdfFunctionFactory: this.pdfFunctionFactory,\n    });\n\n    const dataPromises = Promise.all([contentStreamPromise, resourcesPromise]);\n    const pageListPromise = dataPromises.then(([contentStream]) => {\n      const opList = new OperatorList(intent, sink, this.pageIndex);\n\n      handler.send(\"StartRenderPage\", {\n        transparency: partialEvaluator.hasBlendModes(this.resources),\n        pageIndex: this.pageIndex,\n        intent,\n      });\n\n      return partialEvaluator\n        .getOperatorList({\n          stream: contentStream,\n          task,\n          resources: this.resources,\n          operatorList: opList,\n        })\n        .then(function () {\n          return opList;\n        });\n    });\n\n    // Fetch the page's annotations and add their operator lists to the\n    // page's operator list to render them.\n    return Promise.all([pageListPromise, this._parsedAnnotations]).then(\n      function ([pageOpList, annotations]) {\n        if (annotations.length === 0) {\n          pageOpList.flush(true);\n          return { length: pageOpList.totalLength };\n        }\n\n        // Collect the operator list promises for the annotations. Each promise\n        // is resolved with the complete operator list for a single annotation.\n        const opListPromises = [];\n        for (const annotation of annotations) {\n          if (isAnnotationRenderable(annotation, intent)) {\n            opListPromises.push(\n              annotation\n                .getOperatorList(partialEvaluator, task, renderInteractiveForms)\n                .catch(function (reason) {\n                  warn(\n                    \"getOperatorList - ignoring annotation data during \" +\n                      `\"${task.name}\" task: \"${reason}\".`\n                  );\n                  return null;\n                })\n            );\n          }\n        }\n\n        return Promise.all(opListPromises).then(function (opLists) {\n          pageOpList.addOp(OPS.beginAnnotations, []);\n          for (const opList of opLists) {\n            pageOpList.addOpList(opList);\n          }\n          pageOpList.addOp(OPS.endAnnotations, []);\n          pageOpList.flush(true);\n          return { length: pageOpList.totalLength };\n        });\n      }\n    );\n  }\n\n  extractTextContent({\n    handler,\n    task,\n    normalizeWhitespace,\n    sink,\n    combineTextItems,\n  }) {\n    const contentStreamPromise = this.pdfManager.ensure(\n      this,\n      \"getContentStream\"\n    );\n    const resourcesPromise = this.loadResources([\n      \"ExtGState\",\n      \"XObject\",\n      \"Font\",\n    ]);\n\n    const dataPromises = Promise.all([contentStreamPromise, resourcesPromise]);\n    return dataPromises.then(([contentStream]) => {\n      const partialEvaluator = new PartialEvaluator({\n        xref: this.xref,\n        handler,\n        pageIndex: this.pageIndex,\n        idFactory: this.idFactory,\n        fontCache: this.fontCache,\n        builtInCMapCache: this.builtInCMapCache,\n        globalImageCache: this.globalImageCache,\n        options: this.evaluatorOptions,\n        pdfFunctionFactory: this.pdfFunctionFactory,\n      });\n\n      return partialEvaluator.getTextContent({\n        stream: contentStream,\n        task,\n        resources: this.resources,\n        normalizeWhitespace,\n        combineTextItems,\n        sink,\n      });\n    });\n  }\n\n  getAnnotationsData(intent) {\n    return this._parsedAnnotations.then(function (annotations) {\n      const annotationsData = [];\n      for (let i = 0, ii = annotations.length; i < ii; i++) {\n        if (!intent || isAnnotationRenderable(annotations[i], intent)) {\n          annotationsData.push(annotations[i].data);\n        }\n      }\n      return annotationsData;\n    });\n  }\n\n  get annotations() {\n    return shadow(\n      this,\n      \"annotations\",\n      this._getInheritableProperty(\"Annots\") || []\n    );\n  }\n\n  get _parsedAnnotations() {\n    const parsedAnnotations = this.pdfManager\n      .ensure(this, \"annotations\")\n      .then(() => {\n        const annotationPromises = [];\n        for (const annotationRef of this.annotations) {\n          annotationPromises.push(\n            AnnotationFactory.create(\n              this.xref,\n              annotationRef,\n              this.pdfManager,\n              this.idFactory\n            ).catch(function (reason) {\n              warn(`_parsedAnnotations: \"${reason}\".`);\n              return null;\n            })\n          );\n        }\n\n        return Promise.all(annotationPromises).then(function (annotations) {\n          return annotations.filter(annotation => !!annotation);\n        });\n      });\n\n    return shadow(this, \"_parsedAnnotations\", parsedAnnotations);\n  }\n}\n\nconst PDF_HEADER_SIGNATURE = new Uint8Array([0x25, 0x50, 0x44, 0x46, 0x2d]);\n// prettier-ignore\nconst STARTXREF_SIGNATURE = new Uint8Array([\n  0x73, 0x74, 0x61, 0x72, 0x74, 0x78, 0x72, 0x65, 0x66]);\nconst ENDOBJ_SIGNATURE = new Uint8Array([0x65, 0x6e, 0x64, 0x6f, 0x62, 0x6a]);\n\nconst FINGERPRINT_FIRST_BYTES = 1024;\nconst EMPTY_FINGERPRINT =\n  \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";\n\nconst PDF_HEADER_VERSION_REGEXP = /^[1-9]\\.[0-9]$/;\n\nfunction find(stream, signature, limit = 1024, backwards = false) {\n  if (\n    typeof PDFJSDev === \"undefined\" ||\n    PDFJSDev.test(\"!PRODUCTION || TESTING\")\n  ) {\n    assert(limit > 0, 'The \"limit\" must be a positive integer.');\n  }\n  const signatureLength = signature.length;\n\n  const scanBytes = stream.peekBytes(limit);\n  const scanLength = scanBytes.length - signatureLength;\n\n  if (scanLength <= 0) {\n    return false;\n  }\n  if (backwards) {\n    const signatureEnd = signatureLength - 1;\n\n    let pos = scanBytes.length - 1;\n    while (pos >= signatureEnd) {\n      let j = 0;\n      while (\n        j < signatureLength &&\n        scanBytes[pos - j] === signature[signatureEnd - j]\n      ) {\n        j++;\n      }\n      if (j >= signatureLength) {\n        // `signature` found.\n        stream.pos += pos - signatureEnd;\n        return true;\n      }\n      pos--;\n    }\n  } else {\n    // forwards\n    let pos = 0;\n    while (pos <= scanLength) {\n      let j = 0;\n      while (j < signatureLength && scanBytes[pos + j] === signature[j]) {\n        j++;\n      }\n      if (j >= signatureLength) {\n        // `signature` found.\n        stream.pos += pos;\n        return true;\n      }\n      pos++;\n    }\n  }\n  return false;\n}\n\n/**\n * The `PDFDocument` class holds all the (worker-thread) data of the PDF file.\n */\nclass PDFDocument {\n  constructor(pdfManager, arg) {\n    let stream;\n    if (isStream(arg)) {\n      stream = arg;\n    } else if (isArrayBuffer(arg)) {\n      stream = new Stream(arg);\n    } else {\n      throw new Error(\"PDFDocument: Unknown argument type\");\n    }\n    if (stream.length <= 0) {\n      throw new InvalidPDFException(\n        \"The PDF file is empty, i.e. its size is zero bytes.\"\n      );\n    }\n\n    this.pdfManager = pdfManager;\n    this.stream = stream;\n    this.xref = new XRef(stream, pdfManager);\n\n    this.pdfFunctionFactory = new PDFFunctionFactory({\n      xref: this.xref,\n      isEvalSupported: pdfManager.evaluatorOptions.isEvalSupported,\n    });\n    this._pagePromises = [];\n  }\n\n  parse(recoveryMode) {\n    this.setup(recoveryMode);\n\n    const version = this.catalog.catDict.get(\"Version\");\n    if (isName(version)) {\n      this.pdfFormatVersion = version.name;\n    }\n\n    // Check if AcroForms are present in the document.\n    try {\n      this.acroForm = this.catalog.catDict.get(\"AcroForm\");\n      if (this.acroForm) {\n        this.xfa = this.acroForm.get(\"XFA\");\n        const fields = this.acroForm.get(\"Fields\");\n        if ((!Array.isArray(fields) || fields.length === 0) && !this.xfa) {\n          this.acroForm = null; // No fields and no XFA, so it's not a form.\n        }\n      }\n    } catch (ex) {\n      if (ex instanceof MissingDataException) {\n        throw ex;\n      }\n      info(\"Cannot fetch AcroForm entry; assuming no AcroForms are present\");\n      this.acroForm = null;\n    }\n\n    // Check if a Collection dictionary is present in the document.\n    try {\n      const collection = this.catalog.catDict.get(\"Collection\");\n      if (isDict(collection) && collection.getKeys().length > 0) {\n        this.collection = collection;\n      }\n    } catch (ex) {\n      if (ex instanceof MissingDataException) {\n        throw ex;\n      }\n      info(\"Cannot fetch Collection dictionary.\");\n    }\n  }\n\n  get linearization() {\n    let linearization = null;\n    try {\n      linearization = Linearization.create(this.stream);\n    } catch (err) {\n      if (err instanceof MissingDataException) {\n        throw err;\n      }\n      info(err);\n    }\n    return shadow(this, \"linearization\", linearization);\n  }\n\n  get startXRef() {\n    const stream = this.stream;\n    let startXRef = 0;\n\n    if (this.linearization) {\n      // Find the end of the first object.\n      stream.reset();\n      if (find(stream, ENDOBJ_SIGNATURE)) {\n        startXRef = stream.pos + 6 - stream.start;\n      }\n    } else {\n      // Find `startxref` by checking backwards from the end of the file.\n      const step = 1024;\n      const startXRefLength = STARTXREF_SIGNATURE.length;\n      let found = false,\n        pos = stream.end;\n\n      while (!found && pos > 0) {\n        pos -= step - startXRefLength;\n        if (pos < 0) {\n          pos = 0;\n        }\n        stream.pos = pos;\n        found = find(stream, STARTXREF_SIGNATURE, step, true);\n      }\n\n      if (found) {\n        stream.skip(9);\n        let ch;\n        do {\n          ch = stream.getByte();\n        } while (isWhiteSpace(ch));\n        let str = \"\";\n        while (ch >= /* Space = */ 0x20 && ch <= /* '9' = */ 0x39) {\n          str += String.fromCharCode(ch);\n          ch = stream.getByte();\n        }\n        startXRef = parseInt(str, 10);\n        if (isNaN(startXRef)) {\n          startXRef = 0;\n        }\n      }\n    }\n    return shadow(this, \"startXRef\", startXRef);\n  }\n\n  // Find the header, get the PDF format version and setup the\n  // stream to start from the header.\n  checkHeader() {\n    const stream = this.stream;\n    stream.reset();\n\n    if (!find(stream, PDF_HEADER_SIGNATURE)) {\n      // May not be a PDF file, but don't throw an error and let\n      // parsing continue.\n      return;\n    }\n    stream.moveStart();\n\n    // Read the PDF format version.\n    const MAX_PDF_VERSION_LENGTH = 12;\n    let version = \"\",\n      ch;\n    while ((ch = stream.getByte()) > /* Space = */ 0x20) {\n      if (version.length >= MAX_PDF_VERSION_LENGTH) {\n        break;\n      }\n      version += String.fromCharCode(ch);\n    }\n    if (!this.pdfFormatVersion) {\n      // Remove the \"%PDF-\" prefix.\n      this.pdfFormatVersion = version.substring(5);\n    }\n  }\n\n  parseStartXRef() {\n    this.xref.setStartXRef(this.startXRef);\n  }\n\n  setup(recoveryMode) {\n    this.xref.parse(recoveryMode);\n    this.catalog = new Catalog(this.pdfManager, this.xref);\n  }\n\n  get numPages() {\n    const linearization = this.linearization;\n    const num = linearization ? linearization.numPages : this.catalog.numPages;\n    return shadow(this, \"numPages\", num);\n  }\n\n  get documentInfo() {\n    const DocumentInfoValidators = {\n      Title: isString,\n      Author: isString,\n      Subject: isString,\n      Keywords: isString,\n      Creator: isString,\n      Producer: isString,\n      CreationDate: isString,\n      ModDate: isString,\n      Trapped: isName,\n    };\n\n    let version = this.pdfFormatVersion;\n    if (\n      typeof version !== \"string\" ||\n      !PDF_HEADER_VERSION_REGEXP.test(version)\n    ) {\n      warn(`Invalid PDF header version number: ${version}`);\n      version = null;\n    }\n\n    const docInfo = {\n      PDFFormatVersion: version,\n      IsLinearized: !!this.linearization,\n      IsAcroFormPresent: !!this.acroForm,\n      IsXFAPresent: !!this.xfa,\n      IsCollectionPresent: !!this.collection,\n    };\n\n    let infoDict;\n    try {\n      infoDict = this.xref.trailer.get(\"Info\");\n    } catch (err) {\n      if (err instanceof MissingDataException) {\n        throw err;\n      }\n      info(\"The document information dictionary is invalid.\");\n    }\n\n    if (isDict(infoDict)) {\n      // Fill the document info with valid entries from the specification,\n      // as well as any existing well-formed custom entries.\n      for (const key of infoDict.getKeys()) {\n        const value = infoDict.get(key);\n\n        if (DocumentInfoValidators[key]) {\n          // Make sure the (standard) value conforms to the specification.\n          if (DocumentInfoValidators[key](value)) {\n            docInfo[key] =\n              typeof value !== \"string\" ? value : stringToPDFString(value);\n          } else {\n            info(`Bad value in document info for \"${key}\".`);\n          }\n        } else if (typeof key === \"string\") {\n          // For custom values, only accept white-listed types to prevent\n          // errors that would occur when trying to send non-serializable\n          // objects to the main-thread (for example `Dict` or `Stream`).\n          let customValue;\n          if (isString(value)) {\n            customValue = stringToPDFString(value);\n          } else if (isName(value) || isNum(value) || isBool(value)) {\n            customValue = value;\n          } else {\n            info(`Unsupported value in document info for (custom) \"${key}\".`);\n            continue;\n          }\n\n          if (!docInfo.Custom) {\n            docInfo.Custom = Object.create(null);\n          }\n          docInfo.Custom[key] = customValue;\n        }\n      }\n    }\n    return shadow(this, \"documentInfo\", docInfo);\n  }\n\n  get fingerprint() {\n    let hash;\n    const idArray = this.xref.trailer.get(\"ID\");\n    if (\n      Array.isArray(idArray) &&\n      idArray[0] &&\n      isString(idArray[0]) &&\n      idArray[0] !== EMPTY_FINGERPRINT\n    ) {\n      hash = stringToBytes(idArray[0]);\n    } else {\n      hash = calculateMD5(\n        this.stream.getByteRange(0, FINGERPRINT_FIRST_BYTES),\n        0,\n        FINGERPRINT_FIRST_BYTES\n      );\n    }\n\n    const fingerprintBuf = [];\n    for (let i = 0, ii = hash.length; i < ii; i++) {\n      const hex = hash[i].toString(16);\n      fingerprintBuf.push(hex.padStart(2, \"0\"));\n    }\n    return shadow(this, \"fingerprint\", fingerprintBuf.join(\"\"));\n  }\n\n  _getLinearizationPage(pageIndex) {\n    const { catalog, linearization } = this;\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      assert(\n        linearization && linearization.pageFirst === pageIndex,\n        \"_getLinearizationPage - invalid pageIndex argument.\"\n      );\n    }\n\n    const ref = Ref.get(linearization.objectNumberFirst, 0);\n    return this.xref\n      .fetchAsync(ref)\n      .then(obj => {\n        // Ensure that the object that was found is actually a Page dictionary.\n        if (\n          isDict(obj, \"Page\") ||\n          (isDict(obj) && !obj.has(\"Type\") && obj.has(\"Contents\"))\n        ) {\n          if (ref && !catalog.pageKidsCountCache.has(ref)) {\n            catalog.pageKidsCountCache.put(ref, 1); // Cache the Page reference.\n          }\n          return [obj, ref];\n        }\n        throw new FormatError(\n          \"The Linearization dictionary doesn't point \" +\n            \"to a valid Page dictionary.\"\n        );\n      })\n      .catch(reason => {\n        info(reason);\n        return catalog.getPageDict(pageIndex);\n      });\n  }\n\n  getPage(pageIndex) {\n    if (this._pagePromises[pageIndex] !== undefined) {\n      return this._pagePromises[pageIndex];\n    }\n    const { catalog, linearization } = this;\n\n    const promise =\n      linearization && linearization.pageFirst === pageIndex\n        ? this._getLinearizationPage(pageIndex)\n        : catalog.getPageDict(pageIndex);\n\n    return (this._pagePromises[pageIndex] = promise.then(([pageDict, ref]) => {\n      return new Page({\n        pdfManager: this.pdfManager,\n        xref: this.xref,\n        pageIndex,\n        pageDict,\n        ref,\n        fontCache: catalog.fontCache,\n        builtInCMapCache: catalog.builtInCMapCache,\n        globalImageCache: catalog.globalImageCache,\n        pdfFunctionFactory: this.pdfFunctionFactory,\n      });\n    }));\n  }\n\n  checkFirstPage() {\n    return this.getPage(0).catch(async reason => {\n      if (reason instanceof XRefEntryException) {\n        // Clear out the various caches to ensure that we haven't stored any\n        // inconsistent and/or incorrect state, since that could easily break\n        // subsequent `this.getPage` calls.\n        this._pagePromises.length = 0;\n        await this.cleanup();\n\n        throw new XRefParseException();\n      }\n    });\n  }\n\n  fontFallback(id, handler) {\n    return this.catalog.fontFallback(id, handler);\n  }\n\n  async cleanup(manuallyTriggered = false) {\n    return this.catalog\n      ? this.catalog.cleanup(manuallyTriggered)\n      : clearPrimitiveCaches();\n  }\n}\n\nexport { Page, PDFDocument };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  bytesToString,\n  createPromiseCapability,\n  createValidAbsoluteUrl,\n  FormatError,\n  info,\n  InvalidPDFException,\n  isBool,\n  isNum,\n  isString,\n  PermissionFlag,\n  shadow,\n  stringToPDFString,\n  stringToUTF8String,\n  unreachable,\n  warn,\n} from \"../shared/util.js\";\nimport {\n  clearPrimitiveCaches,\n  Cmd,\n  Dict,\n  isCmd,\n  isDict,\n  isName,\n  isRef,\n  isRefsEqual,\n  isStream,\n  Ref,\n  RefSet,\n  RefSetCache,\n} from \"./primitives.js\";\nimport { Lexer, Parser } from \"./parser.js\";\nimport {\n  MissingDataException,\n  toRomanNumerals,\n  XRefEntryException,\n  XRefParseException,\n} from \"./core_utils.js\";\nimport { CipherTransformFactory } from \"./crypto.js\";\nimport { ColorSpace } from \"./colorspace.js\";\nimport { GlobalImageCache } from \"./image_utils.js\";\n\nfunction fetchDestination(dest) {\n  return isDict(dest) ? dest.get(\"D\") : dest;\n}\n\nclass Catalog {\n  constructor(pdfManager, xref) {\n    this.pdfManager = pdfManager;\n    this.xref = xref;\n\n    this.catDict = xref.getCatalogObj();\n    if (!isDict(this.catDict)) {\n      throw new FormatError(\"Catalog object is not a dictionary.\");\n    }\n\n    this.fontCache = new RefSetCache();\n    this.builtInCMapCache = new Map();\n    this.globalImageCache = new GlobalImageCache();\n    this.pageKidsCountCache = new RefSetCache();\n  }\n\n  get metadata() {\n    const streamRef = this.catDict.getRaw(\"Metadata\");\n    if (!isRef(streamRef)) {\n      return shadow(this, \"metadata\", null);\n    }\n\n    const suppressEncryption = !(\n      this.xref.encrypt && this.xref.encrypt.encryptMetadata\n    );\n    const stream = this.xref.fetch(streamRef, suppressEncryption);\n    let metadata;\n\n    if (stream && isDict(stream.dict)) {\n      const type = stream.dict.get(\"Type\");\n      const subtype = stream.dict.get(\"Subtype\");\n\n      if (isName(type, \"Metadata\") && isName(subtype, \"XML\")) {\n        // XXX: This should examine the charset the XML document defines,\n        // however since there are currently no real means to decode\n        // arbitrary charsets, let's just hope that the author of the PDF\n        // was reasonable enough to stick with the XML default charset,\n        // which is UTF-8.\n        try {\n          metadata = stringToUTF8String(bytesToString(stream.getBytes()));\n        } catch (e) {\n          if (e instanceof MissingDataException) {\n            throw e;\n          }\n          info(\"Skipping invalid metadata.\");\n        }\n      }\n    }\n    return shadow(this, \"metadata\", metadata);\n  }\n\n  get toplevelPagesDict() {\n    const pagesObj = this.catDict.get(\"Pages\");\n    if (!isDict(pagesObj)) {\n      throw new FormatError(\"Invalid top-level pages dictionary.\");\n    }\n    return shadow(this, \"toplevelPagesDict\", pagesObj);\n  }\n\n  get documentOutline() {\n    let obj = null;\n    try {\n      obj = this._readDocumentOutline();\n    } catch (ex) {\n      if (ex instanceof MissingDataException) {\n        throw ex;\n      }\n      warn(\"Unable to read document outline.\");\n    }\n    return shadow(this, \"documentOutline\", obj);\n  }\n\n  /**\n   * @private\n   */\n  _readDocumentOutline() {\n    let obj = this.catDict.get(\"Outlines\");\n    if (!isDict(obj)) {\n      return null;\n    }\n    obj = obj.getRaw(\"First\");\n    if (!isRef(obj)) {\n      return null;\n    }\n\n    const root = { items: [] };\n    const queue = [{ obj, parent: root }];\n    // To avoid recursion, keep track of the already processed items.\n    const processed = new RefSet();\n    processed.put(obj);\n    const xref = this.xref,\n      blackColor = new Uint8ClampedArray(3);\n\n    while (queue.length > 0) {\n      const i = queue.shift();\n      const outlineDict = xref.fetchIfRef(i.obj);\n      if (outlineDict === null) {\n        continue;\n      }\n      if (!outlineDict.has(\"Title\")) {\n        throw new FormatError(\"Invalid outline item encountered.\");\n      }\n\n      const data = { url: null, dest: null };\n      Catalog.parseDestDictionary({\n        destDict: outlineDict,\n        resultObj: data,\n        docBaseUrl: this.pdfManager.docBaseUrl,\n      });\n      const title = outlineDict.get(\"Title\");\n      const flags = outlineDict.get(\"F\") || 0;\n      const color = outlineDict.getArray(\"C\");\n      const count = outlineDict.get(\"Count\");\n      let rgbColor = blackColor;\n\n      // We only need to parse the color when it's valid, and non-default.\n      if (\n        Array.isArray(color) &&\n        color.length === 3 &&\n        (color[0] !== 0 || color[1] !== 0 || color[2] !== 0)\n      ) {\n        rgbColor = ColorSpace.singletons.rgb.getRgb(color, 0);\n      }\n\n      const outlineItem = {\n        dest: data.dest,\n        url: data.url,\n        unsafeUrl: data.unsafeUrl,\n        newWindow: data.newWindow,\n        title: stringToPDFString(title),\n        color: rgbColor,\n        count: Number.isInteger(count) ? count : undefined,\n        bold: !!(flags & 2),\n        italic: !!(flags & 1),\n        items: [],\n      };\n\n      i.parent.items.push(outlineItem);\n      obj = outlineDict.getRaw(\"First\");\n      if (isRef(obj) && !processed.has(obj)) {\n        queue.push({ obj, parent: outlineItem });\n        processed.put(obj);\n      }\n      obj = outlineDict.getRaw(\"Next\");\n      if (isRef(obj) && !processed.has(obj)) {\n        queue.push({ obj, parent: i.parent });\n        processed.put(obj);\n      }\n    }\n    return root.items.length > 0 ? root.items : null;\n  }\n\n  get permissions() {\n    let permissions = null;\n    try {\n      permissions = this._readPermissions();\n    } catch (ex) {\n      if (ex instanceof MissingDataException) {\n        throw ex;\n      }\n      warn(\"Unable to read permissions.\");\n    }\n    return shadow(this, \"permissions\", permissions);\n  }\n\n  /**\n   * @private\n   */\n  _readPermissions() {\n    const encrypt = this.xref.trailer.get(\"Encrypt\");\n    if (!isDict(encrypt)) {\n      return null;\n    }\n\n    let flags = encrypt.get(\"P\");\n    if (!isNum(flags)) {\n      return null;\n    }\n\n    // PDF integer objects are represented internally in signed 2's complement\n    // form. Therefore, convert the signed decimal integer to a signed 2's\n    // complement binary integer so we can use regular bitwise operations on it.\n    flags += 2 ** 32;\n\n    const permissions = [];\n    for (const key in PermissionFlag) {\n      const value = PermissionFlag[key];\n      if (flags & value) {\n        permissions.push(value);\n      }\n    }\n    return permissions;\n  }\n\n  get numPages() {\n    const obj = this.toplevelPagesDict.get(\"Count\");\n    if (!Number.isInteger(obj)) {\n      throw new FormatError(\n        \"Page count in top-level pages dictionary is not an integer.\"\n      );\n    }\n    return shadow(this, \"numPages\", obj);\n  }\n\n  get destinations() {\n    const obj = this._readDests(),\n      dests = Object.create(null);\n    if (obj instanceof NameTree) {\n      const names = obj.getAll();\n      for (const name in names) {\n        dests[name] = fetchDestination(names[name]);\n      }\n    } else if (obj instanceof Dict) {\n      obj.forEach(function (key, value) {\n        if (value) {\n          dests[key] = fetchDestination(value);\n        }\n      });\n    }\n    return shadow(this, \"destinations\", dests);\n  }\n\n  getDestination(destinationId) {\n    const obj = this._readDests();\n    if (obj instanceof NameTree || obj instanceof Dict) {\n      return fetchDestination(obj.get(destinationId) || null);\n    }\n    return null;\n  }\n\n  /**\n   * @private\n   */\n  _readDests() {\n    const obj = this.catDict.get(\"Names\");\n    if (obj && obj.has(\"Dests\")) {\n      return new NameTree(obj.getRaw(\"Dests\"), this.xref);\n    } else if (this.catDict.has(\"Dests\")) {\n      // Simple destination dictionary.\n      return this.catDict.get(\"Dests\");\n    }\n    return undefined;\n  }\n\n  get pageLabels() {\n    let obj = null;\n    try {\n      obj = this._readPageLabels();\n    } catch (ex) {\n      if (ex instanceof MissingDataException) {\n        throw ex;\n      }\n      warn(\"Unable to read page labels.\");\n    }\n    return shadow(this, \"pageLabels\", obj);\n  }\n\n  /**\n   * @private\n   */\n  _readPageLabels() {\n    const obj = this.catDict.getRaw(\"PageLabels\");\n    if (!obj) {\n      return null;\n    }\n\n    const pageLabels = new Array(this.numPages);\n    let style = null,\n      prefix = \"\";\n\n    const numberTree = new NumberTree(obj, this.xref);\n    const nums = numberTree.getAll();\n    let currentLabel = \"\",\n      currentIndex = 1;\n\n    for (let i = 0, ii = this.numPages; i < ii; i++) {\n      if (i in nums) {\n        const labelDict = nums[i];\n        if (!isDict(labelDict)) {\n          throw new FormatError(\"PageLabel is not a dictionary.\");\n        }\n\n        if (\n          labelDict.has(\"Type\") &&\n          !isName(labelDict.get(\"Type\"), \"PageLabel\")\n        ) {\n          throw new FormatError(\"Invalid type in PageLabel dictionary.\");\n        }\n\n        if (labelDict.has(\"S\")) {\n          const s = labelDict.get(\"S\");\n          if (!isName(s)) {\n            throw new FormatError(\"Invalid style in PageLabel dictionary.\");\n          }\n          style = s.name;\n        } else {\n          style = null;\n        }\n\n        if (labelDict.has(\"P\")) {\n          const p = labelDict.get(\"P\");\n          if (!isString(p)) {\n            throw new FormatError(\"Invalid prefix in PageLabel dictionary.\");\n          }\n          prefix = stringToPDFString(p);\n        } else {\n          prefix = \"\";\n        }\n\n        if (labelDict.has(\"St\")) {\n          const st = labelDict.get(\"St\");\n          if (!(Number.isInteger(st) && st >= 1)) {\n            throw new FormatError(\"Invalid start in PageLabel dictionary.\");\n          }\n          currentIndex = st;\n        } else {\n          currentIndex = 1;\n        }\n      }\n\n      switch (style) {\n        case \"D\":\n          currentLabel = currentIndex;\n          break;\n        case \"R\":\n        case \"r\":\n          currentLabel = toRomanNumerals(currentIndex, style === \"r\");\n          break;\n        case \"A\":\n        case \"a\":\n          const LIMIT = 26; // Use only the characters A-Z, or a-z.\n          const A_UPPER_CASE = 0x41,\n            A_LOWER_CASE = 0x61;\n\n          const baseCharCode = style === \"a\" ? A_LOWER_CASE : A_UPPER_CASE;\n          const letterIndex = currentIndex - 1;\n          const character = String.fromCharCode(\n            baseCharCode + (letterIndex % LIMIT)\n          );\n          const charBuf = [];\n          for (let j = 0, jj = (letterIndex / LIMIT) | 0; j <= jj; j++) {\n            charBuf.push(character);\n          }\n          currentLabel = charBuf.join(\"\");\n          break;\n        default:\n          if (style) {\n            throw new FormatError(\n              `Invalid style \"${style}\" in PageLabel dictionary.`\n            );\n          }\n          currentLabel = \"\";\n      }\n\n      pageLabels[i] = prefix + currentLabel;\n      currentIndex++;\n    }\n    return pageLabels;\n  }\n\n  get pageLayout() {\n    const obj = this.catDict.get(\"PageLayout\");\n    // Purposely use a non-standard default value, rather than 'SinglePage', to\n    // allow differentiating between `undefined` and /SinglePage since that does\n    // affect the Scroll mode (continuous/non-continuous) used in Adobe Reader.\n    let pageLayout = \"\";\n\n    if (isName(obj)) {\n      switch (obj.name) {\n        case \"SinglePage\":\n        case \"OneColumn\":\n        case \"TwoColumnLeft\":\n        case \"TwoColumnRight\":\n        case \"TwoPageLeft\":\n        case \"TwoPageRight\":\n          pageLayout = obj.name;\n      }\n    }\n    return shadow(this, \"pageLayout\", pageLayout);\n  }\n\n  get pageMode() {\n    const obj = this.catDict.get(\"PageMode\");\n    let pageMode = \"UseNone\"; // Default value.\n\n    if (isName(obj)) {\n      switch (obj.name) {\n        case \"UseNone\":\n        case \"UseOutlines\":\n        case \"UseThumbs\":\n        case \"FullScreen\":\n        case \"UseOC\":\n        case \"UseAttachments\":\n          pageMode = obj.name;\n      }\n    }\n    return shadow(this, \"pageMode\", pageMode);\n  }\n\n  get viewerPreferences() {\n    const ViewerPreferencesValidators = {\n      HideToolbar: isBool,\n      HideMenubar: isBool,\n      HideWindowUI: isBool,\n      FitWindow: isBool,\n      CenterWindow: isBool,\n      DisplayDocTitle: isBool,\n      NonFullScreenPageMode: isName,\n      Direction: isName,\n      ViewArea: isName,\n      ViewClip: isName,\n      PrintArea: isName,\n      PrintClip: isName,\n      PrintScaling: isName,\n      Duplex: isName,\n      PickTrayByPDFSize: isBool,\n      PrintPageRange: Array.isArray,\n      NumCopies: Number.isInteger,\n    };\n\n    const obj = this.catDict.get(\"ViewerPreferences\");\n    let prefs = null;\n\n    if (isDict(obj)) {\n      for (const key in ViewerPreferencesValidators) {\n        if (!obj.has(key)) {\n          continue;\n        }\n        const value = obj.get(key);\n        // Make sure the (standard) value conforms to the specification.\n        if (!ViewerPreferencesValidators[key](value)) {\n          info(`Bad value in ViewerPreferences for \"${key}\".`);\n          continue;\n        }\n        let prefValue;\n\n        switch (key) {\n          case \"NonFullScreenPageMode\":\n            switch (value.name) {\n              case \"UseNone\":\n              case \"UseOutlines\":\n              case \"UseThumbs\":\n              case \"UseOC\":\n                prefValue = value.name;\n                break;\n              default:\n                prefValue = \"UseNone\";\n            }\n            break;\n          case \"Direction\":\n            switch (value.name) {\n              case \"L2R\":\n              case \"R2L\":\n                prefValue = value.name;\n                break;\n              default:\n                prefValue = \"L2R\";\n            }\n            break;\n          case \"ViewArea\":\n          case \"ViewClip\":\n          case \"PrintArea\":\n          case \"PrintClip\":\n            switch (value.name) {\n              case \"MediaBox\":\n              case \"CropBox\":\n              case \"BleedBox\":\n              case \"TrimBox\":\n              case \"ArtBox\":\n                prefValue = value.name;\n                break;\n              default:\n                prefValue = \"CropBox\";\n            }\n            break;\n          case \"PrintScaling\":\n            switch (value.name) {\n              case \"None\":\n              case \"AppDefault\":\n                prefValue = value.name;\n                break;\n              default:\n                prefValue = \"AppDefault\";\n            }\n            break;\n          case \"Duplex\":\n            switch (value.name) {\n              case \"Simplex\":\n              case \"DuplexFlipShortEdge\":\n              case \"DuplexFlipLongEdge\":\n                prefValue = value.name;\n                break;\n              default:\n                prefValue = \"None\";\n            }\n            break;\n          case \"PrintPageRange\":\n            const length = value.length;\n            if (length % 2 !== 0) {\n              // The number of elements must be even.\n              break;\n            }\n            const isValid = value.every((page, i, arr) => {\n              return (\n                Number.isInteger(page) &&\n                page > 0 &&\n                (i === 0 || page >= arr[i - 1]) &&\n                page <= this.numPages\n              );\n            });\n            if (isValid) {\n              prefValue = value;\n            }\n            break;\n          case \"NumCopies\":\n            if (value > 0) {\n              prefValue = value;\n            }\n            break;\n          default:\n            if (typeof value !== \"boolean\") {\n              throw new FormatError(\n                `viewerPreferences - expected a boolean value for: ${key}`\n              );\n            }\n            prefValue = value;\n        }\n\n        if (prefValue !== undefined) {\n          if (!prefs) {\n            prefs = Object.create(null);\n          }\n          prefs[key] = prefValue;\n        } else {\n          info(`Bad value in ViewerPreferences for \"${key}\".`);\n        }\n      }\n    }\n    return shadow(this, \"viewerPreferences\", prefs);\n  }\n\n  /**\n   * NOTE: \"JavaScript\" actions are, for now, handled by `get javaScript` below.\n   */\n  get openAction() {\n    const obj = this.catDict.get(\"OpenAction\");\n    let openAction = null;\n\n    if (isDict(obj)) {\n      // Convert the OpenAction dictionary into a format that works with\n      // `parseDestDictionary`, to avoid having to re-implement those checks.\n      const destDict = new Dict(this.xref);\n      destDict.set(\"A\", obj);\n\n      const resultObj = { url: null, dest: null, action: null };\n      Catalog.parseDestDictionary({ destDict, resultObj });\n\n      if (Array.isArray(resultObj.dest)) {\n        if (!openAction) {\n          openAction = Object.create(null);\n        }\n        openAction.dest = resultObj.dest;\n      } else if (resultObj.action) {\n        if (!openAction) {\n          openAction = Object.create(null);\n        }\n        openAction.action = resultObj.action;\n      }\n    } else if (Array.isArray(obj)) {\n      if (!openAction) {\n        openAction = Object.create(null);\n      }\n      openAction.dest = obj;\n    }\n    return shadow(this, \"openAction\", openAction);\n  }\n\n  get attachments() {\n    const obj = this.catDict.get(\"Names\");\n    let attachments = null;\n\n    if (obj && obj.has(\"EmbeddedFiles\")) {\n      const nameTree = new NameTree(obj.getRaw(\"EmbeddedFiles\"), this.xref);\n      const names = nameTree.getAll();\n      for (const name in names) {\n        const fs = new FileSpec(names[name], this.xref);\n        if (!attachments) {\n          attachments = Object.create(null);\n        }\n        attachments[stringToPDFString(name)] = fs.serializable;\n      }\n    }\n    return shadow(this, \"attachments\", attachments);\n  }\n\n  get javaScript() {\n    const obj = this.catDict.get(\"Names\");\n\n    let javaScript = null;\n    function appendIfJavaScriptDict(jsDict) {\n      const type = jsDict.get(\"S\");\n      if (!isName(type, \"JavaScript\")) {\n        return;\n      }\n\n      let js = jsDict.get(\"JS\");\n      if (isStream(js)) {\n        js = bytesToString(js.getBytes());\n      } else if (!isString(js)) {\n        return;\n      }\n\n      if (!javaScript) {\n        javaScript = [];\n      }\n      javaScript.push(stringToPDFString(js));\n    }\n\n    if (obj && obj.has(\"JavaScript\")) {\n      const nameTree = new NameTree(obj.getRaw(\"JavaScript\"), this.xref);\n      const names = nameTree.getAll();\n      for (const name in names) {\n        // We don't use most JavaScript in PDF documents. This code is\n        // defensive so we don't cause errors on document load.\n        const jsDict = names[name];\n        if (isDict(jsDict)) {\n          appendIfJavaScriptDict(jsDict);\n        }\n      }\n    }\n\n    // Append OpenAction \"JavaScript\" actions to the JavaScript array.\n    const openAction = this.catDict.get(\"OpenAction\");\n    if (isDict(openAction) && isName(openAction.get(\"S\"), \"JavaScript\")) {\n      appendIfJavaScriptDict(openAction);\n    }\n\n    return shadow(this, \"javaScript\", javaScript);\n  }\n\n  fontFallback(id, handler) {\n    const promises = [];\n    this.fontCache.forEach(function (promise) {\n      promises.push(promise);\n    });\n\n    return Promise.all(promises).then(translatedFonts => {\n      for (const translatedFont of translatedFonts) {\n        if (translatedFont.loadedName === id) {\n          translatedFont.fallback(handler);\n          return;\n        }\n      }\n    });\n  }\n\n  cleanup(manuallyTriggered = false) {\n    clearPrimitiveCaches();\n    this.globalImageCache.clear(/* onlyData = */ manuallyTriggered);\n    this.pageKidsCountCache.clear();\n\n    const promises = [];\n    this.fontCache.forEach(function (promise) {\n      promises.push(promise);\n    });\n\n    return Promise.all(promises).then(translatedFonts => {\n      for (const { dict } of translatedFonts) {\n        delete dict.translated;\n      }\n      this.fontCache.clear();\n      this.builtInCMapCache.clear();\n    });\n  }\n\n  getPageDict(pageIndex) {\n    const capability = createPromiseCapability();\n    const nodesToVisit = [this.catDict.getRaw(\"Pages\")];\n    const visitedNodes = new RefSet();\n    const xref = this.xref,\n      pageKidsCountCache = this.pageKidsCountCache;\n    let count,\n      currentPageIndex = 0;\n\n    function next() {\n      while (nodesToVisit.length) {\n        const currentNode = nodesToVisit.pop();\n\n        if (isRef(currentNode)) {\n          count = pageKidsCountCache.get(currentNode);\n          // Skip nodes where the page can't be.\n          if (count > 0 && currentPageIndex + count < pageIndex) {\n            currentPageIndex += count;\n            continue;\n          }\n          // Prevent circular references in the /Pages tree.\n          if (visitedNodes.has(currentNode)) {\n            capability.reject(\n              new FormatError(\"Pages tree contains circular reference.\")\n            );\n            return;\n          }\n          visitedNodes.put(currentNode);\n\n          xref.fetchAsync(currentNode).then(function (obj) {\n            if (isDict(obj, \"Page\") || (isDict(obj) && !obj.has(\"Kids\"))) {\n              if (pageIndex === currentPageIndex) {\n                // Cache the Page reference, since it can *greatly* improve\n                // performance by reducing redundant lookups in long documents\n                // where all nodes are found at *one* level of the tree.\n                if (currentNode && !pageKidsCountCache.has(currentNode)) {\n                  pageKidsCountCache.put(currentNode, 1);\n                }\n                capability.resolve([obj, currentNode]);\n              } else {\n                currentPageIndex++;\n                next();\n              }\n              return;\n            }\n            nodesToVisit.push(obj);\n            next();\n          }, capability.reject);\n          return;\n        }\n\n        // Must be a child page dictionary.\n        if (!isDict(currentNode)) {\n          capability.reject(\n            new FormatError(\n              \"Page dictionary kid reference points to wrong type of object.\"\n            )\n          );\n          return;\n        }\n\n        count = currentNode.get(\"Count\");\n        if (Number.isInteger(count) && count >= 0) {\n          // Cache the Kids count, since it can reduce redundant lookups in\n          // documents where all nodes are found at *one* level of the tree.\n          const objId = currentNode.objId;\n          if (objId && !pageKidsCountCache.has(objId)) {\n            pageKidsCountCache.put(objId, count);\n          }\n          // Skip nodes where the page can't be.\n          if (currentPageIndex + count <= pageIndex) {\n            currentPageIndex += count;\n            continue;\n          }\n        }\n\n        const kids = currentNode.get(\"Kids\");\n        if (!Array.isArray(kids)) {\n          // Prevent errors in corrupt PDF documents that violate the\n          // specification by *inlining* Page dicts directly in the Kids\n          // array, rather than using indirect objects (fixes issue9540.pdf).\n          if (\n            isName(currentNode.get(\"Type\"), \"Page\") ||\n            (!currentNode.has(\"Type\") && currentNode.has(\"Contents\"))\n          ) {\n            if (currentPageIndex === pageIndex) {\n              capability.resolve([currentNode, null]);\n              return;\n            }\n            currentPageIndex++;\n            continue;\n          }\n\n          capability.reject(\n            new FormatError(\"Page dictionary kids object is not an array.\")\n          );\n          return;\n        }\n\n        // Always check all `Kids` nodes, to avoid getting stuck in an empty\n        // node further down in the tree (see issue5644.pdf, issue8088.pdf),\n        // and to ensure that we actually find the correct `Page` dict.\n        for (let last = kids.length - 1; last >= 0; last--) {\n          nodesToVisit.push(kids[last]);\n        }\n      }\n      capability.reject(new Error(`Page index ${pageIndex} not found.`));\n    }\n    next();\n    return capability.promise;\n  }\n\n  getPageIndex(pageRef) {\n    // The page tree nodes have the count of all the leaves below them. To get\n    // how many pages are before we just have to walk up the tree and keep\n    // adding the count of siblings to the left of the node.\n    const xref = this.xref;\n\n    function pagesBeforeRef(kidRef) {\n      let total = 0,\n        parentRef;\n\n      return xref\n        .fetchAsync(kidRef)\n        .then(function (node) {\n          if (\n            isRefsEqual(kidRef, pageRef) &&\n            !isDict(node, \"Page\") &&\n            !(isDict(node) && !node.has(\"Type\") && node.has(\"Contents\"))\n          ) {\n            throw new FormatError(\n              \"The reference does not point to a /Page dictionary.\"\n            );\n          }\n          if (!node) {\n            return null;\n          }\n          if (!isDict(node)) {\n            throw new FormatError(\"Node must be a dictionary.\");\n          }\n          parentRef = node.getRaw(\"Parent\");\n          return node.getAsync(\"Parent\");\n        })\n        .then(function (parent) {\n          if (!parent) {\n            return null;\n          }\n          if (!isDict(parent)) {\n            throw new FormatError(\"Parent must be a dictionary.\");\n          }\n          return parent.getAsync(\"Kids\");\n        })\n        .then(function (kids) {\n          if (!kids) {\n            return null;\n          }\n\n          const kidPromises = [];\n          let found = false;\n          for (let i = 0, ii = kids.length; i < ii; i++) {\n            const kid = kids[i];\n            if (!isRef(kid)) {\n              throw new FormatError(\"Kid must be a reference.\");\n            }\n            if (isRefsEqual(kid, kidRef)) {\n              found = true;\n              break;\n            }\n            kidPromises.push(\n              xref.fetchAsync(kid).then(function (obj) {\n                if (!isDict(obj)) {\n                  throw new FormatError(\"Kid node must be a dictionary.\");\n                }\n                if (obj.has(\"Count\")) {\n                  total += obj.get(\"Count\");\n                } else {\n                  // Page leaf node.\n                  total++;\n                }\n              })\n            );\n          }\n          if (!found) {\n            throw new FormatError(\"Kid reference not found in parent's kids.\");\n          }\n          return Promise.all(kidPromises).then(function () {\n            return [total, parentRef];\n          });\n        });\n    }\n\n    let total = 0;\n    function next(ref) {\n      return pagesBeforeRef(ref).then(function (args) {\n        if (!args) {\n          return total;\n        }\n        const [count, parentRef] = args;\n        total += count;\n        return next(parentRef);\n      });\n    }\n\n    return next(pageRef);\n  }\n\n  /**\n   * @typedef ParseDestDictionaryParameters\n   * @property {Dict} destDict - The dictionary containing the destination.\n   * @property {Object} resultObj - The object where the parsed destination\n   *   properties will be placed.\n   * @property {string} [docBaseUrl] - The document base URL that is used when\n   *   attempting to recover valid absolute URLs from relative ones.\n   */\n\n  /**\n   * Helper function used to parse the contents of destination dictionaries.\n   * @param {ParseDestDictionaryParameters} params\n   */\n  static parseDestDictionary(params) {\n    // Lets URLs beginning with 'www.' default to using the 'http://' protocol.\n    function addDefaultProtocolToUrl(url) {\n      return url.startsWith(\"www.\") ? `http://${url}` : url;\n    }\n\n    // According to ISO 32000-1:2008, section 12.6.4.7, URIs should be encoded\n    // in 7-bit ASCII. Some bad PDFs use UTF-8 encoding; see Bugzilla 1122280.\n    function tryConvertUrlEncoding(url) {\n      try {\n        return stringToUTF8String(url);\n      } catch (e) {\n        return url;\n      }\n    }\n\n    const destDict = params.destDict;\n    if (!isDict(destDict)) {\n      warn(\"parseDestDictionary: `destDict` must be a dictionary.\");\n      return;\n    }\n    const resultObj = params.resultObj;\n    if (typeof resultObj !== \"object\") {\n      warn(\"parseDestDictionary: `resultObj` must be an object.\");\n      return;\n    }\n    const docBaseUrl = params.docBaseUrl || null;\n\n    let action = destDict.get(\"A\"),\n      url,\n      dest;\n    if (!isDict(action) && destDict.has(\"Dest\")) {\n      // A /Dest entry should *only* contain a Name or an Array, but some bad\n      // PDF generators ignore that and treat it as an /A entry.\n      action = destDict.get(\"Dest\");\n    }\n\n    if (isDict(action)) {\n      const actionType = action.get(\"S\");\n      if (!isName(actionType)) {\n        warn(\"parseDestDictionary: Invalid type in Action dictionary.\");\n        return;\n      }\n      const actionName = actionType.name;\n\n      switch (actionName) {\n        case \"URI\":\n          url = action.get(\"URI\");\n          if (isName(url)) {\n            // Some bad PDFs do not put parentheses around relative URLs.\n            url = \"/\" + url.name;\n          } else if (isString(url)) {\n            url = addDefaultProtocolToUrl(url);\n          }\n          // TODO: pdf spec mentions urls can be relative to a Base\n          // entry in the dictionary.\n          break;\n\n        case \"GoTo\":\n          dest = action.get(\"D\");\n          break;\n\n        case \"Launch\":\n        // We neither want, nor can, support arbitrary 'Launch' actions.\n        // However, in practice they are mostly used for linking to other PDF\n        // files, which we thus attempt to support (utilizing `docBaseUrl`).\n        /* falls through */\n\n        case \"GoToR\":\n          const urlDict = action.get(\"F\");\n          if (isDict(urlDict)) {\n            // We assume that we found a FileSpec dictionary\n            // and fetch the URL without checking any further.\n            url = urlDict.get(\"F\") || null;\n          } else if (isString(urlDict)) {\n            url = urlDict;\n          }\n\n          // NOTE: the destination is relative to the *remote* document.\n          let remoteDest = action.get(\"D\");\n          if (remoteDest) {\n            if (isName(remoteDest)) {\n              remoteDest = remoteDest.name;\n            }\n            if (isString(url)) {\n              const baseUrl = url.split(\"#\")[0];\n              if (isString(remoteDest)) {\n                url = baseUrl + \"#\" + remoteDest;\n              } else if (Array.isArray(remoteDest)) {\n                url = baseUrl + \"#\" + JSON.stringify(remoteDest);\n              }\n            }\n          }\n          // The 'NewWindow' property, equal to `LinkTarget.BLANK`.\n          const newWindow = action.get(\"NewWindow\");\n          if (isBool(newWindow)) {\n            resultObj.newWindow = newWindow;\n          }\n          break;\n\n        case \"Named\":\n          const namedAction = action.get(\"N\");\n          if (isName(namedAction)) {\n            resultObj.action = namedAction.name;\n          }\n          break;\n\n        case \"JavaScript\":\n          const jsAction = action.get(\"JS\");\n          let js;\n\n          if (isStream(jsAction)) {\n            js = bytesToString(jsAction.getBytes());\n          } else if (isString(jsAction)) {\n            js = jsAction;\n          }\n\n          if (js) {\n            // Attempt to recover valid URLs from `JS` entries with certain\n            // white-listed formats:\n            //  - window.open('http://example.com')\n            //  - app.launchURL('http://example.com', true)\n            const URL_OPEN_METHODS = [\"app.launchURL\", \"window.open\"];\n            const regex = new RegExp(\n              \"^\\\\s*(\" +\n                URL_OPEN_METHODS.join(\"|\").split(\".\").join(\"\\\\.\") +\n                \")\\\\((?:'|\\\")([^'\\\"]*)(?:'|\\\")(?:,\\\\s*(\\\\w+)\\\\)|\\\\))\",\n              \"i\"\n            );\n\n            const jsUrl = regex.exec(stringToPDFString(js));\n            if (jsUrl && jsUrl[2]) {\n              url = jsUrl[2];\n\n              if (jsUrl[3] === \"true\" && jsUrl[1] === \"app.launchURL\") {\n                resultObj.newWindow = true;\n              }\n              break;\n            }\n          }\n        /* falls through */\n        default:\n          warn(`parseDestDictionary: unsupported action type \"${actionName}\".`);\n          break;\n      }\n    } else if (destDict.has(\"Dest\")) {\n      // Simple destination.\n      dest = destDict.get(\"Dest\");\n    }\n\n    if (isString(url)) {\n      url = tryConvertUrlEncoding(url);\n      const absoluteUrl = createValidAbsoluteUrl(url, docBaseUrl);\n      if (absoluteUrl) {\n        resultObj.url = absoluteUrl.href;\n      }\n      resultObj.unsafeUrl = url;\n    }\n    if (dest) {\n      if (isName(dest)) {\n        dest = dest.name;\n      }\n      if (isString(dest) || Array.isArray(dest)) {\n        resultObj.dest = dest;\n      }\n    }\n  }\n}\n\nvar XRef = (function XRefClosure() {\n  // eslint-disable-next-line no-shadow\n  function XRef(stream, pdfManager) {\n    this.stream = stream;\n    this.pdfManager = pdfManager;\n    this.entries = [];\n    this.xrefstms = Object.create(null);\n    this._cacheMap = new Map(); // Prepare the XRef cache.\n    this.stats = {\n      streamTypes: Object.create(null),\n      fontTypes: Object.create(null),\n    };\n  }\n\n  XRef.prototype = {\n    setStartXRef: function XRef_setStartXRef(startXRef) {\n      // Store the starting positions of xref tables as we process them\n      // so we can recover from missing data errors\n      this.startXRefQueue = [startXRef];\n    },\n\n    parse: function XRef_parse(recoveryMode) {\n      var trailerDict;\n      if (!recoveryMode) {\n        trailerDict = this.readXRef();\n      } else {\n        warn(\"Indexing all PDF objects\");\n        trailerDict = this.indexObjects();\n      }\n      trailerDict.assignXref(this);\n      this.trailer = trailerDict;\n\n      let encrypt;\n      try {\n        encrypt = trailerDict.get(\"Encrypt\");\n      } catch (ex) {\n        if (ex instanceof MissingDataException) {\n          throw ex;\n        }\n        warn(`XRef.parse - Invalid \"Encrypt\" reference: \"${ex}\".`);\n      }\n      if (isDict(encrypt)) {\n        var ids = trailerDict.get(\"ID\");\n        var fileId = ids && ids.length ? ids[0] : \"\";\n        // The 'Encrypt' dictionary itself should not be encrypted, and by\n        // setting `suppressEncryption` we can prevent an infinite loop inside\n        // of `XRef_fetchUncompressed` if the dictionary contains indirect\n        // objects (fixes issue7665.pdf).\n        encrypt.suppressEncryption = true;\n        this.encrypt = new CipherTransformFactory(\n          encrypt,\n          fileId,\n          this.pdfManager.password\n        );\n      }\n\n      // Get the root dictionary (catalog) object, and do some basic validation.\n      let root;\n      try {\n        root = trailerDict.get(\"Root\");\n      } catch (ex) {\n        if (ex instanceof MissingDataException) {\n          throw ex;\n        }\n        warn(`XRef.parse - Invalid \"Root\" reference: \"${ex}\".`);\n      }\n      if (isDict(root) && root.has(\"Pages\")) {\n        this.root = root;\n      } else {\n        if (!recoveryMode) {\n          throw new XRefParseException();\n        }\n        throw new FormatError(\"Invalid root reference\");\n      }\n    },\n\n    processXRefTable: function XRef_processXRefTable(parser) {\n      if (!(\"tableState\" in this)) {\n        // Stores state of the table as we process it so we can resume\n        // from middle of table in case of missing data error\n        this.tableState = {\n          entryNum: 0,\n          streamPos: parser.lexer.stream.pos,\n          parserBuf1: parser.buf1,\n          parserBuf2: parser.buf2,\n        };\n      }\n\n      var obj = this.readXRefTable(parser);\n\n      // Sanity check\n      if (!isCmd(obj, \"trailer\")) {\n        throw new FormatError(\n          \"Invalid XRef table: could not find trailer dictionary\"\n        );\n      }\n      // Read trailer dictionary, e.g.\n      // trailer\n      //    << /Size 22\n      //      /Root 20R\n      //      /Info 10R\n      //      /ID [ <81b14aafa313db63dbd6f981e49f94f4> ]\n      //    >>\n      // The parser goes through the entire stream << ... >> and provides\n      // a getter interface for the key-value table\n      var dict = parser.getObj();\n\n      // The pdflib PDF generator can generate a nested trailer dictionary\n      if (!isDict(dict) && dict.dict) {\n        dict = dict.dict;\n      }\n      if (!isDict(dict)) {\n        throw new FormatError(\n          \"Invalid XRef table: could not parse trailer dictionary\"\n        );\n      }\n      delete this.tableState;\n\n      return dict;\n    },\n\n    readXRefTable: function XRef_readXRefTable(parser) {\n      // Example of cross-reference table:\n      // xref\n      // 0 1                    <-- subsection header (first obj #, obj count)\n      // 0000000000 65535 f     <-- actual object (offset, generation #, f/n)\n      // 23 2                   <-- subsection header ... and so on ...\n      // 0000025518 00002 n\n      // 0000025635 00000 n\n      // trailer\n      // ...\n\n      var stream = parser.lexer.stream;\n      var tableState = this.tableState;\n      stream.pos = tableState.streamPos;\n      parser.buf1 = tableState.parserBuf1;\n      parser.buf2 = tableState.parserBuf2;\n\n      // Outer loop is over subsection headers\n      var obj;\n\n      while (true) {\n        if (!(\"firstEntryNum\" in tableState) || !(\"entryCount\" in tableState)) {\n          if (isCmd((obj = parser.getObj()), \"trailer\")) {\n            break;\n          }\n          tableState.firstEntryNum = obj;\n          tableState.entryCount = parser.getObj();\n        }\n\n        var first = tableState.firstEntryNum;\n        var count = tableState.entryCount;\n        if (!Number.isInteger(first) || !Number.isInteger(count)) {\n          throw new FormatError(\n            \"Invalid XRef table: wrong types in subsection header\"\n          );\n        }\n        // Inner loop is over objects themselves\n        for (var i = tableState.entryNum; i < count; i++) {\n          tableState.streamPos = stream.pos;\n          tableState.entryNum = i;\n          tableState.parserBuf1 = parser.buf1;\n          tableState.parserBuf2 = parser.buf2;\n\n          var entry = {};\n          entry.offset = parser.getObj();\n          entry.gen = parser.getObj();\n          var type = parser.getObj();\n\n          if (type instanceof Cmd) {\n            switch (type.cmd) {\n              case \"f\":\n                entry.free = true;\n                break;\n              case \"n\":\n                entry.uncompressed = true;\n                break;\n            }\n          }\n\n          // Validate entry obj\n          if (\n            !Number.isInteger(entry.offset) ||\n            !Number.isInteger(entry.gen) ||\n            !(entry.free || entry.uncompressed)\n          ) {\n            throw new FormatError(\n              `Invalid entry in XRef subsection: ${first}, ${count}`\n            );\n          }\n\n          // The first xref table entry, i.e. obj 0, should be free. Attempting\n          // to adjust an incorrect first obj # (fixes issue 3248 and 7229).\n          if (i === 0 && entry.free && first === 1) {\n            first = 0;\n          }\n\n          if (!this.entries[i + first]) {\n            this.entries[i + first] = entry;\n          }\n        }\n\n        tableState.entryNum = 0;\n        tableState.streamPos = stream.pos;\n        tableState.parserBuf1 = parser.buf1;\n        tableState.parserBuf2 = parser.buf2;\n        delete tableState.firstEntryNum;\n        delete tableState.entryCount;\n      }\n\n      // Sanity check: as per spec, first object must be free\n      if (this.entries[0] && !this.entries[0].free) {\n        throw new FormatError(\"Invalid XRef table: unexpected first object\");\n      }\n      return obj;\n    },\n\n    processXRefStream: function XRef_processXRefStream(stream) {\n      if (!(\"streamState\" in this)) {\n        // Stores state of the stream as we process it so we can resume\n        // from middle of stream in case of missing data error\n        var streamParameters = stream.dict;\n        var byteWidths = streamParameters.get(\"W\");\n        var range = streamParameters.get(\"Index\");\n        if (!range) {\n          range = [0, streamParameters.get(\"Size\")];\n        }\n\n        this.streamState = {\n          entryRanges: range,\n          byteWidths,\n          entryNum: 0,\n          streamPos: stream.pos,\n        };\n      }\n      this.readXRefStream(stream);\n      delete this.streamState;\n\n      return stream.dict;\n    },\n\n    readXRefStream: function XRef_readXRefStream(stream) {\n      var i, j;\n      var streamState = this.streamState;\n      stream.pos = streamState.streamPos;\n\n      var byteWidths = streamState.byteWidths;\n      var typeFieldWidth = byteWidths[0];\n      var offsetFieldWidth = byteWidths[1];\n      var generationFieldWidth = byteWidths[2];\n\n      var entryRanges = streamState.entryRanges;\n      while (entryRanges.length > 0) {\n        var first = entryRanges[0];\n        var n = entryRanges[1];\n\n        if (!Number.isInteger(first) || !Number.isInteger(n)) {\n          throw new FormatError(`Invalid XRef range fields: ${first}, ${n}`);\n        }\n        if (\n          !Number.isInteger(typeFieldWidth) ||\n          !Number.isInteger(offsetFieldWidth) ||\n          !Number.isInteger(generationFieldWidth)\n        ) {\n          throw new FormatError(\n            `Invalid XRef entry fields length: ${first}, ${n}`\n          );\n        }\n        for (i = streamState.entryNum; i < n; ++i) {\n          streamState.entryNum = i;\n          streamState.streamPos = stream.pos;\n\n          var type = 0,\n            offset = 0,\n            generation = 0;\n          for (j = 0; j < typeFieldWidth; ++j) {\n            type = (type << 8) | stream.getByte();\n          }\n          // if type field is absent, its default value is 1\n          if (typeFieldWidth === 0) {\n            type = 1;\n          }\n          for (j = 0; j < offsetFieldWidth; ++j) {\n            offset = (offset << 8) | stream.getByte();\n          }\n          for (j = 0; j < generationFieldWidth; ++j) {\n            generation = (generation << 8) | stream.getByte();\n          }\n          var entry = {};\n          entry.offset = offset;\n          entry.gen = generation;\n          switch (type) {\n            case 0:\n              entry.free = true;\n              break;\n            case 1:\n              entry.uncompressed = true;\n              break;\n            case 2:\n              break;\n            default:\n              throw new FormatError(`Invalid XRef entry type: ${type}`);\n          }\n          if (!this.entries[first + i]) {\n            this.entries[first + i] = entry;\n          }\n        }\n\n        streamState.entryNum = 0;\n        streamState.streamPos = stream.pos;\n        entryRanges.splice(0, 2);\n      }\n    },\n\n    indexObjects: function XRef_indexObjects() {\n      // Simple scan through the PDF content to find objects,\n      // trailers and XRef streams.\n      var TAB = 0x9,\n        LF = 0xa,\n        CR = 0xd,\n        SPACE = 0x20;\n      var PERCENT = 0x25,\n        LT = 0x3c;\n\n      function readToken(data, offset) {\n        var token = \"\",\n          ch = data[offset];\n        while (ch !== LF && ch !== CR && ch !== LT) {\n          if (++offset >= data.length) {\n            break;\n          }\n          token += String.fromCharCode(ch);\n          ch = data[offset];\n        }\n        return token;\n      }\n      function skipUntil(data, offset, what) {\n        var length = what.length,\n          dataLength = data.length;\n        var skipped = 0;\n        // finding byte sequence\n        while (offset < dataLength) {\n          var i = 0;\n          while (i < length && data[offset + i] === what[i]) {\n            ++i;\n          }\n          if (i >= length) {\n            break; // sequence found\n          }\n          offset++;\n          skipped++;\n        }\n        return skipped;\n      }\n      var objRegExp = /^(\\d+)\\s+(\\d+)\\s+obj\\b/;\n      const endobjRegExp = /\\bendobj[\\b\\s]$/;\n      const nestedObjRegExp = /\\s+(\\d+\\s+\\d+\\s+obj[\\b\\s<])$/;\n      const CHECK_CONTENT_LENGTH = 25;\n\n      var trailerBytes = new Uint8Array([116, 114, 97, 105, 108, 101, 114]);\n      // prettier-ignore\n      var startxrefBytes = new Uint8Array([115, 116, 97, 114, 116, 120, 114,\n                                           101, 102]);\n      const objBytes = new Uint8Array([111, 98, 106]);\n      var xrefBytes = new Uint8Array([47, 88, 82, 101, 102]);\n\n      // Clear out any existing entries, since they may be bogus.\n      this.entries.length = 0;\n\n      var stream = this.stream;\n      stream.pos = 0;\n      var buffer = stream.getBytes();\n      var position = stream.start,\n        length = buffer.length;\n      var trailers = [],\n        xrefStms = [];\n      while (position < length) {\n        var ch = buffer[position];\n        if (ch === TAB || ch === LF || ch === CR || ch === SPACE) {\n          ++position;\n          continue;\n        }\n        if (ch === PERCENT) {\n          // %-comment\n          do {\n            ++position;\n            if (position >= length) {\n              break;\n            }\n            ch = buffer[position];\n          } while (ch !== LF && ch !== CR);\n          continue;\n        }\n        var token = readToken(buffer, position);\n        var m;\n        if (\n          token.startsWith(\"xref\") &&\n          (token.length === 4 || /\\s/.test(token[4]))\n        ) {\n          position += skipUntil(buffer, position, trailerBytes);\n          trailers.push(position);\n          position += skipUntil(buffer, position, startxrefBytes);\n        } else if ((m = objRegExp.exec(token))) {\n          const num = m[1] | 0,\n            gen = m[2] | 0;\n          if (!this.entries[num] || this.entries[num].gen === gen) {\n            this.entries[num] = {\n              offset: position - stream.start,\n              gen,\n              uncompressed: true,\n            };\n          }\n          let contentLength,\n            startPos = position + token.length;\n\n          // Find the next \"obj\" string, rather than \"endobj\", to ensure that\n          // we won't skip over a new 'obj' operator in corrupt files where\n          // 'endobj' operators are missing (fixes issue9105_reduced.pdf).\n          while (startPos < buffer.length) {\n            const endPos = startPos + skipUntil(buffer, startPos, objBytes) + 4;\n            contentLength = endPos - position;\n\n            const checkPos = Math.max(endPos - CHECK_CONTENT_LENGTH, startPos);\n            const tokenStr = bytesToString(buffer.subarray(checkPos, endPos));\n\n            // Check if the current object ends with an 'endobj' operator.\n            if (endobjRegExp.test(tokenStr)) {\n              break;\n            } else {\n              // Check if an \"obj\" occurrence is actually a new object,\n              // i.e. the current object is missing the 'endobj' operator.\n              const objToken = nestedObjRegExp.exec(tokenStr);\n\n              if (objToken && objToken[1]) {\n                warn(\n                  'indexObjects: Found new \"obj\" inside of another \"obj\", ' +\n                    'caused by missing \"endobj\" -- trying to recover.'\n                );\n                contentLength -= objToken[1].length;\n                break;\n              }\n            }\n            startPos = endPos;\n          }\n          const content = buffer.subarray(position, position + contentLength);\n\n          // checking XRef stream suspect\n          // (it shall have '/XRef' and next char is not a letter)\n          var xrefTagOffset = skipUntil(content, 0, xrefBytes);\n          if (\n            xrefTagOffset < contentLength &&\n            content[xrefTagOffset + 5] < 64\n          ) {\n            xrefStms.push(position - stream.start);\n            this.xrefstms[position - stream.start] = 1; // Avoid recursion\n          }\n\n          position += contentLength;\n        } else if (\n          token.startsWith(\"trailer\") &&\n          (token.length === 7 || /\\s/.test(token[7]))\n        ) {\n          trailers.push(position);\n          position += skipUntil(buffer, position, startxrefBytes);\n        } else {\n          position += token.length + 1;\n        }\n      }\n      // reading XRef streams\n      var i, ii;\n      for (i = 0, ii = xrefStms.length; i < ii; ++i) {\n        this.startXRefQueue.push(xrefStms[i]);\n        this.readXRef(/* recoveryMode */ true);\n      }\n      // finding main trailer\n      let trailerDict;\n      for (i = 0, ii = trailers.length; i < ii; ++i) {\n        stream.pos = trailers[i];\n        const parser = new Parser({\n          lexer: new Lexer(stream),\n          xref: this,\n          allowStreams: true,\n          recoveryMode: true,\n        });\n        var obj = parser.getObj();\n        if (!isCmd(obj, \"trailer\")) {\n          continue;\n        }\n        // read the trailer dictionary\n        const dict = parser.getObj();\n        if (!isDict(dict)) {\n          continue;\n        }\n        // Do some basic validation of the trailer/root dictionary candidate.\n        let rootDict;\n        try {\n          rootDict = dict.get(\"Root\");\n        } catch (ex) {\n          if (ex instanceof MissingDataException) {\n            throw ex;\n          }\n          continue;\n        }\n        if (!isDict(rootDict) || !rootDict.has(\"Pages\")) {\n          continue;\n        }\n        // taking the first one with 'ID'\n        if (dict.has(\"ID\")) {\n          return dict;\n        }\n        // The current dictionary is a candidate, but continue searching.\n        trailerDict = dict;\n      }\n      // No trailer with 'ID', taking last one (if exists).\n      if (trailerDict) {\n        return trailerDict;\n      }\n      // nothing helps\n      throw new InvalidPDFException(\"Invalid PDF structure.\");\n    },\n\n    readXRef: function XRef_readXRef(recoveryMode) {\n      var stream = this.stream;\n      // Keep track of already parsed XRef tables, to prevent an infinite loop\n      // when parsing corrupt PDF files where e.g. the /Prev entries create a\n      // circular dependency between tables (fixes bug1393476.pdf).\n      const startXRefParsedCache = Object.create(null);\n\n      try {\n        while (this.startXRefQueue.length) {\n          var startXRef = this.startXRefQueue[0];\n\n          if (startXRefParsedCache[startXRef]) {\n            warn(\"readXRef - skipping XRef table since it was already parsed.\");\n            this.startXRefQueue.shift();\n            continue;\n          }\n          startXRefParsedCache[startXRef] = true;\n\n          stream.pos = startXRef + stream.start;\n\n          const parser = new Parser({\n            lexer: new Lexer(stream),\n            xref: this,\n            allowStreams: true,\n          });\n          var obj = parser.getObj();\n          var dict;\n\n          // Get dictionary\n          if (isCmd(obj, \"xref\")) {\n            // Parse end-of-file XRef\n            dict = this.processXRefTable(parser);\n            if (!this.topDict) {\n              this.topDict = dict;\n            }\n\n            // Recursively get other XRefs 'XRefStm', if any\n            obj = dict.get(\"XRefStm\");\n            if (Number.isInteger(obj)) {\n              var pos = obj;\n              // ignore previously loaded xref streams\n              // (possible infinite recursion)\n              if (!(pos in this.xrefstms)) {\n                this.xrefstms[pos] = 1;\n                this.startXRefQueue.push(pos);\n              }\n            }\n          } else if (Number.isInteger(obj)) {\n            // Parse in-stream XRef\n            if (\n              !Number.isInteger(parser.getObj()) ||\n              !isCmd(parser.getObj(), \"obj\") ||\n              !isStream((obj = parser.getObj()))\n            ) {\n              throw new FormatError(\"Invalid XRef stream\");\n            }\n            dict = this.processXRefStream(obj);\n            if (!this.topDict) {\n              this.topDict = dict;\n            }\n            if (!dict) {\n              throw new FormatError(\"Failed to read XRef stream\");\n            }\n          } else {\n            throw new FormatError(\"Invalid XRef stream header\");\n          }\n\n          // Recursively get previous dictionary, if any\n          obj = dict.get(\"Prev\");\n          if (Number.isInteger(obj)) {\n            this.startXRefQueue.push(obj);\n          } else if (isRef(obj)) {\n            // The spec says Prev must not be a reference, i.e. \"/Prev NNN\"\n            // This is a fallback for non-compliant PDFs, i.e. \"/Prev NNN 0 R\"\n            this.startXRefQueue.push(obj.num);\n          }\n\n          this.startXRefQueue.shift();\n        }\n\n        return this.topDict;\n      } catch (e) {\n        if (e instanceof MissingDataException) {\n          throw e;\n        }\n        info(\"(while reading XRef): \" + e);\n      }\n\n      if (recoveryMode) {\n        return undefined;\n      }\n      throw new XRefParseException();\n    },\n\n    getEntry: function XRef_getEntry(i) {\n      var xrefEntry = this.entries[i];\n      if (xrefEntry && !xrefEntry.free && xrefEntry.offset) {\n        return xrefEntry;\n      }\n      return null;\n    },\n\n    fetchIfRef: function XRef_fetchIfRef(obj, suppressEncryption) {\n      if (obj instanceof Ref) {\n        return this.fetch(obj, suppressEncryption);\n      }\n      return obj;\n    },\n\n    fetch: function XRef_fetch(ref, suppressEncryption) {\n      if (!(ref instanceof Ref)) {\n        throw new Error(\"ref object is not a reference\");\n      }\n      const num = ref.num;\n\n      // The XRef cache is populated with objects which are obtained through\n      // `Parser.getObj`, and indirectly via `Lexer.getObj`. Neither of these\n      // methods should ever return `undefined` (note the `assert` calls below).\n      const cacheEntry = this._cacheMap.get(num);\n      if (cacheEntry !== undefined) {\n        // In documents with Object Streams, it's possible that cached `Dict`s\n        // have not been assigned an `objId` yet (see e.g. issue3115r.pdf).\n        if (cacheEntry instanceof Dict && !cacheEntry.objId) {\n          cacheEntry.objId = ref.toString();\n        }\n        return cacheEntry;\n      }\n      let xrefEntry = this.getEntry(num);\n\n      if (xrefEntry === null) {\n        // The referenced entry can be free.\n        this._cacheMap.set(num, xrefEntry);\n        return xrefEntry;\n      }\n\n      if (xrefEntry.uncompressed) {\n        xrefEntry = this.fetchUncompressed(ref, xrefEntry, suppressEncryption);\n      } else {\n        xrefEntry = this.fetchCompressed(ref, xrefEntry, suppressEncryption);\n      }\n      if (isDict(xrefEntry)) {\n        xrefEntry.objId = ref.toString();\n      } else if (isStream(xrefEntry)) {\n        xrefEntry.dict.objId = ref.toString();\n      }\n      return xrefEntry;\n    },\n\n    fetchUncompressed(ref, xrefEntry, suppressEncryption = false) {\n      var gen = ref.gen;\n      var num = ref.num;\n      if (xrefEntry.gen !== gen) {\n        throw new XRefEntryException(`Inconsistent generation in XRef: ${ref}`);\n      }\n      var stream = this.stream.makeSubStream(\n        xrefEntry.offset + this.stream.start\n      );\n      const parser = new Parser({\n        lexer: new Lexer(stream),\n        xref: this,\n        allowStreams: true,\n      });\n      var obj1 = parser.getObj();\n      var obj2 = parser.getObj();\n      var obj3 = parser.getObj();\n\n      if (obj1 !== num || obj2 !== gen || !(obj3 instanceof Cmd)) {\n        throw new XRefEntryException(`Bad (uncompressed) XRef entry: ${ref}`);\n      }\n      if (obj3.cmd !== \"obj\") {\n        // some bad PDFs use \"obj1234\" and really mean 1234\n        if (obj3.cmd.startsWith(\"obj\")) {\n          num = parseInt(obj3.cmd.substring(3), 10);\n          if (!Number.isNaN(num)) {\n            return num;\n          }\n        }\n        throw new XRefEntryException(`Bad (uncompressed) XRef entry: ${ref}`);\n      }\n      if (this.encrypt && !suppressEncryption) {\n        xrefEntry = parser.getObj(this.encrypt.createCipherTransform(num, gen));\n      } else {\n        xrefEntry = parser.getObj();\n      }\n      if (!isStream(xrefEntry)) {\n        if (\n          typeof PDFJSDev === \"undefined\" ||\n          PDFJSDev.test(\"!PRODUCTION || TESTING\")\n        ) {\n          assert(\n            xrefEntry !== undefined,\n            'fetchUncompressed: The \"xrefEntry\" cannot be undefined.'\n          );\n        }\n        this._cacheMap.set(num, xrefEntry);\n      }\n      return xrefEntry;\n    },\n\n    fetchCompressed(ref, xrefEntry, suppressEncryption = false) {\n      const tableOffset = xrefEntry.offset;\n      const stream = this.fetch(Ref.get(tableOffset, 0));\n      if (!isStream(stream)) {\n        throw new FormatError(\"bad ObjStm stream\");\n      }\n      const first = stream.dict.get(\"First\");\n      const n = stream.dict.get(\"N\");\n      if (!Number.isInteger(first) || !Number.isInteger(n)) {\n        throw new FormatError(\n          \"invalid first and n parameters for ObjStm stream\"\n        );\n      }\n      const parser = new Parser({\n        lexer: new Lexer(stream),\n        xref: this,\n        allowStreams: true,\n      });\n      const nums = new Array(n);\n      // read the object numbers to populate cache\n      for (let i = 0; i < n; ++i) {\n        const num = parser.getObj();\n        if (!Number.isInteger(num)) {\n          throw new FormatError(\n            `invalid object number in the ObjStm stream: ${num}`\n          );\n        }\n        const offset = parser.getObj();\n        if (!Number.isInteger(offset)) {\n          throw new FormatError(\n            `invalid object offset in the ObjStm stream: ${offset}`\n          );\n        }\n        nums[i] = num;\n      }\n      const entries = new Array(n);\n      // read stream objects for cache\n      for (let i = 0; i < n; ++i) {\n        const obj = parser.getObj();\n        entries[i] = obj;\n        // The ObjStm should not contain 'endobj'. If it's present, skip over it\n        // to support corrupt PDFs (fixes issue 5241, bug 898610, bug 1037816).\n        if (parser.buf1 instanceof Cmd && parser.buf1.cmd === \"endobj\") {\n          parser.shift();\n        }\n        if (isStream(obj)) {\n          continue;\n        }\n        const num = nums[i],\n          entry = this.entries[num];\n        if (entry && entry.offset === tableOffset && entry.gen === i) {\n          if (\n            typeof PDFJSDev === \"undefined\" ||\n            PDFJSDev.test(\"!PRODUCTION || TESTING\")\n          ) {\n            assert(\n              obj !== undefined,\n              'fetchCompressed: The \"obj\" cannot be undefined.'\n            );\n          }\n          this._cacheMap.set(num, obj);\n        }\n      }\n      xrefEntry = entries[xrefEntry.gen];\n      if (xrefEntry === undefined) {\n        throw new XRefEntryException(`Bad (compressed) XRef entry: ${ref}`);\n      }\n      return xrefEntry;\n    },\n\n    async fetchIfRefAsync(obj, suppressEncryption) {\n      if (obj instanceof Ref) {\n        return this.fetchAsync(obj, suppressEncryption);\n      }\n      return obj;\n    },\n\n    async fetchAsync(ref, suppressEncryption) {\n      try {\n        return this.fetch(ref, suppressEncryption);\n      } catch (ex) {\n        if (!(ex instanceof MissingDataException)) {\n          throw ex;\n        }\n        await this.pdfManager.requestRange(ex.begin, ex.end);\n        return this.fetchAsync(ref, suppressEncryption);\n      }\n    },\n\n    getCatalogObj: function XRef_getCatalogObj() {\n      return this.root;\n    },\n  };\n\n  return XRef;\n})();\n\n/**\n * A NameTree/NumberTree is like a Dict but has some advantageous properties,\n * see the specification (7.9.6 and 7.9.7) for additional details.\n * TODO: implement all the Dict functions and make this more efficient.\n */\nclass NameOrNumberTree {\n  constructor(root, xref, type) {\n    if (this.constructor === NameOrNumberTree) {\n      unreachable(\"Cannot initialize NameOrNumberTree.\");\n    }\n    this.root = root;\n    this.xref = xref;\n    this._type = type;\n  }\n\n  getAll() {\n    const dict = Object.create(null);\n    if (!this.root) {\n      return dict;\n    }\n    const xref = this.xref;\n    // Reading Name/Number tree.\n    const processed = new RefSet();\n    processed.put(this.root);\n    const queue = [this.root];\n    while (queue.length > 0) {\n      const obj = xref.fetchIfRef(queue.shift());\n      if (!isDict(obj)) {\n        continue;\n      }\n      if (obj.has(\"Kids\")) {\n        const kids = obj.get(\"Kids\");\n        for (let i = 0, ii = kids.length; i < ii; i++) {\n          const kid = kids[i];\n          if (processed.has(kid)) {\n            throw new FormatError(`Duplicate entry in \"${this._type}\" tree.`);\n          }\n          queue.push(kid);\n          processed.put(kid);\n        }\n        continue;\n      }\n      const entries = obj.get(this._type);\n      if (Array.isArray(entries)) {\n        for (let i = 0, ii = entries.length; i < ii; i += 2) {\n          dict[xref.fetchIfRef(entries[i])] = xref.fetchIfRef(entries[i + 1]);\n        }\n      }\n    }\n    return dict;\n  }\n\n  get(key) {\n    if (!this.root) {\n      return null;\n    }\n    const xref = this.xref;\n    let kidsOrEntries = xref.fetchIfRef(this.root);\n    let loopCount = 0;\n    const MAX_LEVELS = 10;\n\n    // Perform a binary search to quickly find the entry that\n    // contains the key we are looking for.\n    while (kidsOrEntries.has(\"Kids\")) {\n      if (++loopCount > MAX_LEVELS) {\n        warn(`Search depth limit reached for \"${this._type}\" tree.`);\n        return null;\n      }\n\n      const kids = kidsOrEntries.get(\"Kids\");\n      if (!Array.isArray(kids)) {\n        return null;\n      }\n\n      let l = 0,\n        r = kids.length - 1;\n      while (l <= r) {\n        const m = (l + r) >> 1;\n        const kid = xref.fetchIfRef(kids[m]);\n        const limits = kid.get(\"Limits\");\n\n        if (key < xref.fetchIfRef(limits[0])) {\n          r = m - 1;\n        } else if (key > xref.fetchIfRef(limits[1])) {\n          l = m + 1;\n        } else {\n          kidsOrEntries = xref.fetchIfRef(kids[m]);\n          break;\n        }\n      }\n      if (l > r) {\n        return null;\n      }\n    }\n\n    // If we get here, then we have found the right entry. Now go through the\n    // entries in the dictionary until we find the key we're looking for.\n    const entries = kidsOrEntries.get(this._type);\n    if (Array.isArray(entries)) {\n      // Perform a binary search to reduce the lookup time.\n      let l = 0,\n        r = entries.length - 2;\n      while (l <= r) {\n        // Check only even indices (0, 2, 4, ...) because the\n        // odd indices contain the actual data.\n        const tmp = (l + r) >> 1,\n          m = tmp + (tmp & 1);\n        const currentKey = xref.fetchIfRef(entries[m]);\n        if (key < currentKey) {\n          r = m - 2;\n        } else if (key > currentKey) {\n          l = m + 2;\n        } else {\n          return xref.fetchIfRef(entries[m + 1]);\n        }\n      }\n\n      // Fallback to an exhaustive search, in an attempt to handle corrupt\n      // PDF files where keys are not correctly ordered (fixes issue 10272).\n      info(\n        `Falling back to an exhaustive search, for key \"${key}\", ` +\n          `in \"${this._type}\" tree.`\n      );\n      for (let m = 0, mm = entries.length; m < mm; m += 2) {\n        const currentKey = xref.fetchIfRef(entries[m]);\n        if (currentKey === key) {\n          warn(\n            `The \"${key}\" key was found at an incorrect, ` +\n              `i.e. out-of-order, position in \"${this._type}\" tree.`\n          );\n          return xref.fetchIfRef(entries[m + 1]);\n        }\n      }\n    }\n    return null;\n  }\n}\n\nclass NameTree extends NameOrNumberTree {\n  constructor(root, xref) {\n    super(root, xref, \"Names\");\n  }\n}\n\nclass NumberTree extends NameOrNumberTree {\n  constructor(root, xref) {\n    super(root, xref, \"Nums\");\n  }\n}\n\n/**\n * \"A PDF file can refer to the contents of another file by using a File\n * Specification (PDF 1.1)\", see the spec (7.11) for more details.\n * NOTE: Only embedded files are supported (as part of the attachments support)\n * TODO: support the 'URL' file system (with caching if !/V), portable\n * collections attributes and related files (/RF)\n */\nvar FileSpec = (function FileSpecClosure() {\n  // eslint-disable-next-line no-shadow\n  function FileSpec(root, xref) {\n    if (!root || !isDict(root)) {\n      return;\n    }\n    this.xref = xref;\n    this.root = root;\n    if (root.has(\"FS\")) {\n      this.fs = root.get(\"FS\");\n    }\n    this.description = root.has(\"Desc\")\n      ? stringToPDFString(root.get(\"Desc\"))\n      : \"\";\n    if (root.has(\"RF\")) {\n      warn(\"Related file specifications are not supported\");\n    }\n    this.contentAvailable = true;\n    if (!root.has(\"EF\")) {\n      this.contentAvailable = false;\n      warn(\"Non-embedded file specifications are not supported\");\n    }\n  }\n\n  function pickPlatformItem(dict) {\n    // Look for the filename in this order:\n    // UF, F, Unix, Mac, DOS\n    if (dict.has(\"UF\")) {\n      return dict.get(\"UF\");\n    } else if (dict.has(\"F\")) {\n      return dict.get(\"F\");\n    } else if (dict.has(\"Unix\")) {\n      return dict.get(\"Unix\");\n    } else if (dict.has(\"Mac\")) {\n      return dict.get(\"Mac\");\n    } else if (dict.has(\"DOS\")) {\n      return dict.get(\"DOS\");\n    }\n    return null;\n  }\n\n  FileSpec.prototype = {\n    get filename() {\n      if (!this._filename && this.root) {\n        var filename = pickPlatformItem(this.root) || \"unnamed\";\n        this._filename = stringToPDFString(filename)\n          .replace(/\\\\\\\\/g, \"\\\\\")\n          .replace(/\\\\\\//g, \"/\")\n          .replace(/\\\\/g, \"/\");\n      }\n      return this._filename;\n    },\n    get content() {\n      if (!this.contentAvailable) {\n        return null;\n      }\n      if (!this.contentRef && this.root) {\n        this.contentRef = pickPlatformItem(this.root.get(\"EF\"));\n      }\n      var content = null;\n      if (this.contentRef) {\n        var xref = this.xref;\n        var fileObj = xref.fetchIfRef(this.contentRef);\n        if (fileObj && isStream(fileObj)) {\n          content = fileObj.getBytes();\n        } else {\n          warn(\n            \"Embedded file specification points to non-existing/invalid \" +\n              \"content\"\n          );\n        }\n      } else {\n        warn(\"Embedded file specification does not have a content\");\n      }\n      return content;\n    },\n    get serializable() {\n      return {\n        filename: this.filename,\n        content: this.content,\n      };\n    },\n  };\n  return FileSpec;\n})();\n\n/**\n * A helper for loading missing data in `Dict` graphs. It traverses the graph\n * depth first and queues up any objects that have missing data. Once it has\n * has traversed as many objects that are available it attempts to bundle the\n * missing data requests and then resume from the nodes that weren't ready.\n *\n * NOTE: It provides protection from circular references by keeping track of\n * loaded references. However, you must be careful not to load any graphs\n * that have references to the catalog or other pages since that will cause the\n * entire PDF document object graph to be traversed.\n */\nconst ObjectLoader = (function () {\n  function mayHaveChildren(value) {\n    return (\n      value instanceof Ref ||\n      value instanceof Dict ||\n      Array.isArray(value) ||\n      isStream(value)\n    );\n  }\n\n  function addChildren(node, nodesToVisit) {\n    if (node instanceof Dict || isStream(node)) {\n      const dict = node instanceof Dict ? node : node.dict;\n      const dictKeys = dict.getKeys();\n      for (let i = 0, ii = dictKeys.length; i < ii; i++) {\n        const rawValue = dict.getRaw(dictKeys[i]);\n        if (mayHaveChildren(rawValue)) {\n          nodesToVisit.push(rawValue);\n        }\n      }\n    } else if (Array.isArray(node)) {\n      for (let i = 0, ii = node.length; i < ii; i++) {\n        const value = node[i];\n        if (mayHaveChildren(value)) {\n          nodesToVisit.push(value);\n        }\n      }\n    }\n  }\n\n  // eslint-disable-next-line no-shadow\n  function ObjectLoader(dict, keys, xref) {\n    this.dict = dict;\n    this.keys = keys;\n    this.xref = xref;\n    this.refSet = null;\n  }\n\n  ObjectLoader.prototype = {\n    async load() {\n      // Don't walk the graph if all the data is already loaded; note that only\n      // `ChunkedStream` instances have a `allChunksLoaded` method.\n      if (\n        !this.xref.stream.allChunksLoaded ||\n        this.xref.stream.allChunksLoaded()\n      ) {\n        return undefined;\n      }\n\n      const { keys, dict } = this;\n      this.refSet = new RefSet();\n      // Setup the initial nodes to visit.\n      const nodesToVisit = [];\n      for (let i = 0, ii = keys.length; i < ii; i++) {\n        const rawValue = dict.getRaw(keys[i]);\n        // Skip nodes that are guaranteed to be empty.\n        if (rawValue !== undefined) {\n          nodesToVisit.push(rawValue);\n        }\n      }\n      return this._walk(nodesToVisit);\n    },\n\n    async _walk(nodesToVisit) {\n      const nodesToRevisit = [];\n      const pendingRequests = [];\n      // DFS walk of the object graph.\n      while (nodesToVisit.length) {\n        let currentNode = nodesToVisit.pop();\n\n        // Only references or chunked streams can cause missing data exceptions.\n        if (currentNode instanceof Ref) {\n          // Skip nodes that have already been visited.\n          if (this.refSet.has(currentNode)) {\n            continue;\n          }\n          try {\n            this.refSet.put(currentNode);\n            currentNode = this.xref.fetch(currentNode);\n          } catch (ex) {\n            if (!(ex instanceof MissingDataException)) {\n              throw ex;\n            }\n            nodesToRevisit.push(currentNode);\n            pendingRequests.push({ begin: ex.begin, end: ex.end });\n          }\n        }\n        if (currentNode && currentNode.getBaseStreams) {\n          const baseStreams = currentNode.getBaseStreams();\n          let foundMissingData = false;\n          for (let i = 0, ii = baseStreams.length; i < ii; i++) {\n            const stream = baseStreams[i];\n            if (stream.allChunksLoaded && !stream.allChunksLoaded()) {\n              foundMissingData = true;\n              pendingRequests.push({ begin: stream.start, end: stream.end });\n            }\n          }\n          if (foundMissingData) {\n            nodesToRevisit.push(currentNode);\n          }\n        }\n\n        addChildren(currentNode, nodesToVisit);\n      }\n\n      if (pendingRequests.length) {\n        await this.xref.stream.manager.requestRanges(pendingRequests);\n\n        for (let i = 0, ii = nodesToRevisit.length; i < ii; i++) {\n          const node = nodesToRevisit[i];\n          // Remove any reference nodes from the current `RefSet` so they\n          // aren't skipped when we revist them.\n          if (node instanceof Ref) {\n            this.refSet.remove(node);\n          }\n        }\n        return this._walk(nodesToRevisit);\n      }\n      // Everything is loaded.\n      this.refSet = null;\n      return undefined;\n    },\n  };\n\n  return ObjectLoader;\n})();\n\nexport { Catalog, ObjectLoader, XRef, FileSpec };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint no-var: error */\n\nimport {\n  Ascii85Stream,\n  AsciiHexStream,\n  FlateStream,\n  LZWStream,\n  NullStream,\n  PredictorStream,\n  RunLengthStream,\n} from \"./stream.js\";\nimport {\n  assert,\n  bytesToString,\n  FormatError,\n  info,\n  isNum,\n  StreamType,\n  warn,\n} from \"../shared/util.js\";\nimport {\n  Cmd,\n  Dict,\n  EOF,\n  isCmd,\n  isDict,\n  isEOF,\n  isName,\n  Name,\n  Ref,\n} from \"./primitives.js\";\nimport { isWhiteSpace, MissingDataException } from \"./core_utils.js\";\nimport { CCITTFaxStream } from \"./ccitt_stream.js\";\nimport { Jbig2Stream } from \"./jbig2_stream.js\";\nimport { JpegStream } from \"./jpeg_stream.js\";\nimport { JpxStream } from \"./jpx_stream.js\";\n\nconst MAX_LENGTH_TO_CACHE = 1000;\nconst MAX_ADLER32_LENGTH = 5552;\n\nfunction computeAdler32(bytes) {\n  const bytesLength = bytes.length;\n  if (\n    typeof PDFJSDev === \"undefined\" ||\n    PDFJSDev.test(\"!PRODUCTION || TESTING\")\n  ) {\n    assert(\n      bytesLength < MAX_ADLER32_LENGTH,\n      'computeAdler32: Unsupported \"bytes\" length.'\n    );\n  }\n  let a = 1,\n    b = 0;\n  for (let i = 0; i < bytesLength; ++i) {\n    // No modulo required in the loop if `bytesLength < 5552`.\n    a += bytes[i] & 0xff;\n    b += a;\n  }\n  return (b % 65521 << 16) | a % 65521;\n}\n\nclass Parser {\n  constructor({ lexer, xref, allowStreams = false, recoveryMode = false }) {\n    this.lexer = lexer;\n    this.xref = xref;\n    this.allowStreams = allowStreams;\n    this.recoveryMode = recoveryMode;\n\n    this.imageCache = Object.create(null);\n    this.refill();\n  }\n\n  refill() {\n    this.buf1 = this.lexer.getObj();\n    this.buf2 = this.lexer.getObj();\n  }\n\n  shift() {\n    if (this.buf2 instanceof Cmd && this.buf2.cmd === \"ID\") {\n      this.buf1 = this.buf2;\n      this.buf2 = null;\n    } else {\n      this.buf1 = this.buf2;\n      this.buf2 = this.lexer.getObj();\n    }\n  }\n\n  tryShift() {\n    try {\n      this.shift();\n      return true;\n    } catch (e) {\n      if (e instanceof MissingDataException) {\n        throw e;\n      }\n      // Upon failure, the caller should reset this.lexer.pos to a known good\n      // state and call this.shift() twice to reset the buffers.\n      return false;\n    }\n  }\n\n  getObj(cipherTransform = null) {\n    const buf1 = this.buf1;\n    this.shift();\n\n    if (buf1 instanceof Cmd) {\n      switch (buf1.cmd) {\n        case \"BI\": // inline image\n          return this.makeInlineImage(cipherTransform);\n        case \"[\": // array\n          const array = [];\n          while (!isCmd(this.buf1, \"]\") && !isEOF(this.buf1)) {\n            array.push(this.getObj(cipherTransform));\n          }\n          if (isEOF(this.buf1)) {\n            if (!this.recoveryMode) {\n              throw new FormatError(\"End of file inside array\");\n            }\n            return array;\n          }\n          this.shift();\n          return array;\n        case \"<<\": // dictionary or stream\n          const dict = new Dict(this.xref);\n          while (!isCmd(this.buf1, \">>\") && !isEOF(this.buf1)) {\n            if (!isName(this.buf1)) {\n              info(\"Malformed dictionary: key must be a name object\");\n              this.shift();\n              continue;\n            }\n\n            const key = this.buf1.name;\n            this.shift();\n            if (isEOF(this.buf1)) {\n              break;\n            }\n            dict.set(key, this.getObj(cipherTransform));\n          }\n          if (isEOF(this.buf1)) {\n            if (!this.recoveryMode) {\n              throw new FormatError(\"End of file inside dictionary\");\n            }\n            return dict;\n          }\n\n          // Stream objects are not allowed inside content streams or\n          // object streams.\n          if (isCmd(this.buf2, \"stream\")) {\n            return this.allowStreams\n              ? this.makeStream(dict, cipherTransform)\n              : dict;\n          }\n          this.shift();\n          return dict;\n        default:\n          // simple object\n          return buf1;\n      }\n    }\n\n    if (Number.isInteger(buf1)) {\n      // indirect reference or integer\n      if (Number.isInteger(this.buf1) && isCmd(this.buf2, \"R\")) {\n        const ref = Ref.get(buf1, this.buf1);\n        this.shift();\n        this.shift();\n        return ref;\n      }\n      return buf1;\n    }\n\n    if (typeof buf1 === \"string\") {\n      if (cipherTransform) {\n        return cipherTransform.decryptString(buf1);\n      }\n      return buf1;\n    }\n\n    // simple object\n    return buf1;\n  }\n\n  /**\n   * Find the end of the stream by searching for the /EI\\s/.\n   * @returns {number} The inline stream length.\n   */\n  findDefaultInlineStreamEnd(stream) {\n    const E = 0x45,\n      I = 0x49,\n      SPACE = 0x20,\n      LF = 0xa,\n      CR = 0xd;\n    const n = 10,\n      NUL = 0x0;\n    const startPos = stream.pos;\n    let state = 0,\n      ch,\n      maybeEIPos;\n    while ((ch = stream.getByte()) !== -1) {\n      if (state === 0) {\n        state = ch === E ? 1 : 0;\n      } else if (state === 1) {\n        state = ch === I ? 2 : 0;\n      } else {\n        assert(state === 2, \"findDefaultInlineStreamEnd - invalid state.\");\n        if (ch === SPACE || ch === LF || ch === CR) {\n          maybeEIPos = stream.pos;\n          // Let's check that the next `n` bytes are ASCII... just to be sure.\n          const followingBytes = stream.peekBytes(n);\n          for (let i = 0, ii = followingBytes.length; i < ii; i++) {\n            ch = followingBytes[i];\n            if (ch === NUL && followingBytes[i + 1] !== NUL) {\n              // NUL bytes are not supposed to occur *outside* of inline\n              // images, but some PDF generators violate that assumption,\n              // thus breaking the EI detection heuristics used below.\n              //\n              // However, we can't unconditionally treat NUL bytes as \"ASCII\",\n              // since that *could* result in inline images being truncated.\n              //\n              // To attempt to address this, we'll still treat any *sequence*\n              // of NUL bytes as non-ASCII, but for a *single* NUL byte we'll\n              // continue checking the `followingBytes` (fixes issue8823.pdf).\n              continue;\n            }\n            if (ch !== LF && ch !== CR && (ch < SPACE || ch > 0x7f)) {\n              // Not a LF, CR, SPACE or any visible ASCII character, i.e.\n              // it's binary stuff. Resetting the state.\n              state = 0;\n              break;\n            }\n          }\n          if (state === 2) {\n            break; // Finished!\n          }\n        } else {\n          state = 0;\n        }\n      }\n    }\n\n    if (ch === -1) {\n      warn(\n        \"findDefaultInlineStreamEnd: \" +\n          \"Reached the end of the stream without finding a valid EI marker\"\n      );\n      if (maybeEIPos) {\n        warn('... trying to recover by using the last \"EI\" occurrence.');\n        stream.skip(-(stream.pos - maybeEIPos)); // Reset the stream position.\n      }\n    }\n\n    let endOffset = 4;\n    stream.skip(-endOffset); // Set the stream position to just before \"EI\".\n    ch = stream.peekByte();\n    stream.skip(endOffset); // ... and remember to reset the stream position.\n\n    // Ensure that we don't accidentally truncate the inline image, when the\n    // data is immediately followed by the \"EI\" marker (fixes issue10388.pdf).\n    if (!isWhiteSpace(ch)) {\n      endOffset--;\n    }\n    return stream.pos - endOffset - startPos;\n  }\n\n  /**\n   * Find the EOI (end-of-image) marker 0xFFD9 of the stream.\n   * @returns {number} The inline stream length.\n   */\n  findDCTDecodeInlineStreamEnd(stream) {\n    const startPos = stream.pos;\n    let foundEOI = false,\n      b,\n      markerLength;\n    while ((b = stream.getByte()) !== -1) {\n      if (b !== 0xff) {\n        // Not a valid marker.\n        continue;\n      }\n      switch (stream.getByte()) {\n        case 0x00: // Byte stuffing.\n          // 0xFF00 appears to be a very common byte sequence in JPEG images.\n          break;\n\n        case 0xff: // Fill byte.\n          // Avoid skipping a valid marker, resetting the stream position.\n          stream.skip(-1);\n          break;\n\n        case 0xd9: // EOI\n          foundEOI = true;\n          break;\n\n        case 0xc0: // SOF0\n        case 0xc1: // SOF1\n        case 0xc2: // SOF2\n        case 0xc3: // SOF3\n        /* falls through */\n        case 0xc5: // SOF5\n        case 0xc6: // SOF6\n        case 0xc7: // SOF7\n        /* falls through */\n        case 0xc9: // SOF9\n        case 0xca: // SOF10\n        case 0xcb: // SOF11\n        /* falls through */\n        case 0xcd: // SOF13\n        case 0xce: // SOF14\n        case 0xcf: // SOF15\n        /* falls through */\n        case 0xc4: // DHT\n        case 0xcc: // DAC\n        /* falls through */\n        case 0xda: // SOS\n        case 0xdb: // DQT\n        case 0xdc: // DNL\n        case 0xdd: // DRI\n        case 0xde: // DHP\n        case 0xdf: // EXP\n        /* falls through */\n        case 0xe0: // APP0\n        case 0xe1: // APP1\n        case 0xe2: // APP2\n        case 0xe3: // APP3\n        case 0xe4: // APP4\n        case 0xe5: // APP5\n        case 0xe6: // APP6\n        case 0xe7: // APP7\n        case 0xe8: // APP8\n        case 0xe9: // APP9\n        case 0xea: // APP10\n        case 0xeb: // APP11\n        case 0xec: // APP12\n        case 0xed: // APP13\n        case 0xee: // APP14\n        case 0xef: // APP15\n        /* falls through */\n        case 0xfe: // COM\n          // The marker should be followed by the length of the segment.\n          markerLength = stream.getUint16();\n          if (markerLength > 2) {\n            // |markerLength| contains the byte length of the marker segment,\n            // including its own length (2 bytes) and excluding the marker.\n            stream.skip(markerLength - 2); // Jump to the next marker.\n          } else {\n            // The marker length is invalid, resetting the stream position.\n            stream.skip(-2);\n          }\n          break;\n      }\n      if (foundEOI) {\n        break;\n      }\n    }\n    const length = stream.pos - startPos;\n    if (b === -1) {\n      warn(\n        \"Inline DCTDecode image stream: \" +\n          \"EOI marker not found, searching for /EI/ instead.\"\n      );\n      stream.skip(-length); // Reset the stream position.\n      return this.findDefaultInlineStreamEnd(stream);\n    }\n    this.inlineStreamSkipEI(stream);\n    return length;\n  }\n\n  /**\n   * Find the EOD (end-of-data) marker '~>' (i.e. TILDE + GT) of the stream.\n   * @returns {number} The inline stream length.\n   */\n  findASCII85DecodeInlineStreamEnd(stream) {\n    const TILDE = 0x7e,\n      GT = 0x3e;\n    const startPos = stream.pos;\n    let ch;\n    while ((ch = stream.getByte()) !== -1) {\n      if (ch === TILDE) {\n        const tildePos = stream.pos;\n\n        ch = stream.peekByte();\n        // Handle corrupt PDF documents which contains whitespace \"inside\" of\n        // the EOD marker (fixes issue10614.pdf).\n        while (isWhiteSpace(ch)) {\n          stream.skip();\n          ch = stream.peekByte();\n        }\n        if (ch === GT) {\n          stream.skip();\n          break;\n        }\n        // Handle corrupt PDF documents which contains truncated EOD markers,\n        // where the '>' character is missing (fixes issue11385.pdf).\n        if (stream.pos > tildePos) {\n          const maybeEI = stream.peekBytes(2);\n          if (maybeEI[0] === /* E = */ 0x45 && maybeEI[1] === /* I = */ 0x49) {\n            break;\n          }\n        }\n      }\n    }\n    const length = stream.pos - startPos;\n    if (ch === -1) {\n      warn(\n        \"Inline ASCII85Decode image stream: \" +\n          \"EOD marker not found, searching for /EI/ instead.\"\n      );\n      stream.skip(-length); // Reset the stream position.\n      return this.findDefaultInlineStreamEnd(stream);\n    }\n    this.inlineStreamSkipEI(stream);\n    return length;\n  }\n\n  /**\n   * Find the EOD (end-of-data) marker '>' (i.e. GT) of the stream.\n   * @returns {number} The inline stream length.\n   */\n  findASCIIHexDecodeInlineStreamEnd(stream) {\n    const GT = 0x3e;\n    const startPos = stream.pos;\n    let ch;\n    while ((ch = stream.getByte()) !== -1) {\n      if (ch === GT) {\n        break;\n      }\n    }\n    const length = stream.pos - startPos;\n    if (ch === -1) {\n      warn(\n        \"Inline ASCIIHexDecode image stream: \" +\n          \"EOD marker not found, searching for /EI/ instead.\"\n      );\n      stream.skip(-length); // Reset the stream position.\n      return this.findDefaultInlineStreamEnd(stream);\n    }\n    this.inlineStreamSkipEI(stream);\n    return length;\n  }\n\n  /**\n   * Skip over the /EI/ for streams where we search for an EOD marker.\n   */\n  inlineStreamSkipEI(stream) {\n    const E = 0x45,\n      I = 0x49;\n    let state = 0,\n      ch;\n    while ((ch = stream.getByte()) !== -1) {\n      if (state === 0) {\n        state = ch === E ? 1 : 0;\n      } else if (state === 1) {\n        state = ch === I ? 2 : 0;\n      } else if (state === 2) {\n        break;\n      }\n    }\n  }\n\n  makeInlineImage(cipherTransform) {\n    const lexer = this.lexer;\n    const stream = lexer.stream;\n\n    // Parse dictionary.\n    const dict = new Dict(this.xref);\n    let dictLength;\n    while (!isCmd(this.buf1, \"ID\") && !isEOF(this.buf1)) {\n      if (!isName(this.buf1)) {\n        throw new FormatError(\"Dictionary key must be a name object\");\n      }\n      const key = this.buf1.name;\n      this.shift();\n      if (isEOF(this.buf1)) {\n        break;\n      }\n      dict.set(key, this.getObj(cipherTransform));\n    }\n    if (lexer.beginInlineImagePos !== -1) {\n      dictLength = stream.pos - lexer.beginInlineImagePos;\n    }\n\n    // Extract the name of the first (i.e. the current) image filter.\n    const filter = dict.get(\"Filter\", \"F\");\n    let filterName;\n    if (isName(filter)) {\n      filterName = filter.name;\n    } else if (Array.isArray(filter)) {\n      const filterZero = this.xref.fetchIfRef(filter[0]);\n      if (isName(filterZero)) {\n        filterName = filterZero.name;\n      }\n    }\n\n    // Parse image stream.\n    const startPos = stream.pos;\n    let length;\n    if (filterName === \"DCTDecode\" || filterName === \"DCT\") {\n      length = this.findDCTDecodeInlineStreamEnd(stream);\n    } else if (filterName === \"ASCII85Decode\" || filterName === \"A85\") {\n      length = this.findASCII85DecodeInlineStreamEnd(stream);\n    } else if (filterName === \"ASCIIHexDecode\" || filterName === \"AHx\") {\n      length = this.findASCIIHexDecodeInlineStreamEnd(stream);\n    } else {\n      length = this.findDefaultInlineStreamEnd(stream);\n    }\n    let imageStream = stream.makeSubStream(startPos, length, dict);\n\n    // Cache all images below the MAX_LENGTH_TO_CACHE threshold by their\n    // adler32 checksum.\n    let cacheKey;\n    if (length < MAX_LENGTH_TO_CACHE && dictLength < MAX_ADLER32_LENGTH) {\n      const imageBytes = imageStream.getBytes();\n      imageStream.reset();\n\n      const initialStreamPos = stream.pos;\n      // Set the stream position to the beginning of the dictionary data...\n      stream.pos = lexer.beginInlineImagePos;\n      // ... and fetch the bytes of the *entire* dictionary.\n      const dictBytes = stream.getBytes(dictLength);\n      // Finally, don't forget to reset the stream position.\n      stream.pos = initialStreamPos;\n\n      cacheKey = computeAdler32(imageBytes) + \"_\" + computeAdler32(dictBytes);\n\n      const cacheEntry = this.imageCache[cacheKey];\n      if (cacheEntry !== undefined) {\n        this.buf2 = Cmd.get(\"EI\");\n        this.shift();\n\n        cacheEntry.reset();\n        return cacheEntry;\n      }\n    }\n\n    if (cipherTransform) {\n      imageStream = cipherTransform.createStream(imageStream, length);\n    }\n\n    imageStream = this.filter(imageStream, dict, length);\n    imageStream.dict = dict;\n    if (cacheKey !== undefined) {\n      imageStream.cacheKey = `inline_${length}_${cacheKey}`;\n      this.imageCache[cacheKey] = imageStream;\n    }\n\n    this.buf2 = Cmd.get(\"EI\");\n    this.shift();\n\n    return imageStream;\n  }\n\n  _findStreamLength(startPos, signature) {\n    const { stream } = this.lexer;\n    stream.pos = startPos;\n\n    const SCAN_BLOCK_LENGTH = 2048;\n    const signatureLength = signature.length;\n\n    while (stream.pos < stream.end) {\n      const scanBytes = stream.peekBytes(SCAN_BLOCK_LENGTH);\n      const scanLength = scanBytes.length - signatureLength;\n\n      if (scanLength <= 0) {\n        break;\n      }\n      let pos = 0;\n      while (pos < scanLength) {\n        let j = 0;\n        while (j < signatureLength && scanBytes[pos + j] === signature[j]) {\n          j++;\n        }\n        if (j >= signatureLength) {\n          // `signature` found.\n          stream.pos += pos;\n          return stream.pos - startPos;\n        }\n        pos++;\n      }\n      stream.pos += scanLength;\n    }\n    return -1;\n  }\n\n  makeStream(dict, cipherTransform) {\n    const lexer = this.lexer;\n    let stream = lexer.stream;\n\n    // Get the stream's start position.\n    lexer.skipToNextLine();\n    const startPos = stream.pos - 1;\n\n    // Get the length.\n    let length = dict.get(\"Length\");\n    if (!Number.isInteger(length)) {\n      info(`Bad length \"${length}\" in stream`);\n      length = 0;\n    }\n\n    // Skip over the stream data.\n    stream.pos = startPos + length;\n    lexer.nextChar();\n\n    // Shift '>>' and check whether the new object marks the end of the stream.\n    if (this.tryShift() && isCmd(this.buf2, \"endstream\")) {\n      this.shift(); // 'stream'\n    } else {\n      // Bad stream length, scanning for endstream command.\n      // prettier-ignore\n      const ENDSTREAM_SIGNATURE = new Uint8Array([\n        0x65, 0x6E, 0x64, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6D]);\n      let actualLength = this._findStreamLength(startPos, ENDSTREAM_SIGNATURE);\n      if (actualLength < 0) {\n        // Only allow limited truncation of the endstream signature,\n        // to prevent false positives.\n        const MAX_TRUNCATION = 1;\n        // Check if the PDF generator included truncated endstream commands,\n        // such as e.g. \"endstrea\" (fixes issue10004.pdf).\n        for (let i = 1; i <= MAX_TRUNCATION; i++) {\n          const end = ENDSTREAM_SIGNATURE.length - i;\n          const TRUNCATED_SIGNATURE = ENDSTREAM_SIGNATURE.slice(0, end);\n\n          const maybeLength = this._findStreamLength(\n            startPos,\n            TRUNCATED_SIGNATURE\n          );\n          if (maybeLength >= 0) {\n            // Ensure that the byte immediately following the truncated\n            // endstream command is a space, to prevent false positives.\n            const lastByte = stream.peekBytes(end + 1)[end];\n            if (!isWhiteSpace(lastByte)) {\n              break;\n            }\n            info(\n              `Found \"${bytesToString(TRUNCATED_SIGNATURE)}\" when ` +\n                \"searching for endstream command.\"\n            );\n            actualLength = maybeLength;\n            break;\n          }\n        }\n\n        if (actualLength < 0) {\n          throw new FormatError(\"Missing endstream command.\");\n        }\n      }\n      length = actualLength;\n\n      lexer.nextChar();\n      this.shift();\n      this.shift();\n    }\n    this.shift(); // 'endstream'\n\n    stream = stream.makeSubStream(startPos, length, dict);\n    if (cipherTransform) {\n      stream = cipherTransform.createStream(stream, length);\n    }\n    stream = this.filter(stream, dict, length);\n    stream.dict = dict;\n    return stream;\n  }\n\n  filter(stream, dict, length) {\n    let filter = dict.get(\"Filter\", \"F\");\n    let params = dict.get(\"DecodeParms\", \"DP\");\n\n    if (isName(filter)) {\n      if (Array.isArray(params)) {\n        warn(\n          \"/DecodeParms should not contain an Array, \" +\n            \"when /Filter contains a Name.\"\n        );\n      }\n      return this.makeFilter(stream, filter.name, length, params);\n    }\n\n    let maybeLength = length;\n    if (Array.isArray(filter)) {\n      const filterArray = filter;\n      const paramsArray = params;\n      for (let i = 0, ii = filterArray.length; i < ii; ++i) {\n        filter = this.xref.fetchIfRef(filterArray[i]);\n        if (!isName(filter)) {\n          throw new FormatError(`Bad filter name \"${filter}\"`);\n        }\n\n        params = null;\n        if (Array.isArray(paramsArray) && i in paramsArray) {\n          params = this.xref.fetchIfRef(paramsArray[i]);\n        }\n        stream = this.makeFilter(stream, filter.name, maybeLength, params);\n        // After the first stream the `length` variable is invalid.\n        maybeLength = null;\n      }\n    }\n    return stream;\n  }\n\n  makeFilter(stream, name, maybeLength, params) {\n    // Since the 'Length' entry in the stream dictionary can be completely\n    // wrong, e.g. zero for non-empty streams, only skip parsing the stream\n    // when we can be absolutely certain that it actually is empty.\n    if (maybeLength === 0) {\n      warn(`Empty \"${name}\" stream.`);\n      return new NullStream();\n    }\n\n    try {\n      const xrefStreamStats = this.xref.stats.streamTypes;\n      if (name === \"FlateDecode\" || name === \"Fl\") {\n        xrefStreamStats[StreamType.FLATE] = true;\n        if (params) {\n          return new PredictorStream(\n            new FlateStream(stream, maybeLength),\n            maybeLength,\n            params\n          );\n        }\n        return new FlateStream(stream, maybeLength);\n      }\n      if (name === \"LZWDecode\" || name === \"LZW\") {\n        xrefStreamStats[StreamType.LZW] = true;\n        let earlyChange = 1;\n        if (params) {\n          if (params.has(\"EarlyChange\")) {\n            earlyChange = params.get(\"EarlyChange\");\n          }\n          return new PredictorStream(\n            new LZWStream(stream, maybeLength, earlyChange),\n            maybeLength,\n            params\n          );\n        }\n        return new LZWStream(stream, maybeLength, earlyChange);\n      }\n      if (name === \"DCTDecode\" || name === \"DCT\") {\n        xrefStreamStats[StreamType.DCT] = true;\n        return new JpegStream(stream, maybeLength, stream.dict, params);\n      }\n      if (name === \"JPXDecode\" || name === \"JPX\") {\n        xrefStreamStats[StreamType.JPX] = true;\n        return new JpxStream(stream, maybeLength, stream.dict, params);\n      }\n      if (name === \"ASCII85Decode\" || name === \"A85\") {\n        xrefStreamStats[StreamType.A85] = true;\n        return new Ascii85Stream(stream, maybeLength);\n      }\n      if (name === \"ASCIIHexDecode\" || name === \"AHx\") {\n        xrefStreamStats[StreamType.AHX] = true;\n        return new AsciiHexStream(stream, maybeLength);\n      }\n      if (name === \"CCITTFaxDecode\" || name === \"CCF\") {\n        xrefStreamStats[StreamType.CCF] = true;\n        return new CCITTFaxStream(stream, maybeLength, params);\n      }\n      if (name === \"RunLengthDecode\" || name === \"RL\") {\n        xrefStreamStats[StreamType.RLX] = true;\n        return new RunLengthStream(stream, maybeLength);\n      }\n      if (name === \"JBIG2Decode\") {\n        xrefStreamStats[StreamType.JBIG] = true;\n        return new Jbig2Stream(stream, maybeLength, stream.dict, params);\n      }\n      warn(`Filter \"${name}\" is not supported.`);\n      return stream;\n    } catch (ex) {\n      if (ex instanceof MissingDataException) {\n        throw ex;\n      }\n      warn(`Invalid stream: \"${ex}\"`);\n      return new NullStream();\n    }\n  }\n}\n\n// A '1' in this array means the character is white space. A '1' or\n// '2' means the character ends a name or command.\n// prettier-ignore\nconst specialChars = [\n  1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, // 0x\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 1x\n  1, 0, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 2, // 2x\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, // 3x\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 4x\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, // 5x\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 6x\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, // 7x\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 8x\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 9x\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // ax\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // bx\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // cx\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // dx\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // ex\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  // fx\n];\n\nfunction toHexDigit(ch) {\n  if (ch >= /* '0' = */ 0x30 && ch /* '9' = */ <= 0x39) {\n    return ch & 0x0f;\n  }\n  if (\n    (ch >= /* 'A' = */ 0x41 && ch <= /* 'F' = */ 0x46) ||\n    (ch >= /* 'a' = */ 0x61 && ch <= /* 'f' = */ 0x66)\n  ) {\n    return (ch & 0x0f) + 9;\n  }\n  return -1;\n}\n\nclass Lexer {\n  constructor(stream, knownCommands = null) {\n    this.stream = stream;\n    this.nextChar();\n\n    // While lexing, we build up many strings one char at a time. Using += for\n    // this can result in lots of garbage strings. It's better to build an\n    // array of single-char strings and then join() them together at the end.\n    // And reusing a single array (i.e. |this.strBuf|) over and over for this\n    // purpose uses less memory than using a new array for each string.\n    this.strBuf = [];\n\n    // The PDFs might have \"glued\" commands with other commands, operands or\n    // literals, e.g. \"q1\". The knownCommands is a dictionary of the valid\n    // commands and their prefixes. The prefixes are built the following way:\n    // if there a command that is a prefix of the other valid command or\n    // literal (e.g. 'f' and 'false') the following prefixes must be included,\n    // 'fa', 'fal', 'fals'. The prefixes are not needed, if the command has no\n    // other commands or literals as a prefix. The knowCommands is optional.\n    this.knownCommands = knownCommands;\n\n    this._hexStringNumWarn = 0;\n    this.beginInlineImagePos = -1;\n  }\n\n  nextChar() {\n    return (this.currentChar = this.stream.getByte());\n  }\n\n  peekChar() {\n    return this.stream.peekByte();\n  }\n\n  getNumber() {\n    let ch = this.currentChar;\n    let eNotation = false;\n    let divideBy = 0; // Different from 0 if it's a floating point value.\n    let sign = 0;\n\n    if (ch === /* '-' = */ 0x2d) {\n      sign = -1;\n      ch = this.nextChar();\n\n      if (ch === /* '-' = */ 0x2d) {\n        // Ignore double negative (this is consistent with Adobe Reader).\n        ch = this.nextChar();\n      }\n    } else if (ch === /* '+' = */ 0x2b) {\n      sign = 1;\n      ch = this.nextChar();\n    }\n    if (ch === /* LF = */ 0x0a || ch === /* CR = */ 0x0d) {\n      // Ignore line-breaks (this is consistent with Adobe Reader).\n      do {\n        ch = this.nextChar();\n      } while (ch === 0x0a || ch === 0x0d);\n    }\n    if (ch === /* '.' = */ 0x2e) {\n      divideBy = 10;\n      ch = this.nextChar();\n    }\n    if (ch < /* '0' = */ 0x30 || ch > /* '9' = */ 0x39) {\n      if (\n        divideBy === 10 &&\n        sign === 0 &&\n        (isWhiteSpace(ch) || ch === /* EOF = */ -1)\n      ) {\n        // This is consistent with Adobe Reader (fixes issue9252.pdf).\n        warn(\"Lexer.getNumber - treating a single decimal point as zero.\");\n        return 0;\n      }\n      throw new FormatError(\n        `Invalid number: ${String.fromCharCode(ch)} (charCode ${ch})`\n      );\n    }\n\n    sign = sign || 1;\n    let baseValue = ch - 0x30; // '0'\n    let powerValue = 0;\n    let powerValueSign = 1;\n\n    while ((ch = this.nextChar()) >= 0) {\n      if (ch >= /* '0' = */ 0x30 && ch <= /* '9' = */ 0x39) {\n        const currentDigit = ch - 0x30; // '0'\n        if (eNotation) {\n          // We are after an 'e' or 'E'.\n          powerValue = powerValue * 10 + currentDigit;\n        } else {\n          if (divideBy !== 0) {\n            // We are after a point.\n            divideBy *= 10;\n          }\n          baseValue = baseValue * 10 + currentDigit;\n        }\n      } else if (ch === /* '.' = */ 0x2e) {\n        if (divideBy === 0) {\n          divideBy = 1;\n        } else {\n          // A number can have only one dot.\n          break;\n        }\n      } else if (ch === /* '-' = */ 0x2d) {\n        // Ignore minus signs in the middle of numbers to match\n        // Adobe's behavior.\n        warn(\"Badly formatted number: minus sign in the middle\");\n      } else if (ch === /* 'E' = */ 0x45 || ch === /* 'e' = */ 0x65) {\n        // 'E' can be either a scientific notation or the beginning of a new\n        // operator.\n        ch = this.peekChar();\n        if (ch === /* '+' = */ 0x2b || ch === /* '-' = */ 0x2d) {\n          powerValueSign = ch === 0x2d ? -1 : 1;\n          this.nextChar(); // Consume the sign character.\n        } else if (ch < /* '0' = */ 0x30 || ch > /* '9' = */ 0x39) {\n          // The 'E' must be the beginning of a new operator.\n          break;\n        }\n        eNotation = true;\n      } else {\n        // The last character doesn't belong to us.\n        break;\n      }\n    }\n\n    if (divideBy !== 0) {\n      baseValue /= divideBy;\n    }\n    if (eNotation) {\n      baseValue *= 10 ** (powerValueSign * powerValue);\n    }\n    return sign * baseValue;\n  }\n\n  getString() {\n    let numParen = 1;\n    let done = false;\n    const strBuf = this.strBuf;\n    strBuf.length = 0;\n\n    let ch = this.nextChar();\n    while (true) {\n      let charBuffered = false;\n      switch (ch | 0) {\n        case -1:\n          warn(\"Unterminated string\");\n          done = true;\n          break;\n        case 0x28: // '('\n          ++numParen;\n          strBuf.push(\"(\");\n          break;\n        case 0x29: // ')'\n          if (--numParen === 0) {\n            this.nextChar(); // consume strings ')'\n            done = true;\n          } else {\n            strBuf.push(\")\");\n          }\n          break;\n        case 0x5c: // '\\\\'\n          ch = this.nextChar();\n          switch (ch) {\n            case -1:\n              warn(\"Unterminated string\");\n              done = true;\n              break;\n            case 0x6e: // 'n'\n              strBuf.push(\"\\n\");\n              break;\n            case 0x72: // 'r'\n              strBuf.push(\"\\r\");\n              break;\n            case 0x74: // 't'\n              strBuf.push(\"\\t\");\n              break;\n            case 0x62: // 'b'\n              strBuf.push(\"\\b\");\n              break;\n            case 0x66: // 'f'\n              strBuf.push(\"\\f\");\n              break;\n            case 0x5c: // '\\'\n            case 0x28: // '('\n            case 0x29: // ')'\n              strBuf.push(String.fromCharCode(ch));\n              break;\n            case 0x30: // '0'\n            case 0x31: // '1'\n            case 0x32: // '2'\n            case 0x33: // '3'\n            case 0x34: // '4'\n            case 0x35: // '5'\n            case 0x36: // '6'\n            case 0x37: // '7'\n              let x = ch & 0x0f;\n              ch = this.nextChar();\n              charBuffered = true;\n              if (ch >= /* '0' = */ 0x30 && ch <= /* '7' = */ 0x37) {\n                x = (x << 3) + (ch & 0x0f);\n                ch = this.nextChar();\n                if (ch >= /* '0' = */ 0x30 && ch /* '7' = */ <= 0x37) {\n                  charBuffered = false;\n                  x = (x << 3) + (ch & 0x0f);\n                }\n              }\n              strBuf.push(String.fromCharCode(x));\n              break;\n            case 0x0d: // CR\n              if (this.peekChar() === /* LF = */ 0x0a) {\n                this.nextChar();\n              }\n              break;\n            case 0x0a: // LF\n              break;\n            default:\n              strBuf.push(String.fromCharCode(ch));\n              break;\n          }\n          break;\n        default:\n          strBuf.push(String.fromCharCode(ch));\n          break;\n      }\n      if (done) {\n        break;\n      }\n      if (!charBuffered) {\n        ch = this.nextChar();\n      }\n    }\n    return strBuf.join(\"\");\n  }\n\n  getName() {\n    let ch, previousCh;\n    const strBuf = this.strBuf;\n    strBuf.length = 0;\n\n    while ((ch = this.nextChar()) >= 0 && !specialChars[ch]) {\n      if (ch === /* '#' = */ 0x23) {\n        ch = this.nextChar();\n        if (specialChars[ch]) {\n          warn(\n            \"Lexer_getName: \" +\n              \"NUMBER SIGN (#) should be followed by a hexadecimal number.\"\n          );\n          strBuf.push(\"#\");\n          break;\n        }\n        const x = toHexDigit(ch);\n        if (x !== -1) {\n          previousCh = ch;\n          ch = this.nextChar();\n          const x2 = toHexDigit(ch);\n          if (x2 === -1) {\n            warn(\n              `Lexer_getName: Illegal digit (${String.fromCharCode(ch)}) ` +\n                \"in hexadecimal number.\"\n            );\n            strBuf.push(\"#\", String.fromCharCode(previousCh));\n            if (specialChars[ch]) {\n              break;\n            }\n            strBuf.push(String.fromCharCode(ch));\n            continue;\n          }\n          strBuf.push(String.fromCharCode((x << 4) | x2));\n        } else {\n          strBuf.push(\"#\", String.fromCharCode(ch));\n        }\n      } else {\n        strBuf.push(String.fromCharCode(ch));\n      }\n    }\n    if (strBuf.length > 127) {\n      warn(`Name token is longer than allowed by the spec: ${strBuf.length}`);\n    }\n    return Name.get(strBuf.join(\"\"));\n  }\n\n  /**\n   * @private\n   */\n  _hexStringWarn(ch) {\n    const MAX_HEX_STRING_NUM_WARN = 5;\n\n    if (this._hexStringNumWarn++ === MAX_HEX_STRING_NUM_WARN) {\n      warn(\"getHexString - ignoring additional invalid characters.\");\n      return;\n    }\n    if (this._hexStringNumWarn > MAX_HEX_STRING_NUM_WARN) {\n      // Limit the number of warning messages printed for a `this.getHexString`\n      // invocation, since corrupt PDF documents may otherwise spam the console\n      // enough to affect general performance negatively.\n      return;\n    }\n    warn(`getHexString - ignoring invalid character: ${ch}`);\n  }\n\n  getHexString() {\n    const strBuf = this.strBuf;\n    strBuf.length = 0;\n    let ch = this.currentChar;\n    let isFirstHex = true;\n    let firstDigit, secondDigit;\n    this._hexStringNumWarn = 0;\n\n    while (true) {\n      if (ch < 0) {\n        warn(\"Unterminated hex string\");\n        break;\n      } else if (ch === /* '>' = */ 0x3e) {\n        this.nextChar();\n        break;\n      } else if (specialChars[ch] === 1) {\n        ch = this.nextChar();\n        continue;\n      } else {\n        if (isFirstHex) {\n          firstDigit = toHexDigit(ch);\n          if (firstDigit === -1) {\n            this._hexStringWarn(ch);\n            ch = this.nextChar();\n            continue;\n          }\n        } else {\n          secondDigit = toHexDigit(ch);\n          if (secondDigit === -1) {\n            this._hexStringWarn(ch);\n            ch = this.nextChar();\n            continue;\n          }\n          strBuf.push(String.fromCharCode((firstDigit << 4) | secondDigit));\n        }\n        isFirstHex = !isFirstHex;\n        ch = this.nextChar();\n      }\n    }\n    return strBuf.join(\"\");\n  }\n\n  getObj() {\n    // Skip whitespace and comments.\n    let comment = false;\n    let ch = this.currentChar;\n    while (true) {\n      if (ch < 0) {\n        return EOF;\n      }\n      if (comment) {\n        if (ch === /* LF = */ 0x0a || ch === /* CR = */ 0x0d) {\n          comment = false;\n        }\n      } else if (ch === /* '%' = */ 0x25) {\n        comment = true;\n      } else if (specialChars[ch] !== 1) {\n        break;\n      }\n      ch = this.nextChar();\n    }\n\n    // Start reading a token.\n    switch (ch | 0) {\n      case 0x30: // '0'\n      case 0x31: // '1'\n      case 0x32: // '2'\n      case 0x33: // '3'\n      case 0x34: // '4'\n      case 0x35: // '5'\n      case 0x36: // '6'\n      case 0x37: // '7'\n      case 0x38: // '8'\n      case 0x39: // '9'\n      case 0x2b: // '+'\n      case 0x2d: // '-'\n      case 0x2e: // '.'\n        return this.getNumber();\n      case 0x28: // '('\n        return this.getString();\n      case 0x2f: // '/'\n        return this.getName();\n      // array punctuation\n      case 0x5b: // '['\n        this.nextChar();\n        return Cmd.get(\"[\");\n      case 0x5d: // ']'\n        this.nextChar();\n        return Cmd.get(\"]\");\n      // hex string or dict punctuation\n      case 0x3c: // '<'\n        ch = this.nextChar();\n        if (ch === 0x3c) {\n          // dict punctuation\n          this.nextChar();\n          return Cmd.get(\"<<\");\n        }\n        return this.getHexString();\n      // dict punctuation\n      case 0x3e: // '>'\n        ch = this.nextChar();\n        if (ch === 0x3e) {\n          this.nextChar();\n          return Cmd.get(\">>\");\n        }\n        return Cmd.get(\">\");\n      case 0x7b: // '{'\n        this.nextChar();\n        return Cmd.get(\"{\");\n      case 0x7d: // '}'\n        this.nextChar();\n        return Cmd.get(\"}\");\n      case 0x29: // ')'\n        // Consume the current character in order to avoid permanently hanging\n        // the worker thread if `Lexer.getObject` is called from within a loop\n        // containing try-catch statements, since we would otherwise attempt\n        // to parse the *same* character over and over (fixes issue8061.pdf).\n        this.nextChar();\n        throw new FormatError(`Illegal character: ${ch}`);\n    }\n\n    // Start reading a command.\n    let str = String.fromCharCode(ch);\n    const knownCommands = this.knownCommands;\n    let knownCommandFound = knownCommands && knownCommands[str] !== undefined;\n    while ((ch = this.nextChar()) >= 0 && !specialChars[ch]) {\n      // Stop if a known command is found and next character does not make\n      // the string a command.\n      const possibleCommand = str + String.fromCharCode(ch);\n      if (knownCommandFound && knownCommands[possibleCommand] === undefined) {\n        break;\n      }\n      if (str.length === 128) {\n        throw new FormatError(`Command token too long: ${str.length}`);\n      }\n      str = possibleCommand;\n      knownCommandFound = knownCommands && knownCommands[str] !== undefined;\n    }\n    if (str === \"true\") {\n      return true;\n    }\n    if (str === \"false\") {\n      return false;\n    }\n    if (str === \"null\") {\n      return null;\n    }\n\n    if (str === \"BI\") {\n      // Keep track of the current stream position, since it's needed in order\n      // to correctly cache inline images; see `Parser.makeInlineImage`.\n      this.beginInlineImagePos = this.stream.pos;\n    }\n\n    return Cmd.get(str);\n  }\n\n  skipToNextLine() {\n    let ch = this.currentChar;\n    while (ch >= 0) {\n      if (ch === /* CR = */ 0x0d) {\n        ch = this.nextChar();\n        if (ch === /* LF = */ 0x0a) {\n          this.nextChar();\n        }\n        break;\n      } else if (ch === /* LF = */ 0x0a) {\n        this.nextChar();\n        break;\n      }\n      ch = this.nextChar();\n    }\n  }\n}\n\nclass Linearization {\n  static create(stream) {\n    function getInt(linDict, name, allowZeroValue = false) {\n      const obj = linDict.get(name);\n      if (Number.isInteger(obj) && (allowZeroValue ? obj >= 0 : obj > 0)) {\n        return obj;\n      }\n      throw new Error(\n        `The \"${name}\" parameter in the linearization ` +\n          \"dictionary is invalid.\"\n      );\n    }\n\n    function getHints(linDict) {\n      const hints = linDict.get(\"H\");\n      let hintsLength;\n\n      if (\n        Array.isArray(hints) &&\n        ((hintsLength = hints.length) === 2 || hintsLength === 4)\n      ) {\n        for (let index = 0; index < hintsLength; index++) {\n          const hint = hints[index];\n          if (!(Number.isInteger(hint) && hint > 0)) {\n            throw new Error(\n              `Hint (${index}) in the linearization dictionary is invalid.`\n            );\n          }\n        }\n        return hints;\n      }\n      throw new Error(\"Hint array in the linearization dictionary is invalid.\");\n    }\n\n    const parser = new Parser({\n      lexer: new Lexer(stream),\n      xref: null,\n    });\n    const obj1 = parser.getObj();\n    const obj2 = parser.getObj();\n    const obj3 = parser.getObj();\n    const linDict = parser.getObj();\n    let obj, length;\n    if (\n      !(\n        Number.isInteger(obj1) &&\n        Number.isInteger(obj2) &&\n        isCmd(obj3, \"obj\") &&\n        isDict(linDict) &&\n        isNum((obj = linDict.get(\"Linearized\"))) &&\n        obj > 0\n      )\n    ) {\n      return null; // No valid linearization dictionary found.\n    } else if ((length = getInt(linDict, \"L\")) !== stream.length) {\n      throw new Error(\n        'The \"L\" parameter in the linearization dictionary ' +\n          \"does not equal the stream length.\"\n      );\n    }\n    return {\n      length,\n      hints: getHints(linDict),\n      objectNumberFirst: getInt(linDict, \"O\"),\n      endFirst: getInt(linDict, \"E\"),\n      numPages: getInt(linDict, \"N\"),\n      mainXRefEntriesOffset: getInt(linDict, \"T\"),\n      pageFirst: linDict.has(\"P\")\n        ? getInt(linDict, \"P\", /* allowZeroValue = */ true)\n        : 0,\n    };\n  }\n}\n\nexport { Lexer, Linearization, Parser };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* Copyright 1996-2003 Glyph & Cog, LLC\n *\n * The flate stream implementation contained in this file is a JavaScript port\n * of XPDF's implementation, made available under the Apache 2.0 open source\n * license.\n */\n\nimport { FormatError, stringToBytes, unreachable } from \"../shared/util.js\";\nimport { isDict } from \"./primitives.js\";\nimport { isWhiteSpace } from \"./core_utils.js\";\n\nvar Stream = (function StreamClosure() {\n  // eslint-disable-next-line no-shadow\n  function Stream(arrayBuffer, start, length, dict) {\n    this.bytes =\n      arrayBuffer instanceof Uint8Array\n        ? arrayBuffer\n        : new Uint8Array(arrayBuffer);\n    this.start = start || 0;\n    this.pos = this.start;\n    this.end = start + length || this.bytes.length;\n    this.dict = dict;\n  }\n\n  // required methods for a stream. if a particular stream does not\n  // implement these, an error should be thrown\n  Stream.prototype = {\n    get length() {\n      return this.end - this.start;\n    },\n    get isEmpty() {\n      return this.length === 0;\n    },\n    getByte: function Stream_getByte() {\n      if (this.pos >= this.end) {\n        return -1;\n      }\n      return this.bytes[this.pos++];\n    },\n    getUint16: function Stream_getUint16() {\n      var b0 = this.getByte();\n      var b1 = this.getByte();\n      if (b0 === -1 || b1 === -1) {\n        return -1;\n      }\n      return (b0 << 8) + b1;\n    },\n    getInt32: function Stream_getInt32() {\n      var b0 = this.getByte();\n      var b1 = this.getByte();\n      var b2 = this.getByte();\n      var b3 = this.getByte();\n      return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\n    },\n    // Returns subarray of original buffer, should only be read.\n    getBytes(length, forceClamped = false) {\n      var bytes = this.bytes;\n      var pos = this.pos;\n      var strEnd = this.end;\n\n      if (!length) {\n        const subarray = bytes.subarray(pos, strEnd);\n        // `this.bytes` is always a `Uint8Array` here.\n        return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\n      }\n      var end = pos + length;\n      if (end > strEnd) {\n        end = strEnd;\n      }\n      this.pos = end;\n      const subarray = bytes.subarray(pos, end);\n      // `this.bytes` is always a `Uint8Array` here.\n      return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\n    },\n    peekByte: function Stream_peekByte() {\n      var peekedByte = this.getByte();\n      if (peekedByte !== -1) {\n        this.pos--;\n      }\n      return peekedByte;\n    },\n    peekBytes(length, forceClamped = false) {\n      var bytes = this.getBytes(length, forceClamped);\n      this.pos -= bytes.length;\n      return bytes;\n    },\n\n    getByteRange(begin, end) {\n      if (begin < 0) {\n        begin = 0;\n      }\n      if (end > this.end) {\n        end = this.end;\n      }\n      return this.bytes.subarray(begin, end);\n    },\n\n    skip: function Stream_skip(n) {\n      if (!n) {\n        n = 1;\n      }\n      this.pos += n;\n    },\n    reset: function Stream_reset() {\n      this.pos = this.start;\n    },\n    moveStart: function Stream_moveStart() {\n      this.start = this.pos;\n    },\n    makeSubStream: function Stream_makeSubStream(start, length, dict) {\n      return new Stream(this.bytes.buffer, start, length, dict);\n    },\n  };\n\n  return Stream;\n})();\n\nvar StringStream = (function StringStreamClosure() {\n  // eslint-disable-next-line no-shadow\n  function StringStream(str) {\n    const bytes = stringToBytes(str);\n    Stream.call(this, bytes);\n  }\n\n  StringStream.prototype = Stream.prototype;\n\n  return StringStream;\n})();\n\n// super class for the decoding streams\nvar DecodeStream = (function DecodeStreamClosure() {\n  // Lots of DecodeStreams are created whose buffers are never used.  For these\n  // we share a single empty buffer. This is (a) space-efficient and (b) avoids\n  // having special cases that would be required if we used |null| for an empty\n  // buffer.\n  var emptyBuffer = new Uint8Array(0);\n\n  // eslint-disable-next-line no-shadow\n  function DecodeStream(maybeMinBufferLength) {\n    this._rawMinBufferLength = maybeMinBufferLength || 0;\n\n    this.pos = 0;\n    this.bufferLength = 0;\n    this.eof = false;\n    this.buffer = emptyBuffer;\n    this.minBufferLength = 512;\n    if (maybeMinBufferLength) {\n      // Compute the first power of two that is as big as maybeMinBufferLength.\n      while (this.minBufferLength < maybeMinBufferLength) {\n        this.minBufferLength *= 2;\n      }\n    }\n  }\n\n  DecodeStream.prototype = {\n    get isEmpty() {\n      while (!this.eof && this.bufferLength === 0) {\n        this.readBlock();\n      }\n      return this.bufferLength === 0;\n    },\n    ensureBuffer: function DecodeStream_ensureBuffer(requested) {\n      var buffer = this.buffer;\n      if (requested <= buffer.byteLength) {\n        return buffer;\n      }\n      var size = this.minBufferLength;\n      while (size < requested) {\n        size *= 2;\n      }\n      var buffer2 = new Uint8Array(size);\n      buffer2.set(buffer);\n      return (this.buffer = buffer2);\n    },\n    getByte: function DecodeStream_getByte() {\n      var pos = this.pos;\n      while (this.bufferLength <= pos) {\n        if (this.eof) {\n          return -1;\n        }\n        this.readBlock();\n      }\n      return this.buffer[this.pos++];\n    },\n    getUint16: function DecodeStream_getUint16() {\n      var b0 = this.getByte();\n      var b1 = this.getByte();\n      if (b0 === -1 || b1 === -1) {\n        return -1;\n      }\n      return (b0 << 8) + b1;\n    },\n    getInt32: function DecodeStream_getInt32() {\n      var b0 = this.getByte();\n      var b1 = this.getByte();\n      var b2 = this.getByte();\n      var b3 = this.getByte();\n      return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\n    },\n    getBytes(length, forceClamped = false) {\n      var end,\n        pos = this.pos;\n\n      if (length) {\n        this.ensureBuffer(pos + length);\n        end = pos + length;\n\n        while (!this.eof && this.bufferLength < end) {\n          this.readBlock();\n        }\n        var bufEnd = this.bufferLength;\n        if (end > bufEnd) {\n          end = bufEnd;\n        }\n      } else {\n        while (!this.eof) {\n          this.readBlock();\n        }\n        end = this.bufferLength;\n      }\n\n      this.pos = end;\n      const subarray = this.buffer.subarray(pos, end);\n      // `this.buffer` is either a `Uint8Array` or `Uint8ClampedArray` here.\n      return forceClamped && !(subarray instanceof Uint8ClampedArray)\n        ? new Uint8ClampedArray(subarray)\n        : subarray;\n    },\n    peekByte: function DecodeStream_peekByte() {\n      var peekedByte = this.getByte();\n      if (peekedByte !== -1) {\n        this.pos--;\n      }\n      return peekedByte;\n    },\n    peekBytes(length, forceClamped = false) {\n      var bytes = this.getBytes(length, forceClamped);\n      this.pos -= bytes.length;\n      return bytes;\n    },\n    makeSubStream: function DecodeStream_makeSubStream(start, length, dict) {\n      var end = start + length;\n      while (this.bufferLength <= end && !this.eof) {\n        this.readBlock();\n      }\n      return new Stream(this.buffer, start, length, dict);\n    },\n\n    getByteRange(begin, end) {\n      unreachable(\"Should not call DecodeStream.getByteRange\");\n    },\n\n    skip: function DecodeStream_skip(n) {\n      if (!n) {\n        n = 1;\n      }\n      this.pos += n;\n    },\n    reset: function DecodeStream_reset() {\n      this.pos = 0;\n    },\n    getBaseStreams: function DecodeStream_getBaseStreams() {\n      if (this.str && this.str.getBaseStreams) {\n        return this.str.getBaseStreams();\n      }\n      return [];\n    },\n  };\n\n  return DecodeStream;\n})();\n\nvar StreamsSequenceStream = (function StreamsSequenceStreamClosure() {\n  // eslint-disable-next-line no-shadow\n  function StreamsSequenceStream(streams) {\n    this.streams = streams;\n\n    let maybeLength = 0;\n    for (let i = 0, ii = streams.length; i < ii; i++) {\n      const stream = streams[i];\n      if (stream instanceof DecodeStream) {\n        maybeLength += stream._rawMinBufferLength;\n      } else {\n        maybeLength += stream.length;\n      }\n    }\n    DecodeStream.call(this, maybeLength);\n  }\n\n  StreamsSequenceStream.prototype = Object.create(DecodeStream.prototype);\n\n  StreamsSequenceStream.prototype.readBlock = function streamSequenceStreamReadBlock() {\n    var streams = this.streams;\n    if (streams.length === 0) {\n      this.eof = true;\n      return;\n    }\n    var stream = streams.shift();\n    var chunk = stream.getBytes();\n    var bufferLength = this.bufferLength;\n    var newLength = bufferLength + chunk.length;\n    var buffer = this.ensureBuffer(newLength);\n    buffer.set(chunk, bufferLength);\n    this.bufferLength = newLength;\n  };\n\n  StreamsSequenceStream.prototype.getBaseStreams = function StreamsSequenceStream_getBaseStreams() {\n    var baseStreams = [];\n    for (var i = 0, ii = this.streams.length; i < ii; i++) {\n      var stream = this.streams[i];\n      if (stream.getBaseStreams) {\n        baseStreams.push(...stream.getBaseStreams());\n      }\n    }\n    return baseStreams;\n  };\n\n  return StreamsSequenceStream;\n})();\n\nvar FlateStream = (function FlateStreamClosure() {\n  // prettier-ignore\n  var codeLenCodeMap = new Int32Array([\n    16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15\n  ]);\n\n  // prettier-ignore\n  var lengthDecode = new Int32Array([\n    0x00003, 0x00004, 0x00005, 0x00006, 0x00007, 0x00008, 0x00009, 0x0000a,\n    0x1000b, 0x1000d, 0x1000f, 0x10011, 0x20013, 0x20017, 0x2001b, 0x2001f,\n    0x30023, 0x3002b, 0x30033, 0x3003b, 0x40043, 0x40053, 0x40063, 0x40073,\n    0x50083, 0x500a3, 0x500c3, 0x500e3, 0x00102, 0x00102, 0x00102\n  ]);\n\n  // prettier-ignore\n  var distDecode = new Int32Array([\n    0x00001, 0x00002, 0x00003, 0x00004, 0x10005, 0x10007, 0x20009, 0x2000d,\n    0x30011, 0x30019, 0x40021, 0x40031, 0x50041, 0x50061, 0x60081, 0x600c1,\n    0x70101, 0x70181, 0x80201, 0x80301, 0x90401, 0x90601, 0xa0801, 0xa0c01,\n    0xb1001, 0xb1801, 0xc2001, 0xc3001, 0xd4001, 0xd6001\n  ]);\n\n  // prettier-ignore\n  var fixedLitCodeTab = [new Int32Array([\n    0x70100, 0x80050, 0x80010, 0x80118, 0x70110, 0x80070, 0x80030, 0x900c0,\n    0x70108, 0x80060, 0x80020, 0x900a0, 0x80000, 0x80080, 0x80040, 0x900e0,\n    0x70104, 0x80058, 0x80018, 0x90090, 0x70114, 0x80078, 0x80038, 0x900d0,\n    0x7010c, 0x80068, 0x80028, 0x900b0, 0x80008, 0x80088, 0x80048, 0x900f0,\n    0x70102, 0x80054, 0x80014, 0x8011c, 0x70112, 0x80074, 0x80034, 0x900c8,\n    0x7010a, 0x80064, 0x80024, 0x900a8, 0x80004, 0x80084, 0x80044, 0x900e8,\n    0x70106, 0x8005c, 0x8001c, 0x90098, 0x70116, 0x8007c, 0x8003c, 0x900d8,\n    0x7010e, 0x8006c, 0x8002c, 0x900b8, 0x8000c, 0x8008c, 0x8004c, 0x900f8,\n    0x70101, 0x80052, 0x80012, 0x8011a, 0x70111, 0x80072, 0x80032, 0x900c4,\n    0x70109, 0x80062, 0x80022, 0x900a4, 0x80002, 0x80082, 0x80042, 0x900e4,\n    0x70105, 0x8005a, 0x8001a, 0x90094, 0x70115, 0x8007a, 0x8003a, 0x900d4,\n    0x7010d, 0x8006a, 0x8002a, 0x900b4, 0x8000a, 0x8008a, 0x8004a, 0x900f4,\n    0x70103, 0x80056, 0x80016, 0x8011e, 0x70113, 0x80076, 0x80036, 0x900cc,\n    0x7010b, 0x80066, 0x80026, 0x900ac, 0x80006, 0x80086, 0x80046, 0x900ec,\n    0x70107, 0x8005e, 0x8001e, 0x9009c, 0x70117, 0x8007e, 0x8003e, 0x900dc,\n    0x7010f, 0x8006e, 0x8002e, 0x900bc, 0x8000e, 0x8008e, 0x8004e, 0x900fc,\n    0x70100, 0x80051, 0x80011, 0x80119, 0x70110, 0x80071, 0x80031, 0x900c2,\n    0x70108, 0x80061, 0x80021, 0x900a2, 0x80001, 0x80081, 0x80041, 0x900e2,\n    0x70104, 0x80059, 0x80019, 0x90092, 0x70114, 0x80079, 0x80039, 0x900d2,\n    0x7010c, 0x80069, 0x80029, 0x900b2, 0x80009, 0x80089, 0x80049, 0x900f2,\n    0x70102, 0x80055, 0x80015, 0x8011d, 0x70112, 0x80075, 0x80035, 0x900ca,\n    0x7010a, 0x80065, 0x80025, 0x900aa, 0x80005, 0x80085, 0x80045, 0x900ea,\n    0x70106, 0x8005d, 0x8001d, 0x9009a, 0x70116, 0x8007d, 0x8003d, 0x900da,\n    0x7010e, 0x8006d, 0x8002d, 0x900ba, 0x8000d, 0x8008d, 0x8004d, 0x900fa,\n    0x70101, 0x80053, 0x80013, 0x8011b, 0x70111, 0x80073, 0x80033, 0x900c6,\n    0x70109, 0x80063, 0x80023, 0x900a6, 0x80003, 0x80083, 0x80043, 0x900e6,\n    0x70105, 0x8005b, 0x8001b, 0x90096, 0x70115, 0x8007b, 0x8003b, 0x900d6,\n    0x7010d, 0x8006b, 0x8002b, 0x900b6, 0x8000b, 0x8008b, 0x8004b, 0x900f6,\n    0x70103, 0x80057, 0x80017, 0x8011f, 0x70113, 0x80077, 0x80037, 0x900ce,\n    0x7010b, 0x80067, 0x80027, 0x900ae, 0x80007, 0x80087, 0x80047, 0x900ee,\n    0x70107, 0x8005f, 0x8001f, 0x9009e, 0x70117, 0x8007f, 0x8003f, 0x900de,\n    0x7010f, 0x8006f, 0x8002f, 0x900be, 0x8000f, 0x8008f, 0x8004f, 0x900fe,\n    0x70100, 0x80050, 0x80010, 0x80118, 0x70110, 0x80070, 0x80030, 0x900c1,\n    0x70108, 0x80060, 0x80020, 0x900a1, 0x80000, 0x80080, 0x80040, 0x900e1,\n    0x70104, 0x80058, 0x80018, 0x90091, 0x70114, 0x80078, 0x80038, 0x900d1,\n    0x7010c, 0x80068, 0x80028, 0x900b1, 0x80008, 0x80088, 0x80048, 0x900f1,\n    0x70102, 0x80054, 0x80014, 0x8011c, 0x70112, 0x80074, 0x80034, 0x900c9,\n    0x7010a, 0x80064, 0x80024, 0x900a9, 0x80004, 0x80084, 0x80044, 0x900e9,\n    0x70106, 0x8005c, 0x8001c, 0x90099, 0x70116, 0x8007c, 0x8003c, 0x900d9,\n    0x7010e, 0x8006c, 0x8002c, 0x900b9, 0x8000c, 0x8008c, 0x8004c, 0x900f9,\n    0x70101, 0x80052, 0x80012, 0x8011a, 0x70111, 0x80072, 0x80032, 0x900c5,\n    0x70109, 0x80062, 0x80022, 0x900a5, 0x80002, 0x80082, 0x80042, 0x900e5,\n    0x70105, 0x8005a, 0x8001a, 0x90095, 0x70115, 0x8007a, 0x8003a, 0x900d5,\n    0x7010d, 0x8006a, 0x8002a, 0x900b5, 0x8000a, 0x8008a, 0x8004a, 0x900f5,\n    0x70103, 0x80056, 0x80016, 0x8011e, 0x70113, 0x80076, 0x80036, 0x900cd,\n    0x7010b, 0x80066, 0x80026, 0x900ad, 0x80006, 0x80086, 0x80046, 0x900ed,\n    0x70107, 0x8005e, 0x8001e, 0x9009d, 0x70117, 0x8007e, 0x8003e, 0x900dd,\n    0x7010f, 0x8006e, 0x8002e, 0x900bd, 0x8000e, 0x8008e, 0x8004e, 0x900fd,\n    0x70100, 0x80051, 0x80011, 0x80119, 0x70110, 0x80071, 0x80031, 0x900c3,\n    0x70108, 0x80061, 0x80021, 0x900a3, 0x80001, 0x80081, 0x80041, 0x900e3,\n    0x70104, 0x80059, 0x80019, 0x90093, 0x70114, 0x80079, 0x80039, 0x900d3,\n    0x7010c, 0x80069, 0x80029, 0x900b3, 0x80009, 0x80089, 0x80049, 0x900f3,\n    0x70102, 0x80055, 0x80015, 0x8011d, 0x70112, 0x80075, 0x80035, 0x900cb,\n    0x7010a, 0x80065, 0x80025, 0x900ab, 0x80005, 0x80085, 0x80045, 0x900eb,\n    0x70106, 0x8005d, 0x8001d, 0x9009b, 0x70116, 0x8007d, 0x8003d, 0x900db,\n    0x7010e, 0x8006d, 0x8002d, 0x900bb, 0x8000d, 0x8008d, 0x8004d, 0x900fb,\n    0x70101, 0x80053, 0x80013, 0x8011b, 0x70111, 0x80073, 0x80033, 0x900c7,\n    0x70109, 0x80063, 0x80023, 0x900a7, 0x80003, 0x80083, 0x80043, 0x900e7,\n    0x70105, 0x8005b, 0x8001b, 0x90097, 0x70115, 0x8007b, 0x8003b, 0x900d7,\n    0x7010d, 0x8006b, 0x8002b, 0x900b7, 0x8000b, 0x8008b, 0x8004b, 0x900f7,\n    0x70103, 0x80057, 0x80017, 0x8011f, 0x70113, 0x80077, 0x80037, 0x900cf,\n    0x7010b, 0x80067, 0x80027, 0x900af, 0x80007, 0x80087, 0x80047, 0x900ef,\n    0x70107, 0x8005f, 0x8001f, 0x9009f, 0x70117, 0x8007f, 0x8003f, 0x900df,\n    0x7010f, 0x8006f, 0x8002f, 0x900bf, 0x8000f, 0x8008f, 0x8004f, 0x900ff\n  ]), 9];\n\n  // prettier-ignore\n  var fixedDistCodeTab = [new Int32Array([\n    0x50000, 0x50010, 0x50008, 0x50018, 0x50004, 0x50014, 0x5000c, 0x5001c,\n    0x50002, 0x50012, 0x5000a, 0x5001a, 0x50006, 0x50016, 0x5000e, 0x00000,\n    0x50001, 0x50011, 0x50009, 0x50019, 0x50005, 0x50015, 0x5000d, 0x5001d,\n    0x50003, 0x50013, 0x5000b, 0x5001b, 0x50007, 0x50017, 0x5000f, 0x00000\n  ]), 5];\n\n  // eslint-disable-next-line no-shadow\n  function FlateStream(str, maybeLength) {\n    this.str = str;\n    this.dict = str.dict;\n\n    var cmf = str.getByte();\n    var flg = str.getByte();\n    if (cmf === -1 || flg === -1) {\n      throw new FormatError(`Invalid header in flate stream: ${cmf}, ${flg}`);\n    }\n    if ((cmf & 0x0f) !== 0x08) {\n      throw new FormatError(\n        `Unknown compression method in flate stream: ${cmf}, ${flg}`\n      );\n    }\n    if (((cmf << 8) + flg) % 31 !== 0) {\n      throw new FormatError(`Bad FCHECK in flate stream: ${cmf}, ${flg}`);\n    }\n    if (flg & 0x20) {\n      throw new FormatError(`FDICT bit set in flate stream: ${cmf}, ${flg}`);\n    }\n\n    this.codeSize = 0;\n    this.codeBuf = 0;\n\n    DecodeStream.call(this, maybeLength);\n  }\n\n  FlateStream.prototype = Object.create(DecodeStream.prototype);\n\n  FlateStream.prototype.getBits = function FlateStream_getBits(bits) {\n    var str = this.str;\n    var codeSize = this.codeSize;\n    var codeBuf = this.codeBuf;\n\n    var b;\n    while (codeSize < bits) {\n      if ((b = str.getByte()) === -1) {\n        throw new FormatError(\"Bad encoding in flate stream\");\n      }\n      codeBuf |= b << codeSize;\n      codeSize += 8;\n    }\n    b = codeBuf & ((1 << bits) - 1);\n    this.codeBuf = codeBuf >> bits;\n    this.codeSize = codeSize -= bits;\n\n    return b;\n  };\n\n  FlateStream.prototype.getCode = function FlateStream_getCode(table) {\n    var str = this.str;\n    var codes = table[0];\n    var maxLen = table[1];\n    var codeSize = this.codeSize;\n    var codeBuf = this.codeBuf;\n\n    var b;\n    while (codeSize < maxLen) {\n      if ((b = str.getByte()) === -1) {\n        // premature end of stream. code might however still be valid.\n        // codeSize < codeLen check below guards against incomplete codeVal.\n        break;\n      }\n      codeBuf |= b << codeSize;\n      codeSize += 8;\n    }\n    var code = codes[codeBuf & ((1 << maxLen) - 1)];\n    var codeLen = code >> 16;\n    var codeVal = code & 0xffff;\n    if (codeLen < 1 || codeSize < codeLen) {\n      throw new FormatError(\"Bad encoding in flate stream\");\n    }\n    this.codeBuf = codeBuf >> codeLen;\n    this.codeSize = codeSize - codeLen;\n    return codeVal;\n  };\n\n  FlateStream.prototype.generateHuffmanTable = function flateStreamGenerateHuffmanTable(\n    lengths\n  ) {\n    var n = lengths.length;\n\n    // find max code length\n    var maxLen = 0;\n    var i;\n    for (i = 0; i < n; ++i) {\n      if (lengths[i] > maxLen) {\n        maxLen = lengths[i];\n      }\n    }\n\n    // build the table\n    var size = 1 << maxLen;\n    var codes = new Int32Array(size);\n    for (\n      var len = 1, code = 0, skip = 2;\n      len <= maxLen;\n      ++len, code <<= 1, skip <<= 1\n    ) {\n      for (var val = 0; val < n; ++val) {\n        if (lengths[val] === len) {\n          // bit-reverse the code\n          var code2 = 0;\n          var t = code;\n          for (i = 0; i < len; ++i) {\n            code2 = (code2 << 1) | (t & 1);\n            t >>= 1;\n          }\n\n          // fill the table entries\n          for (i = code2; i < size; i += skip) {\n            codes[i] = (len << 16) | val;\n          }\n          ++code;\n        }\n      }\n    }\n\n    return [codes, maxLen];\n  };\n\n  FlateStream.prototype.readBlock = function FlateStream_readBlock() {\n    var buffer, len;\n    var str = this.str;\n    // read block header\n    var hdr = this.getBits(3);\n    if (hdr & 1) {\n      this.eof = true;\n    }\n    hdr >>= 1;\n\n    if (hdr === 0) {\n      // uncompressed block\n      var b;\n\n      if ((b = str.getByte()) === -1) {\n        throw new FormatError(\"Bad block header in flate stream\");\n      }\n      var blockLen = b;\n      if ((b = str.getByte()) === -1) {\n        throw new FormatError(\"Bad block header in flate stream\");\n      }\n      blockLen |= b << 8;\n      if ((b = str.getByte()) === -1) {\n        throw new FormatError(\"Bad block header in flate stream\");\n      }\n      var check = b;\n      if ((b = str.getByte()) === -1) {\n        throw new FormatError(\"Bad block header in flate stream\");\n      }\n      check |= b << 8;\n      if (check !== (~blockLen & 0xffff) && (blockLen !== 0 || check !== 0)) {\n        // Ignoring error for bad \"empty\" block (see issue 1277)\n        throw new FormatError(\"Bad uncompressed block length in flate stream\");\n      }\n\n      this.codeBuf = 0;\n      this.codeSize = 0;\n\n      const bufferLength = this.bufferLength,\n        end = bufferLength + blockLen;\n      buffer = this.ensureBuffer(end);\n      this.bufferLength = end;\n\n      if (blockLen === 0) {\n        if (str.peekByte() === -1) {\n          this.eof = true;\n        }\n      } else {\n        const block = str.getBytes(blockLen);\n        buffer.set(block, bufferLength);\n        if (block.length < blockLen) {\n          this.eof = true;\n        }\n      }\n      return;\n    }\n\n    var litCodeTable;\n    var distCodeTable;\n    if (hdr === 1) {\n      // compressed block, fixed codes\n      litCodeTable = fixedLitCodeTab;\n      distCodeTable = fixedDistCodeTab;\n    } else if (hdr === 2) {\n      // compressed block, dynamic codes\n      var numLitCodes = this.getBits(5) + 257;\n      var numDistCodes = this.getBits(5) + 1;\n      var numCodeLenCodes = this.getBits(4) + 4;\n\n      // build the code lengths code table\n      var codeLenCodeLengths = new Uint8Array(codeLenCodeMap.length);\n\n      var i;\n      for (i = 0; i < numCodeLenCodes; ++i) {\n        codeLenCodeLengths[codeLenCodeMap[i]] = this.getBits(3);\n      }\n      var codeLenCodeTab = this.generateHuffmanTable(codeLenCodeLengths);\n\n      // build the literal and distance code tables\n      len = 0;\n      i = 0;\n      var codes = numLitCodes + numDistCodes;\n      var codeLengths = new Uint8Array(codes);\n      var bitsLength, bitsOffset, what;\n      while (i < codes) {\n        var code = this.getCode(codeLenCodeTab);\n        if (code === 16) {\n          bitsLength = 2;\n          bitsOffset = 3;\n          what = len;\n        } else if (code === 17) {\n          bitsLength = 3;\n          bitsOffset = 3;\n          what = len = 0;\n        } else if (code === 18) {\n          bitsLength = 7;\n          bitsOffset = 11;\n          what = len = 0;\n        } else {\n          codeLengths[i++] = len = code;\n          continue;\n        }\n\n        var repeatLength = this.getBits(bitsLength) + bitsOffset;\n        while (repeatLength-- > 0) {\n          codeLengths[i++] = what;\n        }\n      }\n\n      litCodeTable = this.generateHuffmanTable(\n        codeLengths.subarray(0, numLitCodes)\n      );\n      distCodeTable = this.generateHuffmanTable(\n        codeLengths.subarray(numLitCodes, codes)\n      );\n    } else {\n      throw new FormatError(\"Unknown block type in flate stream\");\n    }\n\n    buffer = this.buffer;\n    var limit = buffer ? buffer.length : 0;\n    var pos = this.bufferLength;\n    while (true) {\n      var code1 = this.getCode(litCodeTable);\n      if (code1 < 256) {\n        if (pos + 1 >= limit) {\n          buffer = this.ensureBuffer(pos + 1);\n          limit = buffer.length;\n        }\n        buffer[pos++] = code1;\n        continue;\n      }\n      if (code1 === 256) {\n        this.bufferLength = pos;\n        return;\n      }\n      code1 -= 257;\n      code1 = lengthDecode[code1];\n      var code2 = code1 >> 16;\n      if (code2 > 0) {\n        code2 = this.getBits(code2);\n      }\n      len = (code1 & 0xffff) + code2;\n      code1 = this.getCode(distCodeTable);\n      code1 = distDecode[code1];\n      code2 = code1 >> 16;\n      if (code2 > 0) {\n        code2 = this.getBits(code2);\n      }\n      var dist = (code1 & 0xffff) + code2;\n      if (pos + len >= limit) {\n        buffer = this.ensureBuffer(pos + len);\n        limit = buffer.length;\n      }\n      for (var k = 0; k < len; ++k, ++pos) {\n        buffer[pos] = buffer[pos - dist];\n      }\n    }\n  };\n\n  return FlateStream;\n})();\n\nvar PredictorStream = (function PredictorStreamClosure() {\n  // eslint-disable-next-line no-shadow\n  function PredictorStream(str, maybeLength, params) {\n    if (!isDict(params)) {\n      return str; // no prediction\n    }\n    var predictor = (this.predictor = params.get(\"Predictor\") || 1);\n\n    if (predictor <= 1) {\n      return str; // no prediction\n    }\n    if (predictor !== 2 && (predictor < 10 || predictor > 15)) {\n      throw new FormatError(`Unsupported predictor: ${predictor}`);\n    }\n\n    if (predictor === 2) {\n      this.readBlock = this.readBlockTiff;\n    } else {\n      this.readBlock = this.readBlockPng;\n    }\n\n    this.str = str;\n    this.dict = str.dict;\n\n    var colors = (this.colors = params.get(\"Colors\") || 1);\n    var bits = (this.bits = params.get(\"BitsPerComponent\") || 8);\n    var columns = (this.columns = params.get(\"Columns\") || 1);\n\n    this.pixBytes = (colors * bits + 7) >> 3;\n    this.rowBytes = (columns * colors * bits + 7) >> 3;\n\n    DecodeStream.call(this, maybeLength);\n    return this;\n  }\n\n  PredictorStream.prototype = Object.create(DecodeStream.prototype);\n\n  PredictorStream.prototype.readBlockTiff = function predictorStreamReadBlockTiff() {\n    var rowBytes = this.rowBytes;\n\n    var bufferLength = this.bufferLength;\n    var buffer = this.ensureBuffer(bufferLength + rowBytes);\n\n    var bits = this.bits;\n    var colors = this.colors;\n\n    var rawBytes = this.str.getBytes(rowBytes);\n    this.eof = !rawBytes.length;\n    if (this.eof) {\n      return;\n    }\n\n    var inbuf = 0,\n      outbuf = 0;\n    var inbits = 0,\n      outbits = 0;\n    var pos = bufferLength;\n    var i;\n\n    if (bits === 1 && colors === 1) {\n      // Optimized version of the loop in the \"else\"-branch\n      // for 1 bit-per-component and 1 color TIFF images.\n      for (i = 0; i < rowBytes; ++i) {\n        var c = rawBytes[i] ^ inbuf;\n        c ^= c >> 1;\n        c ^= c >> 2;\n        c ^= c >> 4;\n        inbuf = (c & 1) << 7;\n        buffer[pos++] = c;\n      }\n    } else if (bits === 8) {\n      for (i = 0; i < colors; ++i) {\n        buffer[pos++] = rawBytes[i];\n      }\n      for (; i < rowBytes; ++i) {\n        buffer[pos] = buffer[pos - colors] + rawBytes[i];\n        pos++;\n      }\n    } else if (bits === 16) {\n      var bytesPerPixel = colors * 2;\n      for (i = 0; i < bytesPerPixel; ++i) {\n        buffer[pos++] = rawBytes[i];\n      }\n      for (; i < rowBytes; i += 2) {\n        var sum =\n          ((rawBytes[i] & 0xff) << 8) +\n          (rawBytes[i + 1] & 0xff) +\n          ((buffer[pos - bytesPerPixel] & 0xff) << 8) +\n          (buffer[pos - bytesPerPixel + 1] & 0xff);\n        buffer[pos++] = (sum >> 8) & 0xff;\n        buffer[pos++] = sum & 0xff;\n      }\n    } else {\n      var compArray = new Uint8Array(colors + 1);\n      var bitMask = (1 << bits) - 1;\n      var j = 0,\n        k = bufferLength;\n      var columns = this.columns;\n      for (i = 0; i < columns; ++i) {\n        for (var kk = 0; kk < colors; ++kk) {\n          if (inbits < bits) {\n            inbuf = (inbuf << 8) | (rawBytes[j++] & 0xff);\n            inbits += 8;\n          }\n          compArray[kk] =\n            (compArray[kk] + (inbuf >> (inbits - bits))) & bitMask;\n          inbits -= bits;\n          outbuf = (outbuf << bits) | compArray[kk];\n          outbits += bits;\n          if (outbits >= 8) {\n            buffer[k++] = (outbuf >> (outbits - 8)) & 0xff;\n            outbits -= 8;\n          }\n        }\n      }\n      if (outbits > 0) {\n        buffer[k++] =\n          (outbuf << (8 - outbits)) + (inbuf & ((1 << (8 - outbits)) - 1));\n      }\n    }\n    this.bufferLength += rowBytes;\n  };\n\n  PredictorStream.prototype.readBlockPng = function predictorStreamReadBlockPng() {\n    var rowBytes = this.rowBytes;\n    var pixBytes = this.pixBytes;\n\n    var predictor = this.str.getByte();\n    var rawBytes = this.str.getBytes(rowBytes);\n    this.eof = !rawBytes.length;\n    if (this.eof) {\n      return;\n    }\n\n    var bufferLength = this.bufferLength;\n    var buffer = this.ensureBuffer(bufferLength + rowBytes);\n\n    var prevRow = buffer.subarray(bufferLength - rowBytes, bufferLength);\n    if (prevRow.length === 0) {\n      prevRow = new Uint8Array(rowBytes);\n    }\n\n    var i,\n      j = bufferLength,\n      up,\n      c;\n    switch (predictor) {\n      case 0:\n        for (i = 0; i < rowBytes; ++i) {\n          buffer[j++] = rawBytes[i];\n        }\n        break;\n      case 1:\n        for (i = 0; i < pixBytes; ++i) {\n          buffer[j++] = rawBytes[i];\n        }\n        for (; i < rowBytes; ++i) {\n          buffer[j] = (buffer[j - pixBytes] + rawBytes[i]) & 0xff;\n          j++;\n        }\n        break;\n      case 2:\n        for (i = 0; i < rowBytes; ++i) {\n          buffer[j++] = (prevRow[i] + rawBytes[i]) & 0xff;\n        }\n        break;\n      case 3:\n        for (i = 0; i < pixBytes; ++i) {\n          buffer[j++] = (prevRow[i] >> 1) + rawBytes[i];\n        }\n        for (; i < rowBytes; ++i) {\n          buffer[j] =\n            (((prevRow[i] + buffer[j - pixBytes]) >> 1) + rawBytes[i]) & 0xff;\n          j++;\n        }\n        break;\n      case 4:\n        // we need to save the up left pixels values. the simplest way\n        // is to create a new buffer\n        for (i = 0; i < pixBytes; ++i) {\n          up = prevRow[i];\n          c = rawBytes[i];\n          buffer[j++] = up + c;\n        }\n        for (; i < rowBytes; ++i) {\n          up = prevRow[i];\n          var upLeft = prevRow[i - pixBytes];\n          var left = buffer[j - pixBytes];\n          var p = left + up - upLeft;\n\n          var pa = p - left;\n          if (pa < 0) {\n            pa = -pa;\n          }\n          var pb = p - up;\n          if (pb < 0) {\n            pb = -pb;\n          }\n          var pc = p - upLeft;\n          if (pc < 0) {\n            pc = -pc;\n          }\n\n          c = rawBytes[i];\n          if (pa <= pb && pa <= pc) {\n            buffer[j++] = left + c;\n          } else if (pb <= pc) {\n            buffer[j++] = up + c;\n          } else {\n            buffer[j++] = upLeft + c;\n          }\n        }\n        break;\n      default:\n        throw new FormatError(`Unsupported predictor: ${predictor}`);\n    }\n    this.bufferLength += rowBytes;\n  };\n\n  return PredictorStream;\n})();\n\nvar DecryptStream = (function DecryptStreamClosure() {\n  // eslint-disable-next-line no-shadow\n  function DecryptStream(str, maybeLength, decrypt) {\n    this.str = str;\n    this.dict = str.dict;\n    this.decrypt = decrypt;\n    this.nextChunk = null;\n    this.initialized = false;\n\n    DecodeStream.call(this, maybeLength);\n  }\n\n  var chunkSize = 512;\n\n  DecryptStream.prototype = Object.create(DecodeStream.prototype);\n\n  DecryptStream.prototype.readBlock = function DecryptStream_readBlock() {\n    var chunk;\n    if (this.initialized) {\n      chunk = this.nextChunk;\n    } else {\n      chunk = this.str.getBytes(chunkSize);\n      this.initialized = true;\n    }\n    if (!chunk || chunk.length === 0) {\n      this.eof = true;\n      return;\n    }\n    this.nextChunk = this.str.getBytes(chunkSize);\n    var hasMoreData = this.nextChunk && this.nextChunk.length > 0;\n\n    var decrypt = this.decrypt;\n    chunk = decrypt(chunk, !hasMoreData);\n\n    var bufferLength = this.bufferLength;\n    var i,\n      n = chunk.length;\n    var buffer = this.ensureBuffer(bufferLength + n);\n    for (i = 0; i < n; i++) {\n      buffer[bufferLength++] = chunk[i];\n    }\n    this.bufferLength = bufferLength;\n  };\n\n  return DecryptStream;\n})();\n\nvar Ascii85Stream = (function Ascii85StreamClosure() {\n  // eslint-disable-next-line no-shadow\n  function Ascii85Stream(str, maybeLength) {\n    this.str = str;\n    this.dict = str.dict;\n    this.input = new Uint8Array(5);\n\n    // Most streams increase in size when decoded, but Ascii85 streams\n    // typically shrink by ~20%.\n    if (maybeLength) {\n      maybeLength = 0.8 * maybeLength;\n    }\n    DecodeStream.call(this, maybeLength);\n  }\n\n  Ascii85Stream.prototype = Object.create(DecodeStream.prototype);\n\n  Ascii85Stream.prototype.readBlock = function Ascii85Stream_readBlock() {\n    var TILDA_CHAR = 0x7e; // '~'\n    var Z_LOWER_CHAR = 0x7a; // 'z'\n    var EOF = -1;\n\n    var str = this.str;\n\n    var c = str.getByte();\n    while (isWhiteSpace(c)) {\n      c = str.getByte();\n    }\n\n    if (c === EOF || c === TILDA_CHAR) {\n      this.eof = true;\n      return;\n    }\n\n    var bufferLength = this.bufferLength,\n      buffer;\n    var i;\n\n    // special code for z\n    if (c === Z_LOWER_CHAR) {\n      buffer = this.ensureBuffer(bufferLength + 4);\n      for (i = 0; i < 4; ++i) {\n        buffer[bufferLength + i] = 0;\n      }\n      this.bufferLength += 4;\n    } else {\n      var input = this.input;\n      input[0] = c;\n      for (i = 1; i < 5; ++i) {\n        c = str.getByte();\n        while (isWhiteSpace(c)) {\n          c = str.getByte();\n        }\n\n        input[i] = c;\n\n        if (c === EOF || c === TILDA_CHAR) {\n          break;\n        }\n      }\n      buffer = this.ensureBuffer(bufferLength + i - 1);\n      this.bufferLength += i - 1;\n\n      // partial ending;\n      if (i < 5) {\n        for (; i < 5; ++i) {\n          input[i] = 0x21 + 84;\n        }\n        this.eof = true;\n      }\n      var t = 0;\n      for (i = 0; i < 5; ++i) {\n        t = t * 85 + (input[i] - 0x21);\n      }\n\n      for (i = 3; i >= 0; --i) {\n        buffer[bufferLength + i] = t & 0xff;\n        t >>= 8;\n      }\n    }\n  };\n\n  return Ascii85Stream;\n})();\n\nvar AsciiHexStream = (function AsciiHexStreamClosure() {\n  // eslint-disable-next-line no-shadow\n  function AsciiHexStream(str, maybeLength) {\n    this.str = str;\n    this.dict = str.dict;\n\n    this.firstDigit = -1;\n\n    // Most streams increase in size when decoded, but AsciiHex streams shrink\n    // by 50%.\n    if (maybeLength) {\n      maybeLength = 0.5 * maybeLength;\n    }\n    DecodeStream.call(this, maybeLength);\n  }\n\n  AsciiHexStream.prototype = Object.create(DecodeStream.prototype);\n\n  AsciiHexStream.prototype.readBlock = function AsciiHexStream_readBlock() {\n    var UPSTREAM_BLOCK_SIZE = 8000;\n    var bytes = this.str.getBytes(UPSTREAM_BLOCK_SIZE);\n    if (!bytes.length) {\n      this.eof = true;\n      return;\n    }\n\n    var maxDecodeLength = (bytes.length + 1) >> 1;\n    var buffer = this.ensureBuffer(this.bufferLength + maxDecodeLength);\n    var bufferLength = this.bufferLength;\n\n    var firstDigit = this.firstDigit;\n    for (var i = 0, ii = bytes.length; i < ii; i++) {\n      var ch = bytes[i],\n        digit;\n      if (ch >= /* '0' = */ 0x30 && ch <= /* '9' = */ 0x39) {\n        digit = ch & 0x0f;\n      } else if (\n        (ch >= /* 'A' = */ 0x41 && ch <= /* 'Z' = */ 0x46) ||\n        (ch >= /* 'a' = */ 0x61 && ch <= /* 'z' = */ 0x66)\n      ) {\n        digit = (ch & 0x0f) + 9;\n      } else if (ch === /* '>' = */ 0x3e) {\n        this.eof = true;\n        break;\n      } else {\n        // Probably whitespace, ignoring.\n        continue;\n      }\n      if (firstDigit < 0) {\n        firstDigit = digit;\n      } else {\n        buffer[bufferLength++] = (firstDigit << 4) | digit;\n        firstDigit = -1;\n      }\n    }\n    if (firstDigit >= 0 && this.eof) {\n      // incomplete byte\n      buffer[bufferLength++] = firstDigit << 4;\n      firstDigit = -1;\n    }\n    this.firstDigit = firstDigit;\n    this.bufferLength = bufferLength;\n  };\n\n  return AsciiHexStream;\n})();\n\nvar RunLengthStream = (function RunLengthStreamClosure() {\n  // eslint-disable-next-line no-shadow\n  function RunLengthStream(str, maybeLength) {\n    this.str = str;\n    this.dict = str.dict;\n\n    DecodeStream.call(this, maybeLength);\n  }\n\n  RunLengthStream.prototype = Object.create(DecodeStream.prototype);\n\n  RunLengthStream.prototype.readBlock = function RunLengthStream_readBlock() {\n    // The repeatHeader has following format. The first byte defines type of run\n    // and amount of bytes to repeat/copy: n = 0 through 127 - copy next n bytes\n    // (in addition to the second byte from the header), n = 129 through 255 -\n    // duplicate the second byte from the header (257 - n) times, n = 128 - end.\n    var repeatHeader = this.str.getBytes(2);\n    if (!repeatHeader || repeatHeader.length < 2 || repeatHeader[0] === 128) {\n      this.eof = true;\n      return;\n    }\n\n    var buffer;\n    var bufferLength = this.bufferLength;\n    var n = repeatHeader[0];\n    if (n < 128) {\n      // copy n bytes\n      buffer = this.ensureBuffer(bufferLength + n + 1);\n      buffer[bufferLength++] = repeatHeader[1];\n      if (n > 0) {\n        var source = this.str.getBytes(n);\n        buffer.set(source, bufferLength);\n        bufferLength += n;\n      }\n    } else {\n      n = 257 - n;\n      var b = repeatHeader[1];\n      buffer = this.ensureBuffer(bufferLength + n + 1);\n      for (var i = 0; i < n; i++) {\n        buffer[bufferLength++] = b;\n      }\n    }\n    this.bufferLength = bufferLength;\n  };\n\n  return RunLengthStream;\n})();\n\nvar LZWStream = (function LZWStreamClosure() {\n  // eslint-disable-next-line no-shadow\n  function LZWStream(str, maybeLength, earlyChange) {\n    this.str = str;\n    this.dict = str.dict;\n    this.cachedData = 0;\n    this.bitsCached = 0;\n\n    var maxLzwDictionarySize = 4096;\n    var lzwState = {\n      earlyChange,\n      codeLength: 9,\n      nextCode: 258,\n      dictionaryValues: new Uint8Array(maxLzwDictionarySize),\n      dictionaryLengths: new Uint16Array(maxLzwDictionarySize),\n      dictionaryPrevCodes: new Uint16Array(maxLzwDictionarySize),\n      currentSequence: new Uint8Array(maxLzwDictionarySize),\n      currentSequenceLength: 0,\n    };\n    for (var i = 0; i < 256; ++i) {\n      lzwState.dictionaryValues[i] = i;\n      lzwState.dictionaryLengths[i] = 1;\n    }\n    this.lzwState = lzwState;\n\n    DecodeStream.call(this, maybeLength);\n  }\n\n  LZWStream.prototype = Object.create(DecodeStream.prototype);\n\n  LZWStream.prototype.readBits = function LZWStream_readBits(n) {\n    var bitsCached = this.bitsCached;\n    var cachedData = this.cachedData;\n    while (bitsCached < n) {\n      var c = this.str.getByte();\n      if (c === -1) {\n        this.eof = true;\n        return null;\n      }\n      cachedData = (cachedData << 8) | c;\n      bitsCached += 8;\n    }\n    this.bitsCached = bitsCached -= n;\n    this.cachedData = cachedData;\n    this.lastCode = null;\n    return (cachedData >>> bitsCached) & ((1 << n) - 1);\n  };\n\n  LZWStream.prototype.readBlock = function LZWStream_readBlock() {\n    var blockSize = 512;\n    var estimatedDecodedSize = blockSize * 2,\n      decodedSizeDelta = blockSize;\n    var i, j, q;\n\n    var lzwState = this.lzwState;\n    if (!lzwState) {\n      return; // eof was found\n    }\n\n    var earlyChange = lzwState.earlyChange;\n    var nextCode = lzwState.nextCode;\n    var dictionaryValues = lzwState.dictionaryValues;\n    var dictionaryLengths = lzwState.dictionaryLengths;\n    var dictionaryPrevCodes = lzwState.dictionaryPrevCodes;\n    var codeLength = lzwState.codeLength;\n    var prevCode = lzwState.prevCode;\n    var currentSequence = lzwState.currentSequence;\n    var currentSequenceLength = lzwState.currentSequenceLength;\n\n    var decodedLength = 0;\n    var currentBufferLength = this.bufferLength;\n    var buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);\n\n    for (i = 0; i < blockSize; i++) {\n      var code = this.readBits(codeLength);\n      var hasPrev = currentSequenceLength > 0;\n      if (code < 256) {\n        currentSequence[0] = code;\n        currentSequenceLength = 1;\n      } else if (code >= 258) {\n        if (code < nextCode) {\n          currentSequenceLength = dictionaryLengths[code];\n          for (j = currentSequenceLength - 1, q = code; j >= 0; j--) {\n            currentSequence[j] = dictionaryValues[q];\n            q = dictionaryPrevCodes[q];\n          }\n        } else {\n          currentSequence[currentSequenceLength++] = currentSequence[0];\n        }\n      } else if (code === 256) {\n        codeLength = 9;\n        nextCode = 258;\n        currentSequenceLength = 0;\n        continue;\n      } else {\n        this.eof = true;\n        delete this.lzwState;\n        break;\n      }\n\n      if (hasPrev) {\n        dictionaryPrevCodes[nextCode] = prevCode;\n        dictionaryLengths[nextCode] = dictionaryLengths[prevCode] + 1;\n        dictionaryValues[nextCode] = currentSequence[0];\n        nextCode++;\n        codeLength =\n          (nextCode + earlyChange) & (nextCode + earlyChange - 1)\n            ? codeLength\n            : Math.min(\n                Math.log(nextCode + earlyChange) / 0.6931471805599453 + 1,\n                12\n              ) | 0;\n      }\n      prevCode = code;\n\n      decodedLength += currentSequenceLength;\n      if (estimatedDecodedSize < decodedLength) {\n        do {\n          estimatedDecodedSize += decodedSizeDelta;\n        } while (estimatedDecodedSize < decodedLength);\n        buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);\n      }\n      for (j = 0; j < currentSequenceLength; j++) {\n        buffer[currentBufferLength++] = currentSequence[j];\n      }\n    }\n    lzwState.nextCode = nextCode;\n    lzwState.codeLength = codeLength;\n    lzwState.prevCode = prevCode;\n    lzwState.currentSequenceLength = currentSequenceLength;\n\n    this.bufferLength = currentBufferLength;\n  };\n\n  return LZWStream;\n})();\n\nvar NullStream = (function NullStreamClosure() {\n  // eslint-disable-next-line no-shadow\n  function NullStream() {\n    Stream.call(this, new Uint8Array(0));\n  }\n\n  NullStream.prototype = Stream.prototype;\n\n  return NullStream;\n})();\n\nexport {\n  Ascii85Stream,\n  AsciiHexStream,\n  DecryptStream,\n  DecodeStream,\n  FlateStream,\n  NullStream,\n  PredictorStream,\n  RunLengthStream,\n  Stream,\n  StreamsSequenceStream,\n  StringStream,\n  LZWStream,\n};\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Dict, isDict } from \"./primitives.js\";\nimport { CCITTFaxDecoder } from \"./ccitt.js\";\nimport { DecodeStream } from \"./stream.js\";\n\nvar CCITTFaxStream = (function CCITTFaxStreamClosure() {\n  // eslint-disable-next-line no-shadow\n  function CCITTFaxStream(str, maybeLength, params) {\n    this.str = str;\n    this.dict = str.dict;\n\n    if (!isDict(params)) {\n      params = Dict.empty;\n    }\n\n    const source = {\n      next() {\n        return str.getByte();\n      },\n    };\n    this.ccittFaxDecoder = new CCITTFaxDecoder(source, {\n      K: params.get(\"K\"),\n      EndOfLine: params.get(\"EndOfLine\"),\n      EncodedByteAlign: params.get(\"EncodedByteAlign\"),\n      Columns: params.get(\"Columns\"),\n      Rows: params.get(\"Rows\"),\n      EndOfBlock: params.get(\"EndOfBlock\"),\n      BlackIs1: params.get(\"BlackIs1\"),\n    });\n\n    DecodeStream.call(this, maybeLength);\n  }\n\n  CCITTFaxStream.prototype = Object.create(DecodeStream.prototype);\n\n  CCITTFaxStream.prototype.readBlock = function () {\n    while (!this.eof) {\n      const c = this.ccittFaxDecoder.readNextChar();\n      if (c === -1) {\n        this.eof = true;\n        return;\n      }\n      this.ensureBuffer(this.bufferLength + 1);\n      this.buffer[this.bufferLength++] = c;\n    }\n  };\n\n  return CCITTFaxStream;\n})();\n\nexport { CCITTFaxStream };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* Copyright 1996-2003 Glyph & Cog, LLC\n *\n * The CCITT stream implementation contained in this file is a JavaScript port\n * of XPDF's implementation, made available under the Apache 2.0 open source\n * license.\n */\n\n/**\n * @typedef {Object} CCITTFaxDecoderSource\n * @property {function} next - Method that return one byte of data for decoding,\n *   or -1 when EOF is reached.\n */\n\nimport { info } from \"../shared/util.js\";\n\nconst CCITTFaxDecoder = (function CCITTFaxDecoder() {\n  const ccittEOL = -2;\n  const ccittEOF = -1;\n  const twoDimPass = 0;\n  const twoDimHoriz = 1;\n  const twoDimVert0 = 2;\n  const twoDimVertR1 = 3;\n  const twoDimVertL1 = 4;\n  const twoDimVertR2 = 5;\n  const twoDimVertL2 = 6;\n  const twoDimVertR3 = 7;\n  const twoDimVertL3 = 8;\n\n  // prettier-ignore\n  const twoDimTable = [\n    [-1, -1], [-1, -1],                   // 000000x\n    [7, twoDimVertL3],                    // 0000010\n    [7, twoDimVertR3],                    // 0000011\n    [6, twoDimVertL2], [6, twoDimVertL2], // 000010x\n    [6, twoDimVertR2], [6, twoDimVertR2], // 000011x\n    [4, twoDimPass], [4, twoDimPass],     // 0001xxx\n    [4, twoDimPass], [4, twoDimPass],\n    [4, twoDimPass], [4, twoDimPass],\n    [4, twoDimPass], [4, twoDimPass],\n    [3, twoDimHoriz], [3, twoDimHoriz],   // 001xxxx\n    [3, twoDimHoriz], [3, twoDimHoriz],\n    [3, twoDimHoriz], [3, twoDimHoriz],\n    [3, twoDimHoriz], [3, twoDimHoriz],\n    [3, twoDimHoriz], [3, twoDimHoriz],\n    [3, twoDimHoriz], [3, twoDimHoriz],\n    [3, twoDimHoriz], [3, twoDimHoriz],\n    [3, twoDimHoriz], [3, twoDimHoriz],\n    [3, twoDimVertL1], [3, twoDimVertL1], // 010xxxx\n    [3, twoDimVertL1], [3, twoDimVertL1],\n    [3, twoDimVertL1], [3, twoDimVertL1],\n    [3, twoDimVertL1], [3, twoDimVertL1],\n    [3, twoDimVertL1], [3, twoDimVertL1],\n    [3, twoDimVertL1], [3, twoDimVertL1],\n    [3, twoDimVertL1], [3, twoDimVertL1],\n    [3, twoDimVertL1], [3, twoDimVertL1],\n    [3, twoDimVertR1], [3, twoDimVertR1], // 011xxxx\n    [3, twoDimVertR1], [3, twoDimVertR1],\n    [3, twoDimVertR1], [3, twoDimVertR1],\n    [3, twoDimVertR1], [3, twoDimVertR1],\n    [3, twoDimVertR1], [3, twoDimVertR1],\n    [3, twoDimVertR1], [3, twoDimVertR1],\n    [3, twoDimVertR1], [3, twoDimVertR1],\n    [3, twoDimVertR1], [3, twoDimVertR1],\n    [1, twoDimVert0], [1, twoDimVert0],   // 1xxxxxx\n    [1, twoDimVert0], [1, twoDimVert0],\n    [1, twoDimVert0], [1, twoDimVert0],\n    [1, twoDimVert0], [1, twoDimVert0],\n    [1, twoDimVert0], [1, twoDimVert0],\n    [1, twoDimVert0], [1, twoDimVert0],\n    [1, twoDimVert0], [1, twoDimVert0],\n    [1, twoDimVert0], [1, twoDimVert0],\n    [1, twoDimVert0], [1, twoDimVert0],\n    [1, twoDimVert0], [1, twoDimVert0],\n    [1, twoDimVert0], [1, twoDimVert0],\n    [1, twoDimVert0], [1, twoDimVert0],\n    [1, twoDimVert0], [1, twoDimVert0],\n    [1, twoDimVert0], [1, twoDimVert0],\n    [1, twoDimVert0], [1, twoDimVert0],\n    [1, twoDimVert0], [1, twoDimVert0],\n    [1, twoDimVert0], [1, twoDimVert0],\n    [1, twoDimVert0], [1, twoDimVert0],\n    [1, twoDimVert0], [1, twoDimVert0],\n    [1, twoDimVert0], [1, twoDimVert0],\n    [1, twoDimVert0], [1, twoDimVert0],\n    [1, twoDimVert0], [1, twoDimVert0],\n    [1, twoDimVert0], [1, twoDimVert0],\n    [1, twoDimVert0], [1, twoDimVert0],\n    [1, twoDimVert0], [1, twoDimVert0],\n    [1, twoDimVert0], [1, twoDimVert0],\n    [1, twoDimVert0], [1, twoDimVert0],\n    [1, twoDimVert0], [1, twoDimVert0],\n    [1, twoDimVert0], [1, twoDimVert0],\n    [1, twoDimVert0], [1, twoDimVert0],\n    [1, twoDimVert0], [1, twoDimVert0],\n    [1, twoDimVert0], [1, twoDimVert0]\n  ];\n\n  // prettier-ignore\n  const whiteTable1 = [\n    [-1, -1],                               // 00000\n    [12, ccittEOL],                         // 00001\n    [-1, -1], [-1, -1],                     // 0001x\n    [-1, -1], [-1, -1], [-1, -1], [-1, -1], // 001xx\n    [-1, -1], [-1, -1], [-1, -1], [-1, -1], // 010xx\n    [-1, -1], [-1, -1], [-1, -1], [-1, -1], // 011xx\n    [11, 1792], [11, 1792],                 // 1000x\n    [12, 1984],                             // 10010\n    [12, 2048],                             // 10011\n    [12, 2112],                             // 10100\n    [12, 2176],                             // 10101\n    [12, 2240],                             // 10110\n    [12, 2304],                             // 10111\n    [11, 1856], [11, 1856],                 // 1100x\n    [11, 1920], [11, 1920],                 // 1101x\n    [12, 2368],                             // 11100\n    [12, 2432],                             // 11101\n    [12, 2496],                             // 11110\n    [12, 2560]                              // 11111\n  ];\n\n  // prettier-ignore\n  const whiteTable2 = [\n    [-1, -1], [-1, -1], [-1, -1], [-1, -1],     // 0000000xx\n    [8, 29], [8, 29],                           // 00000010x\n    [8, 30], [8, 30],                           // 00000011x\n    [8, 45], [8, 45],                           // 00000100x\n    [8, 46], [8, 46],                           // 00000101x\n    [7, 22], [7, 22], [7, 22], [7, 22],         // 0000011xx\n    [7, 23], [7, 23], [7, 23], [7, 23],         // 0000100xx\n    [8, 47], [8, 47],                           // 00001010x\n    [8, 48], [8, 48],                           // 00001011x\n    [6, 13], [6, 13], [6, 13], [6, 13],         // 000011xxx\n    [6, 13], [6, 13], [6, 13], [6, 13],\n    [7, 20], [7, 20], [7, 20], [7, 20],         // 0001000xx\n    [8, 33], [8, 33],                           // 00010010x\n    [8, 34], [8, 34],                           // 00010011x\n    [8, 35], [8, 35],                           // 00010100x\n    [8, 36], [8, 36],                           // 00010101x\n    [8, 37], [8, 37],                           // 00010110x\n    [8, 38], [8, 38],                           // 00010111x\n    [7, 19], [7, 19], [7, 19], [7, 19],         // 0001100xx\n    [8, 31], [8, 31],                           // 00011010x\n    [8, 32], [8, 32],                           // 00011011x\n    [6, 1], [6, 1], [6, 1], [6, 1],             // 000111xxx\n    [6, 1], [6, 1], [6, 1], [6, 1],\n    [6, 12], [6, 12], [6, 12], [6, 12],         // 001000xxx\n    [6, 12], [6, 12], [6, 12], [6, 12],\n    [8, 53], [8, 53],                           // 00100100x\n    [8, 54], [8, 54],                           // 00100101x\n    [7, 26], [7, 26], [7, 26], [7, 26],         // 0010011xx\n    [8, 39], [8, 39],                           // 00101000x\n    [8, 40], [8, 40],                           // 00101001x\n    [8, 41], [8, 41],                           // 00101010x\n    [8, 42], [8, 42],                           // 00101011x\n    [8, 43], [8, 43],                           // 00101100x\n    [8, 44], [8, 44],                           // 00101101x\n    [7, 21], [7, 21], [7, 21], [7, 21],         // 0010111xx\n    [7, 28], [7, 28], [7, 28], [7, 28],         // 0011000xx\n    [8, 61], [8, 61],                           // 00110010x\n    [8, 62], [8, 62],                           // 00110011x\n    [8, 63], [8, 63],                           // 00110100x\n    [8, 0], [8, 0],                             // 00110101x\n    [8, 320], [8, 320],                         // 00110110x\n    [8, 384], [8, 384],                         // 00110111x\n    [5, 10], [5, 10], [5, 10], [5, 10],         // 00111xxxx\n    [5, 10], [5, 10], [5, 10], [5, 10],\n    [5, 10], [5, 10], [5, 10], [5, 10],\n    [5, 10], [5, 10], [5, 10], [5, 10],\n    [5, 11], [5, 11], [5, 11], [5, 11],         // 01000xxxx\n    [5, 11], [5, 11], [5, 11], [5, 11],\n    [5, 11], [5, 11], [5, 11], [5, 11],\n    [5, 11], [5, 11], [5, 11], [5, 11],\n    [7, 27], [7, 27], [7, 27], [7, 27],         // 0100100xx\n    [8, 59], [8, 59],                           // 01001010x\n    [8, 60], [8, 60],                           // 01001011x\n    [9, 1472],                                  // 010011000\n    [9, 1536],                                  // 010011001\n    [9, 1600],                                  // 010011010\n    [9, 1728],                                  // 010011011\n    [7, 18], [7, 18], [7, 18], [7, 18],         // 0100111xx\n    [7, 24], [7, 24], [7, 24], [7, 24],         // 0101000xx\n    [8, 49], [8, 49],                           // 01010010x\n    [8, 50], [8, 50],                           // 01010011x\n    [8, 51], [8, 51],                           // 01010100x\n    [8, 52], [8, 52],                           // 01010101x\n    [7, 25], [7, 25], [7, 25], [7, 25],         // 0101011xx\n    [8, 55], [8, 55],                           // 01011000x\n    [8, 56], [8, 56],                           // 01011001x\n    [8, 57], [8, 57],                           // 01011010x\n    [8, 58], [8, 58],                           // 01011011x\n    [6, 192], [6, 192], [6, 192], [6, 192],     // 010111xxx\n    [6, 192], [6, 192], [6, 192], [6, 192],\n    [6, 1664], [6, 1664], [6, 1664], [6, 1664], // 011000xxx\n    [6, 1664], [6, 1664], [6, 1664], [6, 1664],\n    [8, 448], [8, 448],                         // 01100100x\n    [8, 512], [8, 512],                         // 01100101x\n    [9, 704],                                   // 011001100\n    [9, 768],                                   // 011001101\n    [8, 640], [8, 640],                         // 01100111x\n    [8, 576], [8, 576],                         // 01101000x\n    [9, 832],                                   // 011010010\n    [9, 896],                                   // 011010011\n    [9, 960],                                   // 011010100\n    [9, 1024],                                  // 011010101\n    [9, 1088],                                  // 011010110\n    [9, 1152],                                  // 011010111\n    [9, 1216],                                  // 011011000\n    [9, 1280],                                  // 011011001\n    [9, 1344],                                  // 011011010\n    [9, 1408],                                  // 011011011\n    [7, 256], [7, 256], [7, 256], [7, 256],     // 0110111xx\n    [4, 2], [4, 2], [4, 2], [4, 2],             // 0111xxxxx\n    [4, 2], [4, 2], [4, 2], [4, 2],\n    [4, 2], [4, 2], [4, 2], [4, 2],\n    [4, 2], [4, 2], [4, 2], [4, 2],\n    [4, 2], [4, 2], [4, 2], [4, 2],\n    [4, 2], [4, 2], [4, 2], [4, 2],\n    [4, 2], [4, 2], [4, 2], [4, 2],\n    [4, 2], [4, 2], [4, 2], [4, 2],\n    [4, 3], [4, 3], [4, 3], [4, 3],             // 1000xxxxx\n    [4, 3], [4, 3], [4, 3], [4, 3],\n    [4, 3], [4, 3], [4, 3], [4, 3],\n    [4, 3], [4, 3], [4, 3], [4, 3],\n    [4, 3], [4, 3], [4, 3], [4, 3],\n    [4, 3], [4, 3], [4, 3], [4, 3],\n    [4, 3], [4, 3], [4, 3], [4, 3],\n    [4, 3], [4, 3], [4, 3], [4, 3],\n    [5, 128], [5, 128], [5, 128], [5, 128],     // 10010xxxx\n    [5, 128], [5, 128], [5, 128], [5, 128],\n    [5, 128], [5, 128], [5, 128], [5, 128],\n    [5, 128], [5, 128], [5, 128], [5, 128],\n    [5, 8], [5, 8], [5, 8], [5, 8],             // 10011xxxx\n    [5, 8], [5, 8], [5, 8], [5, 8],\n    [5, 8], [5, 8], [5, 8], [5, 8],\n    [5, 8], [5, 8], [5, 8], [5, 8],\n    [5, 9], [5, 9], [5, 9], [5, 9],             // 10100xxxx\n    [5, 9], [5, 9], [5, 9], [5, 9],\n    [5, 9], [5, 9], [5, 9], [5, 9],\n    [5, 9], [5, 9], [5, 9], [5, 9],\n    [6, 16], [6, 16], [6, 16], [6, 16],         // 101010xxx\n    [6, 16], [6, 16], [6, 16], [6, 16],\n    [6, 17], [6, 17], [6, 17], [6, 17],         // 101011xxx\n    [6, 17], [6, 17], [6, 17], [6, 17],\n    [4, 4], [4, 4], [4, 4], [4, 4],             // 1011xxxxx\n    [4, 4], [4, 4], [4, 4], [4, 4],\n    [4, 4], [4, 4], [4, 4], [4, 4],\n    [4, 4], [4, 4], [4, 4], [4, 4],\n    [4, 4], [4, 4], [4, 4], [4, 4],\n    [4, 4], [4, 4], [4, 4], [4, 4],\n    [4, 4], [4, 4], [4, 4], [4, 4],\n    [4, 4], [4, 4], [4, 4], [4, 4],\n    [4, 5], [4, 5], [4, 5], [4, 5],             // 1100xxxxx\n    [4, 5], [4, 5], [4, 5], [4, 5],\n    [4, 5], [4, 5], [4, 5], [4, 5],\n    [4, 5], [4, 5], [4, 5], [4, 5],\n    [4, 5], [4, 5], [4, 5], [4, 5],\n    [4, 5], [4, 5], [4, 5], [4, 5],\n    [4, 5], [4, 5], [4, 5], [4, 5],\n    [4, 5], [4, 5], [4, 5], [4, 5],\n    [6, 14], [6, 14], [6, 14], [6, 14],         // 110100xxx\n    [6, 14], [6, 14], [6, 14], [6, 14],\n    [6, 15], [6, 15], [6, 15], [6, 15],         // 110101xxx\n    [6, 15], [6, 15], [6, 15], [6, 15],\n    [5, 64], [5, 64], [5, 64], [5, 64],         // 11011xxxx\n    [5, 64], [5, 64], [5, 64], [5, 64],\n    [5, 64], [5, 64], [5, 64], [5, 64],\n    [5, 64], [5, 64], [5, 64], [5, 64],\n    [4, 6], [4, 6], [4, 6], [4, 6],             // 1110xxxxx\n    [4, 6], [4, 6], [4, 6], [4, 6],\n    [4, 6], [4, 6], [4, 6], [4, 6],\n    [4, 6], [4, 6], [4, 6], [4, 6],\n    [4, 6], [4, 6], [4, 6], [4, 6],\n    [4, 6], [4, 6], [4, 6], [4, 6],\n    [4, 6], [4, 6], [4, 6], [4, 6],\n    [4, 6], [4, 6], [4, 6], [4, 6],\n    [4, 7], [4, 7], [4, 7], [4, 7],             // 1111xxxxx\n    [4, 7], [4, 7], [4, 7], [4, 7],\n    [4, 7], [4, 7], [4, 7], [4, 7],\n    [4, 7], [4, 7], [4, 7], [4, 7],\n    [4, 7], [4, 7], [4, 7], [4, 7],\n    [4, 7], [4, 7], [4, 7], [4, 7],\n    [4, 7], [4, 7], [4, 7], [4, 7],\n    [4, 7], [4, 7], [4, 7], [4, 7]\n  ];\n\n  // prettier-ignore\n  const blackTable1 = [\n    [-1, -1], [-1, -1],                             // 000000000000x\n    [12, ccittEOL], [12, ccittEOL],                 // 000000000001x\n    [-1, -1], [-1, -1], [-1, -1], [-1, -1],         // 00000000001xx\n    [-1, -1], [-1, -1], [-1, -1], [-1, -1],         // 00000000010xx\n    [-1, -1], [-1, -1], [-1, -1], [-1, -1],         // 00000000011xx\n    [-1, -1], [-1, -1], [-1, -1], [-1, -1],         // 00000000100xx\n    [-1, -1], [-1, -1], [-1, -1], [-1, -1],         // 00000000101xx\n    [-1, -1], [-1, -1], [-1, -1], [-1, -1],         // 00000000110xx\n    [-1, -1], [-1, -1], [-1, -1], [-1, -1],         // 00000000111xx\n    [11, 1792], [11, 1792], [11, 1792], [11, 1792], // 00000001000xx\n    [12, 1984], [12, 1984],                         // 000000010010x\n    [12, 2048], [12, 2048],                         // 000000010011x\n    [12, 2112], [12, 2112],                         // 000000010100x\n    [12, 2176], [12, 2176],                         // 000000010101x\n    [12, 2240], [12, 2240],                         // 000000010110x\n    [12, 2304], [12, 2304],                         // 000000010111x\n    [11, 1856], [11, 1856], [11, 1856], [11, 1856], // 00000001100xx\n    [11, 1920], [11, 1920], [11, 1920], [11, 1920], // 00000001101xx\n    [12, 2368], [12, 2368],                         // 000000011100x\n    [12, 2432], [12, 2432],                         // 000000011101x\n    [12, 2496], [12, 2496],                         // 000000011110x\n    [12, 2560], [12, 2560],                         // 000000011111x\n    [10, 18], [10, 18], [10, 18], [10, 18],         // 0000001000xxx\n    [10, 18], [10, 18], [10, 18], [10, 18],\n    [12, 52], [12, 52],                             // 000000100100x\n    [13, 640],                                      // 0000001001010\n    [13, 704],                                      // 0000001001011\n    [13, 768],                                      // 0000001001100\n    [13, 832],                                      // 0000001001101\n    [12, 55], [12, 55],                             // 000000100111x\n    [12, 56], [12, 56],                             // 000000101000x\n    [13, 1280],                                     // 0000001010010\n    [13, 1344],                                     // 0000001010011\n    [13, 1408],                                     // 0000001010100\n    [13, 1472],                                     // 0000001010101\n    [12, 59], [12, 59],                             // 000000101011x\n    [12, 60], [12, 60],                             // 000000101100x\n    [13, 1536],                                     // 0000001011010\n    [13, 1600],                                     // 0000001011011\n    [11, 24], [11, 24], [11, 24], [11, 24],         // 00000010111xx\n    [11, 25], [11, 25], [11, 25], [11, 25],         // 00000011000xx\n    [13, 1664],                                     // 0000001100100\n    [13, 1728],                                     // 0000001100101\n    [12, 320], [12, 320],                           // 000000110011x\n    [12, 384], [12, 384],                           // 000000110100x\n    [12, 448], [12, 448],                           // 000000110101x\n    [13, 512],                                      // 0000001101100\n    [13, 576],                                      // 0000001101101\n    [12, 53], [12, 53],                             // 000000110111x\n    [12, 54], [12, 54],                             // 000000111000x\n    [13, 896],                                      // 0000001110010\n    [13, 960],                                      // 0000001110011\n    [13, 1024],                                     // 0000001110100\n    [13, 1088],                                     // 0000001110101\n    [13, 1152],                                     // 0000001110110\n    [13, 1216],                                     // 0000001110111\n    [10, 64], [10, 64], [10, 64], [10, 64],         // 0000001111xxx\n    [10, 64], [10, 64], [10, 64], [10, 64]\n  ];\n\n  // prettier-ignore\n  const blackTable2 = [\n    [8, 13], [8, 13], [8, 13], [8, 13],     // 00000100xxxx\n    [8, 13], [8, 13], [8, 13], [8, 13],\n    [8, 13], [8, 13], [8, 13], [8, 13],\n    [8, 13], [8, 13], [8, 13], [8, 13],\n    [11, 23], [11, 23],                     // 00000101000x\n    [12, 50],                               // 000001010010\n    [12, 51],                               // 000001010011\n    [12, 44],                               // 000001010100\n    [12, 45],                               // 000001010101\n    [12, 46],                               // 000001010110\n    [12, 47],                               // 000001010111\n    [12, 57],                               // 000001011000\n    [12, 58],                               // 000001011001\n    [12, 61],                               // 000001011010\n    [12, 256],                              // 000001011011\n    [10, 16], [10, 16], [10, 16], [10, 16], // 0000010111xx\n    [10, 17], [10, 17], [10, 17], [10, 17], // 0000011000xx\n    [12, 48],                               // 000001100100\n    [12, 49],                               // 000001100101\n    [12, 62],                               // 000001100110\n    [12, 63],                               // 000001100111\n    [12, 30],                               // 000001101000\n    [12, 31],                               // 000001101001\n    [12, 32],                               // 000001101010\n    [12, 33],                               // 000001101011\n    [12, 40],                               // 000001101100\n    [12, 41],                               // 000001101101\n    [11, 22], [11, 22],                     // 00000110111x\n    [8, 14], [8, 14], [8, 14], [8, 14],     // 00000111xxxx\n    [8, 14], [8, 14], [8, 14], [8, 14],\n    [8, 14], [8, 14], [8, 14], [8, 14],\n    [8, 14], [8, 14], [8, 14], [8, 14],\n    [7, 10], [7, 10], [7, 10], [7, 10],     // 0000100xxxxx\n    [7, 10], [7, 10], [7, 10], [7, 10],\n    [7, 10], [7, 10], [7, 10], [7, 10],\n    [7, 10], [7, 10], [7, 10], [7, 10],\n    [7, 10], [7, 10], [7, 10], [7, 10],\n    [7, 10], [7, 10], [7, 10], [7, 10],\n    [7, 10], [7, 10], [7, 10], [7, 10],\n    [7, 10], [7, 10], [7, 10], [7, 10],\n    [7, 11], [7, 11], [7, 11], [7, 11],     // 0000101xxxxx\n    [7, 11], [7, 11], [7, 11], [7, 11],\n    [7, 11], [7, 11], [7, 11], [7, 11],\n    [7, 11], [7, 11], [7, 11], [7, 11],\n    [7, 11], [7, 11], [7, 11], [7, 11],\n    [7, 11], [7, 11], [7, 11], [7, 11],\n    [7, 11], [7, 11], [7, 11], [7, 11],\n    [7, 11], [7, 11], [7, 11], [7, 11],\n    [9, 15], [9, 15], [9, 15], [9, 15],     // 000011000xxx\n    [9, 15], [9, 15], [9, 15], [9, 15],\n    [12, 128],                              // 000011001000\n    [12, 192],                              // 000011001001\n    [12, 26],                               // 000011001010\n    [12, 27],                               // 000011001011\n    [12, 28],                               // 000011001100\n    [12, 29],                               // 000011001101\n    [11, 19], [11, 19],                     // 00001100111x\n    [11, 20], [11, 20],                     // 00001101000x\n    [12, 34],                               // 000011010010\n    [12, 35],                               // 000011010011\n    [12, 36],                               // 000011010100\n    [12, 37],                               // 000011010101\n    [12, 38],                               // 000011010110\n    [12, 39],                               // 000011010111\n    [11, 21], [11, 21],                     // 00001101100x\n    [12, 42],                               // 000011011010\n    [12, 43],                               // 000011011011\n    [10, 0], [10, 0], [10, 0], [10, 0],     // 0000110111xx\n    [7, 12], [7, 12], [7, 12], [7, 12],     // 0000111xxxxx\n    [7, 12], [7, 12], [7, 12], [7, 12],\n    [7, 12], [7, 12], [7, 12], [7, 12],\n    [7, 12], [7, 12], [7, 12], [7, 12],\n    [7, 12], [7, 12], [7, 12], [7, 12],\n    [7, 12], [7, 12], [7, 12], [7, 12],\n    [7, 12], [7, 12], [7, 12], [7, 12],\n    [7, 12], [7, 12], [7, 12], [7, 12]\n  ];\n\n  // prettier-ignore\n  const blackTable3 = [\n    [-1, -1], [-1, -1], [-1, -1], [-1, -1], // 0000xx\n    [6, 9],                                 // 000100\n    [6, 8],                                 // 000101\n    [5, 7], [5, 7],                         // 00011x\n    [4, 6], [4, 6], [4, 6], [4, 6],         // 0010xx\n    [4, 5], [4, 5], [4, 5], [4, 5],         // 0011xx\n    [3, 1], [3, 1], [3, 1], [3, 1],         // 010xxx\n    [3, 1], [3, 1], [3, 1], [3, 1],\n    [3, 4], [3, 4], [3, 4], [3, 4],         // 011xxx\n    [3, 4], [3, 4], [3, 4], [3, 4],\n    [2, 3], [2, 3], [2, 3], [2, 3],         // 10xxxx\n    [2, 3], [2, 3], [2, 3], [2, 3],\n    [2, 3], [2, 3], [2, 3], [2, 3],\n    [2, 3], [2, 3], [2, 3], [2, 3],\n    [2, 2], [2, 2], [2, 2], [2, 2],         // 11xxxx\n    [2, 2], [2, 2], [2, 2], [2, 2],\n    [2, 2], [2, 2], [2, 2], [2, 2],\n    [2, 2], [2, 2], [2, 2], [2, 2]\n  ];\n\n  /**\n   * @param {CCITTFaxDecoderSource} source - The data which should be decoded.\n   * @param {Object} [options] - Decoding options.\n   */\n  // eslint-disable-next-line no-shadow\n  function CCITTFaxDecoder(source, options = {}) {\n    if (!source || typeof source.next !== \"function\") {\n      throw new Error('CCITTFaxDecoder - invalid \"source\" parameter.');\n    }\n    this.source = source;\n    this.eof = false;\n\n    this.encoding = options.K || 0;\n    this.eoline = options.EndOfLine || false;\n    this.byteAlign = options.EncodedByteAlign || false;\n    this.columns = options.Columns || 1728;\n    this.rows = options.Rows || 0;\n    let eoblock = options.EndOfBlock;\n    if (eoblock === null || eoblock === undefined) {\n      eoblock = true;\n    }\n    this.eoblock = eoblock;\n    this.black = options.BlackIs1 || false;\n\n    this.codingLine = new Uint32Array(this.columns + 1);\n    this.refLine = new Uint32Array(this.columns + 2);\n\n    this.codingLine[0] = this.columns;\n    this.codingPos = 0;\n\n    this.row = 0;\n    this.nextLine2D = this.encoding < 0;\n    this.inputBits = 0;\n    this.inputBuf = 0;\n    this.outputBits = 0;\n    this.rowsDone = false;\n\n    let code1;\n    while ((code1 = this._lookBits(12)) === 0) {\n      this._eatBits(1);\n    }\n    if (code1 === 1) {\n      this._eatBits(12);\n    }\n    if (this.encoding > 0) {\n      this.nextLine2D = !this._lookBits(1);\n      this._eatBits(1);\n    }\n  }\n\n  CCITTFaxDecoder.prototype = {\n    readNextChar() {\n      if (this.eof) {\n        return -1;\n      }\n      const refLine = this.refLine;\n      const codingLine = this.codingLine;\n      const columns = this.columns;\n\n      let refPos, blackPixels, bits, i;\n\n      if (this.outputBits === 0) {\n        if (this.rowsDone) {\n          this.eof = true;\n        }\n        if (this.eof) {\n          return -1;\n        }\n        this.err = false;\n\n        let code1, code2, code3;\n        if (this.nextLine2D) {\n          for (i = 0; codingLine[i] < columns; ++i) {\n            refLine[i] = codingLine[i];\n          }\n          refLine[i++] = columns;\n          refLine[i] = columns;\n          codingLine[0] = 0;\n          this.codingPos = 0;\n          refPos = 0;\n          blackPixels = 0;\n\n          while (codingLine[this.codingPos] < columns) {\n            code1 = this._getTwoDimCode();\n            switch (code1) {\n              case twoDimPass:\n                this._addPixels(refLine[refPos + 1], blackPixels);\n                if (refLine[refPos + 1] < columns) {\n                  refPos += 2;\n                }\n                break;\n              case twoDimHoriz:\n                code1 = code2 = 0;\n                if (blackPixels) {\n                  do {\n                    code1 += code3 = this._getBlackCode();\n                  } while (code3 >= 64);\n                  do {\n                    code2 += code3 = this._getWhiteCode();\n                  } while (code3 >= 64);\n                } else {\n                  do {\n                    code1 += code3 = this._getWhiteCode();\n                  } while (code3 >= 64);\n                  do {\n                    code2 += code3 = this._getBlackCode();\n                  } while (code3 >= 64);\n                }\n                this._addPixels(\n                  codingLine[this.codingPos] + code1,\n                  blackPixels\n                );\n                if (codingLine[this.codingPos] < columns) {\n                  this._addPixels(\n                    codingLine[this.codingPos] + code2,\n                    blackPixels ^ 1\n                  );\n                }\n                while (\n                  refLine[refPos] <= codingLine[this.codingPos] &&\n                  refLine[refPos] < columns\n                ) {\n                  refPos += 2;\n                }\n                break;\n              case twoDimVertR3:\n                this._addPixels(refLine[refPos] + 3, blackPixels);\n                blackPixels ^= 1;\n                if (codingLine[this.codingPos] < columns) {\n                  ++refPos;\n                  while (\n                    refLine[refPos] <= codingLine[this.codingPos] &&\n                    refLine[refPos] < columns\n                  ) {\n                    refPos += 2;\n                  }\n                }\n                break;\n              case twoDimVertR2:\n                this._addPixels(refLine[refPos] + 2, blackPixels);\n                blackPixels ^= 1;\n                if (codingLine[this.codingPos] < columns) {\n                  ++refPos;\n                  while (\n                    refLine[refPos] <= codingLine[this.codingPos] &&\n                    refLine[refPos] < columns\n                  ) {\n                    refPos += 2;\n                  }\n                }\n                break;\n              case twoDimVertR1:\n                this._addPixels(refLine[refPos] + 1, blackPixels);\n                blackPixels ^= 1;\n                if (codingLine[this.codingPos] < columns) {\n                  ++refPos;\n                  while (\n                    refLine[refPos] <= codingLine[this.codingPos] &&\n                    refLine[refPos] < columns\n                  ) {\n                    refPos += 2;\n                  }\n                }\n                break;\n              case twoDimVert0:\n                this._addPixels(refLine[refPos], blackPixels);\n                blackPixels ^= 1;\n                if (codingLine[this.codingPos] < columns) {\n                  ++refPos;\n                  while (\n                    refLine[refPos] <= codingLine[this.codingPos] &&\n                    refLine[refPos] < columns\n                  ) {\n                    refPos += 2;\n                  }\n                }\n                break;\n              case twoDimVertL3:\n                this._addPixelsNeg(refLine[refPos] - 3, blackPixels);\n                blackPixels ^= 1;\n                if (codingLine[this.codingPos] < columns) {\n                  if (refPos > 0) {\n                    --refPos;\n                  } else {\n                    ++refPos;\n                  }\n                  while (\n                    refLine[refPos] <= codingLine[this.codingPos] &&\n                    refLine[refPos] < columns\n                  ) {\n                    refPos += 2;\n                  }\n                }\n                break;\n              case twoDimVertL2:\n                this._addPixelsNeg(refLine[refPos] - 2, blackPixels);\n                blackPixels ^= 1;\n                if (codingLine[this.codingPos] < columns) {\n                  if (refPos > 0) {\n                    --refPos;\n                  } else {\n                    ++refPos;\n                  }\n                  while (\n                    refLine[refPos] <= codingLine[this.codingPos] &&\n                    refLine[refPos] < columns\n                  ) {\n                    refPos += 2;\n                  }\n                }\n                break;\n              case twoDimVertL1:\n                this._addPixelsNeg(refLine[refPos] - 1, blackPixels);\n                blackPixels ^= 1;\n                if (codingLine[this.codingPos] < columns) {\n                  if (refPos > 0) {\n                    --refPos;\n                  } else {\n                    ++refPos;\n                  }\n                  while (\n                    refLine[refPos] <= codingLine[this.codingPos] &&\n                    refLine[refPos] < columns\n                  ) {\n                    refPos += 2;\n                  }\n                }\n                break;\n              case ccittEOF:\n                this._addPixels(columns, 0);\n                this.eof = true;\n                break;\n              default:\n                info(\"bad 2d code\");\n                this._addPixels(columns, 0);\n                this.err = true;\n            }\n          }\n        } else {\n          codingLine[0] = 0;\n          this.codingPos = 0;\n          blackPixels = 0;\n          while (codingLine[this.codingPos] < columns) {\n            code1 = 0;\n            if (blackPixels) {\n              do {\n                code1 += code3 = this._getBlackCode();\n              } while (code3 >= 64);\n            } else {\n              do {\n                code1 += code3 = this._getWhiteCode();\n              } while (code3 >= 64);\n            }\n            this._addPixels(codingLine[this.codingPos] + code1, blackPixels);\n            blackPixels ^= 1;\n          }\n        }\n\n        let gotEOL = false;\n\n        if (this.byteAlign) {\n          this.inputBits &= ~7;\n        }\n\n        if (!this.eoblock && this.row === this.rows - 1) {\n          this.rowsDone = true;\n        } else {\n          code1 = this._lookBits(12);\n          if (this.eoline) {\n            while (code1 !== ccittEOF && code1 !== 1) {\n              this._eatBits(1);\n              code1 = this._lookBits(12);\n            }\n          } else {\n            while (code1 === 0) {\n              this._eatBits(1);\n              code1 = this._lookBits(12);\n            }\n          }\n          if (code1 === 1) {\n            this._eatBits(12);\n            gotEOL = true;\n          } else if (code1 === ccittEOF) {\n            this.eof = true;\n          }\n        }\n\n        if (!this.eof && this.encoding > 0 && !this.rowsDone) {\n          this.nextLine2D = !this._lookBits(1);\n          this._eatBits(1);\n        }\n\n        if (this.eoblock && gotEOL && this.byteAlign) {\n          code1 = this._lookBits(12);\n          if (code1 === 1) {\n            this._eatBits(12);\n            if (this.encoding > 0) {\n              this._lookBits(1);\n              this._eatBits(1);\n            }\n            if (this.encoding >= 0) {\n              for (i = 0; i < 4; ++i) {\n                code1 = this._lookBits(12);\n                if (code1 !== 1) {\n                  info(\"bad rtc code: \" + code1);\n                }\n                this._eatBits(12);\n                if (this.encoding > 0) {\n                  this._lookBits(1);\n                  this._eatBits(1);\n                }\n              }\n            }\n            this.eof = true;\n          }\n        } else if (this.err && this.eoline) {\n          while (true) {\n            code1 = this._lookBits(13);\n            if (code1 === ccittEOF) {\n              this.eof = true;\n              return -1;\n            }\n            if (code1 >> 1 === 1) {\n              break;\n            }\n            this._eatBits(1);\n          }\n          this._eatBits(12);\n          if (this.encoding > 0) {\n            this._eatBits(1);\n            this.nextLine2D = !(code1 & 1);\n          }\n        }\n\n        if (codingLine[0] > 0) {\n          this.outputBits = codingLine[(this.codingPos = 0)];\n        } else {\n          this.outputBits = codingLine[(this.codingPos = 1)];\n        }\n        this.row++;\n      }\n\n      let c;\n      if (this.outputBits >= 8) {\n        c = this.codingPos & 1 ? 0 : 0xff;\n        this.outputBits -= 8;\n        if (this.outputBits === 0 && codingLine[this.codingPos] < columns) {\n          this.codingPos++;\n          this.outputBits =\n            codingLine[this.codingPos] - codingLine[this.codingPos - 1];\n        }\n      } else {\n        bits = 8;\n        c = 0;\n        do {\n          if (this.outputBits > bits) {\n            c <<= bits;\n            if (!(this.codingPos & 1)) {\n              c |= 0xff >> (8 - bits);\n            }\n            this.outputBits -= bits;\n            bits = 0;\n          } else {\n            c <<= this.outputBits;\n            if (!(this.codingPos & 1)) {\n              c |= 0xff >> (8 - this.outputBits);\n            }\n            bits -= this.outputBits;\n            this.outputBits = 0;\n            if (codingLine[this.codingPos] < columns) {\n              this.codingPos++;\n              this.outputBits =\n                codingLine[this.codingPos] - codingLine[this.codingPos - 1];\n            } else if (bits > 0) {\n              c <<= bits;\n              bits = 0;\n            }\n          }\n        } while (bits);\n      }\n      if (this.black) {\n        c ^= 0xff;\n      }\n      return c;\n    },\n\n    /**\n     * @private\n     */\n    _addPixels(a1, blackPixels) {\n      const codingLine = this.codingLine;\n      let codingPos = this.codingPos;\n\n      if (a1 > codingLine[codingPos]) {\n        if (a1 > this.columns) {\n          info(\"row is wrong length\");\n          this.err = true;\n          a1 = this.columns;\n        }\n        if ((codingPos & 1) ^ blackPixels) {\n          ++codingPos;\n        }\n\n        codingLine[codingPos] = a1;\n      }\n      this.codingPos = codingPos;\n    },\n\n    /**\n     * @private\n     */\n    _addPixelsNeg(a1, blackPixels) {\n      const codingLine = this.codingLine;\n      let codingPos = this.codingPos;\n\n      if (a1 > codingLine[codingPos]) {\n        if (a1 > this.columns) {\n          info(\"row is wrong length\");\n          this.err = true;\n          a1 = this.columns;\n        }\n        if ((codingPos & 1) ^ blackPixels) {\n          ++codingPos;\n        }\n\n        codingLine[codingPos] = a1;\n      } else if (a1 < codingLine[codingPos]) {\n        if (a1 < 0) {\n          info(\"invalid code\");\n          this.err = true;\n          a1 = 0;\n        }\n        while (codingPos > 0 && a1 < codingLine[codingPos - 1]) {\n          --codingPos;\n        }\n        codingLine[codingPos] = a1;\n      }\n\n      this.codingPos = codingPos;\n    },\n\n    /**\n     * This function returns the code found from the table.\n     * The start and end parameters set the boundaries for searching the table.\n     * The limit parameter is optional. Function returns an array with three\n     * values. The first array element indicates whether a valid code is being\n     * returned. The second array element is the actual code. The third array\n     * element indicates whether EOF was reached.\n     * @private\n     */\n    _findTableCode(start, end, table, limit) {\n      const limitValue = limit || 0;\n      for (let i = start; i <= end; ++i) {\n        let code = this._lookBits(i);\n        if (code === ccittEOF) {\n          return [true, 1, false];\n        }\n        if (i < end) {\n          code <<= end - i;\n        }\n        if (!limitValue || code >= limitValue) {\n          const p = table[code - limitValue];\n          if (p[0] === i) {\n            this._eatBits(i);\n            return [true, p[1], true];\n          }\n        }\n      }\n      return [false, 0, false];\n    },\n\n    /**\n     * @private\n     */\n    _getTwoDimCode() {\n      let code = 0;\n      let p;\n      if (this.eoblock) {\n        code = this._lookBits(7);\n        p = twoDimTable[code];\n        if (p && p[0] > 0) {\n          this._eatBits(p[0]);\n          return p[1];\n        }\n      } else {\n        const result = this._findTableCode(1, 7, twoDimTable);\n        if (result[0] && result[2]) {\n          return result[1];\n        }\n      }\n      info(\"Bad two dim code\");\n      return ccittEOF;\n    },\n\n    /**\n     * @private\n     */\n    _getWhiteCode() {\n      let code = 0;\n      let p;\n      if (this.eoblock) {\n        code = this._lookBits(12);\n        if (code === ccittEOF) {\n          return 1;\n        }\n\n        if (code >> 5 === 0) {\n          p = whiteTable1[code];\n        } else {\n          p = whiteTable2[code >> 3];\n        }\n\n        if (p[0] > 0) {\n          this._eatBits(p[0]);\n          return p[1];\n        }\n      } else {\n        let result = this._findTableCode(1, 9, whiteTable2);\n        if (result[0]) {\n          return result[1];\n        }\n\n        result = this._findTableCode(11, 12, whiteTable1);\n        if (result[0]) {\n          return result[1];\n        }\n      }\n      info(\"bad white code\");\n      this._eatBits(1);\n      return 1;\n    },\n\n    /**\n     * @private\n     */\n    _getBlackCode() {\n      let code, p;\n      if (this.eoblock) {\n        code = this._lookBits(13);\n        if (code === ccittEOF) {\n          return 1;\n        }\n        if (code >> 7 === 0) {\n          p = blackTable1[code];\n        } else if (code >> 9 === 0 && code >> 7 !== 0) {\n          p = blackTable2[(code >> 1) - 64];\n        } else {\n          p = blackTable3[code >> 7];\n        }\n\n        if (p[0] > 0) {\n          this._eatBits(p[0]);\n          return p[1];\n        }\n      } else {\n        let result = this._findTableCode(2, 6, blackTable3);\n        if (result[0]) {\n          return result[1];\n        }\n\n        result = this._findTableCode(7, 12, blackTable2, 64);\n        if (result[0]) {\n          return result[1];\n        }\n\n        result = this._findTableCode(10, 13, blackTable1);\n        if (result[0]) {\n          return result[1];\n        }\n      }\n      info(\"bad black code\");\n      this._eatBits(1);\n      return 1;\n    },\n\n    /**\n     * @private\n     */\n    _lookBits(n) {\n      let c;\n      while (this.inputBits < n) {\n        if ((c = this.source.next()) === -1) {\n          if (this.inputBits === 0) {\n            return ccittEOF;\n          }\n          return (this.inputBuf << (n - this.inputBits)) & (0xffff >> (16 - n));\n        }\n        this.inputBuf = (this.inputBuf << 8) | c;\n        this.inputBits += 8;\n      }\n      return (this.inputBuf >> (this.inputBits - n)) & (0xffff >> (16 - n));\n    },\n\n    /**\n     * @private\n     */\n    _eatBits(n) {\n      if ((this.inputBits -= n) < 0) {\n        this.inputBits = 0;\n      }\n    },\n  };\n\n  return CCITTFaxDecoder;\n})();\n\nexport { CCITTFaxDecoder };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isDict, isStream } from \"./primitives.js\";\nimport { DecodeStream } from \"./stream.js\";\nimport { Jbig2Image } from \"./jbig2.js\";\nimport { shadow } from \"../shared/util.js\";\n\n/**\n * For JBIG2's we use a library to decode these images and\n * the stream behaves like all the other DecodeStreams.\n */\nconst Jbig2Stream = (function Jbig2StreamClosure() {\n  // eslint-disable-next-line no-shadow\n  function Jbig2Stream(stream, maybeLength, dict, params) {\n    this.stream = stream;\n    this.maybeLength = maybeLength;\n    this.dict = dict;\n    this.params = params;\n\n    DecodeStream.call(this, maybeLength);\n  }\n\n  Jbig2Stream.prototype = Object.create(DecodeStream.prototype);\n\n  Object.defineProperty(Jbig2Stream.prototype, \"bytes\", {\n    get() {\n      // If `this.maybeLength` is null, we'll get the entire stream.\n      return shadow(this, \"bytes\", this.stream.getBytes(this.maybeLength));\n    },\n    configurable: true,\n  });\n\n  Jbig2Stream.prototype.ensureBuffer = function (requested) {\n    // No-op, since `this.readBlock` will always parse the entire image and\n    // directly insert all of its data into `this.buffer`.\n  };\n\n  Jbig2Stream.prototype.readBlock = function () {\n    if (this.eof) {\n      return;\n    }\n    const jbig2Image = new Jbig2Image();\n\n    const chunks = [];\n    if (isDict(this.params)) {\n      const globalsStream = this.params.get(\"JBIG2Globals\");\n      if (isStream(globalsStream)) {\n        const globals = globalsStream.getBytes();\n        chunks.push({ data: globals, start: 0, end: globals.length });\n      }\n    }\n    chunks.push({ data: this.bytes, start: 0, end: this.bytes.length });\n    const data = jbig2Image.parseChunks(chunks);\n    const dataLength = data.length;\n\n    // JBIG2 had black as 1 and white as 0, inverting the colors\n    for (let i = 0; i < dataLength; i++) {\n      data[i] ^= 0xff;\n    }\n    this.buffer = data;\n    this.bufferLength = dataLength;\n    this.eof = true;\n  };\n\n  return Jbig2Stream;\n})();\n\nexport { Jbig2Stream };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BaseException, shadow } from \"../shared/util.js\";\nimport { log2, readInt8, readUint16, readUint32 } from \"./core_utils.js\";\nimport { ArithmeticDecoder } from \"./arithmetic_decoder.js\";\nimport { CCITTFaxDecoder } from \"./ccitt.js\";\n\nclass Jbig2Error extends BaseException {\n  constructor(msg) {\n    super(`JBIG2 error: ${msg}`);\n  }\n}\n\nvar Jbig2Image = (function Jbig2ImageClosure() {\n  // Utility data structures\n  function ContextCache() {}\n\n  ContextCache.prototype = {\n    getContexts(id) {\n      if (id in this) {\n        return this[id];\n      }\n      return (this[id] = new Int8Array(1 << 16));\n    },\n  };\n\n  function DecodingContext(data, start, end) {\n    this.data = data;\n    this.start = start;\n    this.end = end;\n  }\n\n  DecodingContext.prototype = {\n    get decoder() {\n      var decoder = new ArithmeticDecoder(this.data, this.start, this.end);\n      return shadow(this, \"decoder\", decoder);\n    },\n    get contextCache() {\n      var cache = new ContextCache();\n      return shadow(this, \"contextCache\", cache);\n    },\n  };\n\n  // Annex A. Arithmetic Integer Decoding Procedure\n  // A.2 Procedure for decoding values\n  function decodeInteger(contextCache, procedure, decoder) {\n    var contexts = contextCache.getContexts(procedure);\n    var prev = 1;\n\n    function readBits(length) {\n      var v = 0;\n      for (var i = 0; i < length; i++) {\n        var bit = decoder.readBit(contexts, prev);\n        prev =\n          prev < 256 ? (prev << 1) | bit : (((prev << 1) | bit) & 511) | 256;\n        v = (v << 1) | bit;\n      }\n      return v >>> 0;\n    }\n\n    var sign = readBits(1);\n    // prettier-ignore\n    /* eslint-disable no-nested-ternary */\n    var value = readBits(1) ?\n                  (readBits(1) ?\n                    (readBits(1) ?\n                      (readBits(1) ?\n                        (readBits(1) ?\n                          (readBits(32) + 4436) :\n                        readBits(12) + 340) :\n                      readBits(8) + 84) :\n                    readBits(6) + 20) :\n                  readBits(4) + 4) :\n                readBits(2);\n    /* eslint-enable no-nested-ternary */\n    if (sign === 0) {\n      return value;\n    } else if (value > 0) {\n      return -value;\n    }\n    return null;\n  }\n\n  // A.3 The IAID decoding procedure\n  function decodeIAID(contextCache, decoder, codeLength) {\n    var contexts = contextCache.getContexts(\"IAID\");\n\n    var prev = 1;\n    for (var i = 0; i < codeLength; i++) {\n      var bit = decoder.readBit(contexts, prev);\n      prev = (prev << 1) | bit;\n    }\n    if (codeLength < 31) {\n      return prev & ((1 << codeLength) - 1);\n    }\n    return prev & 0x7fffffff;\n  }\n\n  // 7.3 Segment types\n  var SegmentTypes = [\n    \"SymbolDictionary\",\n    null,\n    null,\n    null,\n    \"IntermediateTextRegion\",\n    null,\n    \"ImmediateTextRegion\",\n    \"ImmediateLosslessTextRegion\",\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    \"PatternDictionary\",\n    null,\n    null,\n    null,\n    \"IntermediateHalftoneRegion\",\n    null,\n    \"ImmediateHalftoneRegion\",\n    \"ImmediateLosslessHalftoneRegion\",\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    \"IntermediateGenericRegion\",\n    null,\n    \"ImmediateGenericRegion\",\n    \"ImmediateLosslessGenericRegion\",\n    \"IntermediateGenericRefinementRegion\",\n    null,\n    \"ImmediateGenericRefinementRegion\",\n    \"ImmediateLosslessGenericRefinementRegion\",\n    null,\n    null,\n    null,\n    null,\n    \"PageInformation\",\n    \"EndOfPage\",\n    \"EndOfStripe\",\n    \"EndOfFile\",\n    \"Profiles\",\n    \"Tables\",\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    \"Extension\",\n  ];\n\n  var CodingTemplates = [\n    [\n      { x: -1, y: -2 },\n      { x: 0, y: -2 },\n      { x: 1, y: -2 },\n      { x: -2, y: -1 },\n      { x: -1, y: -1 },\n      { x: 0, y: -1 },\n      { x: 1, y: -1 },\n      { x: 2, y: -1 },\n      { x: -4, y: 0 },\n      { x: -3, y: 0 },\n      { x: -2, y: 0 },\n      { x: -1, y: 0 },\n    ],\n    [\n      { x: -1, y: -2 },\n      { x: 0, y: -2 },\n      { x: 1, y: -2 },\n      { x: 2, y: -2 },\n      { x: -2, y: -1 },\n      { x: -1, y: -1 },\n      { x: 0, y: -1 },\n      { x: 1, y: -1 },\n      { x: 2, y: -1 },\n      { x: -3, y: 0 },\n      { x: -2, y: 0 },\n      { x: -1, y: 0 },\n    ],\n    [\n      { x: -1, y: -2 },\n      { x: 0, y: -2 },\n      { x: 1, y: -2 },\n      { x: -2, y: -1 },\n      { x: -1, y: -1 },\n      { x: 0, y: -1 },\n      { x: 1, y: -1 },\n      { x: -2, y: 0 },\n      { x: -1, y: 0 },\n    ],\n    [\n      { x: -3, y: -1 },\n      { x: -2, y: -1 },\n      { x: -1, y: -1 },\n      { x: 0, y: -1 },\n      { x: 1, y: -1 },\n      { x: -4, y: 0 },\n      { x: -3, y: 0 },\n      { x: -2, y: 0 },\n      { x: -1, y: 0 },\n    ],\n  ];\n\n  var RefinementTemplates = [\n    {\n      coding: [\n        { x: 0, y: -1 },\n        { x: 1, y: -1 },\n        { x: -1, y: 0 },\n      ],\n      reference: [\n        { x: 0, y: -1 },\n        { x: 1, y: -1 },\n        { x: -1, y: 0 },\n        { x: 0, y: 0 },\n        { x: 1, y: 0 },\n        { x: -1, y: 1 },\n        { x: 0, y: 1 },\n        { x: 1, y: 1 },\n      ],\n    },\n    {\n      coding: [\n        { x: -1, y: -1 },\n        { x: 0, y: -1 },\n        { x: 1, y: -1 },\n        { x: -1, y: 0 },\n      ],\n      reference: [\n        { x: 0, y: -1 },\n        { x: -1, y: 0 },\n        { x: 0, y: 0 },\n        { x: 1, y: 0 },\n        { x: 0, y: 1 },\n        { x: 1, y: 1 },\n      ],\n    },\n  ];\n\n  // See 6.2.5.7 Decoding the bitmap.\n  var ReusedContexts = [\n    0x9b25, // 10011 0110010 0101\n    0x0795, // 0011 110010 101\n    0x00e5, // 001 11001 01\n    0x0195, // 011001 0101\n  ];\n\n  var RefinementReusedContexts = [\n    0x0020, // '000' + '0' (coding) + '00010000' + '0' (reference)\n    0x0008, // '0000' + '001000'\n  ];\n\n  function decodeBitmapTemplate0(width, height, decodingContext) {\n    var decoder = decodingContext.decoder;\n    var contexts = decodingContext.contextCache.getContexts(\"GB\");\n    var contextLabel,\n      i,\n      j,\n      pixel,\n      row,\n      row1,\n      row2,\n      bitmap = [];\n\n    // ...ooooo....\n    // ..ooooooo... Context template for current pixel (X)\n    // .ooooX...... (concatenate values of 'o'-pixels to get contextLabel)\n    var OLD_PIXEL_MASK = 0x7bf7; // 01111 0111111 0111\n\n    for (i = 0; i < height; i++) {\n      row = bitmap[i] = new Uint8Array(width);\n      row1 = i < 1 ? row : bitmap[i - 1];\n      row2 = i < 2 ? row : bitmap[i - 2];\n\n      // At the beginning of each row:\n      // Fill contextLabel with pixels that are above/right of (X)\n      contextLabel =\n        (row2[0] << 13) |\n        (row2[1] << 12) |\n        (row2[2] << 11) |\n        (row1[0] << 7) |\n        (row1[1] << 6) |\n        (row1[2] << 5) |\n        (row1[3] << 4);\n\n      for (j = 0; j < width; j++) {\n        row[j] = pixel = decoder.readBit(contexts, contextLabel);\n\n        // At each pixel: Clear contextLabel pixels that are shifted\n        // out of the context, then add new ones.\n        contextLabel =\n          ((contextLabel & OLD_PIXEL_MASK) << 1) |\n          (j + 3 < width ? row2[j + 3] << 11 : 0) |\n          (j + 4 < width ? row1[j + 4] << 4 : 0) |\n          pixel;\n      }\n    }\n\n    return bitmap;\n  }\n\n  // 6.2 Generic Region Decoding Procedure\n  function decodeBitmap(\n    mmr,\n    width,\n    height,\n    templateIndex,\n    prediction,\n    skip,\n    at,\n    decodingContext\n  ) {\n    if (mmr) {\n      const input = new Reader(\n        decodingContext.data,\n        decodingContext.start,\n        decodingContext.end\n      );\n      return decodeMMRBitmap(input, width, height, false);\n    }\n\n    // Use optimized version for the most common case\n    if (\n      templateIndex === 0 &&\n      !skip &&\n      !prediction &&\n      at.length === 4 &&\n      at[0].x === 3 &&\n      at[0].y === -1 &&\n      at[1].x === -3 &&\n      at[1].y === -1 &&\n      at[2].x === 2 &&\n      at[2].y === -2 &&\n      at[3].x === -2 &&\n      at[3].y === -2\n    ) {\n      return decodeBitmapTemplate0(width, height, decodingContext);\n    }\n\n    var useskip = !!skip;\n    var template = CodingTemplates[templateIndex].concat(at);\n\n    // Sorting is non-standard, and it is not required. But sorting increases\n    // the number of template bits that can be reused from the previous\n    // contextLabel in the main loop.\n    template.sort(function (a, b) {\n      return a.y - b.y || a.x - b.x;\n    });\n\n    var templateLength = template.length;\n    var templateX = new Int8Array(templateLength);\n    var templateY = new Int8Array(templateLength);\n    var changingTemplateEntries = [];\n    var reuseMask = 0,\n      minX = 0,\n      maxX = 0,\n      minY = 0;\n    var c, k;\n\n    for (k = 0; k < templateLength; k++) {\n      templateX[k] = template[k].x;\n      templateY[k] = template[k].y;\n      minX = Math.min(minX, template[k].x);\n      maxX = Math.max(maxX, template[k].x);\n      minY = Math.min(minY, template[k].y);\n      // Check if the template pixel appears in two consecutive context labels,\n      // so it can be reused. Otherwise, we add it to the list of changing\n      // template entries.\n      if (\n        k < templateLength - 1 &&\n        template[k].y === template[k + 1].y &&\n        template[k].x === template[k + 1].x - 1\n      ) {\n        reuseMask |= 1 << (templateLength - 1 - k);\n      } else {\n        changingTemplateEntries.push(k);\n      }\n    }\n    var changingEntriesLength = changingTemplateEntries.length;\n\n    var changingTemplateX = new Int8Array(changingEntriesLength);\n    var changingTemplateY = new Int8Array(changingEntriesLength);\n    var changingTemplateBit = new Uint16Array(changingEntriesLength);\n    for (c = 0; c < changingEntriesLength; c++) {\n      k = changingTemplateEntries[c];\n      changingTemplateX[c] = template[k].x;\n      changingTemplateY[c] = template[k].y;\n      changingTemplateBit[c] = 1 << (templateLength - 1 - k);\n    }\n\n    // Get the safe bounding box edges from the width, height, minX, maxX, minY\n    var sbb_left = -minX;\n    var sbb_top = -minY;\n    var sbb_right = width - maxX;\n\n    var pseudoPixelContext = ReusedContexts[templateIndex];\n    var row = new Uint8Array(width);\n    var bitmap = [];\n\n    var decoder = decodingContext.decoder;\n    var contexts = decodingContext.contextCache.getContexts(\"GB\");\n\n    var ltp = 0,\n      j,\n      i0,\n      j0,\n      contextLabel = 0,\n      bit,\n      shift;\n    for (var i = 0; i < height; i++) {\n      if (prediction) {\n        var sltp = decoder.readBit(contexts, pseudoPixelContext);\n        ltp ^= sltp;\n        if (ltp) {\n          bitmap.push(row); // duplicate previous row\n          continue;\n        }\n      }\n      row = new Uint8Array(row);\n      bitmap.push(row);\n      for (j = 0; j < width; j++) {\n        if (useskip && skip[i][j]) {\n          row[j] = 0;\n          continue;\n        }\n        // Are we in the middle of a scanline, so we can reuse contextLabel\n        // bits?\n        if (j >= sbb_left && j < sbb_right && i >= sbb_top) {\n          // If yes, we can just shift the bits that are reusable and only\n          // fetch the remaining ones.\n          contextLabel = (contextLabel << 1) & reuseMask;\n          for (k = 0; k < changingEntriesLength; k++) {\n            i0 = i + changingTemplateY[k];\n            j0 = j + changingTemplateX[k];\n            bit = bitmap[i0][j0];\n            if (bit) {\n              bit = changingTemplateBit[k];\n              contextLabel |= bit;\n            }\n          }\n        } else {\n          // compute the contextLabel from scratch\n          contextLabel = 0;\n          shift = templateLength - 1;\n          for (k = 0; k < templateLength; k++, shift--) {\n            j0 = j + templateX[k];\n            if (j0 >= 0 && j0 < width) {\n              i0 = i + templateY[k];\n              if (i0 >= 0) {\n                bit = bitmap[i0][j0];\n                if (bit) {\n                  contextLabel |= bit << shift;\n                }\n              }\n            }\n          }\n        }\n        var pixel = decoder.readBit(contexts, contextLabel);\n        row[j] = pixel;\n      }\n    }\n    return bitmap;\n  }\n\n  // 6.3.2 Generic Refinement Region Decoding Procedure\n  function decodeRefinement(\n    width,\n    height,\n    templateIndex,\n    referenceBitmap,\n    offsetX,\n    offsetY,\n    prediction,\n    at,\n    decodingContext\n  ) {\n    var codingTemplate = RefinementTemplates[templateIndex].coding;\n    if (templateIndex === 0) {\n      codingTemplate = codingTemplate.concat([at[0]]);\n    }\n    var codingTemplateLength = codingTemplate.length;\n    var codingTemplateX = new Int32Array(codingTemplateLength);\n    var codingTemplateY = new Int32Array(codingTemplateLength);\n    var k;\n    for (k = 0; k < codingTemplateLength; k++) {\n      codingTemplateX[k] = codingTemplate[k].x;\n      codingTemplateY[k] = codingTemplate[k].y;\n    }\n\n    var referenceTemplate = RefinementTemplates[templateIndex].reference;\n    if (templateIndex === 0) {\n      referenceTemplate = referenceTemplate.concat([at[1]]);\n    }\n    var referenceTemplateLength = referenceTemplate.length;\n    var referenceTemplateX = new Int32Array(referenceTemplateLength);\n    var referenceTemplateY = new Int32Array(referenceTemplateLength);\n    for (k = 0; k < referenceTemplateLength; k++) {\n      referenceTemplateX[k] = referenceTemplate[k].x;\n      referenceTemplateY[k] = referenceTemplate[k].y;\n    }\n    var referenceWidth = referenceBitmap[0].length;\n    var referenceHeight = referenceBitmap.length;\n\n    var pseudoPixelContext = RefinementReusedContexts[templateIndex];\n    var bitmap = [];\n\n    var decoder = decodingContext.decoder;\n    var contexts = decodingContext.contextCache.getContexts(\"GR\");\n\n    var ltp = 0;\n    for (var i = 0; i < height; i++) {\n      if (prediction) {\n        var sltp = decoder.readBit(contexts, pseudoPixelContext);\n        ltp ^= sltp;\n        if (ltp) {\n          throw new Jbig2Error(\"prediction is not supported\");\n        }\n      }\n      var row = new Uint8Array(width);\n      bitmap.push(row);\n      for (var j = 0; j < width; j++) {\n        var i0, j0;\n        var contextLabel = 0;\n        for (k = 0; k < codingTemplateLength; k++) {\n          i0 = i + codingTemplateY[k];\n          j0 = j + codingTemplateX[k];\n          if (i0 < 0 || j0 < 0 || j0 >= width) {\n            contextLabel <<= 1; // out of bound pixel\n          } else {\n            contextLabel = (contextLabel << 1) | bitmap[i0][j0];\n          }\n        }\n        for (k = 0; k < referenceTemplateLength; k++) {\n          i0 = i + referenceTemplateY[k] - offsetY;\n          j0 = j + referenceTemplateX[k] - offsetX;\n          if (\n            i0 < 0 ||\n            i0 >= referenceHeight ||\n            j0 < 0 ||\n            j0 >= referenceWidth\n          ) {\n            contextLabel <<= 1; // out of bound pixel\n          } else {\n            contextLabel = (contextLabel << 1) | referenceBitmap[i0][j0];\n          }\n        }\n        var pixel = decoder.readBit(contexts, contextLabel);\n        row[j] = pixel;\n      }\n    }\n\n    return bitmap;\n  }\n\n  // 6.5.5 Decoding the symbol dictionary\n  function decodeSymbolDictionary(\n    huffman,\n    refinement,\n    symbols,\n    numberOfNewSymbols,\n    numberOfExportedSymbols,\n    huffmanTables,\n    templateIndex,\n    at,\n    refinementTemplateIndex,\n    refinementAt,\n    decodingContext,\n    huffmanInput\n  ) {\n    if (huffman && refinement) {\n      throw new Jbig2Error(\"symbol refinement with Huffman is not supported\");\n    }\n\n    var newSymbols = [];\n    var currentHeight = 0;\n    var symbolCodeLength = log2(symbols.length + numberOfNewSymbols);\n\n    var decoder = decodingContext.decoder;\n    var contextCache = decodingContext.contextCache;\n    let tableB1, symbolWidths;\n    if (huffman) {\n      tableB1 = getStandardTable(1); // standard table B.1\n      symbolWidths = [];\n      symbolCodeLength = Math.max(symbolCodeLength, 1); // 6.5.8.2.3\n    }\n\n    while (newSymbols.length < numberOfNewSymbols) {\n      var deltaHeight = huffman\n        ? huffmanTables.tableDeltaHeight.decode(huffmanInput)\n        : decodeInteger(contextCache, \"IADH\", decoder); // 6.5.6\n      currentHeight += deltaHeight;\n      let currentWidth = 0,\n        totalWidth = 0;\n      const firstSymbol = huffman ? symbolWidths.length : 0;\n      while (true) {\n        var deltaWidth = huffman\n          ? huffmanTables.tableDeltaWidth.decode(huffmanInput)\n          : decodeInteger(contextCache, \"IADW\", decoder); // 6.5.7\n        if (deltaWidth === null) {\n          break; // OOB\n        }\n        currentWidth += deltaWidth;\n        totalWidth += currentWidth;\n        var bitmap;\n        if (refinement) {\n          // 6.5.8.2 Refinement/aggregate-coded symbol bitmap\n          var numberOfInstances = decodeInteger(contextCache, \"IAAI\", decoder);\n          if (numberOfInstances > 1) {\n            bitmap = decodeTextRegion(\n              huffman,\n              refinement,\n              currentWidth,\n              currentHeight,\n              0,\n              numberOfInstances,\n              1, // strip size\n              symbols.concat(newSymbols),\n              symbolCodeLength,\n              0, // transposed\n              0, // ds offset\n              1, // top left 7.4.3.1.1\n              0, // OR operator\n              huffmanTables,\n              refinementTemplateIndex,\n              refinementAt,\n              decodingContext,\n              0,\n              huffmanInput\n            );\n          } else {\n            var symbolId = decodeIAID(contextCache, decoder, symbolCodeLength);\n            var rdx = decodeInteger(contextCache, \"IARDX\", decoder); // 6.4.11.3\n            var rdy = decodeInteger(contextCache, \"IARDY\", decoder); // 6.4.11.4\n            var symbol =\n              symbolId < symbols.length\n                ? symbols[symbolId]\n                : newSymbols[symbolId - symbols.length];\n            bitmap = decodeRefinement(\n              currentWidth,\n              currentHeight,\n              refinementTemplateIndex,\n              symbol,\n              rdx,\n              rdy,\n              false,\n              refinementAt,\n              decodingContext\n            );\n          }\n          newSymbols.push(bitmap);\n        } else if (huffman) {\n          // Store only symbol width and decode a collective bitmap when the\n          // height class is done.\n          symbolWidths.push(currentWidth);\n        } else {\n          // 6.5.8.1 Direct-coded symbol bitmap\n          bitmap = decodeBitmap(\n            false,\n            currentWidth,\n            currentHeight,\n            templateIndex,\n            false,\n            null,\n            at,\n            decodingContext\n          );\n          newSymbols.push(bitmap);\n        }\n      }\n      if (huffman && !refinement) {\n        // 6.5.9 Height class collective bitmap\n        const bitmapSize = huffmanTables.tableBitmapSize.decode(huffmanInput);\n        huffmanInput.byteAlign();\n        let collectiveBitmap;\n        if (bitmapSize === 0) {\n          // Uncompressed collective bitmap\n          collectiveBitmap = readUncompressedBitmap(\n            huffmanInput,\n            totalWidth,\n            currentHeight\n          );\n        } else {\n          // MMR collective bitmap\n          const originalEnd = huffmanInput.end;\n          const bitmapEnd = huffmanInput.position + bitmapSize;\n          huffmanInput.end = bitmapEnd;\n          collectiveBitmap = decodeMMRBitmap(\n            huffmanInput,\n            totalWidth,\n            currentHeight,\n            false\n          );\n          huffmanInput.end = originalEnd;\n          huffmanInput.position = bitmapEnd;\n        }\n        const numberOfSymbolsDecoded = symbolWidths.length;\n        if (firstSymbol === numberOfSymbolsDecoded - 1) {\n          // collectiveBitmap is a single symbol.\n          newSymbols.push(collectiveBitmap);\n        } else {\n          // Divide collectiveBitmap into symbols.\n          let i,\n            y,\n            xMin = 0,\n            xMax,\n            bitmapWidth,\n            symbolBitmap;\n          for (i = firstSymbol; i < numberOfSymbolsDecoded; i++) {\n            bitmapWidth = symbolWidths[i];\n            xMax = xMin + bitmapWidth;\n            symbolBitmap = [];\n            for (y = 0; y < currentHeight; y++) {\n              symbolBitmap.push(collectiveBitmap[y].subarray(xMin, xMax));\n            }\n            newSymbols.push(symbolBitmap);\n            xMin = xMax;\n          }\n        }\n      }\n    }\n\n    // 6.5.10 Exported symbols\n    var exportedSymbols = [];\n    var flags = [],\n      currentFlag = false;\n    var totalSymbolsLength = symbols.length + numberOfNewSymbols;\n    while (flags.length < totalSymbolsLength) {\n      var runLength = huffman\n        ? tableB1.decode(huffmanInput)\n        : decodeInteger(contextCache, \"IAEX\", decoder);\n      while (runLength--) {\n        flags.push(currentFlag);\n      }\n      currentFlag = !currentFlag;\n    }\n    for (var i = 0, ii = symbols.length; i < ii; i++) {\n      if (flags[i]) {\n        exportedSymbols.push(symbols[i]);\n      }\n    }\n    for (var j = 0; j < numberOfNewSymbols; i++, j++) {\n      if (flags[i]) {\n        exportedSymbols.push(newSymbols[j]);\n      }\n    }\n    return exportedSymbols;\n  }\n\n  function decodeTextRegion(\n    huffman,\n    refinement,\n    width,\n    height,\n    defaultPixelValue,\n    numberOfSymbolInstances,\n    stripSize,\n    inputSymbols,\n    symbolCodeLength,\n    transposed,\n    dsOffset,\n    referenceCorner,\n    combinationOperator,\n    huffmanTables,\n    refinementTemplateIndex,\n    refinementAt,\n    decodingContext,\n    logStripSize,\n    huffmanInput\n  ) {\n    if (huffman && refinement) {\n      throw new Jbig2Error(\"refinement with Huffman is not supported\");\n    }\n\n    // Prepare bitmap\n    var bitmap = [];\n    var i, row;\n    for (i = 0; i < height; i++) {\n      row = new Uint8Array(width);\n      if (defaultPixelValue) {\n        for (var j = 0; j < width; j++) {\n          row[j] = defaultPixelValue;\n        }\n      }\n      bitmap.push(row);\n    }\n\n    var decoder = decodingContext.decoder;\n    var contextCache = decodingContext.contextCache;\n\n    var stripT = huffman\n      ? -huffmanTables.tableDeltaT.decode(huffmanInput)\n      : -decodeInteger(contextCache, \"IADT\", decoder); // 6.4.6\n    var firstS = 0;\n    i = 0;\n    while (i < numberOfSymbolInstances) {\n      var deltaT = huffman\n        ? huffmanTables.tableDeltaT.decode(huffmanInput)\n        : decodeInteger(contextCache, \"IADT\", decoder); // 6.4.6\n      stripT += deltaT;\n\n      var deltaFirstS = huffman\n        ? huffmanTables.tableFirstS.decode(huffmanInput)\n        : decodeInteger(contextCache, \"IAFS\", decoder); // 6.4.7\n      firstS += deltaFirstS;\n      var currentS = firstS;\n      do {\n        let currentT = 0; // 6.4.9\n        if (stripSize > 1) {\n          currentT = huffman\n            ? huffmanInput.readBits(logStripSize)\n            : decodeInteger(contextCache, \"IAIT\", decoder);\n        }\n        var t = stripSize * stripT + currentT;\n        var symbolId = huffman\n          ? huffmanTables.symbolIDTable.decode(huffmanInput)\n          : decodeIAID(contextCache, decoder, symbolCodeLength);\n        var applyRefinement =\n          refinement &&\n          (huffman\n            ? huffmanInput.readBit()\n            : decodeInteger(contextCache, \"IARI\", decoder));\n        var symbolBitmap = inputSymbols[symbolId];\n        var symbolWidth = symbolBitmap[0].length;\n        var symbolHeight = symbolBitmap.length;\n        if (applyRefinement) {\n          var rdw = decodeInteger(contextCache, \"IARDW\", decoder); // 6.4.11.1\n          var rdh = decodeInteger(contextCache, \"IARDH\", decoder); // 6.4.11.2\n          var rdx = decodeInteger(contextCache, \"IARDX\", decoder); // 6.4.11.3\n          var rdy = decodeInteger(contextCache, \"IARDY\", decoder); // 6.4.11.4\n          symbolWidth += rdw;\n          symbolHeight += rdh;\n          symbolBitmap = decodeRefinement(\n            symbolWidth,\n            symbolHeight,\n            refinementTemplateIndex,\n            symbolBitmap,\n            (rdw >> 1) + rdx,\n            (rdh >> 1) + rdy,\n            false,\n            refinementAt,\n            decodingContext\n          );\n        }\n        var offsetT = t - (referenceCorner & 1 ? 0 : symbolHeight - 1);\n        var offsetS = currentS - (referenceCorner & 2 ? symbolWidth - 1 : 0);\n        var s2, t2, symbolRow;\n        if (transposed) {\n          // Place Symbol Bitmap from T1,S1\n          for (s2 = 0; s2 < symbolHeight; s2++) {\n            row = bitmap[offsetS + s2];\n            if (!row) {\n              continue;\n            }\n            symbolRow = symbolBitmap[s2];\n            // To ignore Parts of Symbol bitmap which goes\n            // outside bitmap region\n            var maxWidth = Math.min(width - offsetT, symbolWidth);\n            switch (combinationOperator) {\n              case 0: // OR\n                for (t2 = 0; t2 < maxWidth; t2++) {\n                  row[offsetT + t2] |= symbolRow[t2];\n                }\n                break;\n              case 2: // XOR\n                for (t2 = 0; t2 < maxWidth; t2++) {\n                  row[offsetT + t2] ^= symbolRow[t2];\n                }\n                break;\n              default:\n                throw new Jbig2Error(\n                  `operator ${combinationOperator} is not supported`\n                );\n            }\n          }\n          currentS += symbolHeight - 1;\n        } else {\n          for (t2 = 0; t2 < symbolHeight; t2++) {\n            row = bitmap[offsetT + t2];\n            if (!row) {\n              continue;\n            }\n            symbolRow = symbolBitmap[t2];\n            switch (combinationOperator) {\n              case 0: // OR\n                for (s2 = 0; s2 < symbolWidth; s2++) {\n                  row[offsetS + s2] |= symbolRow[s2];\n                }\n                break;\n              case 2: // XOR\n                for (s2 = 0; s2 < symbolWidth; s2++) {\n                  row[offsetS + s2] ^= symbolRow[s2];\n                }\n                break;\n              default:\n                throw new Jbig2Error(\n                  `operator ${combinationOperator} is not supported`\n                );\n            }\n          }\n          currentS += symbolWidth - 1;\n        }\n        i++;\n        var deltaS = huffman\n          ? huffmanTables.tableDeltaS.decode(huffmanInput)\n          : decodeInteger(contextCache, \"IADS\", decoder); // 6.4.8\n        if (deltaS === null) {\n          break; // OOB\n        }\n        currentS += deltaS + dsOffset;\n      } while (true);\n    }\n    return bitmap;\n  }\n\n  function decodePatternDictionary(\n    mmr,\n    patternWidth,\n    patternHeight,\n    maxPatternIndex,\n    template,\n    decodingContext\n  ) {\n    const at = [];\n    if (!mmr) {\n      at.push({\n        x: -patternWidth,\n        y: 0,\n      });\n      if (template === 0) {\n        at.push({\n          x: -3,\n          y: -1,\n        });\n        at.push({\n          x: 2,\n          y: -2,\n        });\n        at.push({\n          x: -2,\n          y: -2,\n        });\n      }\n    }\n    const collectiveWidth = (maxPatternIndex + 1) * patternWidth;\n    const collectiveBitmap = decodeBitmap(\n      mmr,\n      collectiveWidth,\n      patternHeight,\n      template,\n      false,\n      null,\n      at,\n      decodingContext\n    );\n    // Divide collective bitmap into patterns.\n    const patterns = [];\n    for (let i = 0; i <= maxPatternIndex; i++) {\n      const patternBitmap = [];\n      const xMin = patternWidth * i;\n      const xMax = xMin + patternWidth;\n      for (let y = 0; y < patternHeight; y++) {\n        patternBitmap.push(collectiveBitmap[y].subarray(xMin, xMax));\n      }\n      patterns.push(patternBitmap);\n    }\n    return patterns;\n  }\n\n  function decodeHalftoneRegion(\n    mmr,\n    patterns,\n    template,\n    regionWidth,\n    regionHeight,\n    defaultPixelValue,\n    enableSkip,\n    combinationOperator,\n    gridWidth,\n    gridHeight,\n    gridOffsetX,\n    gridOffsetY,\n    gridVectorX,\n    gridVectorY,\n    decodingContext\n  ) {\n    const skip = null;\n    if (enableSkip) {\n      throw new Jbig2Error(\"skip is not supported\");\n    }\n    if (combinationOperator !== 0) {\n      throw new Jbig2Error(\n        \"operator \" +\n          combinationOperator +\n          \" is not supported in halftone region\"\n      );\n    }\n\n    // Prepare bitmap.\n    const regionBitmap = [];\n    let i, j, row;\n    for (i = 0; i < regionHeight; i++) {\n      row = new Uint8Array(regionWidth);\n      if (defaultPixelValue) {\n        for (j = 0; j < regionWidth; j++) {\n          row[j] = defaultPixelValue;\n        }\n      }\n      regionBitmap.push(row);\n    }\n\n    const numberOfPatterns = patterns.length;\n    const pattern0 = patterns[0];\n    const patternWidth = pattern0[0].length,\n      patternHeight = pattern0.length;\n    const bitsPerValue = log2(numberOfPatterns);\n    const at = [];\n    if (!mmr) {\n      at.push({\n        x: template <= 1 ? 3 : 2,\n        y: -1,\n      });\n      if (template === 0) {\n        at.push({\n          x: -3,\n          y: -1,\n        });\n        at.push({\n          x: 2,\n          y: -2,\n        });\n        at.push({\n          x: -2,\n          y: -2,\n        });\n      }\n    }\n    // Annex C. Gray-scale Image Decoding Procedure.\n    const grayScaleBitPlanes = [];\n    let mmrInput, bitmap;\n    if (mmr) {\n      // MMR bit planes are in one continuous stream. Only EOFB codes indicate\n      // the end of each bitmap, so EOFBs must be decoded.\n      mmrInput = new Reader(\n        decodingContext.data,\n        decodingContext.start,\n        decodingContext.end\n      );\n    }\n    for (i = bitsPerValue - 1; i >= 0; i--) {\n      if (mmr) {\n        bitmap = decodeMMRBitmap(mmrInput, gridWidth, gridHeight, true);\n      } else {\n        bitmap = decodeBitmap(\n          false,\n          gridWidth,\n          gridHeight,\n          template,\n          false,\n          skip,\n          at,\n          decodingContext\n        );\n      }\n      grayScaleBitPlanes[i] = bitmap;\n    }\n    // 6.6.5.2 Rendering the patterns.\n    let mg, ng, bit, patternIndex, patternBitmap, x, y, patternRow, regionRow;\n    for (mg = 0; mg < gridHeight; mg++) {\n      for (ng = 0; ng < gridWidth; ng++) {\n        bit = 0;\n        patternIndex = 0;\n        for (j = bitsPerValue - 1; j >= 0; j--) {\n          bit = grayScaleBitPlanes[j][mg][ng] ^ bit; // Gray decoding\n          patternIndex |= bit << j;\n        }\n        patternBitmap = patterns[patternIndex];\n        x = (gridOffsetX + mg * gridVectorY + ng * gridVectorX) >> 8;\n        y = (gridOffsetY + mg * gridVectorX - ng * gridVectorY) >> 8;\n        // Draw patternBitmap at (x, y).\n        if (\n          x >= 0 &&\n          x + patternWidth <= regionWidth &&\n          y >= 0 &&\n          y + patternHeight <= regionHeight\n        ) {\n          for (i = 0; i < patternHeight; i++) {\n            regionRow = regionBitmap[y + i];\n            patternRow = patternBitmap[i];\n            for (j = 0; j < patternWidth; j++) {\n              regionRow[x + j] |= patternRow[j];\n            }\n          }\n        } else {\n          let regionX, regionY;\n          for (i = 0; i < patternHeight; i++) {\n            regionY = y + i;\n            if (regionY < 0 || regionY >= regionHeight) {\n              continue;\n            }\n            regionRow = regionBitmap[regionY];\n            patternRow = patternBitmap[i];\n            for (j = 0; j < patternWidth; j++) {\n              regionX = x + j;\n              if (regionX >= 0 && regionX < regionWidth) {\n                regionRow[regionX] |= patternRow[j];\n              }\n            }\n          }\n        }\n      }\n    }\n    return regionBitmap;\n  }\n\n  function readSegmentHeader(data, start) {\n    var segmentHeader = {};\n    segmentHeader.number = readUint32(data, start);\n    var flags = data[start + 4];\n    var segmentType = flags & 0x3f;\n    if (!SegmentTypes[segmentType]) {\n      throw new Jbig2Error(\"invalid segment type: \" + segmentType);\n    }\n    segmentHeader.type = segmentType;\n    segmentHeader.typeName = SegmentTypes[segmentType];\n    segmentHeader.deferredNonRetain = !!(flags & 0x80);\n\n    var pageAssociationFieldSize = !!(flags & 0x40);\n    var referredFlags = data[start + 5];\n    var referredToCount = (referredFlags >> 5) & 7;\n    var retainBits = [referredFlags & 31];\n    var position = start + 6;\n    if (referredFlags === 7) {\n      referredToCount = readUint32(data, position - 1) & 0x1fffffff;\n      position += 3;\n      var bytes = (referredToCount + 7) >> 3;\n      retainBits[0] = data[position++];\n      while (--bytes > 0) {\n        retainBits.push(data[position++]);\n      }\n    } else if (referredFlags === 5 || referredFlags === 6) {\n      throw new Jbig2Error(\"invalid referred-to flags\");\n    }\n\n    segmentHeader.retainBits = retainBits;\n\n    let referredToSegmentNumberSize = 4;\n    if (segmentHeader.number <= 256) {\n      referredToSegmentNumberSize = 1;\n    } else if (segmentHeader.number <= 65536) {\n      referredToSegmentNumberSize = 2;\n    }\n    var referredTo = [];\n    var i, ii;\n    for (i = 0; i < referredToCount; i++) {\n      let number;\n      if (referredToSegmentNumberSize === 1) {\n        number = data[position];\n      } else if (referredToSegmentNumberSize === 2) {\n        number = readUint16(data, position);\n      } else {\n        number = readUint32(data, position);\n      }\n      referredTo.push(number);\n      position += referredToSegmentNumberSize;\n    }\n    segmentHeader.referredTo = referredTo;\n    if (!pageAssociationFieldSize) {\n      segmentHeader.pageAssociation = data[position++];\n    } else {\n      segmentHeader.pageAssociation = readUint32(data, position);\n      position += 4;\n    }\n    segmentHeader.length = readUint32(data, position);\n    position += 4;\n\n    if (segmentHeader.length === 0xffffffff) {\n      // 7.2.7 Segment data length, unknown segment length\n      if (segmentType === 38) {\n        // ImmediateGenericRegion\n        var genericRegionInfo = readRegionSegmentInformation(data, position);\n        var genericRegionSegmentFlags =\n          data[position + RegionSegmentInformationFieldLength];\n        var genericRegionMmr = !!(genericRegionSegmentFlags & 1);\n        // searching for the segment end\n        var searchPatternLength = 6;\n        var searchPattern = new Uint8Array(searchPatternLength);\n        if (!genericRegionMmr) {\n          searchPattern[0] = 0xff;\n          searchPattern[1] = 0xac;\n        }\n        searchPattern[2] = (genericRegionInfo.height >>> 24) & 0xff;\n        searchPattern[3] = (genericRegionInfo.height >> 16) & 0xff;\n        searchPattern[4] = (genericRegionInfo.height >> 8) & 0xff;\n        searchPattern[5] = genericRegionInfo.height & 0xff;\n        for (i = position, ii = data.length; i < ii; i++) {\n          var j = 0;\n          while (j < searchPatternLength && searchPattern[j] === data[i + j]) {\n            j++;\n          }\n          if (j === searchPatternLength) {\n            segmentHeader.length = i + searchPatternLength;\n            break;\n          }\n        }\n        if (segmentHeader.length === 0xffffffff) {\n          throw new Jbig2Error(\"segment end was not found\");\n        }\n      } else {\n        throw new Jbig2Error(\"invalid unknown segment length\");\n      }\n    }\n    segmentHeader.headerEnd = position;\n    return segmentHeader;\n  }\n\n  function readSegments(header, data, start, end) {\n    var segments = [];\n    var position = start;\n    while (position < end) {\n      var segmentHeader = readSegmentHeader(data, position);\n      position = segmentHeader.headerEnd;\n      var segment = {\n        header: segmentHeader,\n        data,\n      };\n      if (!header.randomAccess) {\n        segment.start = position;\n        position += segmentHeader.length;\n        segment.end = position;\n      }\n      segments.push(segment);\n      if (segmentHeader.type === 51) {\n        break; // end of file is found\n      }\n    }\n    if (header.randomAccess) {\n      for (var i = 0, ii = segments.length; i < ii; i++) {\n        segments[i].start = position;\n        position += segments[i].header.length;\n        segments[i].end = position;\n      }\n    }\n    return segments;\n  }\n\n  // 7.4.1 Region segment information field\n  function readRegionSegmentInformation(data, start) {\n    return {\n      width: readUint32(data, start),\n      height: readUint32(data, start + 4),\n      x: readUint32(data, start + 8),\n      y: readUint32(data, start + 12),\n      combinationOperator: data[start + 16] & 7,\n    };\n  }\n  var RegionSegmentInformationFieldLength = 17;\n\n  function processSegment(segment, visitor) {\n    var header = segment.header;\n\n    var data = segment.data,\n      position = segment.start,\n      end = segment.end;\n    var args, at, i, atLength;\n    switch (header.type) {\n      case 0: // SymbolDictionary\n        // 7.4.2 Symbol dictionary segment syntax\n        var dictionary = {};\n        var dictionaryFlags = readUint16(data, position); // 7.4.2.1.1\n        dictionary.huffman = !!(dictionaryFlags & 1);\n        dictionary.refinement = !!(dictionaryFlags & 2);\n        dictionary.huffmanDHSelector = (dictionaryFlags >> 2) & 3;\n        dictionary.huffmanDWSelector = (dictionaryFlags >> 4) & 3;\n        dictionary.bitmapSizeSelector = (dictionaryFlags >> 6) & 1;\n        dictionary.aggregationInstancesSelector = (dictionaryFlags >> 7) & 1;\n        dictionary.bitmapCodingContextUsed = !!(dictionaryFlags & 256);\n        dictionary.bitmapCodingContextRetained = !!(dictionaryFlags & 512);\n        dictionary.template = (dictionaryFlags >> 10) & 3;\n        dictionary.refinementTemplate = (dictionaryFlags >> 12) & 1;\n        position += 2;\n        if (!dictionary.huffman) {\n          atLength = dictionary.template === 0 ? 4 : 1;\n          at = [];\n          for (i = 0; i < atLength; i++) {\n            at.push({\n              x: readInt8(data, position),\n              y: readInt8(data, position + 1),\n            });\n            position += 2;\n          }\n          dictionary.at = at;\n        }\n        if (dictionary.refinement && !dictionary.refinementTemplate) {\n          at = [];\n          for (i = 0; i < 2; i++) {\n            at.push({\n              x: readInt8(data, position),\n              y: readInt8(data, position + 1),\n            });\n            position += 2;\n          }\n          dictionary.refinementAt = at;\n        }\n        dictionary.numberOfExportedSymbols = readUint32(data, position);\n        position += 4;\n        dictionary.numberOfNewSymbols = readUint32(data, position);\n        position += 4;\n        args = [\n          dictionary,\n          header.number,\n          header.referredTo,\n          data,\n          position,\n          end,\n        ];\n        break;\n      case 6: // ImmediateTextRegion\n      case 7: // ImmediateLosslessTextRegion\n        var textRegion = {};\n        textRegion.info = readRegionSegmentInformation(data, position);\n        position += RegionSegmentInformationFieldLength;\n        var textRegionSegmentFlags = readUint16(data, position);\n        position += 2;\n        textRegion.huffman = !!(textRegionSegmentFlags & 1);\n        textRegion.refinement = !!(textRegionSegmentFlags & 2);\n        textRegion.logStripSize = (textRegionSegmentFlags >> 2) & 3;\n        textRegion.stripSize = 1 << textRegion.logStripSize;\n        textRegion.referenceCorner = (textRegionSegmentFlags >> 4) & 3;\n        textRegion.transposed = !!(textRegionSegmentFlags & 64);\n        textRegion.combinationOperator = (textRegionSegmentFlags >> 7) & 3;\n        textRegion.defaultPixelValue = (textRegionSegmentFlags >> 9) & 1;\n        textRegion.dsOffset = (textRegionSegmentFlags << 17) >> 27;\n        textRegion.refinementTemplate = (textRegionSegmentFlags >> 15) & 1;\n        if (textRegion.huffman) {\n          var textRegionHuffmanFlags = readUint16(data, position);\n          position += 2;\n          textRegion.huffmanFS = textRegionHuffmanFlags & 3;\n          textRegion.huffmanDS = (textRegionHuffmanFlags >> 2) & 3;\n          textRegion.huffmanDT = (textRegionHuffmanFlags >> 4) & 3;\n          textRegion.huffmanRefinementDW = (textRegionHuffmanFlags >> 6) & 3;\n          textRegion.huffmanRefinementDH = (textRegionHuffmanFlags >> 8) & 3;\n          textRegion.huffmanRefinementDX = (textRegionHuffmanFlags >> 10) & 3;\n          textRegion.huffmanRefinementDY = (textRegionHuffmanFlags >> 12) & 3;\n          textRegion.huffmanRefinementSizeSelector = !!(\n            textRegionHuffmanFlags & 0x4000\n          );\n        }\n        if (textRegion.refinement && !textRegion.refinementTemplate) {\n          at = [];\n          for (i = 0; i < 2; i++) {\n            at.push({\n              x: readInt8(data, position),\n              y: readInt8(data, position + 1),\n            });\n            position += 2;\n          }\n          textRegion.refinementAt = at;\n        }\n        textRegion.numberOfSymbolInstances = readUint32(data, position);\n        position += 4;\n        args = [textRegion, header.referredTo, data, position, end];\n        break;\n      case 16: // PatternDictionary\n        // 7.4.4. Pattern dictionary segment syntax\n        const patternDictionary = {};\n        const patternDictionaryFlags = data[position++];\n        patternDictionary.mmr = !!(patternDictionaryFlags & 1);\n        patternDictionary.template = (patternDictionaryFlags >> 1) & 3;\n        patternDictionary.patternWidth = data[position++];\n        patternDictionary.patternHeight = data[position++];\n        patternDictionary.maxPatternIndex = readUint32(data, position);\n        position += 4;\n        args = [patternDictionary, header.number, data, position, end];\n        break;\n      case 22: // ImmediateHalftoneRegion\n      case 23: // ImmediateLosslessHalftoneRegion\n        // 7.4.5 Halftone region segment syntax\n        const halftoneRegion = {};\n        halftoneRegion.info = readRegionSegmentInformation(data, position);\n        position += RegionSegmentInformationFieldLength;\n        const halftoneRegionFlags = data[position++];\n        halftoneRegion.mmr = !!(halftoneRegionFlags & 1);\n        halftoneRegion.template = (halftoneRegionFlags >> 1) & 3;\n        halftoneRegion.enableSkip = !!(halftoneRegionFlags & 8);\n        halftoneRegion.combinationOperator = (halftoneRegionFlags >> 4) & 7;\n        halftoneRegion.defaultPixelValue = (halftoneRegionFlags >> 7) & 1;\n        halftoneRegion.gridWidth = readUint32(data, position);\n        position += 4;\n        halftoneRegion.gridHeight = readUint32(data, position);\n        position += 4;\n        halftoneRegion.gridOffsetX = readUint32(data, position) & 0xffffffff;\n        position += 4;\n        halftoneRegion.gridOffsetY = readUint32(data, position) & 0xffffffff;\n        position += 4;\n        halftoneRegion.gridVectorX = readUint16(data, position);\n        position += 2;\n        halftoneRegion.gridVectorY = readUint16(data, position);\n        position += 2;\n        args = [halftoneRegion, header.referredTo, data, position, end];\n        break;\n      case 38: // ImmediateGenericRegion\n      case 39: // ImmediateLosslessGenericRegion\n        var genericRegion = {};\n        genericRegion.info = readRegionSegmentInformation(data, position);\n        position += RegionSegmentInformationFieldLength;\n        var genericRegionSegmentFlags = data[position++];\n        genericRegion.mmr = !!(genericRegionSegmentFlags & 1);\n        genericRegion.template = (genericRegionSegmentFlags >> 1) & 3;\n        genericRegion.prediction = !!(genericRegionSegmentFlags & 8);\n        if (!genericRegion.mmr) {\n          atLength = genericRegion.template === 0 ? 4 : 1;\n          at = [];\n          for (i = 0; i < atLength; i++) {\n            at.push({\n              x: readInt8(data, position),\n              y: readInt8(data, position + 1),\n            });\n            position += 2;\n          }\n          genericRegion.at = at;\n        }\n        args = [genericRegion, data, position, end];\n        break;\n      case 48: // PageInformation\n        var pageInfo = {\n          width: readUint32(data, position),\n          height: readUint32(data, position + 4),\n          resolutionX: readUint32(data, position + 8),\n          resolutionY: readUint32(data, position + 12),\n        };\n        if (pageInfo.height === 0xffffffff) {\n          delete pageInfo.height;\n        }\n        var pageSegmentFlags = data[position + 16];\n        readUint16(data, position + 17); // pageStripingInformation\n        pageInfo.lossless = !!(pageSegmentFlags & 1);\n        pageInfo.refinement = !!(pageSegmentFlags & 2);\n        pageInfo.defaultPixelValue = (pageSegmentFlags >> 2) & 1;\n        pageInfo.combinationOperator = (pageSegmentFlags >> 3) & 3;\n        pageInfo.requiresBuffer = !!(pageSegmentFlags & 32);\n        pageInfo.combinationOperatorOverride = !!(pageSegmentFlags & 64);\n        args = [pageInfo];\n        break;\n      case 49: // EndOfPage\n        break;\n      case 50: // EndOfStripe\n        break;\n      case 51: // EndOfFile\n        break;\n      case 53: // Tables\n        args = [header.number, data, position, end];\n        break;\n      case 62: // 7.4.15 defines 2 extension types which\n        // are comments and can be ignored.\n        break;\n      default:\n        throw new Jbig2Error(\n          `segment type ${header.typeName}(${header.type})` +\n            \" is not implemented\"\n        );\n    }\n    var callbackName = \"on\" + header.typeName;\n    if (callbackName in visitor) {\n      visitor[callbackName].apply(visitor, args);\n    }\n  }\n\n  function processSegments(segments, visitor) {\n    for (var i = 0, ii = segments.length; i < ii; i++) {\n      processSegment(segments[i], visitor);\n    }\n  }\n\n  function parseJbig2Chunks(chunks) {\n    var visitor = new SimpleSegmentVisitor();\n    for (var i = 0, ii = chunks.length; i < ii; i++) {\n      var chunk = chunks[i];\n      var segments = readSegments({}, chunk.data, chunk.start, chunk.end);\n      processSegments(segments, visitor);\n    }\n    return visitor.buffer;\n  }\n\n  function parseJbig2(data) {\n    const end = data.length;\n    let position = 0;\n\n    if (\n      data[position] !== 0x97 ||\n      data[position + 1] !== 0x4a ||\n      data[position + 2] !== 0x42 ||\n      data[position + 3] !== 0x32 ||\n      data[position + 4] !== 0x0d ||\n      data[position + 5] !== 0x0a ||\n      data[position + 6] !== 0x1a ||\n      data[position + 7] !== 0x0a\n    ) {\n      throw new Jbig2Error(\"parseJbig2 - invalid header.\");\n    }\n\n    const header = Object.create(null);\n    position += 8;\n    const flags = data[position++];\n    header.randomAccess = !(flags & 1);\n    if (!(flags & 2)) {\n      header.numberOfPages = readUint32(data, position);\n      position += 4;\n    }\n\n    const segments = readSegments(header, data, position, end);\n    const visitor = new SimpleSegmentVisitor();\n    processSegments(segments, visitor);\n\n    const { width, height } = visitor.currentPageInfo;\n    const bitPacked = visitor.buffer;\n    const imgData = new Uint8ClampedArray(width * height);\n    let q = 0,\n      k = 0;\n    for (let i = 0; i < height; i++) {\n      let mask = 0,\n        buffer;\n      for (let j = 0; j < width; j++) {\n        if (!mask) {\n          mask = 128;\n          buffer = bitPacked[k++];\n        }\n        imgData[q++] = buffer & mask ? 0 : 255;\n        mask >>= 1;\n      }\n    }\n\n    return { imgData, width, height };\n  }\n\n  function SimpleSegmentVisitor() {}\n\n  SimpleSegmentVisitor.prototype = {\n    onPageInformation: function SimpleSegmentVisitor_onPageInformation(info) {\n      this.currentPageInfo = info;\n      var rowSize = (info.width + 7) >> 3;\n      var buffer = new Uint8ClampedArray(rowSize * info.height);\n      // The contents of ArrayBuffers are initialized to 0.\n      // Fill the buffer with 0xFF only if info.defaultPixelValue is set\n      if (info.defaultPixelValue) {\n        for (var i = 0, ii = buffer.length; i < ii; i++) {\n          buffer[i] = 0xff;\n        }\n      }\n      this.buffer = buffer;\n    },\n    drawBitmap: function SimpleSegmentVisitor_drawBitmap(regionInfo, bitmap) {\n      var pageInfo = this.currentPageInfo;\n      var width = regionInfo.width,\n        height = regionInfo.height;\n      var rowSize = (pageInfo.width + 7) >> 3;\n      var combinationOperator = pageInfo.combinationOperatorOverride\n        ? regionInfo.combinationOperator\n        : pageInfo.combinationOperator;\n      var buffer = this.buffer;\n      var mask0 = 128 >> (regionInfo.x & 7);\n      var offset0 = regionInfo.y * rowSize + (regionInfo.x >> 3);\n      var i, j, mask, offset;\n      switch (combinationOperator) {\n        case 0: // OR\n          for (i = 0; i < height; i++) {\n            mask = mask0;\n            offset = offset0;\n            for (j = 0; j < width; j++) {\n              if (bitmap[i][j]) {\n                buffer[offset] |= mask;\n              }\n              mask >>= 1;\n              if (!mask) {\n                mask = 128;\n                offset++;\n              }\n            }\n            offset0 += rowSize;\n          }\n          break;\n        case 2: // XOR\n          for (i = 0; i < height; i++) {\n            mask = mask0;\n            offset = offset0;\n            for (j = 0; j < width; j++) {\n              if (bitmap[i][j]) {\n                buffer[offset] ^= mask;\n              }\n              mask >>= 1;\n              if (!mask) {\n                mask = 128;\n                offset++;\n              }\n            }\n            offset0 += rowSize;\n          }\n          break;\n        default:\n          throw new Jbig2Error(\n            `operator ${combinationOperator} is not supported`\n          );\n      }\n    },\n    onImmediateGenericRegion: function SimpleSegmentVisitor_onImmediateGenericRegion(\n      region,\n      data,\n      start,\n      end\n    ) {\n      var regionInfo = region.info;\n      var decodingContext = new DecodingContext(data, start, end);\n      var bitmap = decodeBitmap(\n        region.mmr,\n        regionInfo.width,\n        regionInfo.height,\n        region.template,\n        region.prediction,\n        null,\n        region.at,\n        decodingContext\n      );\n      this.drawBitmap(regionInfo, bitmap);\n    },\n    onImmediateLosslessGenericRegion: function SimpleSegmentVisitor_onImmediateLosslessGenericRegion() {\n      this.onImmediateGenericRegion.apply(this, arguments);\n    },\n    onSymbolDictionary: function SimpleSegmentVisitor_onSymbolDictionary(\n      dictionary,\n      currentSegment,\n      referredSegments,\n      data,\n      start,\n      end\n    ) {\n      let huffmanTables, huffmanInput;\n      if (dictionary.huffman) {\n        huffmanTables = getSymbolDictionaryHuffmanTables(\n          dictionary,\n          referredSegments,\n          this.customTables\n        );\n        huffmanInput = new Reader(data, start, end);\n      }\n\n      // Combines exported symbols from all referred segments\n      var symbols = this.symbols;\n      if (!symbols) {\n        this.symbols = symbols = {};\n      }\n\n      var inputSymbols = [];\n      for (var i = 0, ii = referredSegments.length; i < ii; i++) {\n        const referredSymbols = symbols[referredSegments[i]];\n        // referredSymbols is undefined when we have a reference to a Tables\n        // segment instead of a SymbolDictionary.\n        if (referredSymbols) {\n          inputSymbols = inputSymbols.concat(referredSymbols);\n        }\n      }\n\n      var decodingContext = new DecodingContext(data, start, end);\n      symbols[currentSegment] = decodeSymbolDictionary(\n        dictionary.huffman,\n        dictionary.refinement,\n        inputSymbols,\n        dictionary.numberOfNewSymbols,\n        dictionary.numberOfExportedSymbols,\n        huffmanTables,\n        dictionary.template,\n        dictionary.at,\n        dictionary.refinementTemplate,\n        dictionary.refinementAt,\n        decodingContext,\n        huffmanInput\n      );\n    },\n    onImmediateTextRegion: function SimpleSegmentVisitor_onImmediateTextRegion(\n      region,\n      referredSegments,\n      data,\n      start,\n      end\n    ) {\n      var regionInfo = region.info;\n      let huffmanTables, huffmanInput;\n\n      // Combines exported symbols from all referred segments\n      var symbols = this.symbols;\n      var inputSymbols = [];\n      for (var i = 0, ii = referredSegments.length; i < ii; i++) {\n        const referredSymbols = symbols[referredSegments[i]];\n        // referredSymbols is undefined when we have a reference to a Tables\n        // segment instead of a SymbolDictionary.\n        if (referredSymbols) {\n          inputSymbols = inputSymbols.concat(referredSymbols);\n        }\n      }\n      var symbolCodeLength = log2(inputSymbols.length);\n      if (region.huffman) {\n        huffmanInput = new Reader(data, start, end);\n        huffmanTables = getTextRegionHuffmanTables(\n          region,\n          referredSegments,\n          this.customTables,\n          inputSymbols.length,\n          huffmanInput\n        );\n      }\n\n      var decodingContext = new DecodingContext(data, start, end);\n      var bitmap = decodeTextRegion(\n        region.huffman,\n        region.refinement,\n        regionInfo.width,\n        regionInfo.height,\n        region.defaultPixelValue,\n        region.numberOfSymbolInstances,\n        region.stripSize,\n        inputSymbols,\n        symbolCodeLength,\n        region.transposed,\n        region.dsOffset,\n        region.referenceCorner,\n        region.combinationOperator,\n        huffmanTables,\n        region.refinementTemplate,\n        region.refinementAt,\n        decodingContext,\n        region.logStripSize,\n        huffmanInput\n      );\n      this.drawBitmap(regionInfo, bitmap);\n    },\n    onImmediateLosslessTextRegion: function SimpleSegmentVisitor_onImmediateLosslessTextRegion() {\n      this.onImmediateTextRegion.apply(this, arguments);\n    },\n    onPatternDictionary(dictionary, currentSegment, data, start, end) {\n      let patterns = this.patterns;\n      if (!patterns) {\n        this.patterns = patterns = {};\n      }\n      const decodingContext = new DecodingContext(data, start, end);\n      patterns[currentSegment] = decodePatternDictionary(\n        dictionary.mmr,\n        dictionary.patternWidth,\n        dictionary.patternHeight,\n        dictionary.maxPatternIndex,\n        dictionary.template,\n        decodingContext\n      );\n    },\n    onImmediateHalftoneRegion(region, referredSegments, data, start, end) {\n      // HalftoneRegion refers to exactly one PatternDictionary.\n      const patterns = this.patterns[referredSegments[0]];\n      const regionInfo = region.info;\n      const decodingContext = new DecodingContext(data, start, end);\n      const bitmap = decodeHalftoneRegion(\n        region.mmr,\n        patterns,\n        region.template,\n        regionInfo.width,\n        regionInfo.height,\n        region.defaultPixelValue,\n        region.enableSkip,\n        region.combinationOperator,\n        region.gridWidth,\n        region.gridHeight,\n        region.gridOffsetX,\n        region.gridOffsetY,\n        region.gridVectorX,\n        region.gridVectorY,\n        decodingContext\n      );\n      this.drawBitmap(regionInfo, bitmap);\n    },\n    onImmediateLosslessHalftoneRegion() {\n      this.onImmediateHalftoneRegion.apply(this, arguments);\n    },\n    onTables(currentSegment, data, start, end) {\n      let customTables = this.customTables;\n      if (!customTables) {\n        this.customTables = customTables = {};\n      }\n      customTables[currentSegment] = decodeTablesSegment(data, start, end);\n    },\n  };\n\n  function HuffmanLine(lineData) {\n    if (lineData.length === 2) {\n      // OOB line.\n      this.isOOB = true;\n      this.rangeLow = 0;\n      this.prefixLength = lineData[0];\n      this.rangeLength = 0;\n      this.prefixCode = lineData[1];\n      this.isLowerRange = false;\n    } else {\n      // Normal, upper range or lower range line.\n      // Upper range lines are processed like normal lines.\n      this.isOOB = false;\n      this.rangeLow = lineData[0];\n      this.prefixLength = lineData[1];\n      this.rangeLength = lineData[2];\n      this.prefixCode = lineData[3];\n      this.isLowerRange = lineData[4] === \"lower\";\n    }\n  }\n\n  function HuffmanTreeNode(line) {\n    this.children = [];\n    if (line) {\n      // Leaf node\n      this.isLeaf = true;\n      this.rangeLength = line.rangeLength;\n      this.rangeLow = line.rangeLow;\n      this.isLowerRange = line.isLowerRange;\n      this.isOOB = line.isOOB;\n    } else {\n      // Intermediate or root node\n      this.isLeaf = false;\n    }\n  }\n\n  HuffmanTreeNode.prototype = {\n    buildTree(line, shift) {\n      const bit = (line.prefixCode >> shift) & 1;\n      if (shift <= 0) {\n        // Create a leaf node.\n        this.children[bit] = new HuffmanTreeNode(line);\n      } else {\n        // Create an intermediate node and continue recursively.\n        let node = this.children[bit];\n        if (!node) {\n          this.children[bit] = node = new HuffmanTreeNode(null);\n        }\n        node.buildTree(line, shift - 1);\n      }\n    },\n    decodeNode(reader) {\n      if (this.isLeaf) {\n        if (this.isOOB) {\n          return null;\n        }\n        const htOffset = reader.readBits(this.rangeLength);\n        return this.rangeLow + (this.isLowerRange ? -htOffset : htOffset);\n      }\n      const node = this.children[reader.readBit()];\n      if (!node) {\n        throw new Jbig2Error(\"invalid Huffman data\");\n      }\n      return node.decodeNode(reader);\n    },\n  };\n\n  function HuffmanTable(lines, prefixCodesDone) {\n    if (!prefixCodesDone) {\n      this.assignPrefixCodes(lines);\n    }\n    // Create Huffman tree.\n    this.rootNode = new HuffmanTreeNode(null);\n    for (let i = 0, ii = lines.length; i < ii; i++) {\n      const line = lines[i];\n      if (line.prefixLength > 0) {\n        this.rootNode.buildTree(line, line.prefixLength - 1);\n      }\n    }\n  }\n\n  HuffmanTable.prototype = {\n    decode(reader) {\n      return this.rootNode.decodeNode(reader);\n    },\n    assignPrefixCodes(lines) {\n      // Annex B.3 Assigning the prefix codes.\n      const linesLength = lines.length;\n      let prefixLengthMax = 0;\n      for (let i = 0; i < linesLength; i++) {\n        prefixLengthMax = Math.max(prefixLengthMax, lines[i].prefixLength);\n      }\n\n      const histogram = new Uint32Array(prefixLengthMax + 1);\n      for (let i = 0; i < linesLength; i++) {\n        histogram[lines[i].prefixLength]++;\n      }\n      let currentLength = 1,\n        firstCode = 0,\n        currentCode,\n        currentTemp,\n        line;\n      histogram[0] = 0;\n\n      while (currentLength <= prefixLengthMax) {\n        firstCode = (firstCode + histogram[currentLength - 1]) << 1;\n        currentCode = firstCode;\n        currentTemp = 0;\n        while (currentTemp < linesLength) {\n          line = lines[currentTemp];\n          if (line.prefixLength === currentLength) {\n            line.prefixCode = currentCode;\n            currentCode++;\n          }\n          currentTemp++;\n        }\n        currentLength++;\n      }\n    },\n  };\n\n  function decodeTablesSegment(data, start, end) {\n    // Decodes a Tables segment, i.e., a custom Huffman table.\n    // Annex B.2 Code table structure.\n    const flags = data[start];\n    const lowestValue = readUint32(data, start + 1) & 0xffffffff;\n    const highestValue = readUint32(data, start + 5) & 0xffffffff;\n    const reader = new Reader(data, start + 9, end);\n\n    const prefixSizeBits = ((flags >> 1) & 7) + 1;\n    const rangeSizeBits = ((flags >> 4) & 7) + 1;\n    const lines = [];\n    let prefixLength,\n      rangeLength,\n      currentRangeLow = lowestValue;\n\n    // Normal table lines\n    do {\n      prefixLength = reader.readBits(prefixSizeBits);\n      rangeLength = reader.readBits(rangeSizeBits);\n      lines.push(\n        new HuffmanLine([currentRangeLow, prefixLength, rangeLength, 0])\n      );\n      currentRangeLow += 1 << rangeLength;\n    } while (currentRangeLow < highestValue);\n\n    // Lower range table line\n    prefixLength = reader.readBits(prefixSizeBits);\n    lines.push(\n      new HuffmanLine([lowestValue - 1, prefixLength, 32, 0, \"lower\"])\n    );\n\n    // Upper range table line\n    prefixLength = reader.readBits(prefixSizeBits);\n    lines.push(new HuffmanLine([highestValue, prefixLength, 32, 0]));\n\n    if (flags & 1) {\n      // Out-of-band table line\n      prefixLength = reader.readBits(prefixSizeBits);\n      lines.push(new HuffmanLine([prefixLength, 0]));\n    }\n\n    return new HuffmanTable(lines, false);\n  }\n\n  const standardTablesCache = {};\n\n  function getStandardTable(number) {\n    // Annex B.5 Standard Huffman tables.\n    let table = standardTablesCache[number];\n    if (table) {\n      return table;\n    }\n    let lines;\n    switch (number) {\n      case 1:\n        lines = [\n          [0, 1, 4, 0x0],\n          [16, 2, 8, 0x2],\n          [272, 3, 16, 0x6],\n          [65808, 3, 32, 0x7], // upper\n        ];\n        break;\n      case 2:\n        lines = [\n          [0, 1, 0, 0x0],\n          [1, 2, 0, 0x2],\n          [2, 3, 0, 0x6],\n          [3, 4, 3, 0xe],\n          [11, 5, 6, 0x1e],\n          [75, 6, 32, 0x3e], // upper\n          [6, 0x3f], // OOB\n        ];\n        break;\n      case 3:\n        lines = [\n          [-256, 8, 8, 0xfe],\n          [0, 1, 0, 0x0],\n          [1, 2, 0, 0x2],\n          [2, 3, 0, 0x6],\n          [3, 4, 3, 0xe],\n          [11, 5, 6, 0x1e],\n          [-257, 8, 32, 0xff, \"lower\"],\n          [75, 7, 32, 0x7e], // upper\n          [6, 0x3e], // OOB\n        ];\n        break;\n      case 4:\n        lines = [\n          [1, 1, 0, 0x0],\n          [2, 2, 0, 0x2],\n          [3, 3, 0, 0x6],\n          [4, 4, 3, 0xe],\n          [12, 5, 6, 0x1e],\n          [76, 5, 32, 0x1f], // upper\n        ];\n        break;\n      case 5:\n        lines = [\n          [-255, 7, 8, 0x7e],\n          [1, 1, 0, 0x0],\n          [2, 2, 0, 0x2],\n          [3, 3, 0, 0x6],\n          [4, 4, 3, 0xe],\n          [12, 5, 6, 0x1e],\n          [-256, 7, 32, 0x7f, \"lower\"],\n          [76, 6, 32, 0x3e], // upper\n        ];\n        break;\n      case 6:\n        lines = [\n          [-2048, 5, 10, 0x1c],\n          [-1024, 4, 9, 0x8],\n          [-512, 4, 8, 0x9],\n          [-256, 4, 7, 0xa],\n          [-128, 5, 6, 0x1d],\n          [-64, 5, 5, 0x1e],\n          [-32, 4, 5, 0xb],\n          [0, 2, 7, 0x0],\n          [128, 3, 7, 0x2],\n          [256, 3, 8, 0x3],\n          [512, 4, 9, 0xc],\n          [1024, 4, 10, 0xd],\n          [-2049, 6, 32, 0x3e, \"lower\"],\n          [2048, 6, 32, 0x3f], // upper\n        ];\n        break;\n      case 7:\n        lines = [\n          [-1024, 4, 9, 0x8],\n          [-512, 3, 8, 0x0],\n          [-256, 4, 7, 0x9],\n          [-128, 5, 6, 0x1a],\n          [-64, 5, 5, 0x1b],\n          [-32, 4, 5, 0xa],\n          [0, 4, 5, 0xb],\n          [32, 5, 5, 0x1c],\n          [64, 5, 6, 0x1d],\n          [128, 4, 7, 0xc],\n          [256, 3, 8, 0x1],\n          [512, 3, 9, 0x2],\n          [1024, 3, 10, 0x3],\n          [-1025, 5, 32, 0x1e, \"lower\"],\n          [2048, 5, 32, 0x1f], // upper\n        ];\n        break;\n      case 8:\n        lines = [\n          [-15, 8, 3, 0xfc],\n          [-7, 9, 1, 0x1fc],\n          [-5, 8, 1, 0xfd],\n          [-3, 9, 0, 0x1fd],\n          [-2, 7, 0, 0x7c],\n          [-1, 4, 0, 0xa],\n          [0, 2, 1, 0x0],\n          [2, 5, 0, 0x1a],\n          [3, 6, 0, 0x3a],\n          [4, 3, 4, 0x4],\n          [20, 6, 1, 0x3b],\n          [22, 4, 4, 0xb],\n          [38, 4, 5, 0xc],\n          [70, 5, 6, 0x1b],\n          [134, 5, 7, 0x1c],\n          [262, 6, 7, 0x3c],\n          [390, 7, 8, 0x7d],\n          [646, 6, 10, 0x3d],\n          [-16, 9, 32, 0x1fe, \"lower\"],\n          [1670, 9, 32, 0x1ff], // upper\n          [2, 0x1], // OOB\n        ];\n        break;\n      case 9:\n        lines = [\n          [-31, 8, 4, 0xfc],\n          [-15, 9, 2, 0x1fc],\n          [-11, 8, 2, 0xfd],\n          [-7, 9, 1, 0x1fd],\n          [-5, 7, 1, 0x7c],\n          [-3, 4, 1, 0xa],\n          [-1, 3, 1, 0x2],\n          [1, 3, 1, 0x3],\n          [3, 5, 1, 0x1a],\n          [5, 6, 1, 0x3a],\n          [7, 3, 5, 0x4],\n          [39, 6, 2, 0x3b],\n          [43, 4, 5, 0xb],\n          [75, 4, 6, 0xc],\n          [139, 5, 7, 0x1b],\n          [267, 5, 8, 0x1c],\n          [523, 6, 8, 0x3c],\n          [779, 7, 9, 0x7d],\n          [1291, 6, 11, 0x3d],\n          [-32, 9, 32, 0x1fe, \"lower\"],\n          [3339, 9, 32, 0x1ff], // upper\n          [2, 0x0], // OOB\n        ];\n        break;\n      case 10:\n        lines = [\n          [-21, 7, 4, 0x7a],\n          [-5, 8, 0, 0xfc],\n          [-4, 7, 0, 0x7b],\n          [-3, 5, 0, 0x18],\n          [-2, 2, 2, 0x0],\n          [2, 5, 0, 0x19],\n          [3, 6, 0, 0x36],\n          [4, 7, 0, 0x7c],\n          [5, 8, 0, 0xfd],\n          [6, 2, 6, 0x1],\n          [70, 5, 5, 0x1a],\n          [102, 6, 5, 0x37],\n          [134, 6, 6, 0x38],\n          [198, 6, 7, 0x39],\n          [326, 6, 8, 0x3a],\n          [582, 6, 9, 0x3b],\n          [1094, 6, 10, 0x3c],\n          [2118, 7, 11, 0x7d],\n          [-22, 8, 32, 0xfe, \"lower\"],\n          [4166, 8, 32, 0xff], // upper\n          [2, 0x2], // OOB\n        ];\n        break;\n      case 11:\n        lines = [\n          [1, 1, 0, 0x0],\n          [2, 2, 1, 0x2],\n          [4, 4, 0, 0xc],\n          [5, 4, 1, 0xd],\n          [7, 5, 1, 0x1c],\n          [9, 5, 2, 0x1d],\n          [13, 6, 2, 0x3c],\n          [17, 7, 2, 0x7a],\n          [21, 7, 3, 0x7b],\n          [29, 7, 4, 0x7c],\n          [45, 7, 5, 0x7d],\n          [77, 7, 6, 0x7e],\n          [141, 7, 32, 0x7f], // upper\n        ];\n        break;\n      case 12:\n        lines = [\n          [1, 1, 0, 0x0],\n          [2, 2, 0, 0x2],\n          [3, 3, 1, 0x6],\n          [5, 5, 0, 0x1c],\n          [6, 5, 1, 0x1d],\n          [8, 6, 1, 0x3c],\n          [10, 7, 0, 0x7a],\n          [11, 7, 1, 0x7b],\n          [13, 7, 2, 0x7c],\n          [17, 7, 3, 0x7d],\n          [25, 7, 4, 0x7e],\n          [41, 8, 5, 0xfe],\n          [73, 8, 32, 0xff], // upper\n        ];\n        break;\n      case 13:\n        lines = [\n          [1, 1, 0, 0x0],\n          [2, 3, 0, 0x4],\n          [3, 4, 0, 0xc],\n          [4, 5, 0, 0x1c],\n          [5, 4, 1, 0xd],\n          [7, 3, 3, 0x5],\n          [15, 6, 1, 0x3a],\n          [17, 6, 2, 0x3b],\n          [21, 6, 3, 0x3c],\n          [29, 6, 4, 0x3d],\n          [45, 6, 5, 0x3e],\n          [77, 7, 6, 0x7e],\n          [141, 7, 32, 0x7f], // upper\n        ];\n        break;\n      case 14:\n        lines = [\n          [-2, 3, 0, 0x4],\n          [-1, 3, 0, 0x5],\n          [0, 1, 0, 0x0],\n          [1, 3, 0, 0x6],\n          [2, 3, 0, 0x7],\n        ];\n        break;\n      case 15:\n        lines = [\n          [-24, 7, 4, 0x7c],\n          [-8, 6, 2, 0x3c],\n          [-4, 5, 1, 0x1c],\n          [-2, 4, 0, 0xc],\n          [-1, 3, 0, 0x4],\n          [0, 1, 0, 0x0],\n          [1, 3, 0, 0x5],\n          [2, 4, 0, 0xd],\n          [3, 5, 1, 0x1d],\n          [5, 6, 2, 0x3d],\n          [9, 7, 4, 0x7d],\n          [-25, 7, 32, 0x7e, \"lower\"],\n          [25, 7, 32, 0x7f], // upper\n        ];\n        break;\n      default:\n        throw new Jbig2Error(`standard table B.${number} does not exist`);\n    }\n\n    for (let i = 0, ii = lines.length; i < ii; i++) {\n      lines[i] = new HuffmanLine(lines[i]);\n    }\n    table = new HuffmanTable(lines, true);\n    standardTablesCache[number] = table;\n    return table;\n  }\n\n  function Reader(data, start, end) {\n    this.data = data;\n    this.start = start;\n    this.end = end;\n    this.position = start;\n    this.shift = -1;\n    this.currentByte = 0;\n  }\n\n  Reader.prototype = {\n    readBit() {\n      if (this.shift < 0) {\n        if (this.position >= this.end) {\n          throw new Jbig2Error(\"end of data while reading bit\");\n        }\n        this.currentByte = this.data[this.position++];\n        this.shift = 7;\n      }\n      const bit = (this.currentByte >> this.shift) & 1;\n      this.shift--;\n      return bit;\n    },\n\n    readBits(numBits) {\n      let result = 0,\n        i;\n      for (i = numBits - 1; i >= 0; i--) {\n        result |= this.readBit() << i;\n      }\n      return result;\n    },\n\n    byteAlign() {\n      this.shift = -1;\n    },\n\n    next() {\n      if (this.position >= this.end) {\n        return -1;\n      }\n      return this.data[this.position++];\n    },\n  };\n\n  function getCustomHuffmanTable(index, referredTo, customTables) {\n    // Returns a Tables segment that has been earlier decoded.\n    // See 7.4.2.1.6 (symbol dictionary) or 7.4.3.1.6 (text region).\n    let currentIndex = 0;\n    for (let i = 0, ii = referredTo.length; i < ii; i++) {\n      const table = customTables[referredTo[i]];\n      if (table) {\n        if (index === currentIndex) {\n          return table;\n        }\n        currentIndex++;\n      }\n    }\n    throw new Jbig2Error(\"can't find custom Huffman table\");\n  }\n\n  function getTextRegionHuffmanTables(\n    textRegion,\n    referredTo,\n    customTables,\n    numberOfSymbols,\n    reader\n  ) {\n    // 7.4.3.1.7 Symbol ID Huffman table decoding\n\n    // Read code lengths for RUNCODEs 0...34.\n    const codes = [];\n    for (let i = 0; i <= 34; i++) {\n      const codeLength = reader.readBits(4);\n      codes.push(new HuffmanLine([i, codeLength, 0, 0]));\n    }\n    // Assign Huffman codes for RUNCODEs.\n    const runCodesTable = new HuffmanTable(codes, false);\n\n    // Read a Huffman code using the assignment above.\n    // Interpret the RUNCODE codes and the additional bits (if any).\n    codes.length = 0;\n    for (let i = 0; i < numberOfSymbols; ) {\n      const codeLength = runCodesTable.decode(reader);\n      if (codeLength >= 32) {\n        let repeatedLength, numberOfRepeats, j;\n        switch (codeLength) {\n          case 32:\n            if (i === 0) {\n              throw new Jbig2Error(\"no previous value in symbol ID table\");\n            }\n            numberOfRepeats = reader.readBits(2) + 3;\n            repeatedLength = codes[i - 1].prefixLength;\n            break;\n          case 33:\n            numberOfRepeats = reader.readBits(3) + 3;\n            repeatedLength = 0;\n            break;\n          case 34:\n            numberOfRepeats = reader.readBits(7) + 11;\n            repeatedLength = 0;\n            break;\n          default:\n            throw new Jbig2Error(\"invalid code length in symbol ID table\");\n        }\n        for (j = 0; j < numberOfRepeats; j++) {\n          codes.push(new HuffmanLine([i, repeatedLength, 0, 0]));\n          i++;\n        }\n      } else {\n        codes.push(new HuffmanLine([i, codeLength, 0, 0]));\n        i++;\n      }\n    }\n    reader.byteAlign();\n    const symbolIDTable = new HuffmanTable(codes, false);\n\n    // 7.4.3.1.6 Text region segment Huffman table selection\n\n    let customIndex = 0,\n      tableFirstS,\n      tableDeltaS,\n      tableDeltaT;\n\n    switch (textRegion.huffmanFS) {\n      case 0:\n      case 1:\n        tableFirstS = getStandardTable(textRegion.huffmanFS + 6);\n        break;\n      case 3:\n        tableFirstS = getCustomHuffmanTable(\n          customIndex,\n          referredTo,\n          customTables\n        );\n        customIndex++;\n        break;\n      default:\n        throw new Jbig2Error(\"invalid Huffman FS selector\");\n    }\n\n    switch (textRegion.huffmanDS) {\n      case 0:\n      case 1:\n      case 2:\n        tableDeltaS = getStandardTable(textRegion.huffmanDS + 8);\n        break;\n      case 3:\n        tableDeltaS = getCustomHuffmanTable(\n          customIndex,\n          referredTo,\n          customTables\n        );\n        customIndex++;\n        break;\n      default:\n        throw new Jbig2Error(\"invalid Huffman DS selector\");\n    }\n\n    switch (textRegion.huffmanDT) {\n      case 0:\n      case 1:\n      case 2:\n        tableDeltaT = getStandardTable(textRegion.huffmanDT + 11);\n        break;\n      case 3:\n        tableDeltaT = getCustomHuffmanTable(\n          customIndex,\n          referredTo,\n          customTables\n        );\n        customIndex++;\n        break;\n      default:\n        throw new Jbig2Error(\"invalid Huffman DT selector\");\n    }\n\n    if (textRegion.refinement) {\n      // Load tables RDW, RDH, RDX and RDY.\n      throw new Jbig2Error(\"refinement with Huffman is not supported\");\n    }\n\n    return {\n      symbolIDTable,\n      tableFirstS,\n      tableDeltaS,\n      tableDeltaT,\n    };\n  }\n\n  function getSymbolDictionaryHuffmanTables(\n    dictionary,\n    referredTo,\n    customTables\n  ) {\n    // 7.4.2.1.6 Symbol dictionary segment Huffman table selection\n\n    let customIndex = 0,\n      tableDeltaHeight,\n      tableDeltaWidth;\n    switch (dictionary.huffmanDHSelector) {\n      case 0:\n      case 1:\n        tableDeltaHeight = getStandardTable(dictionary.huffmanDHSelector + 4);\n        break;\n      case 3:\n        tableDeltaHeight = getCustomHuffmanTable(\n          customIndex,\n          referredTo,\n          customTables\n        );\n        customIndex++;\n        break;\n      default:\n        throw new Jbig2Error(\"invalid Huffman DH selector\");\n    }\n\n    switch (dictionary.huffmanDWSelector) {\n      case 0:\n      case 1:\n        tableDeltaWidth = getStandardTable(dictionary.huffmanDWSelector + 2);\n        break;\n      case 3:\n        tableDeltaWidth = getCustomHuffmanTable(\n          customIndex,\n          referredTo,\n          customTables\n        );\n        customIndex++;\n        break;\n      default:\n        throw new Jbig2Error(\"invalid Huffman DW selector\");\n    }\n\n    let tableBitmapSize, tableAggregateInstances;\n    if (dictionary.bitmapSizeSelector) {\n      tableBitmapSize = getCustomHuffmanTable(\n        customIndex,\n        referredTo,\n        customTables\n      );\n      customIndex++;\n    } else {\n      tableBitmapSize = getStandardTable(1);\n    }\n\n    if (dictionary.aggregationInstancesSelector) {\n      tableAggregateInstances = getCustomHuffmanTable(\n        customIndex,\n        referredTo,\n        customTables\n      );\n    } else {\n      tableAggregateInstances = getStandardTable(1);\n    }\n\n    return {\n      tableDeltaHeight,\n      tableDeltaWidth,\n      tableBitmapSize,\n      tableAggregateInstances,\n    };\n  }\n\n  function readUncompressedBitmap(reader, width, height) {\n    const bitmap = [];\n    for (let y = 0; y < height; y++) {\n      const row = new Uint8Array(width);\n      bitmap.push(row);\n      for (let x = 0; x < width; x++) {\n        row[x] = reader.readBit();\n      }\n      reader.byteAlign();\n    }\n    return bitmap;\n  }\n\n  function decodeMMRBitmap(input, width, height, endOfBlock) {\n    // MMR is the same compression algorithm as the PDF filter\n    // CCITTFaxDecode with /K -1.\n    const params = {\n      K: -1,\n      Columns: width,\n      Rows: height,\n      BlackIs1: true,\n      EndOfBlock: endOfBlock,\n    };\n    const decoder = new CCITTFaxDecoder(input, params);\n    const bitmap = [];\n    let currentByte,\n      eof = false;\n\n    for (let y = 0; y < height; y++) {\n      const row = new Uint8Array(width);\n      bitmap.push(row);\n      let shift = -1;\n      for (let x = 0; x < width; x++) {\n        if (shift < 0) {\n          currentByte = decoder.readNextChar();\n          if (currentByte === -1) {\n            // Set the rest of the bits to zero.\n            currentByte = 0;\n            eof = true;\n          }\n          shift = 7;\n        }\n        row[x] = (currentByte >> shift) & 1;\n        shift--;\n      }\n    }\n\n    if (endOfBlock && !eof) {\n      // Read until EOFB has been consumed.\n      const lookForEOFLimit = 5;\n      for (let i = 0; i < lookForEOFLimit; i++) {\n        if (decoder.readNextChar() === -1) {\n          break;\n        }\n      }\n    }\n\n    return bitmap;\n  }\n\n  // eslint-disable-next-line no-shadow\n  function Jbig2Image() {}\n\n  Jbig2Image.prototype = {\n    parseChunks(chunks) {\n      return parseJbig2Chunks(chunks);\n    },\n\n    parse(data) {\n      const { imgData, width, height } = parseJbig2(data);\n      this.width = width;\n      this.height = height;\n      return imgData;\n    },\n  };\n\n  return Jbig2Image;\n})();\n\nexport { Jbig2Image };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint no-var: error */\n\n// Table C-2\nconst QeTable = [\n  { qe: 0x5601, nmps: 1, nlps: 1, switchFlag: 1 },\n  { qe: 0x3401, nmps: 2, nlps: 6, switchFlag: 0 },\n  { qe: 0x1801, nmps: 3, nlps: 9, switchFlag: 0 },\n  { qe: 0x0ac1, nmps: 4, nlps: 12, switchFlag: 0 },\n  { qe: 0x0521, nmps: 5, nlps: 29, switchFlag: 0 },\n  { qe: 0x0221, nmps: 38, nlps: 33, switchFlag: 0 },\n  { qe: 0x5601, nmps: 7, nlps: 6, switchFlag: 1 },\n  { qe: 0x5401, nmps: 8, nlps: 14, switchFlag: 0 },\n  { qe: 0x4801, nmps: 9, nlps: 14, switchFlag: 0 },\n  { qe: 0x3801, nmps: 10, nlps: 14, switchFlag: 0 },\n  { qe: 0x3001, nmps: 11, nlps: 17, switchFlag: 0 },\n  { qe: 0x2401, nmps: 12, nlps: 18, switchFlag: 0 },\n  { qe: 0x1c01, nmps: 13, nlps: 20, switchFlag: 0 },\n  { qe: 0x1601, nmps: 29, nlps: 21, switchFlag: 0 },\n  { qe: 0x5601, nmps: 15, nlps: 14, switchFlag: 1 },\n  { qe: 0x5401, nmps: 16, nlps: 14, switchFlag: 0 },\n  { qe: 0x5101, nmps: 17, nlps: 15, switchFlag: 0 },\n  { qe: 0x4801, nmps: 18, nlps: 16, switchFlag: 0 },\n  { qe: 0x3801, nmps: 19, nlps: 17, switchFlag: 0 },\n  { qe: 0x3401, nmps: 20, nlps: 18, switchFlag: 0 },\n  { qe: 0x3001, nmps: 21, nlps: 19, switchFlag: 0 },\n  { qe: 0x2801, nmps: 22, nlps: 19, switchFlag: 0 },\n  { qe: 0x2401, nmps: 23, nlps: 20, switchFlag: 0 },\n  { qe: 0x2201, nmps: 24, nlps: 21, switchFlag: 0 },\n  { qe: 0x1c01, nmps: 25, nlps: 22, switchFlag: 0 },\n  { qe: 0x1801, nmps: 26, nlps: 23, switchFlag: 0 },\n  { qe: 0x1601, nmps: 27, nlps: 24, switchFlag: 0 },\n  { qe: 0x1401, nmps: 28, nlps: 25, switchFlag: 0 },\n  { qe: 0x1201, nmps: 29, nlps: 26, switchFlag: 0 },\n  { qe: 0x1101, nmps: 30, nlps: 27, switchFlag: 0 },\n  { qe: 0x0ac1, nmps: 31, nlps: 28, switchFlag: 0 },\n  { qe: 0x09c1, nmps: 32, nlps: 29, switchFlag: 0 },\n  { qe: 0x08a1, nmps: 33, nlps: 30, switchFlag: 0 },\n  { qe: 0x0521, nmps: 34, nlps: 31, switchFlag: 0 },\n  { qe: 0x0441, nmps: 35, nlps: 32, switchFlag: 0 },\n  { qe: 0x02a1, nmps: 36, nlps: 33, switchFlag: 0 },\n  { qe: 0x0221, nmps: 37, nlps: 34, switchFlag: 0 },\n  { qe: 0x0141, nmps: 38, nlps: 35, switchFlag: 0 },\n  { qe: 0x0111, nmps: 39, nlps: 36, switchFlag: 0 },\n  { qe: 0x0085, nmps: 40, nlps: 37, switchFlag: 0 },\n  { qe: 0x0049, nmps: 41, nlps: 38, switchFlag: 0 },\n  { qe: 0x0025, nmps: 42, nlps: 39, switchFlag: 0 },\n  { qe: 0x0015, nmps: 43, nlps: 40, switchFlag: 0 },\n  { qe: 0x0009, nmps: 44, nlps: 41, switchFlag: 0 },\n  { qe: 0x0005, nmps: 45, nlps: 42, switchFlag: 0 },\n  { qe: 0x0001, nmps: 45, nlps: 43, switchFlag: 0 },\n  { qe: 0x5601, nmps: 46, nlps: 46, switchFlag: 0 },\n];\n\n/**\n * This class implements the QM Coder decoding as defined in\n *   JPEG 2000 Part I Final Committee Draft Version 1.0\n *   Annex C.3 Arithmetic decoding procedure\n * available at http://www.jpeg.org/public/fcd15444-1.pdf\n *\n * The arithmetic decoder is used in conjunction with context models to decode\n * JPEG2000 and JBIG2 streams.\n */\nclass ArithmeticDecoder {\n  // C.3.5 Initialisation of the decoder (INITDEC)\n  constructor(data, start, end) {\n    this.data = data;\n    this.bp = start;\n    this.dataEnd = end;\n\n    this.chigh = data[start];\n    this.clow = 0;\n\n    this.byteIn();\n\n    this.chigh = ((this.chigh << 7) & 0xffff) | ((this.clow >> 9) & 0x7f);\n    this.clow = (this.clow << 7) & 0xffff;\n    this.ct -= 7;\n    this.a = 0x8000;\n  }\n\n  // C.3.4 Compressed data input (BYTEIN)\n  byteIn() {\n    const data = this.data;\n    let bp = this.bp;\n\n    if (data[bp] === 0xff) {\n      if (data[bp + 1] > 0x8f) {\n        this.clow += 0xff00;\n        this.ct = 8;\n      } else {\n        bp++;\n        this.clow += data[bp] << 9;\n        this.ct = 7;\n        this.bp = bp;\n      }\n    } else {\n      bp++;\n      this.clow += bp < this.dataEnd ? data[bp] << 8 : 0xff00;\n      this.ct = 8;\n      this.bp = bp;\n    }\n    if (this.clow > 0xffff) {\n      this.chigh += this.clow >> 16;\n      this.clow &= 0xffff;\n    }\n  }\n\n  // C.3.2 Decoding a decision (DECODE)\n  readBit(contexts, pos) {\n    // Contexts are packed into 1 byte:\n    // highest 7 bits carry cx.index, lowest bit carries cx.mps\n    let cx_index = contexts[pos] >> 1,\n      cx_mps = contexts[pos] & 1;\n    const qeTableIcx = QeTable[cx_index];\n    const qeIcx = qeTableIcx.qe;\n    let d;\n    let a = this.a - qeIcx;\n\n    if (this.chigh < qeIcx) {\n      // exchangeLps\n      if (a < qeIcx) {\n        a = qeIcx;\n        d = cx_mps;\n        cx_index = qeTableIcx.nmps;\n      } else {\n        a = qeIcx;\n        d = 1 ^ cx_mps;\n        if (qeTableIcx.switchFlag === 1) {\n          cx_mps = d;\n        }\n        cx_index = qeTableIcx.nlps;\n      }\n    } else {\n      this.chigh -= qeIcx;\n      if ((a & 0x8000) !== 0) {\n        this.a = a;\n        return cx_mps;\n      }\n      // exchangeMps\n      if (a < qeIcx) {\n        d = 1 ^ cx_mps;\n        if (qeTableIcx.switchFlag === 1) {\n          cx_mps = d;\n        }\n        cx_index = qeTableIcx.nlps;\n      } else {\n        d = cx_mps;\n        cx_index = qeTableIcx.nmps;\n      }\n    }\n    // C.3.3 renormD;\n    do {\n      if (this.ct === 0) {\n        this.byteIn();\n      }\n\n      a <<= 1;\n      this.chigh = ((this.chigh << 1) & 0xffff) | ((this.clow >> 15) & 1);\n      this.clow = (this.clow << 1) & 0xffff;\n      this.ct--;\n    } while ((a & 0x8000) === 0);\n    this.a = a;\n\n    contexts[pos] = (cx_index << 1) | cx_mps;\n    return d;\n  }\n}\n\nexport { ArithmeticDecoder };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DecodeStream } from \"./stream.js\";\nimport { isDict } from \"./primitives.js\";\nimport { JpegImage } from \"./jpg.js\";\nimport { shadow } from \"../shared/util.js\";\n\n/**\n * For JPEG's we use a library to decode these images and the stream behaves\n * like all the other DecodeStreams.\n */\nconst JpegStream = (function JpegStreamClosure() {\n  // eslint-disable-next-line no-shadow\n  function JpegStream(stream, maybeLength, dict, params) {\n    // Some images may contain 'junk' before the SOI (start-of-image) marker.\n    // Note: this seems to mainly affect inline images.\n    let ch;\n    while ((ch = stream.getByte()) !== -1) {\n      // Find the first byte of the SOI marker (0xFFD8).\n      if (ch === 0xff) {\n        stream.skip(-1); // Reset the stream position to the SOI.\n        break;\n      }\n    }\n    this.stream = stream;\n    this.maybeLength = maybeLength;\n    this.dict = dict;\n    this.params = params;\n\n    DecodeStream.call(this, maybeLength);\n  }\n\n  JpegStream.prototype = Object.create(DecodeStream.prototype);\n\n  Object.defineProperty(JpegStream.prototype, \"bytes\", {\n    get: function JpegStream_bytes() {\n      // If `this.maybeLength` is null, we'll get the entire stream.\n      return shadow(this, \"bytes\", this.stream.getBytes(this.maybeLength));\n    },\n    configurable: true,\n  });\n\n  JpegStream.prototype.ensureBuffer = function (requested) {\n    // No-op, since `this.readBlock` will always parse the entire image and\n    // directly insert all of its data into `this.buffer`.\n  };\n\n  JpegStream.prototype.readBlock = function () {\n    if (this.eof) {\n      return;\n    }\n    const jpegOptions = {\n      decodeTransform: undefined,\n      colorTransform: undefined,\n    };\n\n    // Checking if values need to be transformed before conversion.\n    const decodeArr = this.dict.getArray(\"Decode\", \"D\");\n    if (this.forceRGB && Array.isArray(decodeArr)) {\n      const bitsPerComponent = this.dict.get(\"BitsPerComponent\") || 8;\n      const decodeArrLength = decodeArr.length;\n      const transform = new Int32Array(decodeArrLength);\n      let transformNeeded = false;\n      const maxValue = (1 << bitsPerComponent) - 1;\n      for (let i = 0; i < decodeArrLength; i += 2) {\n        transform[i] = ((decodeArr[i + 1] - decodeArr[i]) * 256) | 0;\n        transform[i + 1] = (decodeArr[i] * maxValue) | 0;\n        if (transform[i] !== 256 || transform[i + 1] !== 0) {\n          transformNeeded = true;\n        }\n      }\n      if (transformNeeded) {\n        jpegOptions.decodeTransform = transform;\n      }\n    }\n    // Fetching the 'ColorTransform' entry, if it exists.\n    if (isDict(this.params)) {\n      const colorTransform = this.params.get(\"ColorTransform\");\n      if (Number.isInteger(colorTransform)) {\n        jpegOptions.colorTransform = colorTransform;\n      }\n    }\n    const jpegImage = new JpegImage(jpegOptions);\n\n    jpegImage.parse(this.bytes);\n    const data = jpegImage.getData({\n      width: this.drawWidth,\n      height: this.drawHeight,\n      forceRGB: this.forceRGB,\n      isSourcePDF: true,\n    });\n    this.buffer = data;\n    this.bufferLength = data.length;\n    this.eof = true;\n  };\n\n  return JpegStream;\n})();\n\nexport { JpegStream };\n", "/* Copyright 2014 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, BaseException, warn } from \"../shared/util.js\";\nimport { readUint16 } from \"./core_utils.js\";\n\nclass JpegError extends BaseException {\n  constructor(msg) {\n    super(`JPEG error: ${msg}`);\n  }\n}\n\nclass DNLMarkerError extends BaseException {\n  constructor(message, scanLines) {\n    super(message);\n    this.scanLines = scanLines;\n  }\n}\n\nclass EOIMarkerError extends BaseException {}\n\n/**\n * This code was forked from https://github.com/notmasteryet/jpgjs.\n * The original version was created by GitHub user notmasteryet.\n *\n * - The JPEG specification can be found in the ITU CCITT Recommendation T.81\n *   (www.w3.org/Graphics/JPEG/itu-t81.pdf)\n * - The JFIF specification can be found in the JPEG File Interchange Format\n *   (www.w3.org/Graphics/JPEG/jfif3.pdf)\n * - The Adobe Application-Specific JPEG markers in the\n *   Supporting the DCT Filters in PostScript Level 2, Technical Note #5116\n *   (partners.adobe.com/public/developer/en/ps/sdk/5116.DCT_Filter.pdf)\n */\n\nvar JpegImage = (function JpegImageClosure() {\n  // prettier-ignore\n  var dctZigZag = new Uint8Array([\n     0,\n     1,  8,\n    16,  9,  2,\n     3, 10, 17, 24,\n    32, 25, 18, 11, 4,\n     5, 12, 19, 26, 33, 40,\n    48, 41, 34, 27, 20, 13,  6,\n     7, 14, 21, 28, 35, 42, 49, 56,\n    57, 50, 43, 36, 29, 22, 15,\n    23, 30, 37, 44, 51, 58,\n    59, 52, 45, 38, 31,\n    39, 46, 53, 60,\n    61, 54, 47,\n    55, 62,\n    63\n  ]);\n\n  var dctCos1 = 4017; // cos(pi/16)\n  var dctSin1 = 799; // sin(pi/16)\n  var dctCos3 = 3406; // cos(3*pi/16)\n  var dctSin3 = 2276; // sin(3*pi/16)\n  var dctCos6 = 1567; // cos(6*pi/16)\n  var dctSin6 = 3784; // sin(6*pi/16)\n  var dctSqrt2 = 5793; // sqrt(2)\n  var dctSqrt1d2 = 2896; // sqrt(2) / 2\n\n  // eslint-disable-next-line no-shadow\n  function JpegImage({ decodeTransform = null, colorTransform = -1 } = {}) {\n    this._decodeTransform = decodeTransform;\n    this._colorTransform = colorTransform;\n  }\n\n  function buildHuffmanTable(codeLengths, values) {\n    var k = 0,\n      code = [],\n      i,\n      j,\n      length = 16;\n    while (length > 0 && !codeLengths[length - 1]) {\n      length--;\n    }\n    code.push({ children: [], index: 0 });\n    var p = code[0],\n      q;\n    for (i = 0; i < length; i++) {\n      for (j = 0; j < codeLengths[i]; j++) {\n        p = code.pop();\n        p.children[p.index] = values[k];\n        while (p.index > 0) {\n          p = code.pop();\n        }\n        p.index++;\n        code.push(p);\n        while (code.length <= i) {\n          code.push((q = { children: [], index: 0 }));\n          p.children[p.index] = q.children;\n          p = q;\n        }\n        k++;\n      }\n      if (i + 1 < length) {\n        // p here points to last code\n        code.push((q = { children: [], index: 0 }));\n        p.children[p.index] = q.children;\n        p = q;\n      }\n    }\n    return code[0].children;\n  }\n\n  function getBlockBufferOffset(component, row, col) {\n    return 64 * ((component.blocksPerLine + 1) * row + col);\n  }\n\n  function decodeScan(\n    data,\n    offset,\n    frame,\n    components,\n    resetInterval,\n    spectralStart,\n    spectralEnd,\n    successivePrev,\n    successive,\n    parseDNLMarker = false\n  ) {\n    var mcusPerLine = frame.mcusPerLine;\n    var progressive = frame.progressive;\n\n    const startOffset = offset;\n    let bitsData = 0,\n      bitsCount = 0;\n\n    function readBit() {\n      if (bitsCount > 0) {\n        bitsCount--;\n        return (bitsData >> bitsCount) & 1;\n      }\n      bitsData = data[offset++];\n      if (bitsData === 0xff) {\n        var nextByte = data[offset++];\n        if (nextByte) {\n          if (nextByte === /* DNL = */ 0xdc && parseDNLMarker) {\n            offset += 2; // Skip marker length.\n\n            const scanLines = readUint16(data, offset);\n            offset += 2;\n            if (scanLines > 0 && scanLines !== frame.scanLines) {\n              throw new DNLMarkerError(\n                \"Found DNL marker (0xFFDC) while parsing scan data\",\n                scanLines\n              );\n            }\n          } else if (nextByte === /* EOI = */ 0xd9) {\n            if (parseDNLMarker) {\n              // NOTE: only 8-bit JPEG images are supported in this decoder.\n              const maybeScanLines = blockRow * 8;\n              // Heuristic to attempt to handle corrupt JPEG images with too\n              // large `scanLines` parameter, by falling back to the currently\n              // parsed number of scanLines when it's at least one order of\n              // magnitude smaller than expected (fixes issue10880.pdf).\n              if (maybeScanLines > 0 && maybeScanLines < frame.scanLines / 10) {\n                throw new DNLMarkerError(\n                  \"Found EOI marker (0xFFD9) while parsing scan data, \" +\n                    \"possibly caused by incorrect `scanLines` parameter\",\n                  maybeScanLines\n                );\n              }\n            }\n            throw new EOIMarkerError(\n              \"Found EOI marker (0xFFD9) while parsing scan data\"\n            );\n          }\n          throw new JpegError(\n            `unexpected marker ${((bitsData << 8) | nextByte).toString(16)}`\n          );\n        }\n        // unstuff 0\n      }\n      bitsCount = 7;\n      return bitsData >>> 7;\n    }\n\n    function decodeHuffman(tree) {\n      var node = tree;\n      while (true) {\n        node = node[readBit()];\n        switch (typeof node) {\n          case \"number\":\n            return node;\n          case \"object\":\n            continue;\n        }\n        throw new JpegError(\"invalid huffman sequence\");\n      }\n    }\n\n    function receive(length) {\n      var n = 0;\n      while (length > 0) {\n        n = (n << 1) | readBit();\n        length--;\n      }\n      return n;\n    }\n\n    function receiveAndExtend(length) {\n      if (length === 1) {\n        return readBit() === 1 ? 1 : -1;\n      }\n      var n = receive(length);\n      if (n >= 1 << (length - 1)) {\n        return n;\n      }\n      return n + (-1 << length) + 1;\n    }\n\n    function decodeBaseline(component, blockOffset) {\n      var t = decodeHuffman(component.huffmanTableDC);\n      var diff = t === 0 ? 0 : receiveAndExtend(t);\n      component.blockData[blockOffset] = component.pred += diff;\n      var k = 1;\n      while (k < 64) {\n        var rs = decodeHuffman(component.huffmanTableAC);\n        var s = rs & 15,\n          r = rs >> 4;\n        if (s === 0) {\n          if (r < 15) {\n            break;\n          }\n          k += 16;\n          continue;\n        }\n        k += r;\n        var z = dctZigZag[k];\n        component.blockData[blockOffset + z] = receiveAndExtend(s);\n        k++;\n      }\n    }\n\n    function decodeDCFirst(component, blockOffset) {\n      var t = decodeHuffman(component.huffmanTableDC);\n      var diff = t === 0 ? 0 : receiveAndExtend(t) << successive;\n      component.blockData[blockOffset] = component.pred += diff;\n    }\n\n    function decodeDCSuccessive(component, blockOffset) {\n      component.blockData[blockOffset] |= readBit() << successive;\n    }\n\n    var eobrun = 0;\n    function decodeACFirst(component, blockOffset) {\n      if (eobrun > 0) {\n        eobrun--;\n        return;\n      }\n      var k = spectralStart,\n        e = spectralEnd;\n      while (k <= e) {\n        var rs = decodeHuffman(component.huffmanTableAC);\n        var s = rs & 15,\n          r = rs >> 4;\n        if (s === 0) {\n          if (r < 15) {\n            eobrun = receive(r) + (1 << r) - 1;\n            break;\n          }\n          k += 16;\n          continue;\n        }\n        k += r;\n        var z = dctZigZag[k];\n        component.blockData[blockOffset + z] =\n          receiveAndExtend(s) * (1 << successive);\n        k++;\n      }\n    }\n\n    var successiveACState = 0,\n      successiveACNextValue;\n    function decodeACSuccessive(component, blockOffset) {\n      var k = spectralStart;\n      var e = spectralEnd;\n      var r = 0;\n      var s;\n      var rs;\n      while (k <= e) {\n        const offsetZ = blockOffset + dctZigZag[k];\n        const sign = component.blockData[offsetZ] < 0 ? -1 : 1;\n        switch (successiveACState) {\n          case 0: // initial state\n            rs = decodeHuffman(component.huffmanTableAC);\n            s = rs & 15;\n            r = rs >> 4;\n            if (s === 0) {\n              if (r < 15) {\n                eobrun = receive(r) + (1 << r);\n                successiveACState = 4;\n              } else {\n                r = 16;\n                successiveACState = 1;\n              }\n            } else {\n              if (s !== 1) {\n                throw new JpegError(\"invalid ACn encoding\");\n              }\n              successiveACNextValue = receiveAndExtend(s);\n              successiveACState = r ? 2 : 3;\n            }\n            continue;\n          case 1: // skipping r zero items\n          case 2:\n            if (component.blockData[offsetZ]) {\n              component.blockData[offsetZ] += sign * (readBit() << successive);\n            } else {\n              r--;\n              if (r === 0) {\n                successiveACState = successiveACState === 2 ? 3 : 0;\n              }\n            }\n            break;\n          case 3: // set value for a zero item\n            if (component.blockData[offsetZ]) {\n              component.blockData[offsetZ] += sign * (readBit() << successive);\n            } else {\n              component.blockData[offsetZ] =\n                successiveACNextValue << successive;\n              successiveACState = 0;\n            }\n            break;\n          case 4: // eob\n            if (component.blockData[offsetZ]) {\n              component.blockData[offsetZ] += sign * (readBit() << successive);\n            }\n            break;\n        }\n        k++;\n      }\n      if (successiveACState === 4) {\n        eobrun--;\n        if (eobrun === 0) {\n          successiveACState = 0;\n        }\n      }\n    }\n\n    let blockRow = 0;\n    function decodeMcu(component, decode, mcu, row, col) {\n      var mcuRow = (mcu / mcusPerLine) | 0;\n      var mcuCol = mcu % mcusPerLine;\n      blockRow = mcuRow * component.v + row;\n      var blockCol = mcuCol * component.h + col;\n      const blockOffset = getBlockBufferOffset(component, blockRow, blockCol);\n      decode(component, blockOffset);\n    }\n\n    function decodeBlock(component, decode, mcu) {\n      blockRow = (mcu / component.blocksPerLine) | 0;\n      var blockCol = mcu % component.blocksPerLine;\n      const blockOffset = getBlockBufferOffset(component, blockRow, blockCol);\n      decode(component, blockOffset);\n    }\n\n    var componentsLength = components.length;\n    var component, i, j, k, n;\n    var decodeFn;\n    if (progressive) {\n      if (spectralStart === 0) {\n        decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;\n      } else {\n        decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;\n      }\n    } else {\n      decodeFn = decodeBaseline;\n    }\n\n    var mcu = 0,\n      fileMarker;\n    var mcuExpected;\n    if (componentsLength === 1) {\n      mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;\n    } else {\n      mcuExpected = mcusPerLine * frame.mcusPerColumn;\n    }\n\n    var h, v;\n    while (mcu <= mcuExpected) {\n      // reset interval stuff\n      var mcuToRead = resetInterval\n        ? Math.min(mcuExpected - mcu, resetInterval)\n        : mcuExpected;\n\n      // The `mcuToRead === 0` case should only occur when all of the expected\n      // MCU data has been already parsed, i.e. when `mcu === mcuExpected`, but\n      // some corrupt JPEG images contain more data than intended and we thus\n      // want to skip over any extra RSTx markers below (fixes issue11794.pdf).\n      if (mcuToRead > 0) {\n        for (i = 0; i < componentsLength; i++) {\n          components[i].pred = 0;\n        }\n        eobrun = 0;\n\n        if (componentsLength === 1) {\n          component = components[0];\n          for (n = 0; n < mcuToRead; n++) {\n            decodeBlock(component, decodeFn, mcu);\n            mcu++;\n          }\n        } else {\n          for (n = 0; n < mcuToRead; n++) {\n            for (i = 0; i < componentsLength; i++) {\n              component = components[i];\n              h = component.h;\n              v = component.v;\n              for (j = 0; j < v; j++) {\n                for (k = 0; k < h; k++) {\n                  decodeMcu(component, decodeFn, mcu, j, k);\n                }\n              }\n            }\n            mcu++;\n          }\n        }\n      }\n\n      // find marker\n      bitsCount = 0;\n      fileMarker = findNextFileMarker(data, offset);\n      if (!fileMarker) {\n        break; // Reached the end of the image data without finding any marker.\n      }\n      if (fileMarker.invalid) {\n        // Some bad images seem to pad Scan blocks with e.g. zero bytes, skip\n        // past those to attempt to find a valid marker (fixes issue4090.pdf).\n        const partialMsg = mcuToRead > 0 ? \"unexpected\" : \"excessive\";\n        warn(\n          `decodeScan - ${partialMsg} MCU data, current marker is: ${fileMarker.invalid}`\n        );\n        offset = fileMarker.offset;\n      }\n      if (fileMarker.marker >= 0xffd0 && fileMarker.marker <= 0xffd7) {\n        // RSTx\n        offset += 2;\n      } else {\n        break;\n      }\n    }\n\n    return offset - startOffset;\n  }\n\n  // A port of poppler's IDCT method which in turn is taken from:\n  //   Christoph Loeffler, Adriaan Ligtenberg, George S. Moschytz,\n  //   'Practical Fast 1-D DCT Algorithms with 11 Multiplications',\n  //   IEEE Intl. Conf. on Acoustics, Speech & Signal Processing, 1989,\n  //   988-991.\n  function quantizeAndInverse(component, blockBufferOffset, p) {\n    var qt = component.quantizationTable,\n      blockData = component.blockData;\n    var v0, v1, v2, v3, v4, v5, v6, v7;\n    var p0, p1, p2, p3, p4, p5, p6, p7;\n    var t;\n\n    if (!qt) {\n      throw new JpegError(\"missing required Quantization Table.\");\n    }\n\n    // inverse DCT on rows\n    for (var row = 0; row < 64; row += 8) {\n      // gather block data\n      p0 = blockData[blockBufferOffset + row];\n      p1 = blockData[blockBufferOffset + row + 1];\n      p2 = blockData[blockBufferOffset + row + 2];\n      p3 = blockData[blockBufferOffset + row + 3];\n      p4 = blockData[blockBufferOffset + row + 4];\n      p5 = blockData[blockBufferOffset + row + 5];\n      p6 = blockData[blockBufferOffset + row + 6];\n      p7 = blockData[blockBufferOffset + row + 7];\n\n      // dequant p0\n      p0 *= qt[row];\n\n      // check for all-zero AC coefficients\n      if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {\n        t = (dctSqrt2 * p0 + 512) >> 10;\n        p[row] = t;\n        p[row + 1] = t;\n        p[row + 2] = t;\n        p[row + 3] = t;\n        p[row + 4] = t;\n        p[row + 5] = t;\n        p[row + 6] = t;\n        p[row + 7] = t;\n        continue;\n      }\n      // dequant p1 ... p7\n      p1 *= qt[row + 1];\n      p2 *= qt[row + 2];\n      p3 *= qt[row + 3];\n      p4 *= qt[row + 4];\n      p5 *= qt[row + 5];\n      p6 *= qt[row + 6];\n      p7 *= qt[row + 7];\n\n      // stage 4\n      v0 = (dctSqrt2 * p0 + 128) >> 8;\n      v1 = (dctSqrt2 * p4 + 128) >> 8;\n      v2 = p2;\n      v3 = p6;\n      v4 = (dctSqrt1d2 * (p1 - p7) + 128) >> 8;\n      v7 = (dctSqrt1d2 * (p1 + p7) + 128) >> 8;\n      v5 = p3 << 4;\n      v6 = p5 << 4;\n\n      // stage 3\n      v0 = (v0 + v1 + 1) >> 1;\n      v1 = v0 - v1;\n      t = (v2 * dctSin6 + v3 * dctCos6 + 128) >> 8;\n      v2 = (v2 * dctCos6 - v3 * dctSin6 + 128) >> 8;\n      v3 = t;\n      v4 = (v4 + v6 + 1) >> 1;\n      v6 = v4 - v6;\n      v7 = (v7 + v5 + 1) >> 1;\n      v5 = v7 - v5;\n\n      // stage 2\n      v0 = (v0 + v3 + 1) >> 1;\n      v3 = v0 - v3;\n      v1 = (v1 + v2 + 1) >> 1;\n      v2 = v1 - v2;\n      t = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;\n      v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;\n      v7 = t;\n      t = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;\n      v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;\n      v6 = t;\n\n      // stage 1\n      p[row] = v0 + v7;\n      p[row + 7] = v0 - v7;\n      p[row + 1] = v1 + v6;\n      p[row + 6] = v1 - v6;\n      p[row + 2] = v2 + v5;\n      p[row + 5] = v2 - v5;\n      p[row + 3] = v3 + v4;\n      p[row + 4] = v3 - v4;\n    }\n\n    // inverse DCT on columns\n    for (var col = 0; col < 8; ++col) {\n      p0 = p[col];\n      p1 = p[col + 8];\n      p2 = p[col + 16];\n      p3 = p[col + 24];\n      p4 = p[col + 32];\n      p5 = p[col + 40];\n      p6 = p[col + 48];\n      p7 = p[col + 56];\n\n      // check for all-zero AC coefficients\n      if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {\n        t = (dctSqrt2 * p0 + 8192) >> 14;\n        // Convert to 8-bit.\n        if (t < -2040) {\n          t = 0;\n        } else if (t >= 2024) {\n          t = 255;\n        } else {\n          t = (t + 2056) >> 4;\n        }\n        blockData[blockBufferOffset + col] = t;\n        blockData[blockBufferOffset + col + 8] = t;\n        blockData[blockBufferOffset + col + 16] = t;\n        blockData[blockBufferOffset + col + 24] = t;\n        blockData[blockBufferOffset + col + 32] = t;\n        blockData[blockBufferOffset + col + 40] = t;\n        blockData[blockBufferOffset + col + 48] = t;\n        blockData[blockBufferOffset + col + 56] = t;\n        continue;\n      }\n\n      // stage 4\n      v0 = (dctSqrt2 * p0 + 2048) >> 12;\n      v1 = (dctSqrt2 * p4 + 2048) >> 12;\n      v2 = p2;\n      v3 = p6;\n      v4 = (dctSqrt1d2 * (p1 - p7) + 2048) >> 12;\n      v7 = (dctSqrt1d2 * (p1 + p7) + 2048) >> 12;\n      v5 = p3;\n      v6 = p5;\n\n      // stage 3\n      // Shift v0 by 128.5 << 5 here, so we don't need to shift p0...p7 when\n      // converting to UInt8 range later.\n      v0 = ((v0 + v1 + 1) >> 1) + 4112;\n      v1 = v0 - v1;\n      t = (v2 * dctSin6 + v3 * dctCos6 + 2048) >> 12;\n      v2 = (v2 * dctCos6 - v3 * dctSin6 + 2048) >> 12;\n      v3 = t;\n      v4 = (v4 + v6 + 1) >> 1;\n      v6 = v4 - v6;\n      v7 = (v7 + v5 + 1) >> 1;\n      v5 = v7 - v5;\n\n      // stage 2\n      v0 = (v0 + v3 + 1) >> 1;\n      v3 = v0 - v3;\n      v1 = (v1 + v2 + 1) >> 1;\n      v2 = v1 - v2;\n      t = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;\n      v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;\n      v7 = t;\n      t = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;\n      v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;\n      v6 = t;\n\n      // stage 1\n      p0 = v0 + v7;\n      p7 = v0 - v7;\n      p1 = v1 + v6;\n      p6 = v1 - v6;\n      p2 = v2 + v5;\n      p5 = v2 - v5;\n      p3 = v3 + v4;\n      p4 = v3 - v4;\n\n      // Convert to 8-bit integers.\n      if (p0 < 16) {\n        p0 = 0;\n      } else if (p0 >= 4080) {\n        p0 = 255;\n      } else {\n        p0 >>= 4;\n      }\n      if (p1 < 16) {\n        p1 = 0;\n      } else if (p1 >= 4080) {\n        p1 = 255;\n      } else {\n        p1 >>= 4;\n      }\n      if (p2 < 16) {\n        p2 = 0;\n      } else if (p2 >= 4080) {\n        p2 = 255;\n      } else {\n        p2 >>= 4;\n      }\n      if (p3 < 16) {\n        p3 = 0;\n      } else if (p3 >= 4080) {\n        p3 = 255;\n      } else {\n        p3 >>= 4;\n      }\n      if (p4 < 16) {\n        p4 = 0;\n      } else if (p4 >= 4080) {\n        p4 = 255;\n      } else {\n        p4 >>= 4;\n      }\n      if (p5 < 16) {\n        p5 = 0;\n      } else if (p5 >= 4080) {\n        p5 = 255;\n      } else {\n        p5 >>= 4;\n      }\n      if (p6 < 16) {\n        p6 = 0;\n      } else if (p6 >= 4080) {\n        p6 = 255;\n      } else {\n        p6 >>= 4;\n      }\n      if (p7 < 16) {\n        p7 = 0;\n      } else if (p7 >= 4080) {\n        p7 = 255;\n      } else {\n        p7 >>= 4;\n      }\n\n      // store block data\n      blockData[blockBufferOffset + col] = p0;\n      blockData[blockBufferOffset + col + 8] = p1;\n      blockData[blockBufferOffset + col + 16] = p2;\n      blockData[blockBufferOffset + col + 24] = p3;\n      blockData[blockBufferOffset + col + 32] = p4;\n      blockData[blockBufferOffset + col + 40] = p5;\n      blockData[blockBufferOffset + col + 48] = p6;\n      blockData[blockBufferOffset + col + 56] = p7;\n    }\n  }\n\n  function buildComponentData(frame, component) {\n    var blocksPerLine = component.blocksPerLine;\n    var blocksPerColumn = component.blocksPerColumn;\n    var computationBuffer = new Int16Array(64);\n\n    for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {\n      for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {\n        var offset = getBlockBufferOffset(component, blockRow, blockCol);\n        quantizeAndInverse(component, offset, computationBuffer);\n      }\n    }\n    return component.blockData;\n  }\n\n  function findNextFileMarker(data, currentPos, startPos = currentPos) {\n    const maxPos = data.length - 1;\n    var newPos = startPos < currentPos ? startPos : currentPos;\n\n    if (currentPos >= maxPos) {\n      return null; // Don't attempt to read non-existent data and just return.\n    }\n    var currentMarker = readUint16(data, currentPos);\n    if (currentMarker >= 0xffc0 && currentMarker <= 0xfffe) {\n      return {\n        invalid: null,\n        marker: currentMarker,\n        offset: currentPos,\n      };\n    }\n    var newMarker = readUint16(data, newPos);\n    while (!(newMarker >= 0xffc0 && newMarker <= 0xfffe)) {\n      if (++newPos >= maxPos) {\n        return null; // Don't attempt to read non-existent data and just return.\n      }\n      newMarker = readUint16(data, newPos);\n    }\n    return {\n      invalid: currentMarker.toString(16),\n      marker: newMarker,\n      offset: newPos,\n    };\n  }\n\n  JpegImage.prototype = {\n    parse(data, { dnlScanLines = null } = {}) {\n      function readDataBlock() {\n        const length = readUint16(data, offset);\n        offset += 2;\n        let endOffset = offset + length - 2;\n\n        var fileMarker = findNextFileMarker(data, endOffset, offset);\n        if (fileMarker && fileMarker.invalid) {\n          warn(\n            \"readDataBlock - incorrect length, current marker is: \" +\n              fileMarker.invalid\n          );\n          endOffset = fileMarker.offset;\n        }\n\n        var array = data.subarray(offset, endOffset);\n        offset += array.length;\n        return array;\n      }\n\n      function prepareComponents(frame) {\n        var mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / frame.maxH);\n        var mcusPerColumn = Math.ceil(frame.scanLines / 8 / frame.maxV);\n        for (var i = 0; i < frame.components.length; i++) {\n          component = frame.components[i];\n          var blocksPerLine = Math.ceil(\n            (Math.ceil(frame.samplesPerLine / 8) * component.h) / frame.maxH\n          );\n          var blocksPerColumn = Math.ceil(\n            (Math.ceil(frame.scanLines / 8) * component.v) / frame.maxV\n          );\n          var blocksPerLineForMcu = mcusPerLine * component.h;\n          var blocksPerColumnForMcu = mcusPerColumn * component.v;\n\n          var blocksBufferSize =\n            64 * blocksPerColumnForMcu * (blocksPerLineForMcu + 1);\n          component.blockData = new Int16Array(blocksBufferSize);\n          component.blocksPerLine = blocksPerLine;\n          component.blocksPerColumn = blocksPerColumn;\n        }\n        frame.mcusPerLine = mcusPerLine;\n        frame.mcusPerColumn = mcusPerColumn;\n      }\n\n      var offset = 0;\n      var jfif = null;\n      var adobe = null;\n      var frame, resetInterval;\n      let numSOSMarkers = 0;\n      var quantizationTables = [];\n      var huffmanTablesAC = [],\n        huffmanTablesDC = [];\n\n      let fileMarker = readUint16(data, offset);\n      offset += 2;\n      if (fileMarker !== /* SOI (Start of Image) = */ 0xffd8) {\n        throw new JpegError(\"SOI not found\");\n      }\n      fileMarker = readUint16(data, offset);\n      offset += 2;\n\n      markerLoop: while (fileMarker !== /* EOI (End of Image) = */ 0xffd9) {\n        var i, j, l;\n        switch (fileMarker) {\n          case 0xffe0: // APP0 (Application Specific)\n          case 0xffe1: // APP1\n          case 0xffe2: // APP2\n          case 0xffe3: // APP3\n          case 0xffe4: // APP4\n          case 0xffe5: // APP5\n          case 0xffe6: // APP6\n          case 0xffe7: // APP7\n          case 0xffe8: // APP8\n          case 0xffe9: // APP9\n          case 0xffea: // APP10\n          case 0xffeb: // APP11\n          case 0xffec: // APP12\n          case 0xffed: // APP13\n          case 0xffee: // APP14\n          case 0xffef: // APP15\n          case 0xfffe: // COM (Comment)\n            var appData = readDataBlock();\n\n            if (fileMarker === 0xffe0) {\n              // 'JFIF\\x00'\n              if (\n                appData[0] === 0x4a &&\n                appData[1] === 0x46 &&\n                appData[2] === 0x49 &&\n                appData[3] === 0x46 &&\n                appData[4] === 0\n              ) {\n                jfif = {\n                  version: { major: appData[5], minor: appData[6] },\n                  densityUnits: appData[7],\n                  xDensity: (appData[8] << 8) | appData[9],\n                  yDensity: (appData[10] << 8) | appData[11],\n                  thumbWidth: appData[12],\n                  thumbHeight: appData[13],\n                  thumbData: appData.subarray(\n                    14,\n                    14 + 3 * appData[12] * appData[13]\n                  ),\n                };\n              }\n            }\n            // TODO APP1 - Exif\n            if (fileMarker === 0xffee) {\n              // 'Adobe'\n              if (\n                appData[0] === 0x41 &&\n                appData[1] === 0x64 &&\n                appData[2] === 0x6f &&\n                appData[3] === 0x62 &&\n                appData[4] === 0x65\n              ) {\n                adobe = {\n                  version: (appData[5] << 8) | appData[6],\n                  flags0: (appData[7] << 8) | appData[8],\n                  flags1: (appData[9] << 8) | appData[10],\n                  transformCode: appData[11],\n                };\n              }\n            }\n            break;\n\n          case 0xffdb: // DQT (Define Quantization Tables)\n            const quantizationTablesLength = readUint16(data, offset);\n            offset += 2;\n            var quantizationTablesEnd = quantizationTablesLength + offset - 2;\n            var z;\n            while (offset < quantizationTablesEnd) {\n              var quantizationTableSpec = data[offset++];\n              var tableData = new Uint16Array(64);\n              if (quantizationTableSpec >> 4 === 0) {\n                // 8 bit values\n                for (j = 0; j < 64; j++) {\n                  z = dctZigZag[j];\n                  tableData[z] = data[offset++];\n                }\n              } else if (quantizationTableSpec >> 4 === 1) {\n                // 16 bit values\n                for (j = 0; j < 64; j++) {\n                  z = dctZigZag[j];\n                  tableData[z] = readUint16(data, offset);\n                  offset += 2;\n                }\n              } else {\n                throw new JpegError(\"DQT - invalid table spec\");\n              }\n              quantizationTables[quantizationTableSpec & 15] = tableData;\n            }\n            break;\n\n          case 0xffc0: // SOF0 (Start of Frame, Baseline DCT)\n          case 0xffc1: // SOF1 (Start of Frame, Extended DCT)\n          case 0xffc2: // SOF2 (Start of Frame, Progressive DCT)\n            if (frame) {\n              throw new JpegError(\"Only single frame JPEGs supported\");\n            }\n            offset += 2; // Skip marker length.\n\n            frame = {};\n            frame.extended = fileMarker === 0xffc1;\n            frame.progressive = fileMarker === 0xffc2;\n            frame.precision = data[offset++];\n            const sofScanLines = readUint16(data, offset);\n            offset += 2;\n            frame.scanLines = dnlScanLines || sofScanLines;\n            frame.samplesPerLine = readUint16(data, offset);\n            offset += 2;\n            frame.components = [];\n            frame.componentIds = {};\n            var componentsCount = data[offset++],\n              componentId;\n            var maxH = 0,\n              maxV = 0;\n            for (i = 0; i < componentsCount; i++) {\n              componentId = data[offset];\n              var h = data[offset + 1] >> 4;\n              var v = data[offset + 1] & 15;\n              if (maxH < h) {\n                maxH = h;\n              }\n              if (maxV < v) {\n                maxV = v;\n              }\n              var qId = data[offset + 2];\n              l = frame.components.push({\n                h,\n                v,\n                quantizationId: qId,\n                quantizationTable: null, // See comment below.\n              });\n              frame.componentIds[componentId] = l - 1;\n              offset += 3;\n            }\n            frame.maxH = maxH;\n            frame.maxV = maxV;\n            prepareComponents(frame);\n            break;\n\n          case 0xffc4: // DHT (Define Huffman Tables)\n            const huffmanLength = readUint16(data, offset);\n            offset += 2;\n            for (i = 2; i < huffmanLength; ) {\n              var huffmanTableSpec = data[offset++];\n              var codeLengths = new Uint8Array(16);\n              var codeLengthSum = 0;\n              for (j = 0; j < 16; j++, offset++) {\n                codeLengthSum += codeLengths[j] = data[offset];\n              }\n              var huffmanValues = new Uint8Array(codeLengthSum);\n              for (j = 0; j < codeLengthSum; j++, offset++) {\n                huffmanValues[j] = data[offset];\n              }\n              i += 17 + codeLengthSum;\n\n              (huffmanTableSpec >> 4 === 0 ? huffmanTablesDC : huffmanTablesAC)[\n                huffmanTableSpec & 15\n              ] = buildHuffmanTable(codeLengths, huffmanValues);\n            }\n            break;\n\n          case 0xffdd: // DRI (Define Restart Interval)\n            offset += 2; // Skip marker length.\n\n            resetInterval = readUint16(data, offset);\n            offset += 2;\n            break;\n\n          case 0xffda: // SOS (Start of Scan)\n            // A DNL marker (0xFFDC), if it exists, is only allowed at the end\n            // of the first scan segment and may only occur once in an image.\n            // Furthermore, to prevent an infinite loop, do *not* attempt to\n            // parse DNL markers during re-parsing of the JPEG scan data.\n            const parseDNLMarker = ++numSOSMarkers === 1 && !dnlScanLines;\n\n            offset += 2; // Skip marker length.\n\n            var selectorsCount = data[offset++];\n            var components = [],\n              component;\n            for (i = 0; i < selectorsCount; i++) {\n              var componentIndex = frame.componentIds[data[offset++]];\n              component = frame.components[componentIndex];\n              var tableSpec = data[offset++];\n              component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];\n              component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];\n              components.push(component);\n            }\n            var spectralStart = data[offset++];\n            var spectralEnd = data[offset++];\n            var successiveApproximation = data[offset++];\n            try {\n              var processed = decodeScan(\n                data,\n                offset,\n                frame,\n                components,\n                resetInterval,\n                spectralStart,\n                spectralEnd,\n                successiveApproximation >> 4,\n                successiveApproximation & 15,\n                parseDNLMarker\n              );\n              offset += processed;\n            } catch (ex) {\n              if (ex instanceof DNLMarkerError) {\n                warn(`${ex.message} -- attempting to re-parse the JPEG image.`);\n                return this.parse(data, { dnlScanLines: ex.scanLines });\n              } else if (ex instanceof EOIMarkerError) {\n                warn(`${ex.message} -- ignoring the rest of the image data.`);\n                break markerLoop;\n              }\n              throw ex;\n            }\n            break;\n\n          case 0xffdc: // DNL (Define Number of Lines)\n            // Ignore the marker, since it's being handled in `decodeScan`.\n            offset += 4;\n            break;\n\n          case 0xffff: // Fill bytes\n            if (data[offset] !== 0xff) {\n              // Avoid skipping a valid marker.\n              offset--;\n            }\n            break;\n\n          default:\n            // Could be incorrect encoding -- the last 0xFF byte of the previous\n            // block could have been eaten by the encoder, hence we fallback to\n            // `startPos = offset - 3` when looking for the next valid marker.\n            const nextFileMarker = findNextFileMarker(\n              data,\n              /* currentPos = */ offset - 2,\n              /* startPos = */ offset - 3\n            );\n            if (nextFileMarker && nextFileMarker.invalid) {\n              warn(\n                \"JpegImage.parse - unexpected data, current marker is: \" +\n                  nextFileMarker.invalid\n              );\n              offset = nextFileMarker.offset;\n              break;\n            }\n            if (offset >= data.length - 1) {\n              warn(\n                \"JpegImage.parse - reached the end of the image data \" +\n                  \"without finding an EOI marker (0xFFD9).\"\n              );\n              break markerLoop;\n            }\n            throw new JpegError(\n              \"JpegImage.parse - unknown marker: \" + fileMarker.toString(16)\n            );\n        }\n        fileMarker = readUint16(data, offset);\n        offset += 2;\n      }\n\n      this.width = frame.samplesPerLine;\n      this.height = frame.scanLines;\n      this.jfif = jfif;\n      this.adobe = adobe;\n      this.components = [];\n      for (i = 0; i < frame.components.length; i++) {\n        component = frame.components[i];\n\n        // Prevent errors when DQT markers are placed after SOF{n} markers,\n        // by assigning the `quantizationTable` entry after the entire image\n        // has been parsed (fixes issue7406.pdf).\n        var quantizationTable = quantizationTables[component.quantizationId];\n        if (quantizationTable) {\n          component.quantizationTable = quantizationTable;\n        }\n\n        this.components.push({\n          output: buildComponentData(frame, component),\n          scaleX: component.h / frame.maxH,\n          scaleY: component.v / frame.maxV,\n          blocksPerLine: component.blocksPerLine,\n          blocksPerColumn: component.blocksPerColumn,\n        });\n      }\n      this.numComponents = this.components.length;\n      return undefined;\n    },\n\n    _getLinearizedBlockData(width, height, isSourcePDF = false) {\n      var scaleX = this.width / width,\n        scaleY = this.height / height;\n\n      var component, componentScaleX, componentScaleY, blocksPerScanline;\n      var x, y, i, j, k;\n      var index;\n      var offset = 0;\n      var output;\n      var numComponents = this.components.length;\n      var dataLength = width * height * numComponents;\n      var data = new Uint8ClampedArray(dataLength);\n      var xScaleBlockOffset = new Uint32Array(width);\n      var mask3LSB = 0xfffffff8; // used to clear the 3 LSBs\n      let lastComponentScaleX;\n\n      for (i = 0; i < numComponents; i++) {\n        component = this.components[i];\n        componentScaleX = component.scaleX * scaleX;\n        componentScaleY = component.scaleY * scaleY;\n        offset = i;\n        output = component.output;\n        blocksPerScanline = (component.blocksPerLine + 1) << 3;\n        // Precalculate the `xScaleBlockOffset`. Since it doesn't depend on the\n        // component data, that's only necessary when `componentScaleX` changes.\n        if (componentScaleX !== lastComponentScaleX) {\n          for (x = 0; x < width; x++) {\n            j = 0 | (x * componentScaleX);\n            xScaleBlockOffset[x] = ((j & mask3LSB) << 3) | (j & 7);\n          }\n          lastComponentScaleX = componentScaleX;\n        }\n        // linearize the blocks of the component\n        for (y = 0; y < height; y++) {\n          j = 0 | (y * componentScaleY);\n          index = (blocksPerScanline * (j & mask3LSB)) | ((j & 7) << 3);\n          for (x = 0; x < width; x++) {\n            data[offset] = output[index + xScaleBlockOffset[x]];\n            offset += numComponents;\n          }\n        }\n      }\n\n      // decodeTransform contains pairs of multiplier (-256..256) and additive\n      let transform = this._decodeTransform;\n\n      // In PDF files, JPEG images with CMYK colour spaces are usually inverted\n      // (this can be observed by extracting the raw image data).\n      // Since the conversion algorithms (see below) were written primarily for\n      // the PDF use-cases, attempting to use `JpegImage` to parse standalone\n      // JPEG (CMYK) images may thus result in inverted images (see issue 9513).\n      //\n      // Unfortunately it's not (always) possible to tell, from the image data\n      // alone, if it needs to be inverted. Thus in an attempt to provide better\n      // out-of-box behaviour when `JpegImage` is used standalone, default to\n      // inverting JPEG (CMYK) images if and only if the image data does *not*\n      // come from a PDF file and no `decodeTransform` was passed by the user.\n      if (!isSourcePDF && numComponents === 4 && !transform) {\n        // prettier-ignore\n        transform = new Int32Array([\n          -256, 255, -256, 255, -256, 255, -256, 255]);\n      }\n\n      if (transform) {\n        for (i = 0; i < dataLength; ) {\n          for (j = 0, k = 0; j < numComponents; j++, i++, k += 2) {\n            data[i] = ((data[i] * transform[k]) >> 8) + transform[k + 1];\n          }\n        }\n      }\n      return data;\n    },\n\n    get _isColorConversionNeeded() {\n      if (this.adobe) {\n        // The adobe transform marker overrides any previous setting.\n        return !!this.adobe.transformCode;\n      }\n      if (this.numComponents === 3) {\n        if (this._colorTransform === 0) {\n          // If the Adobe transform marker is not present and the image\n          // dictionary has a 'ColorTransform' entry, explicitly set to `0`,\n          // then the colours should *not* be transformed.\n          return false;\n        }\n        return true;\n      }\n      // `this.numComponents !== 3`\n      if (this._colorTransform === 1) {\n        // If the Adobe transform marker is not present and the image\n        // dictionary has a 'ColorTransform' entry, explicitly set to `1`,\n        // then the colours should be transformed.\n        return true;\n      }\n      return false;\n    },\n\n    _convertYccToRgb: function convertYccToRgb(data) {\n      var Y, Cb, Cr;\n      for (var i = 0, length = data.length; i < length; i += 3) {\n        Y = data[i];\n        Cb = data[i + 1];\n        Cr = data[i + 2];\n        data[i] = Y - 179.456 + 1.402 * Cr;\n        data[i + 1] = Y + 135.459 - 0.344 * Cb - 0.714 * Cr;\n        data[i + 2] = Y - 226.816 + 1.772 * Cb;\n      }\n      return data;\n    },\n\n    _convertYcckToRgb: function convertYcckToRgb(data) {\n      var Y, Cb, Cr, k;\n      var offset = 0;\n      for (var i = 0, length = data.length; i < length; i += 4) {\n        Y = data[i];\n        Cb = data[i + 1];\n        Cr = data[i + 2];\n        k = data[i + 3];\n\n        data[offset++] =\n          -122.67195406894 +\n          Cb *\n            (-6.60635669420364e-5 * Cb +\n              0.000437130475926232 * Cr -\n              5.4080610064599e-5 * Y +\n              0.00048449797120281 * k -\n              0.154362151871126) +\n          Cr *\n            (-0.000957964378445773 * Cr +\n              0.000817076911346625 * Y -\n              0.00477271405408747 * k +\n              1.53380253221734) +\n          Y *\n            (0.000961250184130688 * Y -\n              0.00266257332283933 * k +\n              0.48357088451265) +\n          k * (-0.000336197177618394 * k + 0.484791561490776);\n\n        data[offset++] =\n          107.268039397724 +\n          Cb *\n            (2.19927104525741e-5 * Cb -\n              0.000640992018297945 * Cr +\n              0.000659397001245577 * Y +\n              0.000426105652938837 * k -\n              0.176491792462875) +\n          Cr *\n            (-0.000778269941513683 * Cr +\n              0.00130872261408275 * Y +\n              0.000770482631801132 * k -\n              0.151051492775562) +\n          Y *\n            (0.00126935368114843 * Y -\n              0.00265090189010898 * k +\n              0.25802910206845) +\n          k * (-0.000318913117588328 * k - 0.213742400323665);\n\n        data[offset++] =\n          -20.810012546947 +\n          Cb *\n            (-0.000570115196973677 * Cb -\n              2.63409051004589e-5 * Cr +\n              0.0020741088115012 * Y -\n              0.00288260236853442 * k +\n              0.814272968359295) +\n          Cr *\n            (-1.53496057440975e-5 * Cr -\n              0.000132689043961446 * Y +\n              0.000560833691242812 * k -\n              0.195152027534049) +\n          Y *\n            (0.00174418132927582 * Y -\n              0.00255243321439347 * k +\n              0.116935020465145) +\n          k * (-0.000343531996510555 * k + 0.24165260232407);\n      }\n      // Ensure that only the converted RGB data is returned.\n      return data.subarray(0, offset);\n    },\n\n    _convertYcckToCmyk: function convertYcckToCmyk(data) {\n      var Y, Cb, Cr;\n      for (var i = 0, length = data.length; i < length; i += 4) {\n        Y = data[i];\n        Cb = data[i + 1];\n        Cr = data[i + 2];\n        data[i] = 434.456 - Y - 1.402 * Cr;\n        data[i + 1] = 119.541 - Y + 0.344 * Cb + 0.714 * Cr;\n        data[i + 2] = 481.816 - Y - 1.772 * Cb;\n        // K in data[i + 3] is unchanged\n      }\n      return data;\n    },\n\n    _convertCmykToRgb: function convertCmykToRgb(data) {\n      var c, m, y, k;\n      var offset = 0;\n      for (var i = 0, length = data.length; i < length; i += 4) {\n        c = data[i];\n        m = data[i + 1];\n        y = data[i + 2];\n        k = data[i + 3];\n\n        data[offset++] =\n          255 +\n          c *\n            (-0.00006747147073602441 * c +\n              0.0008379262121013727 * m +\n              0.0002894718188643294 * y +\n              0.003264231057537806 * k -\n              1.1185611867203937) +\n          m *\n            (0.000026374107616089405 * m -\n              0.00008626949158638572 * y -\n              0.0002748769067499491 * k -\n              0.02155688794978967) +\n          y *\n            (-0.00003878099212869363 * y -\n              0.0003267808279485286 * k +\n              0.0686742238595345) -\n          k * (0.0003361971776183937 * k + 0.7430659151342254);\n\n        data[offset++] =\n          255 +\n          c *\n            (0.00013596372813588848 * c +\n              0.000924537132573585 * m +\n              0.00010567359618683593 * y +\n              0.0004791864687436512 * k -\n              0.3109689587515875) +\n          m *\n            (-0.00023545346108370344 * m +\n              0.0002702845253534714 * y +\n              0.0020200308977307156 * k -\n              0.7488052167015494) +\n          y *\n            (0.00006834815998235662 * y +\n              0.00015168452363460973 * k -\n              0.09751927774728933) -\n          k * (0.00031891311758832814 * k + 0.7364883807733168);\n\n        data[offset++] =\n          255 +\n          c *\n            (0.000013598650411385307 * c +\n              0.00012423956175490851 * m +\n              0.0004751985097583589 * y -\n              0.0000036729317476630422 * k -\n              0.05562186980264034) +\n          m *\n            (0.00016141380598724676 * m +\n              0.0009692239130725186 * y +\n              0.0007782692450036253 * k -\n              0.44015232367526463) +\n          y *\n            (5.068882914068769e-7 * y +\n              0.0017778369011375071 * k -\n              0.7591454649749609) -\n          k * (0.0003435319965105553 * k + 0.7063770186160144);\n      }\n      // Ensure that only the converted RGB data is returned.\n      return data.subarray(0, offset);\n    },\n\n    getData({ width, height, forceRGB = false, isSourcePDF = false }) {\n      if (\n        typeof PDFJSDev === \"undefined\" ||\n        PDFJSDev.test(\"!PRODUCTION || TESTING\")\n      ) {\n        assert(\n          isSourcePDF === true,\n          'JpegImage.getData: Unexpected \"isSourcePDF\" value for PDF files.'\n        );\n      }\n      if (this.numComponents > 4) {\n        throw new JpegError(\"Unsupported color mode\");\n      }\n      // Type of data: Uint8ClampedArray(width * height * numComponents)\n      var data = this._getLinearizedBlockData(width, height, isSourcePDF);\n\n      if (this.numComponents === 1 && forceRGB) {\n        var dataLength = data.length;\n        var rgbData = new Uint8ClampedArray(dataLength * 3);\n        var offset = 0;\n        for (var i = 0; i < dataLength; i++) {\n          var grayColor = data[i];\n          rgbData[offset++] = grayColor;\n          rgbData[offset++] = grayColor;\n          rgbData[offset++] = grayColor;\n        }\n        return rgbData;\n      } else if (this.numComponents === 3 && this._isColorConversionNeeded) {\n        return this._convertYccToRgb(data);\n      } else if (this.numComponents === 4) {\n        if (this._isColorConversionNeeded) {\n          if (forceRGB) {\n            return this._convertYcckToRgb(data);\n          }\n          return this._convertYcckToCmyk(data);\n        } else if (forceRGB) {\n          return this._convertCmykToRgb(data);\n        }\n      }\n      return data;\n    },\n  };\n\n  return JpegImage;\n})();\n\nexport { JpegImage };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DecodeStream } from \"./stream.js\";\nimport { JpxImage } from \"./jpx.js\";\nimport { shadow } from \"../shared/util.js\";\n\n/**\n * For JPEG 2000's we use a library to decode these images and\n * the stream behaves like all the other DecodeStreams.\n */\nconst JpxStream = (function JpxStreamClosure() {\n  // eslint-disable-next-line no-shadow\n  function JpxStream(stream, maybeLength, dict, params) {\n    this.stream = stream;\n    this.maybeLength = maybeLength;\n    this.dict = dict;\n    this.params = params;\n\n    DecodeStream.call(this, maybeLength);\n  }\n\n  JpxStream.prototype = Object.create(DecodeStream.prototype);\n\n  Object.defineProperty(JpxStream.prototype, \"bytes\", {\n    get: function JpxStream_bytes() {\n      // If `this.maybeLength` is null, we'll get the entire stream.\n      return shadow(this, \"bytes\", this.stream.getBytes(this.maybeLength));\n    },\n    configurable: true,\n  });\n\n  JpxStream.prototype.ensureBuffer = function (requested) {\n    // No-op, since `this.readBlock` will always parse the entire image and\n    // directly insert all of its data into `this.buffer`.\n  };\n\n  JpxStream.prototype.readBlock = function () {\n    if (this.eof) {\n      return;\n    }\n    const jpxImage = new JpxImage();\n    jpxImage.parse(this.bytes);\n\n    const width = jpxImage.width;\n    const height = jpxImage.height;\n    const componentsCount = jpxImage.componentsCount;\n    const tileCount = jpxImage.tiles.length;\n    if (tileCount === 1) {\n      this.buffer = jpxImage.tiles[0].items;\n    } else {\n      const data = new Uint8ClampedArray(width * height * componentsCount);\n\n      for (let k = 0; k < tileCount; k++) {\n        const tileComponents = jpxImage.tiles[k];\n        const tileWidth = tileComponents.width;\n        const tileHeight = tileComponents.height;\n        const tileLeft = tileComponents.left;\n        const tileTop = tileComponents.top;\n\n        const src = tileComponents.items;\n        let srcPosition = 0;\n        let dataPosition = (width * tileTop + tileLeft) * componentsCount;\n        const imgRowSize = width * componentsCount;\n        const tileRowSize = tileWidth * componentsCount;\n\n        for (let j = 0; j < tileHeight; j++) {\n          const rowBytes = src.subarray(srcPosition, srcPosition + tileRowSize);\n          data.set(rowBytes, dataPosition);\n          srcPosition += tileRowSize;\n          dataPosition += imgRowSize;\n        }\n      }\n      this.buffer = data;\n    }\n    this.bufferLength = this.buffer.length;\n    this.eof = true;\n  };\n\n  return JpxStream;\n})();\n\nexport { JpxStream };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BaseException, info, warn } from \"../shared/util.js\";\nimport { log2, readUint16, readUint32 } from \"./core_utils.js\";\nimport { ArithmeticDecoder } from \"./arithmetic_decoder.js\";\n\nclass JpxError extends BaseException {\n  constructor(msg) {\n    super(`JPX error: ${msg}`);\n  }\n}\n\nvar JpxImage = (function JpxImageClosure() {\n  // Table E.1\n  var SubbandsGainLog2 = {\n    LL: 0,\n    LH: 1,\n    HL: 1,\n    HH: 2,\n  };\n\n  // eslint-disable-next-line no-shadow\n  function JpxImage() {\n    this.failOnCorruptedImage = false;\n  }\n  JpxImage.prototype = {\n    parse: function JpxImage_parse(data) {\n      var head = readUint16(data, 0);\n      // No box header, immediate start of codestream (SOC)\n      if (head === 0xff4f) {\n        this.parseCodestream(data, 0, data.length);\n        return;\n      }\n\n      var position = 0,\n        length = data.length;\n      while (position < length) {\n        var headerSize = 8;\n        var lbox = readUint32(data, position);\n        var tbox = readUint32(data, position + 4);\n        position += headerSize;\n        if (lbox === 1) {\n          // XLBox: read UInt64 according to spec.\n          // JavaScript's int precision of 53 bit should be sufficient here.\n          lbox =\n            readUint32(data, position) * 4294967296 +\n            readUint32(data, position + 4);\n          position += 8;\n          headerSize += 8;\n        }\n        if (lbox === 0) {\n          lbox = length - position + headerSize;\n        }\n        if (lbox < headerSize) {\n          throw new JpxError(\"Invalid box field size\");\n        }\n        var dataLength = lbox - headerSize;\n        var jumpDataLength = true;\n        switch (tbox) {\n          case 0x6a703268: // 'jp2h'\n            jumpDataLength = false; // parsing child boxes\n            break;\n          case 0x636f6c72: // 'colr'\n            // Colorspaces are not used, the CS from the PDF is used.\n            var method = data[position];\n            if (method === 1) {\n              // enumerated colorspace\n              var colorspace = readUint32(data, position + 3);\n              switch (colorspace) {\n                case 16: // this indicates a sRGB colorspace\n                case 17: // this indicates a grayscale colorspace\n                case 18: // this indicates a YUV colorspace\n                  break;\n                default:\n                  warn(\"Unknown colorspace \" + colorspace);\n                  break;\n              }\n            } else if (method === 2) {\n              info(\"ICC profile not supported\");\n            }\n            break;\n          case 0x6a703263: // 'jp2c'\n            this.parseCodestream(data, position, position + dataLength);\n            break;\n          case 0x6a502020: // 'jP\\024\\024'\n            if (readUint32(data, position) !== 0x0d0a870a) {\n              warn(\"Invalid JP2 signature\");\n            }\n            break;\n          // The following header types are valid but currently not used:\n          case 0x6a501a1a: // 'jP\\032\\032'\n          case 0x66747970: // 'ftyp'\n          case 0x72726571: // 'rreq'\n          case 0x72657320: // 'res '\n          case 0x69686472: // 'ihdr'\n            break;\n          default:\n            var headerType = String.fromCharCode(\n              (tbox >> 24) & 0xff,\n              (tbox >> 16) & 0xff,\n              (tbox >> 8) & 0xff,\n              tbox & 0xff\n            );\n            warn(\"Unsupported header type \" + tbox + \" (\" + headerType + \")\");\n            break;\n        }\n        if (jumpDataLength) {\n          position += dataLength;\n        }\n      }\n    },\n    parseImageProperties: function JpxImage_parseImageProperties(stream) {\n      var newByte = stream.getByte();\n      while (newByte >= 0) {\n        var oldByte = newByte;\n        newByte = stream.getByte();\n        var code = (oldByte << 8) | newByte;\n        // Image and tile size (SIZ)\n        if (code === 0xff51) {\n          stream.skip(4);\n          var Xsiz = stream.getInt32() >>> 0; // Byte 4\n          var Ysiz = stream.getInt32() >>> 0; // Byte 8\n          var XOsiz = stream.getInt32() >>> 0; // Byte 12\n          var YOsiz = stream.getInt32() >>> 0; // Byte 16\n          stream.skip(16);\n          var Csiz = stream.getUint16(); // Byte 36\n          this.width = Xsiz - XOsiz;\n          this.height = Ysiz - YOsiz;\n          this.componentsCount = Csiz;\n          // Results are always returned as `Uint8ClampedArray`s.\n          this.bitsPerComponent = 8;\n          return;\n        }\n      }\n      throw new JpxError(\"No size marker found in JPX stream\");\n    },\n    parseCodestream: function JpxImage_parseCodestream(data, start, end) {\n      var context = {};\n      var doNotRecover = false;\n      try {\n        var position = start;\n        while (position + 1 < end) {\n          var code = readUint16(data, position);\n          position += 2;\n\n          var length = 0,\n            j,\n            sqcd,\n            spqcds,\n            spqcdSize,\n            scalarExpounded,\n            tile;\n          switch (code) {\n            case 0xff4f: // Start of codestream (SOC)\n              context.mainHeader = true;\n              break;\n            case 0xffd9: // End of codestream (EOC)\n              break;\n            case 0xff51: // Image and tile size (SIZ)\n              length = readUint16(data, position);\n              var siz = {};\n              siz.Xsiz = readUint32(data, position + 4);\n              siz.Ysiz = readUint32(data, position + 8);\n              siz.XOsiz = readUint32(data, position + 12);\n              siz.YOsiz = readUint32(data, position + 16);\n              siz.XTsiz = readUint32(data, position + 20);\n              siz.YTsiz = readUint32(data, position + 24);\n              siz.XTOsiz = readUint32(data, position + 28);\n              siz.YTOsiz = readUint32(data, position + 32);\n              var componentsCount = readUint16(data, position + 36);\n              siz.Csiz = componentsCount;\n              var components = [];\n              j = position + 38;\n              for (var i = 0; i < componentsCount; i++) {\n                var component = {\n                  precision: (data[j] & 0x7f) + 1,\n                  isSigned: !!(data[j] & 0x80),\n                  XRsiz: data[j + 1],\n                  YRsiz: data[j + 2],\n                };\n                j += 3;\n                calculateComponentDimensions(component, siz);\n                components.push(component);\n              }\n              context.SIZ = siz;\n              context.components = components;\n              calculateTileGrids(context, components);\n              context.QCC = [];\n              context.COC = [];\n              break;\n            case 0xff5c: // Quantization default (QCD)\n              length = readUint16(data, position);\n              var qcd = {};\n              j = position + 2;\n              sqcd = data[j++];\n              switch (sqcd & 0x1f) {\n                case 0:\n                  spqcdSize = 8;\n                  scalarExpounded = true;\n                  break;\n                case 1:\n                  spqcdSize = 16;\n                  scalarExpounded = false;\n                  break;\n                case 2:\n                  spqcdSize = 16;\n                  scalarExpounded = true;\n                  break;\n                default:\n                  throw new Error(\"Invalid SQcd value \" + sqcd);\n              }\n              qcd.noQuantization = spqcdSize === 8;\n              qcd.scalarExpounded = scalarExpounded;\n              qcd.guardBits = sqcd >> 5;\n              spqcds = [];\n              while (j < length + position) {\n                var spqcd = {};\n                if (spqcdSize === 8) {\n                  spqcd.epsilon = data[j++] >> 3;\n                  spqcd.mu = 0;\n                } else {\n                  spqcd.epsilon = data[j] >> 3;\n                  spqcd.mu = ((data[j] & 0x7) << 8) | data[j + 1];\n                  j += 2;\n                }\n                spqcds.push(spqcd);\n              }\n              qcd.SPqcds = spqcds;\n              if (context.mainHeader) {\n                context.QCD = qcd;\n              } else {\n                context.currentTile.QCD = qcd;\n                context.currentTile.QCC = [];\n              }\n              break;\n            case 0xff5d: // Quantization component (QCC)\n              length = readUint16(data, position);\n              var qcc = {};\n              j = position + 2;\n              var cqcc;\n              if (context.SIZ.Csiz < 257) {\n                cqcc = data[j++];\n              } else {\n                cqcc = readUint16(data, j);\n                j += 2;\n              }\n              sqcd = data[j++];\n              switch (sqcd & 0x1f) {\n                case 0:\n                  spqcdSize = 8;\n                  scalarExpounded = true;\n                  break;\n                case 1:\n                  spqcdSize = 16;\n                  scalarExpounded = false;\n                  break;\n                case 2:\n                  spqcdSize = 16;\n                  scalarExpounded = true;\n                  break;\n                default:\n                  throw new Error(\"Invalid SQcd value \" + sqcd);\n              }\n              qcc.noQuantization = spqcdSize === 8;\n              qcc.scalarExpounded = scalarExpounded;\n              qcc.guardBits = sqcd >> 5;\n              spqcds = [];\n              while (j < length + position) {\n                spqcd = {};\n                if (spqcdSize === 8) {\n                  spqcd.epsilon = data[j++] >> 3;\n                  spqcd.mu = 0;\n                } else {\n                  spqcd.epsilon = data[j] >> 3;\n                  spqcd.mu = ((data[j] & 0x7) << 8) | data[j + 1];\n                  j += 2;\n                }\n                spqcds.push(spqcd);\n              }\n              qcc.SPqcds = spqcds;\n              if (context.mainHeader) {\n                context.QCC[cqcc] = qcc;\n              } else {\n                context.currentTile.QCC[cqcc] = qcc;\n              }\n              break;\n            case 0xff52: // Coding style default (COD)\n              length = readUint16(data, position);\n              var cod = {};\n              j = position + 2;\n              var scod = data[j++];\n              cod.entropyCoderWithCustomPrecincts = !!(scod & 1);\n              cod.sopMarkerUsed = !!(scod & 2);\n              cod.ephMarkerUsed = !!(scod & 4);\n              cod.progressionOrder = data[j++];\n              cod.layersCount = readUint16(data, j);\n              j += 2;\n              cod.multipleComponentTransform = data[j++];\n\n              cod.decompositionLevelsCount = data[j++];\n              cod.xcb = (data[j++] & 0xf) + 2;\n              cod.ycb = (data[j++] & 0xf) + 2;\n              var blockStyle = data[j++];\n              cod.selectiveArithmeticCodingBypass = !!(blockStyle & 1);\n              cod.resetContextProbabilities = !!(blockStyle & 2);\n              cod.terminationOnEachCodingPass = !!(blockStyle & 4);\n              cod.verticallyStripe = !!(blockStyle & 8);\n              cod.predictableTermination = !!(blockStyle & 16);\n              cod.segmentationSymbolUsed = !!(blockStyle & 32);\n              cod.reversibleTransformation = data[j++];\n              if (cod.entropyCoderWithCustomPrecincts) {\n                var precinctsSizes = [];\n                while (j < length + position) {\n                  var precinctsSize = data[j++];\n                  precinctsSizes.push({\n                    PPx: precinctsSize & 0xf,\n                    PPy: precinctsSize >> 4,\n                  });\n                }\n                cod.precinctsSizes = precinctsSizes;\n              }\n              var unsupported = [];\n              if (cod.selectiveArithmeticCodingBypass) {\n                unsupported.push(\"selectiveArithmeticCodingBypass\");\n              }\n              if (cod.resetContextProbabilities) {\n                unsupported.push(\"resetContextProbabilities\");\n              }\n              if (cod.terminationOnEachCodingPass) {\n                unsupported.push(\"terminationOnEachCodingPass\");\n              }\n              if (cod.verticallyStripe) {\n                unsupported.push(\"verticallyStripe\");\n              }\n              if (cod.predictableTermination) {\n                unsupported.push(\"predictableTermination\");\n              }\n              if (unsupported.length > 0) {\n                doNotRecover = true;\n                throw new Error(\n                  \"Unsupported COD options (\" + unsupported.join(\", \") + \")\"\n                );\n              }\n              if (context.mainHeader) {\n                context.COD = cod;\n              } else {\n                context.currentTile.COD = cod;\n                context.currentTile.COC = [];\n              }\n              break;\n            case 0xff90: // Start of tile-part (SOT)\n              length = readUint16(data, position);\n              tile = {};\n              tile.index = readUint16(data, position + 2);\n              tile.length = readUint32(data, position + 4);\n              tile.dataEnd = tile.length + position - 2;\n              tile.partIndex = data[position + 8];\n              tile.partsCount = data[position + 9];\n\n              context.mainHeader = false;\n              if (tile.partIndex === 0) {\n                // reset component specific settings\n                tile.COD = context.COD;\n                tile.COC = context.COC.slice(0); // clone of the global COC\n                tile.QCD = context.QCD;\n                tile.QCC = context.QCC.slice(0); // clone of the global COC\n              }\n              context.currentTile = tile;\n              break;\n            case 0xff93: // Start of data (SOD)\n              tile = context.currentTile;\n              if (tile.partIndex === 0) {\n                initializeTile(context, tile.index);\n                buildPackets(context);\n              }\n\n              // moving to the end of the data\n              length = tile.dataEnd - position;\n              parseTilePackets(context, data, position, length);\n              break;\n            case 0xff55: // Tile-part lengths, main header (TLM)\n            case 0xff57: // Packet length, main header (PLM)\n            case 0xff58: // Packet length, tile-part header (PLT)\n            case 0xff64: // Comment (COM)\n              length = readUint16(data, position);\n              // skipping content\n              break;\n            case 0xff53: // Coding style component (COC)\n              throw new Error(\n                \"Codestream code 0xFF53 (COC) is not implemented\"\n              );\n            default:\n              throw new Error(\"Unknown codestream code: \" + code.toString(16));\n          }\n          position += length;\n        }\n      } catch (e) {\n        if (doNotRecover || this.failOnCorruptedImage) {\n          throw new JpxError(e.message);\n        } else {\n          warn(\"JPX: Trying to recover from: \" + e.message);\n        }\n      }\n      this.tiles = transformComponents(context);\n      this.width = context.SIZ.Xsiz - context.SIZ.XOsiz;\n      this.height = context.SIZ.Ysiz - context.SIZ.YOsiz;\n      this.componentsCount = context.SIZ.Csiz;\n    },\n  };\n  function calculateComponentDimensions(component, siz) {\n    // Section B.2 Component mapping\n    component.x0 = Math.ceil(siz.XOsiz / component.XRsiz);\n    component.x1 = Math.ceil(siz.Xsiz / component.XRsiz);\n    component.y0 = Math.ceil(siz.YOsiz / component.YRsiz);\n    component.y1 = Math.ceil(siz.Ysiz / component.YRsiz);\n    component.width = component.x1 - component.x0;\n    component.height = component.y1 - component.y0;\n  }\n  function calculateTileGrids(context, components) {\n    var siz = context.SIZ;\n    // Section B.3 Division into tile and tile-components\n    var tile,\n      tiles = [];\n    var numXtiles = Math.ceil((siz.Xsiz - siz.XTOsiz) / siz.XTsiz);\n    var numYtiles = Math.ceil((siz.Ysiz - siz.YTOsiz) / siz.YTsiz);\n    for (var q = 0; q < numYtiles; q++) {\n      for (var p = 0; p < numXtiles; p++) {\n        tile = {};\n        tile.tx0 = Math.max(siz.XTOsiz + p * siz.XTsiz, siz.XOsiz);\n        tile.ty0 = Math.max(siz.YTOsiz + q * siz.YTsiz, siz.YOsiz);\n        tile.tx1 = Math.min(siz.XTOsiz + (p + 1) * siz.XTsiz, siz.Xsiz);\n        tile.ty1 = Math.min(siz.YTOsiz + (q + 1) * siz.YTsiz, siz.Ysiz);\n        tile.width = tile.tx1 - tile.tx0;\n        tile.height = tile.ty1 - tile.ty0;\n        tile.components = [];\n        tiles.push(tile);\n      }\n    }\n    context.tiles = tiles;\n\n    var componentsCount = siz.Csiz;\n    for (var i = 0, ii = componentsCount; i < ii; i++) {\n      var component = components[i];\n      for (var j = 0, jj = tiles.length; j < jj; j++) {\n        var tileComponent = {};\n        tile = tiles[j];\n        tileComponent.tcx0 = Math.ceil(tile.tx0 / component.XRsiz);\n        tileComponent.tcy0 = Math.ceil(tile.ty0 / component.YRsiz);\n        tileComponent.tcx1 = Math.ceil(tile.tx1 / component.XRsiz);\n        tileComponent.tcy1 = Math.ceil(tile.ty1 / component.YRsiz);\n        tileComponent.width = tileComponent.tcx1 - tileComponent.tcx0;\n        tileComponent.height = tileComponent.tcy1 - tileComponent.tcy0;\n        tile.components[i] = tileComponent;\n      }\n    }\n  }\n  function getBlocksDimensions(context, component, r) {\n    var codOrCoc = component.codingStyleParameters;\n    var result = {};\n    if (!codOrCoc.entropyCoderWithCustomPrecincts) {\n      result.PPx = 15;\n      result.PPy = 15;\n    } else {\n      result.PPx = codOrCoc.precinctsSizes[r].PPx;\n      result.PPy = codOrCoc.precinctsSizes[r].PPy;\n    }\n    // calculate codeblock size as described in section B.7\n    result.xcb_ =\n      r > 0\n        ? Math.min(codOrCoc.xcb, result.PPx - 1)\n        : Math.min(codOrCoc.xcb, result.PPx);\n    result.ycb_ =\n      r > 0\n        ? Math.min(codOrCoc.ycb, result.PPy - 1)\n        : Math.min(codOrCoc.ycb, result.PPy);\n    return result;\n  }\n  function buildPrecincts(context, resolution, dimensions) {\n    // Section B.6 Division resolution to precincts\n    var precinctWidth = 1 << dimensions.PPx;\n    var precinctHeight = 1 << dimensions.PPy;\n    // Jasper introduces codeblock groups for mapping each subband codeblocks\n    // to precincts. Precinct partition divides a resolution according to width\n    // and height parameters. The subband that belongs to the resolution level\n    // has a different size than the level, unless it is the zero resolution.\n\n    // From Jasper documentation: jpeg2000.pdf, section K: Tier-2 coding:\n    // The precinct partitioning for a particular subband is derived from a\n    // partitioning of its parent LL band (i.e., the LL band at the next higher\n    // resolution level)... The LL band associated with each resolution level is\n    // divided into precincts... Each of the resulting precinct regions is then\n    // mapped into its child subbands (if any) at the next lower resolution\n    // level. This is accomplished by using the coordinate transformation\n    // (u, v) = (ceil(x/2), ceil(y/2)) where (x, y) and (u, v) are the\n    // coordinates of a point in the LL band and child subband, respectively.\n    var isZeroRes = resolution.resLevel === 0;\n    var precinctWidthInSubband = 1 << (dimensions.PPx + (isZeroRes ? 0 : -1));\n    var precinctHeightInSubband = 1 << (dimensions.PPy + (isZeroRes ? 0 : -1));\n    var numprecinctswide =\n      resolution.trx1 > resolution.trx0\n        ? Math.ceil(resolution.trx1 / precinctWidth) -\n          Math.floor(resolution.trx0 / precinctWidth)\n        : 0;\n    var numprecinctshigh =\n      resolution.try1 > resolution.try0\n        ? Math.ceil(resolution.try1 / precinctHeight) -\n          Math.floor(resolution.try0 / precinctHeight)\n        : 0;\n    var numprecincts = numprecinctswide * numprecinctshigh;\n\n    resolution.precinctParameters = {\n      precinctWidth,\n      precinctHeight,\n      numprecinctswide,\n      numprecinctshigh,\n      numprecincts,\n      precinctWidthInSubband,\n      precinctHeightInSubband,\n    };\n  }\n  function buildCodeblocks(context, subband, dimensions) {\n    // Section B.7 Division sub-band into code-blocks\n    var xcb_ = dimensions.xcb_;\n    var ycb_ = dimensions.ycb_;\n    var codeblockWidth = 1 << xcb_;\n    var codeblockHeight = 1 << ycb_;\n    var cbx0 = subband.tbx0 >> xcb_;\n    var cby0 = subband.tby0 >> ycb_;\n    var cbx1 = (subband.tbx1 + codeblockWidth - 1) >> xcb_;\n    var cby1 = (subband.tby1 + codeblockHeight - 1) >> ycb_;\n    var precinctParameters = subband.resolution.precinctParameters;\n    var codeblocks = [];\n    var precincts = [];\n    var i, j, codeblock, precinctNumber;\n    for (j = cby0; j < cby1; j++) {\n      for (i = cbx0; i < cbx1; i++) {\n        codeblock = {\n          cbx: i,\n          cby: j,\n          tbx0: codeblockWidth * i,\n          tby0: codeblockHeight * j,\n          tbx1: codeblockWidth * (i + 1),\n          tby1: codeblockHeight * (j + 1),\n        };\n\n        codeblock.tbx0_ = Math.max(subband.tbx0, codeblock.tbx0);\n        codeblock.tby0_ = Math.max(subband.tby0, codeblock.tby0);\n        codeblock.tbx1_ = Math.min(subband.tbx1, codeblock.tbx1);\n        codeblock.tby1_ = Math.min(subband.tby1, codeblock.tby1);\n\n        // Calculate precinct number for this codeblock, codeblock position\n        // should be relative to its subband, use actual dimension and position\n        // See comment about codeblock group width and height\n        var pi = Math.floor(\n          (codeblock.tbx0_ - subband.tbx0) /\n            precinctParameters.precinctWidthInSubband\n        );\n        var pj = Math.floor(\n          (codeblock.tby0_ - subband.tby0) /\n            precinctParameters.precinctHeightInSubband\n        );\n        precinctNumber = pi + pj * precinctParameters.numprecinctswide;\n\n        codeblock.precinctNumber = precinctNumber;\n        codeblock.subbandType = subband.type;\n        codeblock.Lblock = 3;\n\n        if (\n          codeblock.tbx1_ <= codeblock.tbx0_ ||\n          codeblock.tby1_ <= codeblock.tby0_\n        ) {\n          continue;\n        }\n        codeblocks.push(codeblock);\n        // building precinct for the sub-band\n        var precinct = precincts[precinctNumber];\n        if (precinct !== undefined) {\n          if (i < precinct.cbxMin) {\n            precinct.cbxMin = i;\n          } else if (i > precinct.cbxMax) {\n            precinct.cbxMax = i;\n          }\n          if (j < precinct.cbyMin) {\n            precinct.cbxMin = j;\n          } else if (j > precinct.cbyMax) {\n            precinct.cbyMax = j;\n          }\n        } else {\n          precincts[precinctNumber] = precinct = {\n            cbxMin: i,\n            cbyMin: j,\n            cbxMax: i,\n            cbyMax: j,\n          };\n        }\n        codeblock.precinct = precinct;\n      }\n    }\n    subband.codeblockParameters = {\n      codeblockWidth: xcb_,\n      codeblockHeight: ycb_,\n      numcodeblockwide: cbx1 - cbx0 + 1,\n      numcodeblockhigh: cby1 - cby0 + 1,\n    };\n    subband.codeblocks = codeblocks;\n    subband.precincts = precincts;\n  }\n  function createPacket(resolution, precinctNumber, layerNumber) {\n    var precinctCodeblocks = [];\n    // Section B.10.8 Order of info in packet\n    var subbands = resolution.subbands;\n    // sub-bands already ordered in 'LL', 'HL', 'LH', and 'HH' sequence\n    for (var i = 0, ii = subbands.length; i < ii; i++) {\n      var subband = subbands[i];\n      var codeblocks = subband.codeblocks;\n      for (var j = 0, jj = codeblocks.length; j < jj; j++) {\n        var codeblock = codeblocks[j];\n        if (codeblock.precinctNumber !== precinctNumber) {\n          continue;\n        }\n        precinctCodeblocks.push(codeblock);\n      }\n    }\n    return {\n      layerNumber,\n      codeblocks: precinctCodeblocks,\n    };\n  }\n  function LayerResolutionComponentPositionIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var maxDecompositionLevelsCount = 0;\n    for (var q = 0; q < componentsCount; q++) {\n      maxDecompositionLevelsCount = Math.max(\n        maxDecompositionLevelsCount,\n        tile.components[q].codingStyleParameters.decompositionLevelsCount\n      );\n    }\n\n    var l = 0,\n      r = 0,\n      i = 0,\n      k = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      // Section B.12.1.1 Layer-resolution-component-position\n      for (; l < layersCount; l++) {\n        for (; r <= maxDecompositionLevelsCount; r++) {\n          for (; i < componentsCount; i++) {\n            var component = tile.components[i];\n            if (r > component.codingStyleParameters.decompositionLevelsCount) {\n              continue;\n            }\n\n            var resolution = component.resolutions[r];\n            var numprecincts = resolution.precinctParameters.numprecincts;\n            for (; k < numprecincts; ) {\n              var packet = createPacket(resolution, k, l);\n              k++;\n              return packet;\n            }\n            k = 0;\n          }\n          i = 0;\n        }\n        r = 0;\n      }\n      throw new JpxError(\"Out of packets\");\n    };\n  }\n  function ResolutionLayerComponentPositionIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var maxDecompositionLevelsCount = 0;\n    for (var q = 0; q < componentsCount; q++) {\n      maxDecompositionLevelsCount = Math.max(\n        maxDecompositionLevelsCount,\n        tile.components[q].codingStyleParameters.decompositionLevelsCount\n      );\n    }\n\n    var r = 0,\n      l = 0,\n      i = 0,\n      k = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      // Section B.12.1.2 Resolution-layer-component-position\n      for (; r <= maxDecompositionLevelsCount; r++) {\n        for (; l < layersCount; l++) {\n          for (; i < componentsCount; i++) {\n            var component = tile.components[i];\n            if (r > component.codingStyleParameters.decompositionLevelsCount) {\n              continue;\n            }\n\n            var resolution = component.resolutions[r];\n            var numprecincts = resolution.precinctParameters.numprecincts;\n            for (; k < numprecincts; ) {\n              var packet = createPacket(resolution, k, l);\n              k++;\n              return packet;\n            }\n            k = 0;\n          }\n          i = 0;\n        }\n        l = 0;\n      }\n      throw new JpxError(\"Out of packets\");\n    };\n  }\n  function ResolutionPositionComponentLayerIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var l, r, c, p;\n    var maxDecompositionLevelsCount = 0;\n    for (c = 0; c < componentsCount; c++) {\n      const component = tile.components[c];\n      maxDecompositionLevelsCount = Math.max(\n        maxDecompositionLevelsCount,\n        component.codingStyleParameters.decompositionLevelsCount\n      );\n    }\n    var maxNumPrecinctsInLevel = new Int32Array(\n      maxDecompositionLevelsCount + 1\n    );\n    for (r = 0; r <= maxDecompositionLevelsCount; ++r) {\n      var maxNumPrecincts = 0;\n      for (c = 0; c < componentsCount; ++c) {\n        var resolutions = tile.components[c].resolutions;\n        if (r < resolutions.length) {\n          maxNumPrecincts = Math.max(\n            maxNumPrecincts,\n            resolutions[r].precinctParameters.numprecincts\n          );\n        }\n      }\n      maxNumPrecinctsInLevel[r] = maxNumPrecincts;\n    }\n    l = 0;\n    r = 0;\n    c = 0;\n    p = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      // Section B.12.1.3 Resolution-position-component-layer\n      for (; r <= maxDecompositionLevelsCount; r++) {\n        for (; p < maxNumPrecinctsInLevel[r]; p++) {\n          for (; c < componentsCount; c++) {\n            const component = tile.components[c];\n            if (r > component.codingStyleParameters.decompositionLevelsCount) {\n              continue;\n            }\n            var resolution = component.resolutions[r];\n            var numprecincts = resolution.precinctParameters.numprecincts;\n            if (p >= numprecincts) {\n              continue;\n            }\n            for (; l < layersCount; ) {\n              var packet = createPacket(resolution, p, l);\n              l++;\n              return packet;\n            }\n            l = 0;\n          }\n          c = 0;\n        }\n        p = 0;\n      }\n      throw new JpxError(\"Out of packets\");\n    };\n  }\n  function PositionComponentResolutionLayerIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var precinctsSizes = getPrecinctSizesInImageScale(tile);\n    var precinctsIterationSizes = precinctsSizes;\n    var l = 0,\n      r = 0,\n      c = 0,\n      px = 0,\n      py = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      // Section B.12.1.4 Position-component-resolution-layer\n      for (; py < precinctsIterationSizes.maxNumHigh; py++) {\n        for (; px < precinctsIterationSizes.maxNumWide; px++) {\n          for (; c < componentsCount; c++) {\n            var component = tile.components[c];\n            var decompositionLevelsCount =\n              component.codingStyleParameters.decompositionLevelsCount;\n            for (; r <= decompositionLevelsCount; r++) {\n              var resolution = component.resolutions[r];\n              var sizeInImageScale =\n                precinctsSizes.components[c].resolutions[r];\n              var k = getPrecinctIndexIfExist(\n                px,\n                py,\n                sizeInImageScale,\n                precinctsIterationSizes,\n                resolution\n              );\n              if (k === null) {\n                continue;\n              }\n              for (; l < layersCount; ) {\n                var packet = createPacket(resolution, k, l);\n                l++;\n                return packet;\n              }\n              l = 0;\n            }\n            r = 0;\n          }\n          c = 0;\n        }\n        px = 0;\n      }\n      throw new JpxError(\"Out of packets\");\n    };\n  }\n  function ComponentPositionResolutionLayerIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var precinctsSizes = getPrecinctSizesInImageScale(tile);\n    var l = 0,\n      r = 0,\n      c = 0,\n      px = 0,\n      py = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      // Section B.12.1.5 Component-position-resolution-layer\n      for (; c < componentsCount; ++c) {\n        var component = tile.components[c];\n        var precinctsIterationSizes = precinctsSizes.components[c];\n        var decompositionLevelsCount =\n          component.codingStyleParameters.decompositionLevelsCount;\n        for (; py < precinctsIterationSizes.maxNumHigh; py++) {\n          for (; px < precinctsIterationSizes.maxNumWide; px++) {\n            for (; r <= decompositionLevelsCount; r++) {\n              var resolution = component.resolutions[r];\n              var sizeInImageScale = precinctsIterationSizes.resolutions[r];\n              var k = getPrecinctIndexIfExist(\n                px,\n                py,\n                sizeInImageScale,\n                precinctsIterationSizes,\n                resolution\n              );\n              if (k === null) {\n                continue;\n              }\n              for (; l < layersCount; ) {\n                var packet = createPacket(resolution, k, l);\n                l++;\n                return packet;\n              }\n              l = 0;\n            }\n            r = 0;\n          }\n          px = 0;\n        }\n        py = 0;\n      }\n      throw new JpxError(\"Out of packets\");\n    };\n  }\n  function getPrecinctIndexIfExist(\n    pxIndex,\n    pyIndex,\n    sizeInImageScale,\n    precinctIterationSizes,\n    resolution\n  ) {\n    var posX = pxIndex * precinctIterationSizes.minWidth;\n    var posY = pyIndex * precinctIterationSizes.minHeight;\n    if (\n      posX % sizeInImageScale.width !== 0 ||\n      posY % sizeInImageScale.height !== 0\n    ) {\n      return null;\n    }\n    var startPrecinctRowIndex =\n      (posY / sizeInImageScale.width) *\n      resolution.precinctParameters.numprecinctswide;\n    return posX / sizeInImageScale.height + startPrecinctRowIndex;\n  }\n  function getPrecinctSizesInImageScale(tile) {\n    var componentsCount = tile.components.length;\n    var minWidth = Number.MAX_VALUE;\n    var minHeight = Number.MAX_VALUE;\n    var maxNumWide = 0;\n    var maxNumHigh = 0;\n    var sizePerComponent = new Array(componentsCount);\n    for (var c = 0; c < componentsCount; c++) {\n      var component = tile.components[c];\n      var decompositionLevelsCount =\n        component.codingStyleParameters.decompositionLevelsCount;\n      var sizePerResolution = new Array(decompositionLevelsCount + 1);\n      var minWidthCurrentComponent = Number.MAX_VALUE;\n      var minHeightCurrentComponent = Number.MAX_VALUE;\n      var maxNumWideCurrentComponent = 0;\n      var maxNumHighCurrentComponent = 0;\n      var scale = 1;\n      for (var r = decompositionLevelsCount; r >= 0; --r) {\n        var resolution = component.resolutions[r];\n        var widthCurrentResolution =\n          scale * resolution.precinctParameters.precinctWidth;\n        var heightCurrentResolution =\n          scale * resolution.precinctParameters.precinctHeight;\n        minWidthCurrentComponent = Math.min(\n          minWidthCurrentComponent,\n          widthCurrentResolution\n        );\n        minHeightCurrentComponent = Math.min(\n          minHeightCurrentComponent,\n          heightCurrentResolution\n        );\n        maxNumWideCurrentComponent = Math.max(\n          maxNumWideCurrentComponent,\n          resolution.precinctParameters.numprecinctswide\n        );\n        maxNumHighCurrentComponent = Math.max(\n          maxNumHighCurrentComponent,\n          resolution.precinctParameters.numprecinctshigh\n        );\n        sizePerResolution[r] = {\n          width: widthCurrentResolution,\n          height: heightCurrentResolution,\n        };\n        scale <<= 1;\n      }\n      minWidth = Math.min(minWidth, minWidthCurrentComponent);\n      minHeight = Math.min(minHeight, minHeightCurrentComponent);\n      maxNumWide = Math.max(maxNumWide, maxNumWideCurrentComponent);\n      maxNumHigh = Math.max(maxNumHigh, maxNumHighCurrentComponent);\n      sizePerComponent[c] = {\n        resolutions: sizePerResolution,\n        minWidth: minWidthCurrentComponent,\n        minHeight: minHeightCurrentComponent,\n        maxNumWide: maxNumWideCurrentComponent,\n        maxNumHigh: maxNumHighCurrentComponent,\n      };\n    }\n    return {\n      components: sizePerComponent,\n      minWidth,\n      minHeight,\n      maxNumWide,\n      maxNumHigh,\n    };\n  }\n  function buildPackets(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var componentsCount = siz.Csiz;\n    // Creating resolutions and sub-bands for each component\n    for (var c = 0; c < componentsCount; c++) {\n      var component = tile.components[c];\n      var decompositionLevelsCount =\n        component.codingStyleParameters.decompositionLevelsCount;\n      // Section B.5 Resolution levels and sub-bands\n      var resolutions = [];\n      var subbands = [];\n      for (var r = 0; r <= decompositionLevelsCount; r++) {\n        var blocksDimensions = getBlocksDimensions(context, component, r);\n        var resolution = {};\n        var scale = 1 << (decompositionLevelsCount - r);\n        resolution.trx0 = Math.ceil(component.tcx0 / scale);\n        resolution.try0 = Math.ceil(component.tcy0 / scale);\n        resolution.trx1 = Math.ceil(component.tcx1 / scale);\n        resolution.try1 = Math.ceil(component.tcy1 / scale);\n        resolution.resLevel = r;\n        buildPrecincts(context, resolution, blocksDimensions);\n        resolutions.push(resolution);\n\n        var subband;\n        if (r === 0) {\n          // one sub-band (LL) with last decomposition\n          subband = {};\n          subband.type = \"LL\";\n          subband.tbx0 = Math.ceil(component.tcx0 / scale);\n          subband.tby0 = Math.ceil(component.tcy0 / scale);\n          subband.tbx1 = Math.ceil(component.tcx1 / scale);\n          subband.tby1 = Math.ceil(component.tcy1 / scale);\n          subband.resolution = resolution;\n          buildCodeblocks(context, subband, blocksDimensions);\n          subbands.push(subband);\n          resolution.subbands = [subband];\n        } else {\n          var bscale = 1 << (decompositionLevelsCount - r + 1);\n          var resolutionSubbands = [];\n          // three sub-bands (HL, LH and HH) with rest of decompositions\n          subband = {};\n          subband.type = \"HL\";\n          subband.tbx0 = Math.ceil(component.tcx0 / bscale - 0.5);\n          subband.tby0 = Math.ceil(component.tcy0 / bscale);\n          subband.tbx1 = Math.ceil(component.tcx1 / bscale - 0.5);\n          subband.tby1 = Math.ceil(component.tcy1 / bscale);\n          subband.resolution = resolution;\n          buildCodeblocks(context, subband, blocksDimensions);\n          subbands.push(subband);\n          resolutionSubbands.push(subband);\n\n          subband = {};\n          subband.type = \"LH\";\n          subband.tbx0 = Math.ceil(component.tcx0 / bscale);\n          subband.tby0 = Math.ceil(component.tcy0 / bscale - 0.5);\n          subband.tbx1 = Math.ceil(component.tcx1 / bscale);\n          subband.tby1 = Math.ceil(component.tcy1 / bscale - 0.5);\n          subband.resolution = resolution;\n          buildCodeblocks(context, subband, blocksDimensions);\n          subbands.push(subband);\n          resolutionSubbands.push(subband);\n\n          subband = {};\n          subband.type = \"HH\";\n          subband.tbx0 = Math.ceil(component.tcx0 / bscale - 0.5);\n          subband.tby0 = Math.ceil(component.tcy0 / bscale - 0.5);\n          subband.tbx1 = Math.ceil(component.tcx1 / bscale - 0.5);\n          subband.tby1 = Math.ceil(component.tcy1 / bscale - 0.5);\n          subband.resolution = resolution;\n          buildCodeblocks(context, subband, blocksDimensions);\n          subbands.push(subband);\n          resolutionSubbands.push(subband);\n\n          resolution.subbands = resolutionSubbands;\n        }\n      }\n      component.resolutions = resolutions;\n      component.subbands = subbands;\n    }\n    // Generate the packets sequence\n    var progressionOrder = tile.codingStyleDefaultParameters.progressionOrder;\n    switch (progressionOrder) {\n      case 0:\n        tile.packetsIterator = new LayerResolutionComponentPositionIterator(\n          context\n        );\n        break;\n      case 1:\n        tile.packetsIterator = new ResolutionLayerComponentPositionIterator(\n          context\n        );\n        break;\n      case 2:\n        tile.packetsIterator = new ResolutionPositionComponentLayerIterator(\n          context\n        );\n        break;\n      case 3:\n        tile.packetsIterator = new PositionComponentResolutionLayerIterator(\n          context\n        );\n        break;\n      case 4:\n        tile.packetsIterator = new ComponentPositionResolutionLayerIterator(\n          context\n        );\n        break;\n      default:\n        throw new JpxError(`Unsupported progression order ${progressionOrder}`);\n    }\n  }\n  function parseTilePackets(context, data, offset, dataLength) {\n    var position = 0;\n    var buffer,\n      bufferSize = 0,\n      skipNextBit = false;\n    function readBits(count) {\n      while (bufferSize < count) {\n        var b = data[offset + position];\n        position++;\n        if (skipNextBit) {\n          buffer = (buffer << 7) | b;\n          bufferSize += 7;\n          skipNextBit = false;\n        } else {\n          buffer = (buffer << 8) | b;\n          bufferSize += 8;\n        }\n        if (b === 0xff) {\n          skipNextBit = true;\n        }\n      }\n      bufferSize -= count;\n      return (buffer >>> bufferSize) & ((1 << count) - 1);\n    }\n    function skipMarkerIfEqual(value) {\n      if (\n        data[offset + position - 1] === 0xff &&\n        data[offset + position] === value\n      ) {\n        skipBytes(1);\n        return true;\n      } else if (\n        data[offset + position] === 0xff &&\n        data[offset + position + 1] === value\n      ) {\n        skipBytes(2);\n        return true;\n      }\n      return false;\n    }\n    function skipBytes(count) {\n      position += count;\n    }\n    function alignToByte() {\n      bufferSize = 0;\n      if (skipNextBit) {\n        position++;\n        skipNextBit = false;\n      }\n    }\n    function readCodingpasses() {\n      if (readBits(1) === 0) {\n        return 1;\n      }\n      if (readBits(1) === 0) {\n        return 2;\n      }\n      var value = readBits(2);\n      if (value < 3) {\n        return value + 3;\n      }\n      value = readBits(5);\n      if (value < 31) {\n        return value + 6;\n      }\n      value = readBits(7);\n      return value + 37;\n    }\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var sopMarkerUsed = context.COD.sopMarkerUsed;\n    var ephMarkerUsed = context.COD.ephMarkerUsed;\n    var packetsIterator = tile.packetsIterator;\n    while (position < dataLength) {\n      alignToByte();\n      if (sopMarkerUsed && skipMarkerIfEqual(0x91)) {\n        // Skip also marker segment length and packet sequence ID\n        skipBytes(4);\n      }\n      var packet = packetsIterator.nextPacket();\n      if (!readBits(1)) {\n        continue;\n      }\n      var layerNumber = packet.layerNumber;\n      var queue = [],\n        codeblock;\n      for (var i = 0, ii = packet.codeblocks.length; i < ii; i++) {\n        codeblock = packet.codeblocks[i];\n        var precinct = codeblock.precinct;\n        var codeblockColumn = codeblock.cbx - precinct.cbxMin;\n        var codeblockRow = codeblock.cby - precinct.cbyMin;\n        var codeblockIncluded = false;\n        var firstTimeInclusion = false;\n        var valueReady;\n        if (codeblock.included !== undefined) {\n          codeblockIncluded = !!readBits(1);\n        } else {\n          // reading inclusion tree\n          precinct = codeblock.precinct;\n          var inclusionTree, zeroBitPlanesTree;\n          if (precinct.inclusionTree !== undefined) {\n            inclusionTree = precinct.inclusionTree;\n          } else {\n            // building inclusion and zero bit-planes trees\n            var width = precinct.cbxMax - precinct.cbxMin + 1;\n            var height = precinct.cbyMax - precinct.cbyMin + 1;\n            inclusionTree = new InclusionTree(width, height, layerNumber);\n            zeroBitPlanesTree = new TagTree(width, height);\n            precinct.inclusionTree = inclusionTree;\n            precinct.zeroBitPlanesTree = zeroBitPlanesTree;\n          }\n\n          if (inclusionTree.reset(codeblockColumn, codeblockRow, layerNumber)) {\n            while (true) {\n              if (readBits(1)) {\n                valueReady = !inclusionTree.nextLevel();\n                if (valueReady) {\n                  codeblock.included = true;\n                  codeblockIncluded = firstTimeInclusion = true;\n                  break;\n                }\n              } else {\n                inclusionTree.incrementValue(layerNumber);\n                break;\n              }\n            }\n          }\n        }\n        if (!codeblockIncluded) {\n          continue;\n        }\n        if (firstTimeInclusion) {\n          zeroBitPlanesTree = precinct.zeroBitPlanesTree;\n          zeroBitPlanesTree.reset(codeblockColumn, codeblockRow);\n          while (true) {\n            if (readBits(1)) {\n              valueReady = !zeroBitPlanesTree.nextLevel();\n              if (valueReady) {\n                break;\n              }\n            } else {\n              zeroBitPlanesTree.incrementValue();\n            }\n          }\n          codeblock.zeroBitPlanes = zeroBitPlanesTree.value;\n        }\n        var codingpasses = readCodingpasses();\n        while (readBits(1)) {\n          codeblock.Lblock++;\n        }\n        var codingpassesLog2 = log2(codingpasses);\n        // rounding down log2\n        var bits =\n          (codingpasses < 1 << codingpassesLog2\n            ? codingpassesLog2 - 1\n            : codingpassesLog2) + codeblock.Lblock;\n        var codedDataLength = readBits(bits);\n        queue.push({\n          codeblock,\n          codingpasses,\n          dataLength: codedDataLength,\n        });\n      }\n      alignToByte();\n      if (ephMarkerUsed) {\n        skipMarkerIfEqual(0x92);\n      }\n      while (queue.length > 0) {\n        var packetItem = queue.shift();\n        codeblock = packetItem.codeblock;\n        if (codeblock.data === undefined) {\n          codeblock.data = [];\n        }\n        codeblock.data.push({\n          data,\n          start: offset + position,\n          end: offset + position + packetItem.dataLength,\n          codingpasses: packetItem.codingpasses,\n        });\n        position += packetItem.dataLength;\n      }\n    }\n    return position;\n  }\n  function copyCoefficients(\n    coefficients,\n    levelWidth,\n    levelHeight,\n    subband,\n    delta,\n    mb,\n    reversible,\n    segmentationSymbolUsed\n  ) {\n    var x0 = subband.tbx0;\n    var y0 = subband.tby0;\n    var width = subband.tbx1 - subband.tbx0;\n    var codeblocks = subband.codeblocks;\n    var right = subband.type.charAt(0) === \"H\" ? 1 : 0;\n    var bottom = subband.type.charAt(1) === \"H\" ? levelWidth : 0;\n\n    for (var i = 0, ii = codeblocks.length; i < ii; ++i) {\n      var codeblock = codeblocks[i];\n      var blockWidth = codeblock.tbx1_ - codeblock.tbx0_;\n      var blockHeight = codeblock.tby1_ - codeblock.tby0_;\n      if (blockWidth === 0 || blockHeight === 0) {\n        continue;\n      }\n      if (codeblock.data === undefined) {\n        continue;\n      }\n\n      var bitModel, currentCodingpassType;\n      bitModel = new BitModel(\n        blockWidth,\n        blockHeight,\n        codeblock.subbandType,\n        codeblock.zeroBitPlanes,\n        mb\n      );\n      currentCodingpassType = 2; // first bit plane starts from cleanup\n\n      // collect data\n      var data = codeblock.data,\n        totalLength = 0,\n        codingpasses = 0;\n      var j, jj, dataItem;\n      for (j = 0, jj = data.length; j < jj; j++) {\n        dataItem = data[j];\n        totalLength += dataItem.end - dataItem.start;\n        codingpasses += dataItem.codingpasses;\n      }\n      var encodedData = new Uint8Array(totalLength);\n      var position = 0;\n      for (j = 0, jj = data.length; j < jj; j++) {\n        dataItem = data[j];\n        var chunk = dataItem.data.subarray(dataItem.start, dataItem.end);\n        encodedData.set(chunk, position);\n        position += chunk.length;\n      }\n      // decoding the item\n      var decoder = new ArithmeticDecoder(encodedData, 0, totalLength);\n      bitModel.setDecoder(decoder);\n\n      for (j = 0; j < codingpasses; j++) {\n        switch (currentCodingpassType) {\n          case 0:\n            bitModel.runSignificancePropagationPass();\n            break;\n          case 1:\n            bitModel.runMagnitudeRefinementPass();\n            break;\n          case 2:\n            bitModel.runCleanupPass();\n            if (segmentationSymbolUsed) {\n              bitModel.checkSegmentationSymbol();\n            }\n            break;\n        }\n        currentCodingpassType = (currentCodingpassType + 1) % 3;\n      }\n\n      var offset = codeblock.tbx0_ - x0 + (codeblock.tby0_ - y0) * width;\n      var sign = bitModel.coefficentsSign;\n      var magnitude = bitModel.coefficentsMagnitude;\n      var bitsDecoded = bitModel.bitsDecoded;\n      var magnitudeCorrection = reversible ? 0 : 0.5;\n      var k, n, nb;\n      position = 0;\n      // Do the interleaving of Section F.3.3 here, so we do not need\n      // to copy later. LL level is not interleaved, just copied.\n      var interleave = subband.type !== \"LL\";\n      for (j = 0; j < blockHeight; j++) {\n        var row = (offset / width) | 0; // row in the non-interleaved subband\n        var levelOffset = 2 * row * (levelWidth - width) + right + bottom;\n        for (k = 0; k < blockWidth; k++) {\n          n = magnitude[position];\n          if (n !== 0) {\n            n = (n + magnitudeCorrection) * delta;\n            if (sign[position] !== 0) {\n              n = -n;\n            }\n            nb = bitsDecoded[position];\n            var pos = interleave ? levelOffset + (offset << 1) : offset;\n            if (reversible && nb >= mb) {\n              coefficients[pos] = n;\n            } else {\n              coefficients[pos] = n * (1 << (mb - nb));\n            }\n          }\n          offset++;\n          position++;\n        }\n        offset += width - blockWidth;\n      }\n    }\n  }\n  function transformTile(context, tile, c) {\n    var component = tile.components[c];\n    var codingStyleParameters = component.codingStyleParameters;\n    var quantizationParameters = component.quantizationParameters;\n    var decompositionLevelsCount =\n      codingStyleParameters.decompositionLevelsCount;\n    var spqcds = quantizationParameters.SPqcds;\n    var scalarExpounded = quantizationParameters.scalarExpounded;\n    var guardBits = quantizationParameters.guardBits;\n    var segmentationSymbolUsed = codingStyleParameters.segmentationSymbolUsed;\n    var precision = context.components[c].precision;\n\n    var reversible = codingStyleParameters.reversibleTransformation;\n    var transform = reversible\n      ? new ReversibleTransform()\n      : new IrreversibleTransform();\n\n    var subbandCoefficients = [];\n    var b = 0;\n    for (var i = 0; i <= decompositionLevelsCount; i++) {\n      var resolution = component.resolutions[i];\n\n      var width = resolution.trx1 - resolution.trx0;\n      var height = resolution.try1 - resolution.try0;\n      // Allocate space for the whole sublevel.\n      var coefficients = new Float32Array(width * height);\n\n      for (var j = 0, jj = resolution.subbands.length; j < jj; j++) {\n        var mu, epsilon;\n        if (!scalarExpounded) {\n          // formula E-5\n          mu = spqcds[0].mu;\n          epsilon = spqcds[0].epsilon + (i > 0 ? 1 - i : 0);\n        } else {\n          mu = spqcds[b].mu;\n          epsilon = spqcds[b].epsilon;\n          b++;\n        }\n\n        var subband = resolution.subbands[j];\n        var gainLog2 = SubbandsGainLog2[subband.type];\n\n        // calculate quantization coefficient (Section E.1.1.1)\n        var delta = reversible\n          ? 1\n          : 2 ** (precision + gainLog2 - epsilon) * (1 + mu / 2048);\n        var mb = guardBits + epsilon - 1;\n\n        // In the first resolution level, copyCoefficients will fill the\n        // whole array with coefficients. In the succeeding passes,\n        // copyCoefficients will consecutively fill in the values that belong\n        // to the interleaved positions of the HL, LH, and HH coefficients.\n        // The LL coefficients will then be interleaved in Transform.iterate().\n        copyCoefficients(\n          coefficients,\n          width,\n          height,\n          subband,\n          delta,\n          mb,\n          reversible,\n          segmentationSymbolUsed\n        );\n      }\n      subbandCoefficients.push({\n        width,\n        height,\n        items: coefficients,\n      });\n    }\n\n    var result = transform.calculate(\n      subbandCoefficients,\n      component.tcx0,\n      component.tcy0\n    );\n    return {\n      left: component.tcx0,\n      top: component.tcy0,\n      width: result.width,\n      height: result.height,\n      items: result.items,\n    };\n  }\n  function transformComponents(context) {\n    var siz = context.SIZ;\n    var components = context.components;\n    var componentsCount = siz.Csiz;\n    var resultImages = [];\n    for (var i = 0, ii = context.tiles.length; i < ii; i++) {\n      var tile = context.tiles[i];\n      var transformedTiles = [];\n      var c;\n      for (c = 0; c < componentsCount; c++) {\n        transformedTiles[c] = transformTile(context, tile, c);\n      }\n      var tile0 = transformedTiles[0];\n      var out = new Uint8ClampedArray(tile0.items.length * componentsCount);\n      var result = {\n        left: tile0.left,\n        top: tile0.top,\n        width: tile0.width,\n        height: tile0.height,\n        items: out,\n      };\n\n      // Section G.2.2 Inverse multi component transform\n      var shift, offset;\n      var pos = 0,\n        j,\n        jj,\n        y0,\n        y1,\n        y2;\n      if (tile.codingStyleDefaultParameters.multipleComponentTransform) {\n        var fourComponents = componentsCount === 4;\n        var y0items = transformedTiles[0].items;\n        var y1items = transformedTiles[1].items;\n        var y2items = transformedTiles[2].items;\n        var y3items = fourComponents ? transformedTiles[3].items : null;\n\n        // HACK: The multiple component transform formulas below assume that\n        // all components have the same precision. With this in mind, we\n        // compute shift and offset only once.\n        shift = components[0].precision - 8;\n        offset = (128 << shift) + 0.5;\n\n        var component0 = tile.components[0];\n        var alpha01 = componentsCount - 3;\n        jj = y0items.length;\n        if (!component0.codingStyleParameters.reversibleTransformation) {\n          // inverse irreversible multiple component transform\n          for (j = 0; j < jj; j++, pos += alpha01) {\n            y0 = y0items[j] + offset;\n            y1 = y1items[j];\n            y2 = y2items[j];\n            out[pos++] = (y0 + 1.402 * y2) >> shift;\n            out[pos++] = (y0 - 0.34413 * y1 - 0.71414 * y2) >> shift;\n            out[pos++] = (y0 + 1.772 * y1) >> shift;\n          }\n        } else {\n          // inverse reversible multiple component transform\n          for (j = 0; j < jj; j++, pos += alpha01) {\n            y0 = y0items[j] + offset;\n            y1 = y1items[j];\n            y2 = y2items[j];\n            const g = y0 - ((y2 + y1) >> 2);\n\n            out[pos++] = (g + y2) >> shift;\n            out[pos++] = g >> shift;\n            out[pos++] = (g + y1) >> shift;\n          }\n        }\n        if (fourComponents) {\n          for (j = 0, pos = 3; j < jj; j++, pos += 4) {\n            out[pos] = (y3items[j] + offset) >> shift;\n          }\n        }\n      } else {\n        // no multi-component transform\n        for (c = 0; c < componentsCount; c++) {\n          var items = transformedTiles[c].items;\n          shift = components[c].precision - 8;\n          offset = (128 << shift) + 0.5;\n          for (pos = c, j = 0, jj = items.length; j < jj; j++) {\n            out[pos] = (items[j] + offset) >> shift;\n            pos += componentsCount;\n          }\n        }\n      }\n      resultImages.push(result);\n    }\n    return resultImages;\n  }\n  function initializeTile(context, tileIndex) {\n    var siz = context.SIZ;\n    var componentsCount = siz.Csiz;\n    var tile = context.tiles[tileIndex];\n    for (var c = 0; c < componentsCount; c++) {\n      var component = tile.components[c];\n      var qcdOrQcc =\n        context.currentTile.QCC[c] !== undefined\n          ? context.currentTile.QCC[c]\n          : context.currentTile.QCD;\n      component.quantizationParameters = qcdOrQcc;\n      var codOrCoc =\n        context.currentTile.COC[c] !== undefined\n          ? context.currentTile.COC[c]\n          : context.currentTile.COD;\n      component.codingStyleParameters = codOrCoc;\n    }\n    tile.codingStyleDefaultParameters = context.currentTile.COD;\n  }\n\n  // Section B.10.2 Tag trees\n  var TagTree = (function TagTreeClosure() {\n    // eslint-disable-next-line no-shadow\n    function TagTree(width, height) {\n      var levelsLength = log2(Math.max(width, height)) + 1;\n      this.levels = [];\n      for (var i = 0; i < levelsLength; i++) {\n        var level = {\n          width,\n          height,\n          items: [],\n        };\n        this.levels.push(level);\n        width = Math.ceil(width / 2);\n        height = Math.ceil(height / 2);\n      }\n    }\n    TagTree.prototype = {\n      reset: function TagTree_reset(i, j) {\n        var currentLevel = 0,\n          value = 0,\n          level;\n        while (currentLevel < this.levels.length) {\n          level = this.levels[currentLevel];\n          var index = i + j * level.width;\n          if (level.items[index] !== undefined) {\n            value = level.items[index];\n            break;\n          }\n          level.index = index;\n          i >>= 1;\n          j >>= 1;\n          currentLevel++;\n        }\n        currentLevel--;\n        level = this.levels[currentLevel];\n        level.items[level.index] = value;\n        this.currentLevel = currentLevel;\n        delete this.value;\n      },\n      incrementValue: function TagTree_incrementValue() {\n        var level = this.levels[this.currentLevel];\n        level.items[level.index]++;\n      },\n      nextLevel: function TagTree_nextLevel() {\n        var currentLevel = this.currentLevel;\n        var level = this.levels[currentLevel];\n        var value = level.items[level.index];\n        currentLevel--;\n        if (currentLevel < 0) {\n          this.value = value;\n          return false;\n        }\n\n        this.currentLevel = currentLevel;\n        level = this.levels[currentLevel];\n        level.items[level.index] = value;\n        return true;\n      },\n    };\n    return TagTree;\n  })();\n\n  var InclusionTree = (function InclusionTreeClosure() {\n    // eslint-disable-next-line no-shadow\n    function InclusionTree(width, height, defaultValue) {\n      var levelsLength = log2(Math.max(width, height)) + 1;\n      this.levels = [];\n      for (var i = 0; i < levelsLength; i++) {\n        var items = new Uint8Array(width * height);\n        for (var j = 0, jj = items.length; j < jj; j++) {\n          items[j] = defaultValue;\n        }\n\n        var level = {\n          width,\n          height,\n          items,\n        };\n        this.levels.push(level);\n\n        width = Math.ceil(width / 2);\n        height = Math.ceil(height / 2);\n      }\n    }\n    InclusionTree.prototype = {\n      reset: function InclusionTree_reset(i, j, stopValue) {\n        var currentLevel = 0;\n        while (currentLevel < this.levels.length) {\n          var level = this.levels[currentLevel];\n          var index = i + j * level.width;\n          level.index = index;\n          var value = level.items[index];\n\n          if (value === 0xff) {\n            break;\n          }\n\n          if (value > stopValue) {\n            this.currentLevel = currentLevel;\n            // already know about this one, propagating the value to top levels\n            this.propagateValues();\n            return false;\n          }\n\n          i >>= 1;\n          j >>= 1;\n          currentLevel++;\n        }\n        this.currentLevel = currentLevel - 1;\n        return true;\n      },\n      incrementValue: function InclusionTree_incrementValue(stopValue) {\n        var level = this.levels[this.currentLevel];\n        level.items[level.index] = stopValue + 1;\n        this.propagateValues();\n      },\n      propagateValues: function InclusionTree_propagateValues() {\n        var levelIndex = this.currentLevel;\n        var level = this.levels[levelIndex];\n        var currentValue = level.items[level.index];\n        while (--levelIndex >= 0) {\n          level = this.levels[levelIndex];\n          level.items[level.index] = currentValue;\n        }\n      },\n      nextLevel: function InclusionTree_nextLevel() {\n        var currentLevel = this.currentLevel;\n        var level = this.levels[currentLevel];\n        var value = level.items[level.index];\n        level.items[level.index] = 0xff;\n        currentLevel--;\n        if (currentLevel < 0) {\n          return false;\n        }\n\n        this.currentLevel = currentLevel;\n        level = this.levels[currentLevel];\n        level.items[level.index] = value;\n        return true;\n      },\n    };\n    return InclusionTree;\n  })();\n\n  // Section D. Coefficient bit modeling\n  var BitModel = (function BitModelClosure() {\n    var UNIFORM_CONTEXT = 17;\n    var RUNLENGTH_CONTEXT = 18;\n    // Table D-1\n    // The index is binary presentation: 0dddvvhh, ddd - sum of Di (0..4),\n    // vv - sum of Vi (0..2), and hh - sum of Hi (0..2)\n    // prettier-ignore\n    var LLAndLHContextsLabel = new Uint8Array([\n      0, 5, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 1, 6, 8, 0, 3, 7, 8, 0, 4,\n      7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6,\n      8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8\n    ]);\n    // prettier-ignore\n    var HLContextLabel = new Uint8Array([\n      0, 3, 4, 0, 5, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 1, 3, 4, 0, 6, 7, 7, 0, 8,\n      8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3,\n      4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8\n    ]);\n    // prettier-ignore\n    var HHContextLabel = new Uint8Array([\n      0, 1, 2, 0, 1, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 3, 4, 5, 0, 4, 5, 5, 0, 5,\n      5, 5, 0, 0, 0, 0, 0, 6, 7, 7, 0, 7, 7, 7, 0, 7, 7, 7, 0, 0, 0, 0, 0, 8, 8,\n      8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8\n    ]);\n\n    // eslint-disable-next-line no-shadow\n    function BitModel(width, height, subband, zeroBitPlanes, mb) {\n      this.width = width;\n      this.height = height;\n\n      let contextLabelTable;\n      if (subband === \"HH\") {\n        contextLabelTable = HHContextLabel;\n      } else if (subband === \"HL\") {\n        contextLabelTable = HLContextLabel;\n      } else {\n        contextLabelTable = LLAndLHContextsLabel;\n      }\n      this.contextLabelTable = contextLabelTable;\n\n      var coefficientCount = width * height;\n\n      // coefficients outside the encoding region treated as insignificant\n      // add border state cells for significanceState\n      this.neighborsSignificance = new Uint8Array(coefficientCount);\n      this.coefficentsSign = new Uint8Array(coefficientCount);\n      let coefficentsMagnitude;\n      if (mb > 14) {\n        coefficentsMagnitude = new Uint32Array(coefficientCount);\n      } else if (mb > 6) {\n        coefficentsMagnitude = new Uint16Array(coefficientCount);\n      } else {\n        coefficentsMagnitude = new Uint8Array(coefficientCount);\n      }\n      this.coefficentsMagnitude = coefficentsMagnitude;\n      this.processingFlags = new Uint8Array(coefficientCount);\n\n      var bitsDecoded = new Uint8Array(coefficientCount);\n      if (zeroBitPlanes !== 0) {\n        for (var i = 0; i < coefficientCount; i++) {\n          bitsDecoded[i] = zeroBitPlanes;\n        }\n      }\n      this.bitsDecoded = bitsDecoded;\n\n      this.reset();\n    }\n\n    BitModel.prototype = {\n      setDecoder: function BitModel_setDecoder(decoder) {\n        this.decoder = decoder;\n      },\n      reset: function BitModel_reset() {\n        // We have 17 contexts that are accessed via context labels,\n        // plus the uniform and runlength context.\n        this.contexts = new Int8Array(19);\n\n        // Contexts are packed into 1 byte:\n        // highest 7 bits carry the index, lowest bit carries mps\n        this.contexts[0] = (4 << 1) | 0;\n        this.contexts[UNIFORM_CONTEXT] = (46 << 1) | 0;\n        this.contexts[RUNLENGTH_CONTEXT] = (3 << 1) | 0;\n      },\n      setNeighborsSignificance: function BitModel_setNeighborsSignificance(\n        row,\n        column,\n        index\n      ) {\n        var neighborsSignificance = this.neighborsSignificance;\n        var width = this.width,\n          height = this.height;\n        var left = column > 0;\n        var right = column + 1 < width;\n        var i;\n\n        if (row > 0) {\n          i = index - width;\n          if (left) {\n            neighborsSignificance[i - 1] += 0x10;\n          }\n          if (right) {\n            neighborsSignificance[i + 1] += 0x10;\n          }\n          neighborsSignificance[i] += 0x04;\n        }\n\n        if (row + 1 < height) {\n          i = index + width;\n          if (left) {\n            neighborsSignificance[i - 1] += 0x10;\n          }\n          if (right) {\n            neighborsSignificance[i + 1] += 0x10;\n          }\n          neighborsSignificance[i] += 0x04;\n        }\n\n        if (left) {\n          neighborsSignificance[index - 1] += 0x01;\n        }\n        if (right) {\n          neighborsSignificance[index + 1] += 0x01;\n        }\n        neighborsSignificance[index] |= 0x80;\n      },\n      runSignificancePropagationPass: function BitModel_runSignificancePropagationPass() {\n        var decoder = this.decoder;\n        var width = this.width,\n          height = this.height;\n        var coefficentsMagnitude = this.coefficentsMagnitude;\n        var coefficentsSign = this.coefficentsSign;\n        var neighborsSignificance = this.neighborsSignificance;\n        var processingFlags = this.processingFlags;\n        var contexts = this.contexts;\n        var labels = this.contextLabelTable;\n        var bitsDecoded = this.bitsDecoded;\n        var processedInverseMask = ~1;\n        var processedMask = 1;\n        var firstMagnitudeBitMask = 2;\n\n        for (var i0 = 0; i0 < height; i0 += 4) {\n          for (var j = 0; j < width; j++) {\n            var index = i0 * width + j;\n            for (var i1 = 0; i1 < 4; i1++, index += width) {\n              var i = i0 + i1;\n              if (i >= height) {\n                break;\n              }\n              // clear processed flag first\n              processingFlags[index] &= processedInverseMask;\n\n              if (\n                coefficentsMagnitude[index] ||\n                !neighborsSignificance[index]\n              ) {\n                continue;\n              }\n\n              var contextLabel = labels[neighborsSignificance[index]];\n              var decision = decoder.readBit(contexts, contextLabel);\n              if (decision) {\n                var sign = this.decodeSignBit(i, j, index);\n                coefficentsSign[index] = sign;\n                coefficentsMagnitude[index] = 1;\n                this.setNeighborsSignificance(i, j, index);\n                processingFlags[index] |= firstMagnitudeBitMask;\n              }\n              bitsDecoded[index]++;\n              processingFlags[index] |= processedMask;\n            }\n          }\n        }\n      },\n      decodeSignBit: function BitModel_decodeSignBit(row, column, index) {\n        var width = this.width,\n          height = this.height;\n        var coefficentsMagnitude = this.coefficentsMagnitude;\n        var coefficentsSign = this.coefficentsSign;\n        var contribution, sign0, sign1, significance1;\n        var contextLabel, decoded;\n\n        // calculate horizontal contribution\n        significance1 = column > 0 && coefficentsMagnitude[index - 1] !== 0;\n        if (column + 1 < width && coefficentsMagnitude[index + 1] !== 0) {\n          sign1 = coefficentsSign[index + 1];\n          if (significance1) {\n            sign0 = coefficentsSign[index - 1];\n            contribution = 1 - sign1 - sign0;\n          } else {\n            contribution = 1 - sign1 - sign1;\n          }\n        } else if (significance1) {\n          sign0 = coefficentsSign[index - 1];\n          contribution = 1 - sign0 - sign0;\n        } else {\n          contribution = 0;\n        }\n        var horizontalContribution = 3 * contribution;\n\n        // calculate vertical contribution and combine with the horizontal\n        significance1 = row > 0 && coefficentsMagnitude[index - width] !== 0;\n        if (row + 1 < height && coefficentsMagnitude[index + width] !== 0) {\n          sign1 = coefficentsSign[index + width];\n          if (significance1) {\n            sign0 = coefficentsSign[index - width];\n            contribution = 1 - sign1 - sign0 + horizontalContribution;\n          } else {\n            contribution = 1 - sign1 - sign1 + horizontalContribution;\n          }\n        } else if (significance1) {\n          sign0 = coefficentsSign[index - width];\n          contribution = 1 - sign0 - sign0 + horizontalContribution;\n        } else {\n          contribution = horizontalContribution;\n        }\n\n        if (contribution >= 0) {\n          contextLabel = 9 + contribution;\n          decoded = this.decoder.readBit(this.contexts, contextLabel);\n        } else {\n          contextLabel = 9 - contribution;\n          decoded = this.decoder.readBit(this.contexts, contextLabel) ^ 1;\n        }\n        return decoded;\n      },\n      runMagnitudeRefinementPass: function BitModel_runMagnitudeRefinementPass() {\n        var decoder = this.decoder;\n        var width = this.width,\n          height = this.height;\n        var coefficentsMagnitude = this.coefficentsMagnitude;\n        var neighborsSignificance = this.neighborsSignificance;\n        var contexts = this.contexts;\n        var bitsDecoded = this.bitsDecoded;\n        var processingFlags = this.processingFlags;\n        var processedMask = 1;\n        var firstMagnitudeBitMask = 2;\n        var length = width * height;\n        var width4 = width * 4;\n\n        for (var index0 = 0, indexNext; index0 < length; index0 = indexNext) {\n          indexNext = Math.min(length, index0 + width4);\n          for (var j = 0; j < width; j++) {\n            for (var index = index0 + j; index < indexNext; index += width) {\n              // significant but not those that have just become\n              if (\n                !coefficentsMagnitude[index] ||\n                (processingFlags[index] & processedMask) !== 0\n              ) {\n                continue;\n              }\n\n              var contextLabel = 16;\n              if ((processingFlags[index] & firstMagnitudeBitMask) !== 0) {\n                processingFlags[index] ^= firstMagnitudeBitMask;\n                // first refinement\n                var significance = neighborsSignificance[index] & 127;\n                contextLabel = significance === 0 ? 15 : 14;\n              }\n\n              var bit = decoder.readBit(contexts, contextLabel);\n              coefficentsMagnitude[index] =\n                (coefficentsMagnitude[index] << 1) | bit;\n              bitsDecoded[index]++;\n              processingFlags[index] |= processedMask;\n            }\n          }\n        }\n      },\n      runCleanupPass: function BitModel_runCleanupPass() {\n        var decoder = this.decoder;\n        var width = this.width,\n          height = this.height;\n        var neighborsSignificance = this.neighborsSignificance;\n        var coefficentsMagnitude = this.coefficentsMagnitude;\n        var coefficentsSign = this.coefficentsSign;\n        var contexts = this.contexts;\n        var labels = this.contextLabelTable;\n        var bitsDecoded = this.bitsDecoded;\n        var processingFlags = this.processingFlags;\n        var processedMask = 1;\n        var firstMagnitudeBitMask = 2;\n        var oneRowDown = width;\n        var twoRowsDown = width * 2;\n        var threeRowsDown = width * 3;\n        var iNext;\n        for (var i0 = 0; i0 < height; i0 = iNext) {\n          iNext = Math.min(i0 + 4, height);\n          var indexBase = i0 * width;\n          var checkAllEmpty = i0 + 3 < height;\n          for (var j = 0; j < width; j++) {\n            var index0 = indexBase + j;\n            // using the property: labels[neighborsSignificance[index]] === 0\n            // when neighborsSignificance[index] === 0\n            var allEmpty =\n              checkAllEmpty &&\n              processingFlags[index0] === 0 &&\n              processingFlags[index0 + oneRowDown] === 0 &&\n              processingFlags[index0 + twoRowsDown] === 0 &&\n              processingFlags[index0 + threeRowsDown] === 0 &&\n              neighborsSignificance[index0] === 0 &&\n              neighborsSignificance[index0 + oneRowDown] === 0 &&\n              neighborsSignificance[index0 + twoRowsDown] === 0 &&\n              neighborsSignificance[index0 + threeRowsDown] === 0;\n            var i1 = 0,\n              index = index0;\n            var i = i0,\n              sign;\n            if (allEmpty) {\n              var hasSignificantCoefficent = decoder.readBit(\n                contexts,\n                RUNLENGTH_CONTEXT\n              );\n              if (!hasSignificantCoefficent) {\n                bitsDecoded[index0]++;\n                bitsDecoded[index0 + oneRowDown]++;\n                bitsDecoded[index0 + twoRowsDown]++;\n                bitsDecoded[index0 + threeRowsDown]++;\n                continue; // next column\n              }\n              i1 =\n                (decoder.readBit(contexts, UNIFORM_CONTEXT) << 1) |\n                decoder.readBit(contexts, UNIFORM_CONTEXT);\n              if (i1 !== 0) {\n                i = i0 + i1;\n                index += i1 * width;\n              }\n\n              sign = this.decodeSignBit(i, j, index);\n              coefficentsSign[index] = sign;\n              coefficentsMagnitude[index] = 1;\n              this.setNeighborsSignificance(i, j, index);\n              processingFlags[index] |= firstMagnitudeBitMask;\n\n              index = index0;\n              for (var i2 = i0; i2 <= i; i2++, index += width) {\n                bitsDecoded[index]++;\n              }\n\n              i1++;\n            }\n            for (i = i0 + i1; i < iNext; i++, index += width) {\n              if (\n                coefficentsMagnitude[index] ||\n                (processingFlags[index] & processedMask) !== 0\n              ) {\n                continue;\n              }\n\n              var contextLabel = labels[neighborsSignificance[index]];\n              var decision = decoder.readBit(contexts, contextLabel);\n              if (decision === 1) {\n                sign = this.decodeSignBit(i, j, index);\n                coefficentsSign[index] = sign;\n                coefficentsMagnitude[index] = 1;\n                this.setNeighborsSignificance(i, j, index);\n                processingFlags[index] |= firstMagnitudeBitMask;\n              }\n              bitsDecoded[index]++;\n            }\n          }\n        }\n      },\n      checkSegmentationSymbol: function BitModel_checkSegmentationSymbol() {\n        var decoder = this.decoder;\n        var contexts = this.contexts;\n        var symbol =\n          (decoder.readBit(contexts, UNIFORM_CONTEXT) << 3) |\n          (decoder.readBit(contexts, UNIFORM_CONTEXT) << 2) |\n          (decoder.readBit(contexts, UNIFORM_CONTEXT) << 1) |\n          decoder.readBit(contexts, UNIFORM_CONTEXT);\n        if (symbol !== 0xa) {\n          throw new JpxError(\"Invalid segmentation symbol\");\n        }\n      },\n    };\n\n    return BitModel;\n  })();\n\n  // Section F, Discrete wavelet transformation\n  var Transform = (function TransformClosure() {\n    // eslint-disable-next-line no-shadow\n    function Transform() {}\n\n    Transform.prototype.calculate = function transformCalculate(\n      subbands,\n      u0,\n      v0\n    ) {\n      var ll = subbands[0];\n      for (var i = 1, ii = subbands.length; i < ii; i++) {\n        ll = this.iterate(ll, subbands[i], u0, v0);\n      }\n      return ll;\n    };\n    Transform.prototype.extend = function extend(buffer, offset, size) {\n      // Section F.3.7 extending... using max extension of 4\n      var i1 = offset - 1,\n        j1 = offset + 1;\n      var i2 = offset + size - 2,\n        j2 = offset + size;\n      buffer[i1--] = buffer[j1++];\n      buffer[j2++] = buffer[i2--];\n      buffer[i1--] = buffer[j1++];\n      buffer[j2++] = buffer[i2--];\n      buffer[i1--] = buffer[j1++];\n      buffer[j2++] = buffer[i2--];\n      buffer[i1] = buffer[j1];\n      buffer[j2] = buffer[i2];\n    };\n    Transform.prototype.iterate = function Transform_iterate(\n      ll,\n      hl_lh_hh,\n      u0,\n      v0\n    ) {\n      var llWidth = ll.width,\n        llHeight = ll.height,\n        llItems = ll.items;\n      var width = hl_lh_hh.width;\n      var height = hl_lh_hh.height;\n      var items = hl_lh_hh.items;\n      var i, j, k, l, u, v;\n\n      // Interleave LL according to Section F.3.3\n      for (k = 0, i = 0; i < llHeight; i++) {\n        l = i * 2 * width;\n        for (j = 0; j < llWidth; j++, k++, l += 2) {\n          items[l] = llItems[k];\n        }\n      }\n      // The LL band is not needed anymore.\n      llItems = ll.items = null;\n\n      var bufferPadding = 4;\n      var rowBuffer = new Float32Array(width + 2 * bufferPadding);\n\n      // Section F.3.4 HOR_SR\n      if (width === 1) {\n        // if width = 1, when u0 even keep items as is, when odd divide by 2\n        if ((u0 & 1) !== 0) {\n          for (v = 0, k = 0; v < height; v++, k += width) {\n            items[k] *= 0.5;\n          }\n        }\n      } else {\n        for (v = 0, k = 0; v < height; v++, k += width) {\n          rowBuffer.set(items.subarray(k, k + width), bufferPadding);\n\n          this.extend(rowBuffer, bufferPadding, width);\n          this.filter(rowBuffer, bufferPadding, width);\n\n          items.set(\n            rowBuffer.subarray(bufferPadding, bufferPadding + width),\n            k\n          );\n        }\n      }\n\n      // Accesses to the items array can take long, because it may not fit into\n      // CPU cache and has to be fetched from main memory. Since subsequent\n      // accesses to the items array are not local when reading columns, we\n      // have a cache miss every time. To reduce cache misses, get up to\n      // 'numBuffers' items at a time and store them into the individual\n      // buffers. The colBuffers should be small enough to fit into CPU cache.\n      var numBuffers = 16;\n      var colBuffers = [];\n      for (i = 0; i < numBuffers; i++) {\n        colBuffers.push(new Float32Array(height + 2 * bufferPadding));\n      }\n      var b,\n        currentBuffer = 0;\n      ll = bufferPadding + height;\n\n      // Section F.3.5 VER_SR\n      if (height === 1) {\n        // if height = 1, when v0 even keep items as is, when odd divide by 2\n        if ((v0 & 1) !== 0) {\n          for (u = 0; u < width; u++) {\n            items[u] *= 0.5;\n          }\n        }\n      } else {\n        for (u = 0; u < width; u++) {\n          // if we ran out of buffers, copy several image columns at once\n          if (currentBuffer === 0) {\n            numBuffers = Math.min(width - u, numBuffers);\n            for (k = u, l = bufferPadding; l < ll; k += width, l++) {\n              for (b = 0; b < numBuffers; b++) {\n                colBuffers[b][l] = items[k + b];\n              }\n            }\n            currentBuffer = numBuffers;\n          }\n\n          currentBuffer--;\n          var buffer = colBuffers[currentBuffer];\n          this.extend(buffer, bufferPadding, height);\n          this.filter(buffer, bufferPadding, height);\n\n          // If this is last buffer in this group of buffers, flush all buffers.\n          if (currentBuffer === 0) {\n            k = u - numBuffers + 1;\n            for (l = bufferPadding; l < ll; k += width, l++) {\n              for (b = 0; b < numBuffers; b++) {\n                items[k + b] = colBuffers[b][l];\n              }\n            }\n          }\n        }\n      }\n\n      return {\n        width,\n        height,\n        items,\n      };\n    };\n    return Transform;\n  })();\n\n  // Section 3.8.2 Irreversible 9-7 filter\n  var IrreversibleTransform = (function IrreversibleTransformClosure() {\n    // eslint-disable-next-line no-shadow\n    function IrreversibleTransform() {\n      Transform.call(this);\n    }\n\n    IrreversibleTransform.prototype = Object.create(Transform.prototype);\n    IrreversibleTransform.prototype.filter = function irreversibleTransformFilter(\n      x,\n      offset,\n      length\n    ) {\n      var len = length >> 1;\n      offset = offset | 0;\n      var j, n, current, next;\n\n      var alpha = -1.586134342059924;\n      var beta = -0.052980118572961;\n      var gamma = 0.882911075530934;\n      var delta = 0.443506852043971;\n      var K = 1.230174104914001;\n      var K_ = 1 / K;\n\n      // step 1 is combined with step 3\n\n      // step 2\n      j = offset - 3;\n      for (n = len + 4; n--; j += 2) {\n        x[j] *= K_;\n      }\n\n      // step 1 & 3\n      j = offset - 2;\n      current = delta * x[j - 1];\n      for (n = len + 3; n--; j += 2) {\n        next = delta * x[j + 1];\n        x[j] = K * x[j] - current - next;\n        if (n--) {\n          j += 2;\n          current = delta * x[j + 1];\n          x[j] = K * x[j] - current - next;\n        } else {\n          break;\n        }\n      }\n\n      // step 4\n      j = offset - 1;\n      current = gamma * x[j - 1];\n      for (n = len + 2; n--; j += 2) {\n        next = gamma * x[j + 1];\n        x[j] -= current + next;\n        if (n--) {\n          j += 2;\n          current = gamma * x[j + 1];\n          x[j] -= current + next;\n        } else {\n          break;\n        }\n      }\n\n      // step 5\n      j = offset;\n      current = beta * x[j - 1];\n      for (n = len + 1; n--; j += 2) {\n        next = beta * x[j + 1];\n        x[j] -= current + next;\n        if (n--) {\n          j += 2;\n          current = beta * x[j + 1];\n          x[j] -= current + next;\n        } else {\n          break;\n        }\n      }\n\n      // step 6\n      if (len !== 0) {\n        j = offset + 1;\n        current = alpha * x[j - 1];\n        for (n = len; n--; j += 2) {\n          next = alpha * x[j + 1];\n          x[j] -= current + next;\n          if (n--) {\n            j += 2;\n            current = alpha * x[j + 1];\n            x[j] -= current + next;\n          } else {\n            break;\n          }\n        }\n      }\n    };\n\n    return IrreversibleTransform;\n  })();\n\n  // Section 3.8.1 Reversible 5-3 filter\n  var ReversibleTransform = (function ReversibleTransformClosure() {\n    // eslint-disable-next-line no-shadow\n    function ReversibleTransform() {\n      Transform.call(this);\n    }\n\n    ReversibleTransform.prototype = Object.create(Transform.prototype);\n    ReversibleTransform.prototype.filter = function reversibleTransformFilter(\n      x,\n      offset,\n      length\n    ) {\n      var len = length >> 1;\n      offset = offset | 0;\n      var j, n;\n\n      for (j = offset, n = len + 1; n--; j += 2) {\n        x[j] -= (x[j - 1] + x[j + 1] + 2) >> 2;\n      }\n\n      for (j = offset + 1, n = len; n--; j += 2) {\n        x[j] += (x[j - 1] + x[j + 1]) >> 1;\n      }\n    };\n\n    return ReversibleTransform;\n  })();\n\n  return JpxImage;\n})();\n\nexport { JpxImage };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  bytesToString,\n  FormatError,\n  PasswordException,\n  PasswordResponses,\n  stringToBytes,\n  unreachable,\n  utf8StringToString,\n  warn,\n} from \"../shared/util.js\";\nimport { isDict, isName, Name } from \"./primitives.js\";\nimport { DecryptStream } from \"./stream.js\";\n\nvar ARCFourCipher = (function ARCFourCipherClosure() {\n  // eslint-disable-next-line no-shadow\n  function ARCFourCipher(key) {\n    this.a = 0;\n    this.b = 0;\n    var s = new Uint8Array(256);\n    var i,\n      j = 0,\n      tmp,\n      keyLength = key.length;\n    for (i = 0; i < 256; ++i) {\n      s[i] = i;\n    }\n    for (i = 0; i < 256; ++i) {\n      tmp = s[i];\n      j = (j + tmp + key[i % keyLength]) & 0xff;\n      s[i] = s[j];\n      s[j] = tmp;\n    }\n    this.s = s;\n  }\n\n  ARCFourCipher.prototype = {\n    encryptBlock: function ARCFourCipher_encryptBlock(data) {\n      var i,\n        n = data.length,\n        tmp,\n        tmp2;\n      var a = this.a,\n        b = this.b,\n        s = this.s;\n      var output = new Uint8Array(n);\n      for (i = 0; i < n; ++i) {\n        a = (a + 1) & 0xff;\n        tmp = s[a];\n        b = (b + tmp) & 0xff;\n        tmp2 = s[b];\n        s[a] = tmp2;\n        s[b] = tmp;\n        output[i] = data[i] ^ s[(tmp + tmp2) & 0xff];\n      }\n      this.a = a;\n      this.b = b;\n      return output;\n    },\n  };\n  ARCFourCipher.prototype.decryptBlock = ARCFourCipher.prototype.encryptBlock;\n\n  return ARCFourCipher;\n})();\n\nvar calculateMD5 = (function calculateMD5Closure() {\n  // prettier-ignore\n  var r = new Uint8Array([\n    7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22,\n    5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20,\n    4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23,\n    6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21]);\n\n  // prettier-ignore\n  var k = new Int32Array([\n    -680876936, -389564586, 606105819, -1044525330, -176418897, 1200080426,\n    -1473231341, -45705983, 1770035416, -1958414417, -42063, -1990404162,\n    1804603682, -40341101, -1502002290, 1236535329, -165796510, -1069501632,\n    643717713, -373897302, -701558691, 38016083, -660478335, -405537848,\n    568446438, -1019803690, -187363961, 1163531501, -1444681467, -51403784,\n    1735328473, -1926607734, -378558, -2022574463, 1839030562, -35309556,\n    -1530992060, 1272893353, -155497632, -1094730640, 681279174, -358537222,\n    -722521979, 76029189, -640364487, -421815835, 530742520, -995338651,\n    -198630844, 1126891415, -1416354905, -57434055, 1700485571, -1894986606,\n    -1051523, -2054922799, 1873313359, -30611744, -1560198380, 1309151649,\n    -145523070, -1120210379, 718787259, -343485551]);\n\n  function hash(data, offset, length) {\n    var h0 = 1732584193,\n      h1 = -271733879,\n      h2 = -1732584194,\n      h3 = 271733878;\n    // pre-processing\n    var paddedLength = (length + 72) & ~63; // data + 9 extra bytes\n    var padded = new Uint8Array(paddedLength);\n    var i, j, n;\n    for (i = 0; i < length; ++i) {\n      padded[i] = data[offset++];\n    }\n    padded[i++] = 0x80;\n    n = paddedLength - 8;\n    while (i < n) {\n      padded[i++] = 0;\n    }\n    padded[i++] = (length << 3) & 0xff;\n    padded[i++] = (length >> 5) & 0xff;\n    padded[i++] = (length >> 13) & 0xff;\n    padded[i++] = (length >> 21) & 0xff;\n    padded[i++] = (length >>> 29) & 0xff;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    var w = new Int32Array(16);\n    for (i = 0; i < paddedLength; ) {\n      for (j = 0; j < 16; ++j, i += 4) {\n        w[j] =\n          padded[i] |\n          (padded[i + 1] << 8) |\n          (padded[i + 2] << 16) |\n          (padded[i + 3] << 24);\n      }\n      var a = h0,\n        b = h1,\n        c = h2,\n        d = h3,\n        f,\n        g;\n      for (j = 0; j < 64; ++j) {\n        if (j < 16) {\n          f = (b & c) | (~b & d);\n          g = j;\n        } else if (j < 32) {\n          f = (d & b) | (~d & c);\n          g = (5 * j + 1) & 15;\n        } else if (j < 48) {\n          f = b ^ c ^ d;\n          g = (3 * j + 5) & 15;\n        } else {\n          f = c ^ (b | ~d);\n          g = (7 * j) & 15;\n        }\n        var tmp = d,\n          rotateArg = (a + f + k[j] + w[g]) | 0,\n          rotate = r[j];\n        d = c;\n        c = b;\n        b = (b + ((rotateArg << rotate) | (rotateArg >>> (32 - rotate)))) | 0;\n        a = tmp;\n      }\n      h0 = (h0 + a) | 0;\n      h1 = (h1 + b) | 0;\n      h2 = (h2 + c) | 0;\n      h3 = (h3 + d) | 0;\n    }\n    // prettier-ignore\n    return new Uint8Array([\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >>> 24) & 0xFF,\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >>> 24) & 0xFF,\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >>> 24) & 0xFF,\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >>> 24) & 0xFF\n    ]);\n  }\n\n  return hash;\n})();\nvar Word64 = (function Word64Closure() {\n  // eslint-disable-next-line no-shadow\n  function Word64(highInteger, lowInteger) {\n    this.high = highInteger | 0;\n    this.low = lowInteger | 0;\n  }\n  Word64.prototype = {\n    and: function Word64_and(word) {\n      this.high &= word.high;\n      this.low &= word.low;\n    },\n    xor: function Word64_xor(word) {\n      this.high ^= word.high;\n      this.low ^= word.low;\n    },\n\n    or: function Word64_or(word) {\n      this.high |= word.high;\n      this.low |= word.low;\n    },\n\n    shiftRight: function Word64_shiftRight(places) {\n      if (places >= 32) {\n        this.low = (this.high >>> (places - 32)) | 0;\n        this.high = 0;\n      } else {\n        this.low = (this.low >>> places) | (this.high << (32 - places));\n        this.high = (this.high >>> places) | 0;\n      }\n    },\n\n    shiftLeft: function Word64_shiftLeft(places) {\n      if (places >= 32) {\n        this.high = this.low << (places - 32);\n        this.low = 0;\n      } else {\n        this.high = (this.high << places) | (this.low >>> (32 - places));\n        this.low = this.low << places;\n      }\n    },\n\n    rotateRight: function Word64_rotateRight(places) {\n      var low, high;\n      if (places & 32) {\n        high = this.low;\n        low = this.high;\n      } else {\n        low = this.low;\n        high = this.high;\n      }\n      places &= 31;\n      this.low = (low >>> places) | (high << (32 - places));\n      this.high = (high >>> places) | (low << (32 - places));\n    },\n\n    not: function Word64_not() {\n      this.high = ~this.high;\n      this.low = ~this.low;\n    },\n\n    add: function Word64_add(word) {\n      var lowAdd = (this.low >>> 0) + (word.low >>> 0);\n      var highAdd = (this.high >>> 0) + (word.high >>> 0);\n      if (lowAdd > 0xffffffff) {\n        highAdd += 1;\n      }\n      this.low = lowAdd | 0;\n      this.high = highAdd | 0;\n    },\n\n    copyTo: function Word64_copyTo(bytes, offset) {\n      bytes[offset] = (this.high >>> 24) & 0xff;\n      bytes[offset + 1] = (this.high >> 16) & 0xff;\n      bytes[offset + 2] = (this.high >> 8) & 0xff;\n      bytes[offset + 3] = this.high & 0xff;\n      bytes[offset + 4] = (this.low >>> 24) & 0xff;\n      bytes[offset + 5] = (this.low >> 16) & 0xff;\n      bytes[offset + 6] = (this.low >> 8) & 0xff;\n      bytes[offset + 7] = this.low & 0xff;\n    },\n\n    assign: function Word64_assign(word) {\n      this.high = word.high;\n      this.low = word.low;\n    },\n  };\n  return Word64;\n})();\n\nvar calculateSHA256 = (function calculateSHA256Closure() {\n  function rotr(x, n) {\n    return (x >>> n) | (x << (32 - n));\n  }\n\n  function ch(x, y, z) {\n    return (x & y) ^ (~x & z);\n  }\n\n  function maj(x, y, z) {\n    return (x & y) ^ (x & z) ^ (y & z);\n  }\n\n  function sigma(x) {\n    return rotr(x, 2) ^ rotr(x, 13) ^ rotr(x, 22);\n  }\n\n  function sigmaPrime(x) {\n    return rotr(x, 6) ^ rotr(x, 11) ^ rotr(x, 25);\n  }\n\n  function littleSigma(x) {\n    return rotr(x, 7) ^ rotr(x, 18) ^ (x >>> 3);\n  }\n\n  function littleSigmaPrime(x) {\n    return rotr(x, 17) ^ rotr(x, 19) ^ (x >>> 10);\n  }\n\n  // prettier-ignore\n  var k = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n           0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n           0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n           0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n           0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n           0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n           0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n           0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n           0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n           0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n           0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n           0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n           0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n           0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n           0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n           0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n\n  function hash(data, offset, length) {\n    // initial hash values\n    var h0 = 0x6a09e667,\n      h1 = 0xbb67ae85,\n      h2 = 0x3c6ef372,\n      h3 = 0xa54ff53a,\n      h4 = 0x510e527f,\n      h5 = 0x9b05688c,\n      h6 = 0x1f83d9ab,\n      h7 = 0x5be0cd19;\n    // pre-processing\n    var paddedLength = Math.ceil((length + 9) / 64) * 64;\n    var padded = new Uint8Array(paddedLength);\n    var i, j, n;\n    for (i = 0; i < length; ++i) {\n      padded[i] = data[offset++];\n    }\n    padded[i++] = 0x80;\n    n = paddedLength - 8;\n    while (i < n) {\n      padded[i++] = 0;\n    }\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = (length >>> 29) & 0xff;\n    padded[i++] = (length >> 21) & 0xff;\n    padded[i++] = (length >> 13) & 0xff;\n    padded[i++] = (length >> 5) & 0xff;\n    padded[i++] = (length << 3) & 0xff;\n    var w = new Uint32Array(64);\n    // for each 512 bit block\n    for (i = 0; i < paddedLength; ) {\n      for (j = 0; j < 16; ++j) {\n        w[j] =\n          (padded[i] << 24) |\n          (padded[i + 1] << 16) |\n          (padded[i + 2] << 8) |\n          padded[i + 3];\n        i += 4;\n      }\n\n      for (j = 16; j < 64; ++j) {\n        w[j] =\n          (littleSigmaPrime(w[j - 2]) +\n            w[j - 7] +\n            littleSigma(w[j - 15]) +\n            w[j - 16]) |\n          0;\n      }\n      var a = h0,\n        b = h1,\n        c = h2,\n        d = h3,\n        e = h4,\n        f = h5,\n        g = h6,\n        h = h7,\n        t1,\n        t2;\n      for (j = 0; j < 64; ++j) {\n        t1 = h + sigmaPrime(e) + ch(e, f, g) + k[j] + w[j];\n        t2 = sigma(a) + maj(a, b, c);\n        h = g;\n        g = f;\n        f = e;\n        e = (d + t1) | 0;\n        d = c;\n        c = b;\n        b = a;\n        a = (t1 + t2) | 0;\n      }\n      h0 = (h0 + a) | 0;\n      h1 = (h1 + b) | 0;\n      h2 = (h2 + c) | 0;\n      h3 = (h3 + d) | 0;\n      h4 = (h4 + e) | 0;\n      h5 = (h5 + f) | 0;\n      h6 = (h6 + g) | 0;\n      h7 = (h7 + h) | 0;\n    }\n    // prettier-ignore\n    return new Uint8Array([\n      (h0 >> 24) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 8) & 0xFF, (h0) & 0xFF,\n      (h1 >> 24) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 8) & 0xFF, (h1) & 0xFF,\n      (h2 >> 24) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 8) & 0xFF, (h2) & 0xFF,\n      (h3 >> 24) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 8) & 0xFF, (h3) & 0xFF,\n      (h4 >> 24) & 0xFF, (h4 >> 16) & 0xFF, (h4 >> 8) & 0xFF, (h4) & 0xFF,\n      (h5 >> 24) & 0xFF, (h5 >> 16) & 0xFF, (h5 >> 8) & 0xFF, (h5) & 0xFF,\n      (h6 >> 24) & 0xFF, (h6 >> 16) & 0xFF, (h6 >> 8) & 0xFF, (h6) & 0xFF,\n      (h7 >> 24) & 0xFF, (h7 >> 16) & 0xFF, (h7 >> 8) & 0xFF, (h7) & 0xFF\n    ]);\n  }\n\n  return hash;\n})();\n\nvar calculateSHA512 = (function calculateSHA512Closure() {\n  function ch(result, x, y, z, tmp) {\n    result.assign(x);\n    result.and(y);\n    tmp.assign(x);\n    tmp.not();\n    tmp.and(z);\n    result.xor(tmp);\n  }\n\n  function maj(result, x, y, z, tmp) {\n    result.assign(x);\n    result.and(y);\n    tmp.assign(x);\n    tmp.and(z);\n    result.xor(tmp);\n    tmp.assign(y);\n    tmp.and(z);\n    result.xor(tmp);\n  }\n\n  function sigma(result, x, tmp) {\n    result.assign(x);\n    result.rotateRight(28);\n    tmp.assign(x);\n    tmp.rotateRight(34);\n    result.xor(tmp);\n    tmp.assign(x);\n    tmp.rotateRight(39);\n    result.xor(tmp);\n  }\n\n  function sigmaPrime(result, x, tmp) {\n    result.assign(x);\n    result.rotateRight(14);\n    tmp.assign(x);\n    tmp.rotateRight(18);\n    result.xor(tmp);\n    tmp.assign(x);\n    tmp.rotateRight(41);\n    result.xor(tmp);\n  }\n\n  function littleSigma(result, x, tmp) {\n    result.assign(x);\n    result.rotateRight(1);\n    tmp.assign(x);\n    tmp.rotateRight(8);\n    result.xor(tmp);\n    tmp.assign(x);\n    tmp.shiftRight(7);\n    result.xor(tmp);\n  }\n\n  function littleSigmaPrime(result, x, tmp) {\n    result.assign(x);\n    result.rotateRight(19);\n    tmp.assign(x);\n    tmp.rotateRight(61);\n    result.xor(tmp);\n    tmp.assign(x);\n    tmp.shiftRight(6);\n    result.xor(tmp);\n  }\n\n  // prettier-ignore\n  var k = [\n    new Word64(0x428a2f98, 0xd728ae22), new Word64(0x71374491, 0x23ef65cd),\n    new Word64(0xb5c0fbcf, 0xec4d3b2f), new Word64(0xe9b5dba5, 0x8189dbbc),\n    new Word64(0x3956c25b, 0xf348b538), new Word64(0x59f111f1, 0xb605d019),\n    new Word64(0x923f82a4, 0xaf194f9b), new Word64(0xab1c5ed5, 0xda6d8118),\n    new Word64(0xd807aa98, 0xa3030242), new Word64(0x12835b01, 0x45706fbe),\n    new Word64(0x243185be, 0x4ee4b28c), new Word64(0x550c7dc3, 0xd5ffb4e2),\n    new Word64(0x72be5d74, 0xf27b896f), new Word64(0x80deb1fe, 0x3b1696b1),\n    new Word64(0x9bdc06a7, 0x25c71235), new Word64(0xc19bf174, 0xcf692694),\n    new Word64(0xe49b69c1, 0x9ef14ad2), new Word64(0xefbe4786, 0x384f25e3),\n    new Word64(0x0fc19dc6, 0x8b8cd5b5), new Word64(0x240ca1cc, 0x77ac9c65),\n    new Word64(0x2de92c6f, 0x592b0275), new Word64(0x4a7484aa, 0x6ea6e483),\n    new Word64(0x5cb0a9dc, 0xbd41fbd4), new Word64(0x76f988da, 0x831153b5),\n    new Word64(0x983e5152, 0xee66dfab), new Word64(0xa831c66d, 0x2db43210),\n    new Word64(0xb00327c8, 0x98fb213f), new Word64(0xbf597fc7, 0xbeef0ee4),\n    new Word64(0xc6e00bf3, 0x3da88fc2), new Word64(0xd5a79147, 0x930aa725),\n    new Word64(0x06ca6351, 0xe003826f), new Word64(0x14292967, 0x0a0e6e70),\n    new Word64(0x27b70a85, 0x46d22ffc), new Word64(0x2e1b2138, 0x5c26c926),\n    new Word64(0x4d2c6dfc, 0x5ac42aed), new Word64(0x53380d13, 0x9d95b3df),\n    new Word64(0x650a7354, 0x8baf63de), new Word64(0x766a0abb, 0x3c77b2a8),\n    new Word64(0x81c2c92e, 0x47edaee6), new Word64(0x92722c85, 0x1482353b),\n    new Word64(0xa2bfe8a1, 0x4cf10364), new Word64(0xa81a664b, 0xbc423001),\n    new Word64(0xc24b8b70, 0xd0f89791), new Word64(0xc76c51a3, 0x0654be30),\n    new Word64(0xd192e819, 0xd6ef5218), new Word64(0xd6990624, 0x5565a910),\n    new Word64(0xf40e3585, 0x5771202a), new Word64(0x106aa070, 0x32bbd1b8),\n    new Word64(0x19a4c116, 0xb8d2d0c8), new Word64(0x1e376c08, 0x5141ab53),\n    new Word64(0x2748774c, 0xdf8eeb99), new Word64(0x34b0bcb5, 0xe19b48a8),\n    new Word64(0x391c0cb3, 0xc5c95a63), new Word64(0x4ed8aa4a, 0xe3418acb),\n    new Word64(0x5b9cca4f, 0x7763e373), new Word64(0x682e6ff3, 0xd6b2b8a3),\n    new Word64(0x748f82ee, 0x5defb2fc), new Word64(0x78a5636f, 0x43172f60),\n    new Word64(0x84c87814, 0xa1f0ab72), new Word64(0x8cc70208, 0x1a6439ec),\n    new Word64(0x90befffa, 0x23631e28), new Word64(0xa4506ceb, 0xde82bde9),\n    new Word64(0xbef9a3f7, 0xb2c67915), new Word64(0xc67178f2, 0xe372532b),\n    new Word64(0xca273ece, 0xea26619c), new Word64(0xd186b8c7, 0x21c0c207),\n    new Word64(0xeada7dd6, 0xcde0eb1e), new Word64(0xf57d4f7f, 0xee6ed178),\n    new Word64(0x06f067aa, 0x72176fba), new Word64(0x0a637dc5, 0xa2c898a6),\n    new Word64(0x113f9804, 0xbef90dae), new Word64(0x1b710b35, 0x131c471b),\n    new Word64(0x28db77f5, 0x23047d84), new Word64(0x32caab7b, 0x40c72493),\n    new Word64(0x3c9ebe0a, 0x15c9bebc), new Word64(0x431d67c4, 0x9c100d4c),\n    new Word64(0x4cc5d4be, 0xcb3e42b6), new Word64(0x597f299c, 0xfc657e2a),\n    new Word64(0x5fcb6fab, 0x3ad6faec), new Word64(0x6c44198c, 0x4a475817)];\n\n  function hash(data, offset, length, mode384) {\n    mode384 = !!mode384;\n    // initial hash values\n    var h0, h1, h2, h3, h4, h5, h6, h7;\n    if (!mode384) {\n      h0 = new Word64(0x6a09e667, 0xf3bcc908);\n      h1 = new Word64(0xbb67ae85, 0x84caa73b);\n      h2 = new Word64(0x3c6ef372, 0xfe94f82b);\n      h3 = new Word64(0xa54ff53a, 0x5f1d36f1);\n      h4 = new Word64(0x510e527f, 0xade682d1);\n      h5 = new Word64(0x9b05688c, 0x2b3e6c1f);\n      h6 = new Word64(0x1f83d9ab, 0xfb41bd6b);\n      h7 = new Word64(0x5be0cd19, 0x137e2179);\n    } else {\n      // SHA384 is exactly the same\n      // except with different starting values and a trimmed result\n      h0 = new Word64(0xcbbb9d5d, 0xc1059ed8);\n      h1 = new Word64(0x629a292a, 0x367cd507);\n      h2 = new Word64(0x9159015a, 0x3070dd17);\n      h3 = new Word64(0x152fecd8, 0xf70e5939);\n      h4 = new Word64(0x67332667, 0xffc00b31);\n      h5 = new Word64(0x8eb44a87, 0x68581511);\n      h6 = new Word64(0xdb0c2e0d, 0x64f98fa7);\n      h7 = new Word64(0x47b5481d, 0xbefa4fa4);\n    }\n\n    // pre-processing\n    var paddedLength = Math.ceil((length + 17) / 128) * 128;\n    var padded = new Uint8Array(paddedLength);\n    var i, j, n;\n    for (i = 0; i < length; ++i) {\n      padded[i] = data[offset++];\n    }\n    padded[i++] = 0x80;\n    n = paddedLength - 16;\n    while (i < n) {\n      padded[i++] = 0;\n    }\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = (length >>> 29) & 0xff;\n    padded[i++] = (length >> 21) & 0xff;\n    padded[i++] = (length >> 13) & 0xff;\n    padded[i++] = (length >> 5) & 0xff;\n    padded[i++] = (length << 3) & 0xff;\n\n    var w = new Array(80);\n    for (i = 0; i < 80; i++) {\n      w[i] = new Word64(0, 0);\n    }\n    var a = new Word64(0, 0),\n      b = new Word64(0, 0),\n      c = new Word64(0, 0);\n    var d = new Word64(0, 0),\n      e = new Word64(0, 0),\n      f = new Word64(0, 0);\n    var g = new Word64(0, 0),\n      h = new Word64(0, 0);\n    var t1 = new Word64(0, 0),\n      t2 = new Word64(0, 0);\n    var tmp1 = new Word64(0, 0),\n      tmp2 = new Word64(0, 0),\n      tmp3;\n\n    // for each 1024 bit block\n    for (i = 0; i < paddedLength; ) {\n      for (j = 0; j < 16; ++j) {\n        w[j].high =\n          (padded[i] << 24) |\n          (padded[i + 1] << 16) |\n          (padded[i + 2] << 8) |\n          padded[i + 3];\n        w[j].low =\n          (padded[i + 4] << 24) |\n          (padded[i + 5] << 16) |\n          (padded[i + 6] << 8) |\n          padded[i + 7];\n        i += 8;\n      }\n      for (j = 16; j < 80; ++j) {\n        tmp3 = w[j];\n        littleSigmaPrime(tmp3, w[j - 2], tmp2);\n        tmp3.add(w[j - 7]);\n        littleSigma(tmp1, w[j - 15], tmp2);\n        tmp3.add(tmp1);\n        tmp3.add(w[j - 16]);\n      }\n\n      a.assign(h0);\n      b.assign(h1);\n      c.assign(h2);\n      d.assign(h3);\n      e.assign(h4);\n      f.assign(h5);\n      g.assign(h6);\n      h.assign(h7);\n      for (j = 0; j < 80; ++j) {\n        t1.assign(h);\n        sigmaPrime(tmp1, e, tmp2);\n        t1.add(tmp1);\n        ch(tmp1, e, f, g, tmp2);\n        t1.add(tmp1);\n        t1.add(k[j]);\n        t1.add(w[j]);\n\n        sigma(t2, a, tmp2);\n        maj(tmp1, a, b, c, tmp2);\n        t2.add(tmp1);\n\n        tmp3 = h;\n        h = g;\n        g = f;\n        f = e;\n        d.add(t1);\n        e = d;\n        d = c;\n        c = b;\n        b = a;\n        tmp3.assign(t1);\n        tmp3.add(t2);\n        a = tmp3;\n      }\n      h0.add(a);\n      h1.add(b);\n      h2.add(c);\n      h3.add(d);\n      h4.add(e);\n      h5.add(f);\n      h6.add(g);\n      h7.add(h);\n    }\n\n    var result;\n    if (!mode384) {\n      result = new Uint8Array(64);\n      h0.copyTo(result, 0);\n      h1.copyTo(result, 8);\n      h2.copyTo(result, 16);\n      h3.copyTo(result, 24);\n      h4.copyTo(result, 32);\n      h5.copyTo(result, 40);\n      h6.copyTo(result, 48);\n      h7.copyTo(result, 56);\n    } else {\n      result = new Uint8Array(48);\n      h0.copyTo(result, 0);\n      h1.copyTo(result, 8);\n      h2.copyTo(result, 16);\n      h3.copyTo(result, 24);\n      h4.copyTo(result, 32);\n      h5.copyTo(result, 40);\n    }\n    return result;\n  }\n\n  return hash;\n})();\nvar calculateSHA384 = (function calculateSHA384Closure() {\n  function hash(data, offset, length) {\n    return calculateSHA512(data, offset, length, true);\n  }\n\n  return hash;\n})();\nvar NullCipher = (function NullCipherClosure() {\n  // eslint-disable-next-line no-shadow\n  function NullCipher() {}\n\n  NullCipher.prototype = {\n    decryptBlock: function NullCipher_decryptBlock(data) {\n      return data;\n    },\n  };\n\n  return NullCipher;\n})();\n\nclass AESBaseCipher {\n  constructor() {\n    if (this.constructor === AESBaseCipher) {\n      unreachable(\"Cannot initialize AESBaseCipher.\");\n    }\n\n    // prettier-ignore\n    this._s = new Uint8Array([\n      0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b,\n      0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0,\n      0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26,\n      0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,\n      0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2,\n      0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,\n      0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed,\n      0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,\n      0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f,\n      0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,\n      0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec,\n      0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,\n      0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14,\n      0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,\n      0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d,\n      0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,\n      0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f,\n      0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,\n      0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11,\n      0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,\n      0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f,\n      0xb0, 0x54, 0xbb, 0x16,\n    ]);\n\n    // prettier-ignore\n    this._inv_s = new Uint8Array([\n      0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e,\n      0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87,\n      0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32,\n      0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,\n      0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49,\n      0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16,\n      0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50,\n      0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,\n      0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05,\n      0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02,\n      0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41,\n      0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,\n      0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8,\n      0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89,\n      0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b,\n      0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,\n      0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59,\n      0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d,\n      0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d,\n      0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,\n      0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63,\n      0x55, 0x21, 0x0c, 0x7d,\n    ]);\n\n    // prettier-ignore\n    this._mix = new Uint32Array([\n      0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927,\n      0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45,\n      0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb,\n      0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381,\n      0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf,\n      0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66,\n      0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28,\n      0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012,\n      0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec,\n      0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e,\n      0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd,\n      0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7,\n      0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89,\n      0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b,\n      0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815,\n      0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f,\n      0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa,\n      0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8,\n      0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36,\n      0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c,\n      0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742,\n      0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea,\n      0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4,\n      0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e,\n      0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360,\n      0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502,\n      0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87,\n      0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd,\n      0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3,\n      0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621,\n      0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f,\n      0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55,\n      0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26,\n      0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844,\n      0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba,\n      0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480,\n      0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce,\n      0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67,\n      0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929,\n      0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713,\n      0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed,\n      0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f,\n      0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3,\n    ]);\n\n    this._mixCol = new Uint8Array(256);\n    for (let i = 0; i < 256; i++) {\n      if (i < 128) {\n        this._mixCol[i] = i << 1;\n      } else {\n        this._mixCol[i] = (i << 1) ^ 0x1b;\n      }\n    }\n\n    this.buffer = new Uint8Array(16);\n    this.bufferPosition = 0;\n  }\n\n  _expandKey(cipherKey) {\n    unreachable(\"Cannot call `_expandKey` on the base class\");\n  }\n\n  _decrypt(input, key) {\n    let t, u, v;\n    const state = new Uint8Array(16);\n    state.set(input);\n\n    // AddRoundKey\n    for (let j = 0, k = this._keySize; j < 16; ++j, ++k) {\n      state[j] ^= key[k];\n    }\n    for (let i = this._cyclesOfRepetition - 1; i >= 1; --i) {\n      // InvShiftRows\n      t = state[13];\n      state[13] = state[9];\n      state[9] = state[5];\n      state[5] = state[1];\n      state[1] = t;\n      t = state[14];\n      u = state[10];\n      state[14] = state[6];\n      state[10] = state[2];\n      state[6] = t;\n      state[2] = u;\n      t = state[15];\n      u = state[11];\n      v = state[7];\n      state[15] = state[3];\n      state[11] = t;\n      state[7] = u;\n      state[3] = v;\n      // InvSubBytes\n      for (let j = 0; j < 16; ++j) {\n        state[j] = this._inv_s[state[j]];\n      }\n      // AddRoundKey\n      for (let j = 0, k = i * 16; j < 16; ++j, ++k) {\n        state[j] ^= key[k];\n      }\n      // InvMixColumns\n      for (let j = 0; j < 16; j += 4) {\n        const s0 = this._mix[state[j]];\n        const s1 = this._mix[state[j + 1]];\n        const s2 = this._mix[state[j + 2]];\n        const s3 = this._mix[state[j + 3]];\n        t =\n          s0 ^\n          (s1 >>> 8) ^\n          (s1 << 24) ^\n          (s2 >>> 16) ^\n          (s2 << 16) ^\n          (s3 >>> 24) ^\n          (s3 << 8);\n        state[j] = (t >>> 24) & 0xff;\n        state[j + 1] = (t >> 16) & 0xff;\n        state[j + 2] = (t >> 8) & 0xff;\n        state[j + 3] = t & 0xff;\n      }\n    }\n    // InvShiftRows\n    t = state[13];\n    state[13] = state[9];\n    state[9] = state[5];\n    state[5] = state[1];\n    state[1] = t;\n    t = state[14];\n    u = state[10];\n    state[14] = state[6];\n    state[10] = state[2];\n    state[6] = t;\n    state[2] = u;\n    t = state[15];\n    u = state[11];\n    v = state[7];\n    state[15] = state[3];\n    state[11] = t;\n    state[7] = u;\n    state[3] = v;\n    for (let j = 0; j < 16; ++j) {\n      // InvSubBytes\n      state[j] = this._inv_s[state[j]];\n      // AddRoundKey\n      state[j] ^= key[j];\n    }\n    return state;\n  }\n\n  _encrypt(input, key) {\n    const s = this._s;\n\n    let t, u, v;\n    const state = new Uint8Array(16);\n    state.set(input);\n\n    for (let j = 0; j < 16; ++j) {\n      // AddRoundKey\n      state[j] ^= key[j];\n    }\n\n    for (let i = 1; i < this._cyclesOfRepetition; i++) {\n      // SubBytes\n      for (let j = 0; j < 16; ++j) {\n        state[j] = s[state[j]];\n      }\n      // ShiftRows\n      v = state[1];\n      state[1] = state[5];\n      state[5] = state[9];\n      state[9] = state[13];\n      state[13] = v;\n      v = state[2];\n      u = state[6];\n      state[2] = state[10];\n      state[6] = state[14];\n      state[10] = v;\n      state[14] = u;\n      v = state[3];\n      u = state[7];\n      t = state[11];\n      state[3] = state[15];\n      state[7] = v;\n      state[11] = u;\n      state[15] = t;\n      // MixColumns\n      for (let j = 0; j < 16; j += 4) {\n        const s0 = state[j + 0];\n        const s1 = state[j + 1];\n        const s2 = state[j + 2];\n        const s3 = state[j + 3];\n        t = s0 ^ s1 ^ s2 ^ s3;\n        state[j + 0] ^= t ^ this._mixCol[s0 ^ s1];\n        state[j + 1] ^= t ^ this._mixCol[s1 ^ s2];\n        state[j + 2] ^= t ^ this._mixCol[s2 ^ s3];\n        state[j + 3] ^= t ^ this._mixCol[s3 ^ s0];\n      }\n      // AddRoundKey\n      for (let j = 0, k = i * 16; j < 16; ++j, ++k) {\n        state[j] ^= key[k];\n      }\n    }\n\n    // SubBytes\n    for (let j = 0; j < 16; ++j) {\n      state[j] = s[state[j]];\n    }\n    // ShiftRows\n    v = state[1];\n    state[1] = state[5];\n    state[5] = state[9];\n    state[9] = state[13];\n    state[13] = v;\n    v = state[2];\n    u = state[6];\n    state[2] = state[10];\n    state[6] = state[14];\n    state[10] = v;\n    state[14] = u;\n    v = state[3];\n    u = state[7];\n    t = state[11];\n    state[3] = state[15];\n    state[7] = v;\n    state[11] = u;\n    state[15] = t;\n    // AddRoundKey\n    for (let j = 0, k = this._keySize; j < 16; ++j, ++k) {\n      state[j] ^= key[k];\n    }\n    return state;\n  }\n\n  _decryptBlock2(data, finalize) {\n    const sourceLength = data.length;\n    let buffer = this.buffer,\n      bufferLength = this.bufferPosition;\n    const result = [];\n    let iv = this.iv;\n\n    for (let i = 0; i < sourceLength; ++i) {\n      buffer[bufferLength] = data[i];\n      ++bufferLength;\n      if (bufferLength < 16) {\n        continue;\n      }\n      // buffer is full, decrypting\n      const plain = this._decrypt(buffer, this._key);\n      // xor-ing the IV vector to get plain text\n      for (let j = 0; j < 16; ++j) {\n        plain[j] ^= iv[j];\n      }\n      iv = buffer;\n      result.push(plain);\n      buffer = new Uint8Array(16);\n      bufferLength = 0;\n    }\n    // saving incomplete buffer\n    this.buffer = buffer;\n    this.bufferLength = bufferLength;\n    this.iv = iv;\n    if (result.length === 0) {\n      return new Uint8Array(0);\n    }\n    // combining plain text blocks into one\n    let outputLength = 16 * result.length;\n    if (finalize) {\n      // undo a padding that is described in RFC 2898\n      const lastBlock = result[result.length - 1];\n      let psLen = lastBlock[15];\n      if (psLen <= 16) {\n        for (let i = 15, ii = 16 - psLen; i >= ii; --i) {\n          if (lastBlock[i] !== psLen) {\n            // Invalid padding, assume that the block has no padding.\n            psLen = 0;\n            break;\n          }\n        }\n        outputLength -= psLen;\n        result[result.length - 1] = lastBlock.subarray(0, 16 - psLen);\n      }\n    }\n    const output = new Uint8Array(outputLength);\n    for (let i = 0, j = 0, ii = result.length; i < ii; ++i, j += 16) {\n      output.set(result[i], j);\n    }\n    return output;\n  }\n\n  decryptBlock(data, finalize, iv = null) {\n    const sourceLength = data.length;\n    const buffer = this.buffer;\n    let bufferLength = this.bufferPosition;\n    // If an IV is not supplied, wait for IV values. They are at the start\n    // of the stream.\n    if (iv) {\n      this.iv = iv;\n    } else {\n      for (\n        let i = 0;\n        bufferLength < 16 && i < sourceLength;\n        ++i, ++bufferLength\n      ) {\n        buffer[bufferLength] = data[i];\n      }\n      if (bufferLength < 16) {\n        // Need more data.\n        this.bufferLength = bufferLength;\n        return new Uint8Array(0);\n      }\n      this.iv = buffer;\n      data = data.subarray(16);\n    }\n    this.buffer = new Uint8Array(16);\n    this.bufferLength = 0;\n    // starting decryption\n    this.decryptBlock = this._decryptBlock2;\n    return this.decryptBlock(data, finalize);\n  }\n\n  encrypt(data, iv) {\n    const sourceLength = data.length;\n    let buffer = this.buffer,\n      bufferLength = this.bufferPosition;\n    const result = [];\n\n    if (!iv) {\n      iv = new Uint8Array(16);\n    }\n    for (let i = 0; i < sourceLength; ++i) {\n      buffer[bufferLength] = data[i];\n      ++bufferLength;\n      if (bufferLength < 16) {\n        continue;\n      }\n      for (let j = 0; j < 16; ++j) {\n        buffer[j] ^= iv[j];\n      }\n\n      // buffer is full, encrypting\n      const cipher = this._encrypt(buffer, this._key);\n      iv = cipher;\n      result.push(cipher);\n      buffer = new Uint8Array(16);\n      bufferLength = 0;\n    }\n    // saving incomplete buffer\n    this.buffer = buffer;\n    this.bufferLength = bufferLength;\n    this.iv = iv;\n    if (result.length === 0) {\n      return new Uint8Array(0);\n    }\n    // combining plain text blocks into one\n    const outputLength = 16 * result.length;\n    const output = new Uint8Array(outputLength);\n    for (let i = 0, j = 0, ii = result.length; i < ii; ++i, j += 16) {\n      output.set(result[i], j);\n    }\n    return output;\n  }\n}\n\nclass AES128Cipher extends AESBaseCipher {\n  constructor(key) {\n    super();\n\n    this._cyclesOfRepetition = 10;\n    this._keySize = 160; // bits\n\n    // prettier-ignore\n    this._rcon = new Uint8Array([\n      0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c,\n      0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a,\n      0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,\n      0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,\n      0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,\n      0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6,\n      0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72,\n      0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,\n      0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10,\n      0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e,\n      0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5,\n      0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,\n      0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02,\n      0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d,\n      0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d,\n      0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,\n      0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb,\n      0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c,\n      0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a,\n      0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,\n      0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,\n      0x74, 0xe8, 0xcb, 0x8d,\n    ]);\n\n    this._key = this._expandKey(key);\n  }\n\n  _expandKey(cipherKey) {\n    const b = 176;\n    const s = this._s;\n    const rcon = this._rcon;\n\n    const result = new Uint8Array(b);\n    result.set(cipherKey);\n\n    for (let j = 16, i = 1; j < b; ++i) {\n      // RotWord\n      let t1 = result[j - 3];\n      let t2 = result[j - 2];\n      let t3 = result[j - 1];\n      let t4 = result[j - 4];\n      // SubWord\n      t1 = s[t1];\n      t2 = s[t2];\n      t3 = s[t3];\n      t4 = s[t4];\n      // Rcon\n      t1 = t1 ^ rcon[i];\n      for (let n = 0; n < 4; ++n) {\n        result[j] = t1 ^= result[j - 16];\n        j++;\n        result[j] = t2 ^= result[j - 16];\n        j++;\n        result[j] = t3 ^= result[j - 16];\n        j++;\n        result[j] = t4 ^= result[j - 16];\n        j++;\n      }\n    }\n    return result;\n  }\n}\n\nclass AES256Cipher extends AESBaseCipher {\n  constructor(key) {\n    super();\n\n    this._cyclesOfRepetition = 14;\n    this._keySize = 224; // bits\n\n    this._key = this._expandKey(key);\n  }\n\n  _expandKey(cipherKey) {\n    const b = 240;\n    const s = this._s;\n\n    const result = new Uint8Array(b);\n    result.set(cipherKey);\n\n    let r = 1;\n    let t1, t2, t3, t4;\n    for (let j = 32, i = 1; j < b; ++i) {\n      if (j % 32 === 16) {\n        t1 = s[t1];\n        t2 = s[t2];\n        t3 = s[t3];\n        t4 = s[t4];\n      } else if (j % 32 === 0) {\n        // RotWord\n        t1 = result[j - 3];\n        t2 = result[j - 2];\n        t3 = result[j - 1];\n        t4 = result[j - 4];\n        // SubWord\n        t1 = s[t1];\n        t2 = s[t2];\n        t3 = s[t3];\n        t4 = s[t4];\n        // Rcon\n        t1 = t1 ^ r;\n        if ((r <<= 1) >= 256) {\n          r = (r ^ 0x1b) & 0xff;\n        }\n      }\n\n      for (let n = 0; n < 4; ++n) {\n        result[j] = t1 ^= result[j - 32];\n        j++;\n        result[j] = t2 ^= result[j - 32];\n        j++;\n        result[j] = t3 ^= result[j - 32];\n        j++;\n        result[j] = t4 ^= result[j - 32];\n        j++;\n      }\n    }\n    return result;\n  }\n}\n\nvar PDF17 = (function PDF17Closure() {\n  function compareByteArrays(array1, array2) {\n    if (array1.length !== array2.length) {\n      return false;\n    }\n    for (var i = 0; i < array1.length; i++) {\n      if (array1[i] !== array2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // eslint-disable-next-line no-shadow\n  function PDF17() {}\n\n  PDF17.prototype = {\n    checkOwnerPassword: function PDF17_checkOwnerPassword(\n      password,\n      ownerValidationSalt,\n      userBytes,\n      ownerPassword\n    ) {\n      var hashData = new Uint8Array(password.length + 56);\n      hashData.set(password, 0);\n      hashData.set(ownerValidationSalt, password.length);\n      hashData.set(userBytes, password.length + ownerValidationSalt.length);\n      var result = calculateSHA256(hashData, 0, hashData.length);\n      return compareByteArrays(result, ownerPassword);\n    },\n    checkUserPassword: function PDF17_checkUserPassword(\n      password,\n      userValidationSalt,\n      userPassword\n    ) {\n      var hashData = new Uint8Array(password.length + 8);\n      hashData.set(password, 0);\n      hashData.set(userValidationSalt, password.length);\n      var result = calculateSHA256(hashData, 0, hashData.length);\n      return compareByteArrays(result, userPassword);\n    },\n    getOwnerKey: function PDF17_getOwnerKey(\n      password,\n      ownerKeySalt,\n      userBytes,\n      ownerEncryption\n    ) {\n      var hashData = new Uint8Array(password.length + 56);\n      hashData.set(password, 0);\n      hashData.set(ownerKeySalt, password.length);\n      hashData.set(userBytes, password.length + ownerKeySalt.length);\n      var key = calculateSHA256(hashData, 0, hashData.length);\n      var cipher = new AES256Cipher(key);\n      return cipher.decryptBlock(ownerEncryption, false, new Uint8Array(16));\n    },\n    getUserKey: function PDF17_getUserKey(\n      password,\n      userKeySalt,\n      userEncryption\n    ) {\n      var hashData = new Uint8Array(password.length + 8);\n      hashData.set(password, 0);\n      hashData.set(userKeySalt, password.length);\n      // `key` is the decryption key for the UE string.\n      var key = calculateSHA256(hashData, 0, hashData.length);\n      var cipher = new AES256Cipher(key);\n      return cipher.decryptBlock(userEncryption, false, new Uint8Array(16));\n    },\n  };\n  return PDF17;\n})();\n\nvar PDF20 = (function PDF20Closure() {\n  function concatArrays(array1, array2) {\n    var t = new Uint8Array(array1.length + array2.length);\n    t.set(array1, 0);\n    t.set(array2, array1.length);\n    return t;\n  }\n\n  function calculatePDF20Hash(password, input, userBytes) {\n    // This refers to Algorithm 2.B as defined in ISO 32000-2.\n    var k = calculateSHA256(input, 0, input.length).subarray(0, 32);\n    var e = [0];\n    var i = 0;\n    while (i < 64 || e[e.length - 1] > i - 32) {\n      var arrayLength = password.length + k.length + userBytes.length;\n\n      var k1 = new Uint8Array(arrayLength * 64);\n      var array = concatArrays(password, k);\n      array = concatArrays(array, userBytes);\n      for (var j = 0, pos = 0; j < 64; j++, pos += arrayLength) {\n        k1.set(array, pos);\n      }\n      // AES128 CBC NO PADDING with first 16 bytes of k as the key\n      // and the second 16 as the iv.\n      var cipher = new AES128Cipher(k.subarray(0, 16));\n      e = cipher.encrypt(k1, k.subarray(16, 32));\n      // Now we have to take the first 16 bytes of an unsigned big endian\n      // integer and compute the remainder modulo 3. That is a fairly large\n      // number and JavaScript isn't going to handle that well, so we're using\n      // a trick that allows us to perform modulo math byte by byte.\n      var remainder = 0;\n      for (var z = 0; z < 16; z++) {\n        remainder *= 256 % 3;\n        remainder %= 3;\n        remainder += (e[z] >>> 0) % 3;\n        remainder %= 3;\n      }\n      if (remainder === 0) {\n        k = calculateSHA256(e, 0, e.length);\n      } else if (remainder === 1) {\n        k = calculateSHA384(e, 0, e.length);\n      } else if (remainder === 2) {\n        k = calculateSHA512(e, 0, e.length);\n      }\n      i++;\n    }\n    return k.subarray(0, 32);\n  }\n\n  // eslint-disable-next-line no-shadow\n  function PDF20() {}\n\n  function compareByteArrays(array1, array2) {\n    if (array1.length !== array2.length) {\n      return false;\n    }\n    for (var i = 0; i < array1.length; i++) {\n      if (array1[i] !== array2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  PDF20.prototype = {\n    hash: function PDF20_hash(password, concatBytes, userBytes) {\n      return calculatePDF20Hash(password, concatBytes, userBytes);\n    },\n    checkOwnerPassword: function PDF20_checkOwnerPassword(\n      password,\n      ownerValidationSalt,\n      userBytes,\n      ownerPassword\n    ) {\n      var hashData = new Uint8Array(password.length + 56);\n      hashData.set(password, 0);\n      hashData.set(ownerValidationSalt, password.length);\n      hashData.set(userBytes, password.length + ownerValidationSalt.length);\n      var result = calculatePDF20Hash(password, hashData, userBytes);\n      return compareByteArrays(result, ownerPassword);\n    },\n    checkUserPassword: function PDF20_checkUserPassword(\n      password,\n      userValidationSalt,\n      userPassword\n    ) {\n      var hashData = new Uint8Array(password.length + 8);\n      hashData.set(password, 0);\n      hashData.set(userValidationSalt, password.length);\n      var result = calculatePDF20Hash(password, hashData, []);\n      return compareByteArrays(result, userPassword);\n    },\n    getOwnerKey: function PDF20_getOwnerKey(\n      password,\n      ownerKeySalt,\n      userBytes,\n      ownerEncryption\n    ) {\n      var hashData = new Uint8Array(password.length + 56);\n      hashData.set(password, 0);\n      hashData.set(ownerKeySalt, password.length);\n      hashData.set(userBytes, password.length + ownerKeySalt.length);\n      var key = calculatePDF20Hash(password, hashData, userBytes);\n      var cipher = new AES256Cipher(key);\n      return cipher.decryptBlock(ownerEncryption, false, new Uint8Array(16));\n    },\n    getUserKey: function PDF20_getUserKey(\n      password,\n      userKeySalt,\n      userEncryption\n    ) {\n      var hashData = new Uint8Array(password.length + 8);\n      hashData.set(password, 0);\n      hashData.set(userKeySalt, password.length);\n      // `key` is the decryption key for the UE string.\n      var key = calculatePDF20Hash(password, hashData, []);\n      var cipher = new AES256Cipher(key);\n      return cipher.decryptBlock(userEncryption, false, new Uint8Array(16));\n    },\n  };\n  return PDF20;\n})();\n\nvar CipherTransform = (function CipherTransformClosure() {\n  // eslint-disable-next-line no-shadow\n  function CipherTransform(stringCipherConstructor, streamCipherConstructor) {\n    this.StringCipherConstructor = stringCipherConstructor;\n    this.StreamCipherConstructor = streamCipherConstructor;\n  }\n\n  CipherTransform.prototype = {\n    createStream: function CipherTransform_createStream(stream, length) {\n      var cipher = new this.StreamCipherConstructor();\n      return new DecryptStream(\n        stream,\n        length,\n        function cipherTransformDecryptStream(data, finalize) {\n          return cipher.decryptBlock(data, finalize);\n        }\n      );\n    },\n    decryptString: function CipherTransform_decryptString(s) {\n      var cipher = new this.StringCipherConstructor();\n      var data = stringToBytes(s);\n      data = cipher.decryptBlock(data, true);\n      return bytesToString(data);\n    },\n  };\n  return CipherTransform;\n})();\n\nvar CipherTransformFactory = (function CipherTransformFactoryClosure() {\n  // prettier-ignore\n  var defaultPasswordBytes = new Uint8Array([\n    0x28, 0xBF, 0x4E, 0x5E, 0x4E, 0x75, 0x8A, 0x41,\n    0x64, 0x00, 0x4E, 0x56, 0xFF, 0xFA, 0x01, 0x08,\n    0x2E, 0x2E, 0x00, 0xB6, 0xD0, 0x68, 0x3E, 0x80,\n    0x2F, 0x0C, 0xA9, 0xFE, 0x64, 0x53, 0x69, 0x7A]);\n\n  function createEncryptionKey20(\n    revision,\n    password,\n    ownerPassword,\n    ownerValidationSalt,\n    ownerKeySalt,\n    uBytes,\n    userPassword,\n    userValidationSalt,\n    userKeySalt,\n    ownerEncryption,\n    userEncryption,\n    perms\n  ) {\n    if (password) {\n      var passwordLength = Math.min(127, password.length);\n      password = password.subarray(0, passwordLength);\n    } else {\n      password = [];\n    }\n    var pdfAlgorithm;\n    if (revision === 6) {\n      pdfAlgorithm = new PDF20();\n    } else {\n      pdfAlgorithm = new PDF17();\n    }\n\n    if (\n      pdfAlgorithm.checkUserPassword(password, userValidationSalt, userPassword)\n    ) {\n      return pdfAlgorithm.getUserKey(password, userKeySalt, userEncryption);\n    } else if (\n      password.length &&\n      pdfAlgorithm.checkOwnerPassword(\n        password,\n        ownerValidationSalt,\n        uBytes,\n        ownerPassword\n      )\n    ) {\n      return pdfAlgorithm.getOwnerKey(\n        password,\n        ownerKeySalt,\n        uBytes,\n        ownerEncryption\n      );\n    }\n\n    return null;\n  }\n\n  function prepareKeyData(\n    fileId,\n    password,\n    ownerPassword,\n    userPassword,\n    flags,\n    revision,\n    keyLength,\n    encryptMetadata\n  ) {\n    var hashDataSize = 40 + ownerPassword.length + fileId.length;\n    var hashData = new Uint8Array(hashDataSize),\n      i = 0,\n      j,\n      n;\n    if (password) {\n      n = Math.min(32, password.length);\n      for (; i < n; ++i) {\n        hashData[i] = password[i];\n      }\n    }\n    j = 0;\n    while (i < 32) {\n      hashData[i++] = defaultPasswordBytes[j++];\n    }\n    // as now the padded password in the hashData[0..i]\n    for (j = 0, n = ownerPassword.length; j < n; ++j) {\n      hashData[i++] = ownerPassword[j];\n    }\n    hashData[i++] = flags & 0xff;\n    hashData[i++] = (flags >> 8) & 0xff;\n    hashData[i++] = (flags >> 16) & 0xff;\n    hashData[i++] = (flags >>> 24) & 0xff;\n    for (j = 0, n = fileId.length; j < n; ++j) {\n      hashData[i++] = fileId[j];\n    }\n    if (revision >= 4 && !encryptMetadata) {\n      hashData[i++] = 0xff;\n      hashData[i++] = 0xff;\n      hashData[i++] = 0xff;\n      hashData[i++] = 0xff;\n    }\n    var hash = calculateMD5(hashData, 0, i);\n    var keyLengthInBytes = keyLength >> 3;\n    if (revision >= 3) {\n      for (j = 0; j < 50; ++j) {\n        hash = calculateMD5(hash, 0, keyLengthInBytes);\n      }\n    }\n    var encryptionKey = hash.subarray(0, keyLengthInBytes);\n    var cipher, checkData;\n\n    if (revision >= 3) {\n      for (i = 0; i < 32; ++i) {\n        hashData[i] = defaultPasswordBytes[i];\n      }\n      for (j = 0, n = fileId.length; j < n; ++j) {\n        hashData[i++] = fileId[j];\n      }\n      cipher = new ARCFourCipher(encryptionKey);\n      checkData = cipher.encryptBlock(calculateMD5(hashData, 0, i));\n      n = encryptionKey.length;\n      var derivedKey = new Uint8Array(n),\n        k;\n      for (j = 1; j <= 19; ++j) {\n        for (k = 0; k < n; ++k) {\n          derivedKey[k] = encryptionKey[k] ^ j;\n        }\n        cipher = new ARCFourCipher(derivedKey);\n        checkData = cipher.encryptBlock(checkData);\n      }\n      for (j = 0, n = checkData.length; j < n; ++j) {\n        if (userPassword[j] !== checkData[j]) {\n          return null;\n        }\n      }\n    } else {\n      cipher = new ARCFourCipher(encryptionKey);\n      checkData = cipher.encryptBlock(defaultPasswordBytes);\n      for (j = 0, n = checkData.length; j < n; ++j) {\n        if (userPassword[j] !== checkData[j]) {\n          return null;\n        }\n      }\n    }\n    return encryptionKey;\n  }\n\n  function decodeUserPassword(password, ownerPassword, revision, keyLength) {\n    var hashData = new Uint8Array(32),\n      i = 0,\n      j,\n      n;\n    n = Math.min(32, password.length);\n    for (; i < n; ++i) {\n      hashData[i] = password[i];\n    }\n    j = 0;\n    while (i < 32) {\n      hashData[i++] = defaultPasswordBytes[j++];\n    }\n    var hash = calculateMD5(hashData, 0, i);\n    var keyLengthInBytes = keyLength >> 3;\n    if (revision >= 3) {\n      for (j = 0; j < 50; ++j) {\n        hash = calculateMD5(hash, 0, hash.length);\n      }\n    }\n\n    var cipher, userPassword;\n    if (revision >= 3) {\n      userPassword = ownerPassword;\n      var derivedKey = new Uint8Array(keyLengthInBytes),\n        k;\n      for (j = 19; j >= 0; j--) {\n        for (k = 0; k < keyLengthInBytes; ++k) {\n          derivedKey[k] = hash[k] ^ j;\n        }\n        cipher = new ARCFourCipher(derivedKey);\n        userPassword = cipher.encryptBlock(userPassword);\n      }\n    } else {\n      cipher = new ARCFourCipher(hash.subarray(0, keyLengthInBytes));\n      userPassword = cipher.encryptBlock(ownerPassword);\n    }\n    return userPassword;\n  }\n\n  var identityName = Name.get(\"Identity\");\n\n  // eslint-disable-next-line no-shadow\n  function CipherTransformFactory(dict, fileId, password) {\n    var filter = dict.get(\"Filter\");\n    if (!isName(filter, \"Standard\")) {\n      throw new FormatError(\"unknown encryption method\");\n    }\n    this.dict = dict;\n    var algorithm = dict.get(\"V\");\n    if (\n      !Number.isInteger(algorithm) ||\n      (algorithm !== 1 && algorithm !== 2 && algorithm !== 4 && algorithm !== 5)\n    ) {\n      throw new FormatError(\"unsupported encryption algorithm\");\n    }\n    this.algorithm = algorithm;\n    var keyLength = dict.get(\"Length\");\n    if (!keyLength) {\n      // Spec asks to rely on encryption dictionary's Length entry, however\n      // some PDFs don't have it. Trying to recover.\n      if (algorithm <= 3) {\n        // For 1 and 2 it's fixed to 40-bit, for 3 40-bit is a minimal value.\n        keyLength = 40;\n      } else {\n        // Trying to find default handler -- it usually has Length.\n        var cfDict = dict.get(\"CF\");\n        var streamCryptoName = dict.get(\"StmF\");\n        if (isDict(cfDict) && isName(streamCryptoName)) {\n          cfDict.suppressEncryption = true; // See comment below.\n          var handlerDict = cfDict.get(streamCryptoName.name);\n          keyLength = (handlerDict && handlerDict.get(\"Length\")) || 128;\n          if (keyLength < 40) {\n            // Sometimes it's incorrect value of bits, generators specify bytes.\n            keyLength <<= 3;\n          }\n        }\n      }\n    }\n    if (!Number.isInteger(keyLength) || keyLength < 40 || keyLength % 8 !== 0) {\n      throw new FormatError(\"invalid key length\");\n    }\n\n    // prepare keys\n    var ownerPassword = stringToBytes(dict.get(\"O\")).subarray(0, 32);\n    var userPassword = stringToBytes(dict.get(\"U\")).subarray(0, 32);\n    var flags = dict.get(\"P\");\n    var revision = dict.get(\"R\");\n    // meaningful when V is 4 or 5\n    var encryptMetadata =\n      (algorithm === 4 || algorithm === 5) &&\n      dict.get(\"EncryptMetadata\") !== false;\n    this.encryptMetadata = encryptMetadata;\n\n    var fileIdBytes = stringToBytes(fileId);\n    var passwordBytes;\n    if (password) {\n      if (revision === 6) {\n        try {\n          password = utf8StringToString(password);\n        } catch (ex) {\n          warn(\n            \"CipherTransformFactory: \" +\n              \"Unable to convert UTF8 encoded password.\"\n          );\n        }\n      }\n      passwordBytes = stringToBytes(password);\n    }\n\n    var encryptionKey;\n    if (algorithm !== 5) {\n      encryptionKey = prepareKeyData(\n        fileIdBytes,\n        passwordBytes,\n        ownerPassword,\n        userPassword,\n        flags,\n        revision,\n        keyLength,\n        encryptMetadata\n      );\n    } else {\n      var ownerValidationSalt = stringToBytes(dict.get(\"O\")).subarray(32, 40);\n      var ownerKeySalt = stringToBytes(dict.get(\"O\")).subarray(40, 48);\n      var uBytes = stringToBytes(dict.get(\"U\")).subarray(0, 48);\n      var userValidationSalt = stringToBytes(dict.get(\"U\")).subarray(32, 40);\n      var userKeySalt = stringToBytes(dict.get(\"U\")).subarray(40, 48);\n      var ownerEncryption = stringToBytes(dict.get(\"OE\"));\n      var userEncryption = stringToBytes(dict.get(\"UE\"));\n      var perms = stringToBytes(dict.get(\"Perms\"));\n      encryptionKey = createEncryptionKey20(\n        revision,\n        passwordBytes,\n        ownerPassword,\n        ownerValidationSalt,\n        ownerKeySalt,\n        uBytes,\n        userPassword,\n        userValidationSalt,\n        userKeySalt,\n        ownerEncryption,\n        userEncryption,\n        perms\n      );\n    }\n    if (!encryptionKey && !password) {\n      throw new PasswordException(\n        \"No password given\",\n        PasswordResponses.NEED_PASSWORD\n      );\n    } else if (!encryptionKey && password) {\n      // Attempting use the password as an owner password\n      var decodedPassword = decodeUserPassword(\n        passwordBytes,\n        ownerPassword,\n        revision,\n        keyLength\n      );\n      encryptionKey = prepareKeyData(\n        fileIdBytes,\n        decodedPassword,\n        ownerPassword,\n        userPassword,\n        flags,\n        revision,\n        keyLength,\n        encryptMetadata\n      );\n    }\n\n    if (!encryptionKey) {\n      throw new PasswordException(\n        \"Incorrect Password\",\n        PasswordResponses.INCORRECT_PASSWORD\n      );\n    }\n\n    this.encryptionKey = encryptionKey;\n\n    if (algorithm >= 4) {\n      var cf = dict.get(\"CF\");\n      if (isDict(cf)) {\n        // The 'CF' dictionary itself should not be encrypted, and by setting\n        // `suppressEncryption` we can prevent an infinite loop inside of\n        // `XRef_fetchUncompressed` if the dictionary contains indirect objects\n        // (fixes issue7665.pdf).\n        cf.suppressEncryption = true;\n      }\n      this.cf = cf;\n      this.stmf = dict.get(\"StmF\") || identityName;\n      this.strf = dict.get(\"StrF\") || identityName;\n      this.eff = dict.get(\"EFF\") || this.stmf;\n    }\n  }\n\n  function buildObjectKey(num, gen, encryptionKey, isAes) {\n    var key = new Uint8Array(encryptionKey.length + 9),\n      i,\n      n;\n    for (i = 0, n = encryptionKey.length; i < n; ++i) {\n      key[i] = encryptionKey[i];\n    }\n    key[i++] = num & 0xff;\n    key[i++] = (num >> 8) & 0xff;\n    key[i++] = (num >> 16) & 0xff;\n    key[i++] = gen & 0xff;\n    key[i++] = (gen >> 8) & 0xff;\n    if (isAes) {\n      key[i++] = 0x73;\n      key[i++] = 0x41;\n      key[i++] = 0x6c;\n      key[i++] = 0x54;\n    }\n    var hash = calculateMD5(key, 0, i);\n    return hash.subarray(0, Math.min(encryptionKey.length + 5, 16));\n  }\n\n  function buildCipherConstructor(cf, name, num, gen, key) {\n    if (!isName(name)) {\n      throw new FormatError(\"Invalid crypt filter name.\");\n    }\n    var cryptFilter = cf.get(name.name);\n    var cfm;\n    if (cryptFilter !== null && cryptFilter !== undefined) {\n      cfm = cryptFilter.get(\"CFM\");\n    }\n    if (!cfm || cfm.name === \"None\") {\n      return function cipherTransformFactoryBuildCipherConstructorNone() {\n        return new NullCipher();\n      };\n    }\n    if (cfm.name === \"V2\") {\n      return function cipherTransformFactoryBuildCipherConstructorV2() {\n        return new ARCFourCipher(buildObjectKey(num, gen, key, false));\n      };\n    }\n    if (cfm.name === \"AESV2\") {\n      return function cipherTransformFactoryBuildCipherConstructorAESV2() {\n        return new AES128Cipher(buildObjectKey(num, gen, key, true));\n      };\n    }\n    if (cfm.name === \"AESV3\") {\n      return function cipherTransformFactoryBuildCipherConstructorAESV3() {\n        return new AES256Cipher(key);\n      };\n    }\n    throw new FormatError(\"Unknown crypto method\");\n  }\n\n  CipherTransformFactory.prototype = {\n    createCipherTransform: function CipherTransformFactory_createCipherTransform(\n      num,\n      gen\n    ) {\n      if (this.algorithm === 4 || this.algorithm === 5) {\n        return new CipherTransform(\n          buildCipherConstructor(\n            this.cf,\n            this.stmf,\n            num,\n            gen,\n            this.encryptionKey\n          ),\n          buildCipherConstructor(\n            this.cf,\n            this.strf,\n            num,\n            gen,\n            this.encryptionKey\n          )\n        );\n      }\n      // algorithms 1 and 2\n      var key = buildObjectKey(num, gen, this.encryptionKey, false);\n      var cipherConstructor = function buildCipherCipherConstructor() {\n        return new ARCFourCipher(key);\n      };\n      return new CipherTransform(cipherConstructor, cipherConstructor);\n    },\n  };\n\n  return CipherTransformFactory;\n})();\n\nexport {\n  AES128Cipher,\n  AES256Cipher,\n  ARCFourCipher,\n  CipherTransformFactory,\n  PDF17,\n  PDF20,\n  calculateMD5,\n  calculateSHA256,\n  calculateSHA384,\n  calculateSHA512,\n};\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  FormatError,\n  info,\n  isString,\n  shadow,\n  unreachable,\n  warn,\n} from \"../shared/util.js\";\nimport { isDict, isName, isStream } from \"./primitives.js\";\n\n/**\n * Resizes an RGB image with 3 components.\n * @param {TypedArray} src - The source buffer.\n * @param {TypedArray} dest - The destination buffer.\n * @param {number} w1 - Original width.\n * @param {number} h1 - Original height.\n * @param {number} w2 - New width.\n * @param {number} h2 - New height.\n * @param {number} alpha01 - Size reserved for the alpha channel.\n */\nfunction resizeRgbImage(src, dest, w1, h1, w2, h2, alpha01) {\n  const COMPONENTS = 3;\n  alpha01 = alpha01 !== 1 ? 0 : alpha01;\n  const xRatio = w1 / w2;\n  const yRatio = h1 / h2;\n  let newIndex = 0,\n    oldIndex;\n  const xScaled = new Uint16Array(w2);\n  const w1Scanline = w1 * COMPONENTS;\n\n  for (let i = 0; i < w2; i++) {\n    xScaled[i] = Math.floor(i * xRatio) * COMPONENTS;\n  }\n  for (let i = 0; i < h2; i++) {\n    const py = Math.floor(i * yRatio) * w1Scanline;\n    for (let j = 0; j < w2; j++) {\n      oldIndex = py + xScaled[j];\n      dest[newIndex++] = src[oldIndex++];\n      dest[newIndex++] = src[oldIndex++];\n      dest[newIndex++] = src[oldIndex++];\n      newIndex += alpha01;\n    }\n  }\n}\n\nclass ColorSpace {\n  constructor(name, numComps) {\n    if (this.constructor === ColorSpace) {\n      unreachable(\"Cannot initialize ColorSpace.\");\n    }\n    this.name = name;\n    this.numComps = numComps;\n  }\n\n  /**\n   * Converts the color value to the RGB color. The color components are\n   * located in the src array starting from the srcOffset. Returns the array\n   * of the rgb components, each value ranging from [0,255].\n   */\n  getRgb(src, srcOffset) {\n    const rgb = new Uint8ClampedArray(3);\n    this.getRgbItem(src, srcOffset, rgb, 0);\n    return rgb;\n  }\n\n  /**\n   * Converts the color value to the RGB color, similar to the getRgb method.\n   * The result placed into the dest array starting from the destOffset.\n   */\n  getRgbItem(src, srcOffset, dest, destOffset) {\n    unreachable(\"Should not call ColorSpace.getRgbItem\");\n  }\n\n  /**\n   * Converts the specified number of the color values to the RGB colors.\n   * The colors are located in the src array starting from the srcOffset.\n   * The result is placed into the dest array starting from the destOffset.\n   * The src array items shall be in [0,2^bits) range, the dest array items\n   * will be in [0,255] range. alpha01 indicates how many alpha components\n   * there are in the dest array; it will be either 0 (RGB array) or 1 (RGBA\n   * array).\n   */\n  getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n    unreachable(\"Should not call ColorSpace.getRgbBuffer\");\n  }\n\n  /**\n   * Determines the number of bytes required to store the result of the\n   * conversion done by the getRgbBuffer method. As in getRgbBuffer,\n   * |alpha01| is either 0 (RGB output) or 1 (RGBA output).\n   */\n  getOutputLength(inputLength, alpha01) {\n    unreachable(\"Should not call ColorSpace.getOutputLength\");\n  }\n\n  /**\n   * Returns true if source data will be equal the result/output data.\n   */\n  isPassthrough(bits) {\n    return false;\n  }\n\n  /**\n   * Refer to the static `ColorSpace.isDefaultDecode` method below.\n   */\n  isDefaultDecode(decodeMap, bpc) {\n    return ColorSpace.isDefaultDecode(decodeMap, this.numComps);\n  }\n\n  /**\n   * Fills in the RGB colors in the destination buffer.  alpha01 indicates\n   * how many alpha components there are in the dest array; it will be either\n   * 0 (RGB array) or 1 (RGBA array).\n   */\n  fillRgb(\n    dest,\n    originalWidth,\n    originalHeight,\n    width,\n    height,\n    actualHeight,\n    bpc,\n    comps,\n    alpha01\n  ) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      assert(\n        dest instanceof Uint8ClampedArray,\n        'ColorSpace.fillRgb: Unsupported \"dest\" type.'\n      );\n    }\n    const count = originalWidth * originalHeight;\n    let rgbBuf = null;\n    const numComponentColors = 1 << bpc;\n    const needsResizing = originalHeight !== height || originalWidth !== width;\n\n    if (this.isPassthrough(bpc)) {\n      rgbBuf = comps;\n    } else if (\n      this.numComps === 1 &&\n      count > numComponentColors &&\n      this.name !== \"DeviceGray\" &&\n      this.name !== \"DeviceRGB\"\n    ) {\n      // Optimization: create a color map when there is just one component and\n      // we are converting more colors than the size of the color map. We\n      // don't build the map if the colorspace is gray or rgb since those\n      // methods are faster than building a map. This mainly offers big speed\n      // ups for indexed and alternate colorspaces.\n      //\n      // TODO it may be worth while to cache the color map. While running\n      // testing I never hit a cache so I will leave that out for now (perhaps\n      // we are reparsing colorspaces too much?).\n      const allColors =\n        bpc <= 8\n          ? new Uint8Array(numComponentColors)\n          : new Uint16Array(numComponentColors);\n      for (let i = 0; i < numComponentColors; i++) {\n        allColors[i] = i;\n      }\n      const colorMap = new Uint8ClampedArray(numComponentColors * 3);\n      this.getRgbBuffer(\n        allColors,\n        0,\n        numComponentColors,\n        colorMap,\n        0,\n        bpc,\n        /* alpha01 = */ 0\n      );\n\n      if (!needsResizing) {\n        // Fill in the RGB values directly into |dest|.\n        let destPos = 0;\n        for (let i = 0; i < count; ++i) {\n          const key = comps[i] * 3;\n          dest[destPos++] = colorMap[key];\n          dest[destPos++] = colorMap[key + 1];\n          dest[destPos++] = colorMap[key + 2];\n          destPos += alpha01;\n        }\n      } else {\n        rgbBuf = new Uint8Array(count * 3);\n        let rgbPos = 0;\n        for (let i = 0; i < count; ++i) {\n          const key = comps[i] * 3;\n          rgbBuf[rgbPos++] = colorMap[key];\n          rgbBuf[rgbPos++] = colorMap[key + 1];\n          rgbBuf[rgbPos++] = colorMap[key + 2];\n        }\n      }\n    } else {\n      if (!needsResizing) {\n        // Fill in the RGB values directly into |dest|.\n        this.getRgbBuffer(\n          comps,\n          0,\n          width * actualHeight,\n          dest,\n          0,\n          bpc,\n          alpha01\n        );\n      } else {\n        rgbBuf = new Uint8ClampedArray(count * 3);\n        this.getRgbBuffer(comps, 0, count, rgbBuf, 0, bpc, /* alpha01 = */ 0);\n      }\n    }\n\n    if (rgbBuf) {\n      if (needsResizing) {\n        resizeRgbImage(\n          rgbBuf,\n          dest,\n          originalWidth,\n          originalHeight,\n          width,\n          height,\n          alpha01\n        );\n      } else {\n        let destPos = 0,\n          rgbPos = 0;\n        for (let i = 0, ii = width * actualHeight; i < ii; i++) {\n          dest[destPos++] = rgbBuf[rgbPos++];\n          dest[destPos++] = rgbBuf[rgbPos++];\n          dest[destPos++] = rgbBuf[rgbPos++];\n          destPos += alpha01;\n        }\n      }\n    }\n  }\n\n  /**\n   * True if the colorspace has components in the default range of [0, 1].\n   * This should be true for all colorspaces except for lab color spaces\n   * which are [0,100], [-128, 127], [-128, 127].\n   */\n  get usesZeroToOneRange() {\n    return shadow(this, \"usesZeroToOneRange\", true);\n  }\n\n  static parse(cs, xref, res, pdfFunctionFactory) {\n    const IR = this.parseToIR(cs, xref, res, pdfFunctionFactory);\n    return this.fromIR(IR);\n  }\n\n  static fromIR(IR) {\n    const name = Array.isArray(IR) ? IR[0] : IR;\n    let whitePoint, blackPoint, gamma;\n\n    switch (name) {\n      case \"DeviceGrayCS\":\n        return this.singletons.gray;\n      case \"DeviceRgbCS\":\n        return this.singletons.rgb;\n      case \"DeviceCmykCS\":\n        return this.singletons.cmyk;\n      case \"CalGrayCS\":\n        whitePoint = IR[1];\n        blackPoint = IR[2];\n        gamma = IR[3];\n        return new CalGrayCS(whitePoint, blackPoint, gamma);\n      case \"CalRGBCS\":\n        whitePoint = IR[1];\n        blackPoint = IR[2];\n        gamma = IR[3];\n        const matrix = IR[4];\n        return new CalRGBCS(whitePoint, blackPoint, gamma, matrix);\n      case \"PatternCS\":\n        let basePatternCS = IR[1];\n        if (basePatternCS) {\n          basePatternCS = this.fromIR(basePatternCS);\n        }\n        return new PatternCS(basePatternCS);\n      case \"IndexedCS\":\n        const baseIndexedCS = IR[1];\n        const hiVal = IR[2];\n        const lookup = IR[3];\n        return new IndexedCS(this.fromIR(baseIndexedCS), hiVal, lookup);\n      case \"AlternateCS\":\n        const numComps = IR[1];\n        const alt = IR[2];\n        const tintFn = IR[3];\n        return new AlternateCS(numComps, this.fromIR(alt), tintFn);\n      case \"LabCS\":\n        whitePoint = IR[1];\n        blackPoint = IR[2];\n        const range = IR[3];\n        return new LabCS(whitePoint, blackPoint, range);\n      default:\n        throw new FormatError(`Unknown colorspace name: ${name}`);\n    }\n  }\n\n  static parseToIR(cs, xref, res = null, pdfFunctionFactory) {\n    cs = xref.fetchIfRef(cs);\n    if (isName(cs)) {\n      switch (cs.name) {\n        case \"DeviceGray\":\n        case \"G\":\n          return \"DeviceGrayCS\";\n        case \"DeviceRGB\":\n        case \"RGB\":\n          return \"DeviceRgbCS\";\n        case \"DeviceCMYK\":\n        case \"CMYK\":\n          return \"DeviceCmykCS\";\n        case \"Pattern\":\n          return [\"PatternCS\", null];\n        default:\n          if (isDict(res)) {\n            const colorSpaces = res.get(\"ColorSpace\");\n            if (isDict(colorSpaces)) {\n              const resCS = colorSpaces.get(cs.name);\n              if (resCS) {\n                if (isName(resCS)) {\n                  return this.parseToIR(resCS, xref, res, pdfFunctionFactory);\n                }\n                cs = resCS;\n                break;\n              }\n            }\n          }\n          throw new FormatError(`unrecognized colorspace ${cs.name}`);\n      }\n    }\n    if (Array.isArray(cs)) {\n      const mode = xref.fetchIfRef(cs[0]).name;\n      let numComps, params, alt, whitePoint, blackPoint, gamma;\n\n      switch (mode) {\n        case \"DeviceGray\":\n        case \"G\":\n          return \"DeviceGrayCS\";\n        case \"DeviceRGB\":\n        case \"RGB\":\n          return \"DeviceRgbCS\";\n        case \"DeviceCMYK\":\n        case \"CMYK\":\n          return \"DeviceCmykCS\";\n        case \"CalGray\":\n          params = xref.fetchIfRef(cs[1]);\n          whitePoint = params.getArray(\"WhitePoint\");\n          blackPoint = params.getArray(\"BlackPoint\");\n          gamma = params.get(\"Gamma\");\n          return [\"CalGrayCS\", whitePoint, blackPoint, gamma];\n        case \"CalRGB\":\n          params = xref.fetchIfRef(cs[1]);\n          whitePoint = params.getArray(\"WhitePoint\");\n          blackPoint = params.getArray(\"BlackPoint\");\n          gamma = params.getArray(\"Gamma\");\n          const matrix = params.getArray(\"Matrix\");\n          return [\"CalRGBCS\", whitePoint, blackPoint, gamma, matrix];\n        case \"ICCBased\":\n          const stream = xref.fetchIfRef(cs[1]);\n          const dict = stream.dict;\n          numComps = dict.get(\"N\");\n          alt = dict.get(\"Alternate\");\n          if (alt) {\n            const altIR = this.parseToIR(alt, xref, res, pdfFunctionFactory);\n            // Parse the /Alternate CS to ensure that the number of components\n            // are correct, and also (indirectly) that it is not a PatternCS.\n            const altCS = this.fromIR(altIR, pdfFunctionFactory);\n            if (altCS.numComps === numComps) {\n              return altIR;\n            }\n            warn(\"ICCBased color space: Ignoring incorrect /Alternate entry.\");\n          }\n          if (numComps === 1) {\n            return \"DeviceGrayCS\";\n          } else if (numComps === 3) {\n            return \"DeviceRgbCS\";\n          } else if (numComps === 4) {\n            return \"DeviceCmykCS\";\n          }\n          break;\n        case \"Pattern\":\n          let basePatternCS = cs[1] || null;\n          if (basePatternCS) {\n            basePatternCS = this.parseToIR(\n              basePatternCS,\n              xref,\n              res,\n              pdfFunctionFactory\n            );\n          }\n          return [\"PatternCS\", basePatternCS];\n        case \"Indexed\":\n        case \"I\":\n          const baseIndexedCS = this.parseToIR(\n            cs[1],\n            xref,\n            res,\n            pdfFunctionFactory\n          );\n          const hiVal = xref.fetchIfRef(cs[2]) + 1;\n          let lookup = xref.fetchIfRef(cs[3]);\n          if (isStream(lookup)) {\n            lookup = lookup.getBytes();\n          }\n          return [\"IndexedCS\", baseIndexedCS, hiVal, lookup];\n        case \"Separation\":\n        case \"DeviceN\":\n          const name = xref.fetchIfRef(cs[1]);\n          numComps = Array.isArray(name) ? name.length : 1;\n          alt = this.parseToIR(cs[2], xref, res, pdfFunctionFactory);\n          const tintFn = pdfFunctionFactory.create(xref.fetchIfRef(cs[3]));\n          return [\"AlternateCS\", numComps, alt, tintFn];\n        case \"Lab\":\n          params = xref.fetchIfRef(cs[1]);\n          whitePoint = params.getArray(\"WhitePoint\");\n          blackPoint = params.getArray(\"BlackPoint\");\n          const range = params.getArray(\"Range\");\n          return [\"LabCS\", whitePoint, blackPoint, range];\n        default:\n          throw new FormatError(`unimplemented color space object \"${mode}\"`);\n      }\n    }\n    throw new FormatError(`unrecognized color space object: \"${cs}\"`);\n  }\n\n  /**\n   * Checks if a decode map matches the default decode map for a color space.\n   * This handles the general decode maps where there are two values per\n   * component, e.g. [0, 1, 0, 1, 0, 1] for a RGB color.\n   * This does not handle Lab, Indexed, or Pattern decode maps since they are\n   * slightly different.\n   * @param {Array} decode - Decode map (usually from an image).\n   * @param {number} numComps - Number of components the color space has.\n   */\n  static isDefaultDecode(decode, numComps) {\n    if (!Array.isArray(decode)) {\n      return true;\n    }\n    if (numComps * 2 !== decode.length) {\n      warn(\"The decode map is not the correct length\");\n      return true;\n    }\n    for (let i = 0, ii = decode.length; i < ii; i += 2) {\n      if (decode[i] !== 0 || decode[i + 1] !== 1) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  static get singletons() {\n    return shadow(this, \"singletons\", {\n      get gray() {\n        return shadow(this, \"gray\", new DeviceGrayCS());\n      },\n      get rgb() {\n        return shadow(this, \"rgb\", new DeviceRgbCS());\n      },\n      get cmyk() {\n        return shadow(this, \"cmyk\", new DeviceCmykCS());\n      },\n    });\n  }\n}\n\n/**\n * Alternate color space handles both Separation and DeviceN color spaces.  A\n * Separation color space is actually just a DeviceN with one color component.\n * Both color spaces use a tinting function to convert colors to a base color\n * space.\n *\n * The default color is `new Float32Array(new Array(numComps).fill(1))`.\n */\nclass AlternateCS extends ColorSpace {\n  constructor(numComps, base, tintFn) {\n    super(\"Alternate\", numComps);\n    this.base = base;\n    this.tintFn = tintFn;\n    this.tmpBuf = new Float32Array(base.numComps);\n  }\n\n  getRgbItem(src, srcOffset, dest, destOffset) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      assert(\n        dest instanceof Uint8ClampedArray,\n        'AlternateCS.getRgbItem: Unsupported \"dest\" type.'\n      );\n    }\n    const tmpBuf = this.tmpBuf;\n    this.tintFn(src, srcOffset, tmpBuf, 0);\n    this.base.getRgbItem(tmpBuf, 0, dest, destOffset);\n  }\n\n  getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      assert(\n        dest instanceof Uint8ClampedArray,\n        'AlternateCS.getRgbBuffer: Unsupported \"dest\" type.'\n      );\n    }\n    const tintFn = this.tintFn;\n    const base = this.base;\n    const scale = 1 / ((1 << bits) - 1);\n    const baseNumComps = base.numComps;\n    const usesZeroToOneRange = base.usesZeroToOneRange;\n    const isPassthrough =\n      (base.isPassthrough(8) || !usesZeroToOneRange) && alpha01 === 0;\n    let pos = isPassthrough ? destOffset : 0;\n    const baseBuf = isPassthrough\n      ? dest\n      : new Uint8ClampedArray(baseNumComps * count);\n    const numComps = this.numComps;\n\n    const scaled = new Float32Array(numComps);\n    const tinted = new Float32Array(baseNumComps);\n    let i, j;\n\n    for (i = 0; i < count; i++) {\n      for (j = 0; j < numComps; j++) {\n        scaled[j] = src[srcOffset++] * scale;\n      }\n      tintFn(scaled, 0, tinted, 0);\n      if (usesZeroToOneRange) {\n        for (j = 0; j < baseNumComps; j++) {\n          baseBuf[pos++] = tinted[j] * 255;\n        }\n      } else {\n        base.getRgbItem(tinted, 0, baseBuf, pos);\n        pos += baseNumComps;\n      }\n    }\n\n    if (!isPassthrough) {\n      base.getRgbBuffer(baseBuf, 0, count, dest, destOffset, 8, alpha01);\n    }\n  }\n\n  getOutputLength(inputLength, alpha01) {\n    return this.base.getOutputLength(\n      (inputLength * this.base.numComps) / this.numComps,\n      alpha01\n    );\n  }\n}\n\nclass PatternCS extends ColorSpace {\n  constructor(baseCS) {\n    super(\"Pattern\", null);\n    this.base = baseCS;\n  }\n\n  isDefaultDecode(decodeMap, bpc) {\n    unreachable(\"Should not call PatternCS.isDefaultDecode\");\n  }\n}\n\n/**\n * The default color is `new Uint8Array([0])`.\n */\nclass IndexedCS extends ColorSpace {\n  constructor(base, highVal, lookup) {\n    super(\"Indexed\", 1);\n    this.base = base;\n    this.highVal = highVal;\n\n    const baseNumComps = base.numComps;\n    const length = baseNumComps * highVal;\n\n    if (isStream(lookup)) {\n      this.lookup = new Uint8Array(length);\n      const bytes = lookup.getBytes(length);\n      this.lookup.set(bytes);\n    } else if (isString(lookup)) {\n      this.lookup = new Uint8Array(length);\n      for (let i = 0; i < length; ++i) {\n        this.lookup[i] = lookup.charCodeAt(i);\n      }\n    } else if (lookup instanceof Uint8Array) {\n      this.lookup = lookup;\n    } else {\n      throw new FormatError(`Unrecognized lookup table: ${lookup}`);\n    }\n  }\n\n  getRgbItem(src, srcOffset, dest, destOffset) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      assert(\n        dest instanceof Uint8ClampedArray,\n        'IndexedCS.getRgbItem: Unsupported \"dest\" type.'\n      );\n    }\n    const numComps = this.base.numComps;\n    const start = src[srcOffset] * numComps;\n    this.base.getRgbBuffer(this.lookup, start, 1, dest, destOffset, 8, 0);\n  }\n\n  getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      assert(\n        dest instanceof Uint8ClampedArray,\n        'IndexedCS.getRgbBuffer: Unsupported \"dest\" type.'\n      );\n    }\n    const base = this.base;\n    const numComps = base.numComps;\n    const outputDelta = base.getOutputLength(numComps, alpha01);\n    const lookup = this.lookup;\n\n    for (let i = 0; i < count; ++i) {\n      const lookupPos = src[srcOffset++] * numComps;\n      base.getRgbBuffer(lookup, lookupPos, 1, dest, destOffset, 8, alpha01);\n      destOffset += outputDelta;\n    }\n  }\n\n  getOutputLength(inputLength, alpha01) {\n    return this.base.getOutputLength(inputLength * this.base.numComps, alpha01);\n  }\n\n  isDefaultDecode(decodeMap, bpc) {\n    if (!Array.isArray(decodeMap)) {\n      return true;\n    }\n    if (decodeMap.length !== 2) {\n      warn(\"Decode map length is not correct\");\n      return true;\n    }\n    if (!Number.isInteger(bpc) || bpc < 1) {\n      warn(\"Bits per component is not correct\");\n      return true;\n    }\n    return decodeMap[0] === 0 && decodeMap[1] === (1 << bpc) - 1;\n  }\n}\n\n/**\n * The default color is `new Float32Array([0])`.\n */\nclass DeviceGrayCS extends ColorSpace {\n  constructor() {\n    super(\"DeviceGray\", 1);\n  }\n\n  getRgbItem(src, srcOffset, dest, destOffset) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      assert(\n        dest instanceof Uint8ClampedArray,\n        'DeviceGrayCS.getRgbItem: Unsupported \"dest\" type.'\n      );\n    }\n    const c = src[srcOffset] * 255;\n    dest[destOffset] = dest[destOffset + 1] = dest[destOffset + 2] = c;\n  }\n\n  getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      assert(\n        dest instanceof Uint8ClampedArray,\n        'DeviceGrayCS.getRgbBuffer: Unsupported \"dest\" type.'\n      );\n    }\n    const scale = 255 / ((1 << bits) - 1);\n    let j = srcOffset,\n      q = destOffset;\n    for (let i = 0; i < count; ++i) {\n      const c = scale * src[j++];\n      dest[q++] = c;\n      dest[q++] = c;\n      dest[q++] = c;\n      q += alpha01;\n    }\n  }\n\n  getOutputLength(inputLength, alpha01) {\n    return inputLength * (3 + alpha01);\n  }\n}\n\n/**\n * The default color is `new Float32Array([0, 0, 0])`.\n */\nclass DeviceRgbCS extends ColorSpace {\n  constructor() {\n    super(\"DeviceRGB\", 3);\n  }\n\n  getRgbItem(src, srcOffset, dest, destOffset) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      assert(\n        dest instanceof Uint8ClampedArray,\n        'DeviceRgbCS.getRgbItem: Unsupported \"dest\" type.'\n      );\n    }\n    dest[destOffset] = src[srcOffset] * 255;\n    dest[destOffset + 1] = src[srcOffset + 1] * 255;\n    dest[destOffset + 2] = src[srcOffset + 2] * 255;\n  }\n\n  getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      assert(\n        dest instanceof Uint8ClampedArray,\n        'DeviceRgbCS.getRgbBuffer: Unsupported \"dest\" type.'\n      );\n    }\n    if (bits === 8 && alpha01 === 0) {\n      dest.set(src.subarray(srcOffset, srcOffset + count * 3), destOffset);\n      return;\n    }\n    const scale = 255 / ((1 << bits) - 1);\n    let j = srcOffset,\n      q = destOffset;\n    for (let i = 0; i < count; ++i) {\n      dest[q++] = scale * src[j++];\n      dest[q++] = scale * src[j++];\n      dest[q++] = scale * src[j++];\n      q += alpha01;\n    }\n  }\n\n  getOutputLength(inputLength, alpha01) {\n    return ((inputLength * (3 + alpha01)) / 3) | 0;\n  }\n\n  isPassthrough(bits) {\n    return bits === 8;\n  }\n}\n\n/**\n * The default color is `new Float32Array([0, 0, 0, 1])`.\n */\nconst DeviceCmykCS = (function DeviceCmykCSClosure() {\n  // The coefficients below was found using numerical analysis: the method of\n  // steepest descent for the sum((f_i - color_value_i)^2) for r/g/b colors,\n  // where color_value is the tabular value from the table of sampled RGB colors\n  // from CMYK US Web Coated (SWOP) colorspace, and f_i is the corresponding\n  // CMYK color conversion using the estimation below:\n  //   f(A, B,.. N) = Acc+Bcm+Ccy+Dck+c+Fmm+Gmy+Hmk+Im+Jyy+Kyk+Ly+Mkk+Nk+255\n  function convertToRgb(src, srcOffset, srcScale, dest, destOffset) {\n    const c = src[srcOffset] * srcScale;\n    const m = src[srcOffset + 1] * srcScale;\n    const y = src[srcOffset + 2] * srcScale;\n    const k = src[srcOffset + 3] * srcScale;\n\n    dest[destOffset] =\n      255 +\n      c *\n        (-4.387332384609988 * c +\n          54.48615194189176 * m +\n          18.82290502165302 * y +\n          212.25662451639585 * k +\n          -285.2331026137004) +\n      m *\n        (1.7149763477362134 * m -\n          5.6096736904047315 * y +\n          -17.873870861415444 * k -\n          5.497006427196366) +\n      y *\n        (-2.5217340131683033 * y - 21.248923337353073 * k + 17.5119270841813) +\n      k * (-21.86122147463605 * k - 189.48180835922747);\n\n    dest[destOffset + 1] =\n      255 +\n      c *\n        (8.841041422036149 * c +\n          60.118027045597366 * m +\n          6.871425592049007 * y +\n          31.159100130055922 * k +\n          -79.2970844816548) +\n      m *\n        (-15.310361306967817 * m +\n          17.575251261109482 * y +\n          131.35250912493976 * k -\n          190.9453302588951) +\n      y * (4.444339102852739 * y + 9.8632861493405 * k - 24.86741582555878) +\n      k * (-20.737325471181034 * k - 187.80453709719578);\n\n    dest[destOffset + 2] =\n      255 +\n      c *\n        (0.8842522430003296 * c +\n          8.078677503112928 * m +\n          30.89978309703729 * y -\n          0.23883238689178934 * k +\n          -14.183576799673286) +\n      m *\n        (10.49593273432072 * m +\n          63.02378494754052 * y +\n          50.606957656360734 * k -\n          112.23884253719248) +\n      y *\n        (0.03296041114873217 * y +\n          115.60384449646641 * k +\n          -193.58209356861505) +\n      k * (-22.33816807309886 * k - 180.12613974708367);\n  }\n\n  // eslint-disable-next-line no-shadow\n  class DeviceCmykCS extends ColorSpace {\n    constructor() {\n      super(\"DeviceCMYK\", 4);\n    }\n\n    getRgbItem(src, srcOffset, dest, destOffset) {\n      if (\n        typeof PDFJSDev === \"undefined\" ||\n        PDFJSDev.test(\"!PRODUCTION || TESTING\")\n      ) {\n        assert(\n          dest instanceof Uint8ClampedArray,\n          'DeviceCmykCS.getRgbItem: Unsupported \"dest\" type.'\n        );\n      }\n      convertToRgb(src, srcOffset, 1, dest, destOffset);\n    }\n\n    getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n      if (\n        typeof PDFJSDev === \"undefined\" ||\n        PDFJSDev.test(\"!PRODUCTION || TESTING\")\n      ) {\n        assert(\n          dest instanceof Uint8ClampedArray,\n          'DeviceCmykCS.getRgbBuffer: Unsupported \"dest\" type.'\n        );\n      }\n      const scale = 1 / ((1 << bits) - 1);\n      for (let i = 0; i < count; i++) {\n        convertToRgb(src, srcOffset, scale, dest, destOffset);\n        srcOffset += 4;\n        destOffset += 3 + alpha01;\n      }\n    }\n\n    getOutputLength(inputLength, alpha01) {\n      return ((inputLength / 4) * (3 + alpha01)) | 0;\n    }\n  }\n  return DeviceCmykCS;\n})();\n\n/**\n * CalGrayCS: Based on \"PDF Reference, Sixth Ed\", p.245\n *\n * The default color is `new Float32Array([0])`.\n */\nconst CalGrayCS = (function CalGrayCSClosure() {\n  function convertToRgb(cs, src, srcOffset, dest, destOffset, scale) {\n    // A represents a gray component of a calibrated gray space.\n    // A <---> AG in the spec\n    const A = src[srcOffset] * scale;\n    const AG = A ** cs.G;\n\n    // Computes L as per spec. ( = cs.YW * AG )\n    // Except if other than default BlackPoint values are used.\n    const L = cs.YW * AG;\n    // http://www.poynton.com/notes/colour_and_gamma/ColorFAQ.html, Ch 4.\n    // Convert values to rgb range [0, 255].\n    const val = Math.max(295.8 * L ** 0.333333333333333333 - 40.8, 0);\n    dest[destOffset] = val;\n    dest[destOffset + 1] = val;\n    dest[destOffset + 2] = val;\n  }\n\n  // eslint-disable-next-line no-shadow\n  class CalGrayCS extends ColorSpace {\n    constructor(whitePoint, blackPoint, gamma) {\n      super(\"CalGray\", 1);\n\n      if (!whitePoint) {\n        throw new FormatError(\n          \"WhitePoint missing - required for color space CalGray\"\n        );\n      }\n      blackPoint = blackPoint || [0, 0, 0];\n      gamma = gamma || 1;\n\n      // Translate arguments to spec variables.\n      this.XW = whitePoint[0];\n      this.YW = whitePoint[1];\n      this.ZW = whitePoint[2];\n\n      this.XB = blackPoint[0];\n      this.YB = blackPoint[1];\n      this.ZB = blackPoint[2];\n\n      this.G = gamma;\n\n      // Validate variables as per spec.\n      if (this.XW < 0 || this.ZW < 0 || this.YW !== 1) {\n        throw new FormatError(\n          `Invalid WhitePoint components for ${this.name}` +\n            \", no fallback available\"\n        );\n      }\n\n      if (this.XB < 0 || this.YB < 0 || this.ZB < 0) {\n        info(`Invalid BlackPoint for ${this.name}, falling back to default.`);\n        this.XB = this.YB = this.ZB = 0;\n      }\n\n      if (this.XB !== 0 || this.YB !== 0 || this.ZB !== 0) {\n        warn(\n          `${this.name}, BlackPoint: XB: ${this.XB}, YB: ${this.YB}, ` +\n            `ZB: ${this.ZB}, only default values are supported.`\n        );\n      }\n\n      if (this.G < 1) {\n        info(\n          `Invalid Gamma: ${this.G} for ${this.name}, ` +\n            \"falling back to default.\"\n        );\n        this.G = 1;\n      }\n    }\n\n    getRgbItem(src, srcOffset, dest, destOffset) {\n      if (\n        typeof PDFJSDev === \"undefined\" ||\n        PDFJSDev.test(\"!PRODUCTION || TESTING\")\n      ) {\n        assert(\n          dest instanceof Uint8ClampedArray,\n          'CalGrayCS.getRgbItem: Unsupported \"dest\" type.'\n        );\n      }\n      convertToRgb(this, src, srcOffset, dest, destOffset, 1);\n    }\n\n    getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n      if (\n        typeof PDFJSDev === \"undefined\" ||\n        PDFJSDev.test(\"!PRODUCTION || TESTING\")\n      ) {\n        assert(\n          dest instanceof Uint8ClampedArray,\n          'CalGrayCS.getRgbBuffer: Unsupported \"dest\" type.'\n        );\n      }\n      const scale = 1 / ((1 << bits) - 1);\n\n      for (let i = 0; i < count; ++i) {\n        convertToRgb(this, src, srcOffset, dest, destOffset, scale);\n        srcOffset += 1;\n        destOffset += 3 + alpha01;\n      }\n    }\n\n    getOutputLength(inputLength, alpha01) {\n      return inputLength * (3 + alpha01);\n    }\n  }\n  return CalGrayCS;\n})();\n\n/**\n * CalRGBCS: Based on \"PDF Reference, Sixth Ed\", p.247\n *\n * The default color is `new Float32Array([0, 0, 0])`.\n */\nconst CalRGBCS = (function CalRGBCSClosure() {\n  // See http://www.brucelindbloom.com/index.html?Eqn_ChromAdapt.html for these\n  // matrices.\n  // prettier-ignore\n  const BRADFORD_SCALE_MATRIX = new Float32Array([\n    0.8951, 0.2664, -0.1614,\n    -0.7502, 1.7135, 0.0367,\n    0.0389, -0.0685, 1.0296]);\n\n  // prettier-ignore\n  const BRADFORD_SCALE_INVERSE_MATRIX = new Float32Array([\n    0.9869929, -0.1470543, 0.1599627,\n    0.4323053, 0.5183603, 0.0492912,\n    -0.0085287, 0.0400428, 0.9684867]);\n\n  // See http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html.\n  // prettier-ignore\n  const SRGB_D65_XYZ_TO_RGB_MATRIX = new Float32Array([\n    3.2404542, -1.5371385, -0.4985314,\n    -0.9692660, 1.8760108, 0.0415560,\n    0.0556434, -0.2040259, 1.0572252]);\n\n  const FLAT_WHITEPOINT_MATRIX = new Float32Array([1, 1, 1]);\n\n  const tempNormalizeMatrix = new Float32Array(3);\n  const tempConvertMatrix1 = new Float32Array(3);\n  const tempConvertMatrix2 = new Float32Array(3);\n\n  const DECODE_L_CONSTANT = ((8 + 16) / 116) ** 3 / 8.0;\n\n  function matrixProduct(a, b, result) {\n    result[0] = a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n    result[1] = a[3] * b[0] + a[4] * b[1] + a[5] * b[2];\n    result[2] = a[6] * b[0] + a[7] * b[1] + a[8] * b[2];\n  }\n\n  function convertToFlat(sourceWhitePoint, LMS, result) {\n    result[0] = (LMS[0] * 1) / sourceWhitePoint[0];\n    result[1] = (LMS[1] * 1) / sourceWhitePoint[1];\n    result[2] = (LMS[2] * 1) / sourceWhitePoint[2];\n  }\n\n  function convertToD65(sourceWhitePoint, LMS, result) {\n    const D65X = 0.95047;\n    const D65Y = 1;\n    const D65Z = 1.08883;\n\n    result[0] = (LMS[0] * D65X) / sourceWhitePoint[0];\n    result[1] = (LMS[1] * D65Y) / sourceWhitePoint[1];\n    result[2] = (LMS[2] * D65Z) / sourceWhitePoint[2];\n  }\n\n  function sRGBTransferFunction(color) {\n    // See http://en.wikipedia.org/wiki/SRGB.\n    if (color <= 0.0031308) {\n      return adjustToRange(0, 1, 12.92 * color);\n    }\n    return adjustToRange(0, 1, (1 + 0.055) * color ** (1 / 2.4) - 0.055);\n  }\n\n  function adjustToRange(min, max, value) {\n    return Math.max(min, Math.min(max, value));\n  }\n\n  function decodeL(L) {\n    if (L < 0) {\n      return -decodeL(-L);\n    }\n    if (L > 8.0) {\n      return ((L + 16) / 116) ** 3;\n    }\n    return L * DECODE_L_CONSTANT;\n  }\n\n  function compensateBlackPoint(sourceBlackPoint, XYZ_Flat, result) {\n    // In case the blackPoint is already the default blackPoint then there is\n    // no need to do compensation.\n    if (\n      sourceBlackPoint[0] === 0 &&\n      sourceBlackPoint[1] === 0 &&\n      sourceBlackPoint[2] === 0\n    ) {\n      result[0] = XYZ_Flat[0];\n      result[1] = XYZ_Flat[1];\n      result[2] = XYZ_Flat[2];\n      return;\n    }\n\n    // For the blackPoint calculation details, please see\n    // http://www.adobe.com/content/dam/Adobe/en/devnet/photoshop/sdk/\n    // AdobeBPC.pdf.\n    // The destination blackPoint is the default blackPoint [0, 0, 0].\n    const zeroDecodeL = decodeL(0);\n\n    const X_DST = zeroDecodeL;\n    const X_SRC = decodeL(sourceBlackPoint[0]);\n\n    const Y_DST = zeroDecodeL;\n    const Y_SRC = decodeL(sourceBlackPoint[1]);\n\n    const Z_DST = zeroDecodeL;\n    const Z_SRC = decodeL(sourceBlackPoint[2]);\n\n    const X_Scale = (1 - X_DST) / (1 - X_SRC);\n    const X_Offset = 1 - X_Scale;\n\n    const Y_Scale = (1 - Y_DST) / (1 - Y_SRC);\n    const Y_Offset = 1 - Y_Scale;\n\n    const Z_Scale = (1 - Z_DST) / (1 - Z_SRC);\n    const Z_Offset = 1 - Z_Scale;\n\n    result[0] = XYZ_Flat[0] * X_Scale + X_Offset;\n    result[1] = XYZ_Flat[1] * Y_Scale + Y_Offset;\n    result[2] = XYZ_Flat[2] * Z_Scale + Z_Offset;\n  }\n\n  function normalizeWhitePointToFlat(sourceWhitePoint, XYZ_In, result) {\n    // In case the whitePoint is already flat then there is no need to do\n    // normalization.\n    if (sourceWhitePoint[0] === 1 && sourceWhitePoint[2] === 1) {\n      result[0] = XYZ_In[0];\n      result[1] = XYZ_In[1];\n      result[2] = XYZ_In[2];\n      return;\n    }\n\n    const LMS = result;\n    matrixProduct(BRADFORD_SCALE_MATRIX, XYZ_In, LMS);\n\n    const LMS_Flat = tempNormalizeMatrix;\n    convertToFlat(sourceWhitePoint, LMS, LMS_Flat);\n\n    matrixProduct(BRADFORD_SCALE_INVERSE_MATRIX, LMS_Flat, result);\n  }\n\n  function normalizeWhitePointToD65(sourceWhitePoint, XYZ_In, result) {\n    const LMS = result;\n    matrixProduct(BRADFORD_SCALE_MATRIX, XYZ_In, LMS);\n\n    const LMS_D65 = tempNormalizeMatrix;\n    convertToD65(sourceWhitePoint, LMS, LMS_D65);\n\n    matrixProduct(BRADFORD_SCALE_INVERSE_MATRIX, LMS_D65, result);\n  }\n\n  function convertToRgb(cs, src, srcOffset, dest, destOffset, scale) {\n    // A, B and C represent a red, green and blue components of a calibrated\n    // rgb space.\n    const A = adjustToRange(0, 1, src[srcOffset] * scale);\n    const B = adjustToRange(0, 1, src[srcOffset + 1] * scale);\n    const C = adjustToRange(0, 1, src[srcOffset + 2] * scale);\n\n    // A <---> AGR in the spec\n    // B <---> BGG in the spec\n    // C <---> CGB in the spec\n    const AGR = A ** cs.GR;\n    const BGG = B ** cs.GG;\n    const CGB = C ** cs.GB;\n\n    // Computes intermediate variables L, M, N as per spec.\n    // To decode X, Y, Z values map L, M, N directly to them.\n    const X = cs.MXA * AGR + cs.MXB * BGG + cs.MXC * CGB;\n    const Y = cs.MYA * AGR + cs.MYB * BGG + cs.MYC * CGB;\n    const Z = cs.MZA * AGR + cs.MZB * BGG + cs.MZC * CGB;\n\n    // The following calculations are based on this document:\n    // http://www.adobe.com/content/dam/Adobe/en/devnet/photoshop/sdk/\n    // AdobeBPC.pdf.\n    const XYZ = tempConvertMatrix1;\n    XYZ[0] = X;\n    XYZ[1] = Y;\n    XYZ[2] = Z;\n    const XYZ_Flat = tempConvertMatrix2;\n\n    normalizeWhitePointToFlat(cs.whitePoint, XYZ, XYZ_Flat);\n\n    const XYZ_Black = tempConvertMatrix1;\n    compensateBlackPoint(cs.blackPoint, XYZ_Flat, XYZ_Black);\n\n    const XYZ_D65 = tempConvertMatrix2;\n    normalizeWhitePointToD65(FLAT_WHITEPOINT_MATRIX, XYZ_Black, XYZ_D65);\n\n    const SRGB = tempConvertMatrix1;\n    matrixProduct(SRGB_D65_XYZ_TO_RGB_MATRIX, XYZ_D65, SRGB);\n\n    // Convert the values to rgb range [0, 255].\n    dest[destOffset] = sRGBTransferFunction(SRGB[0]) * 255;\n    dest[destOffset + 1] = sRGBTransferFunction(SRGB[1]) * 255;\n    dest[destOffset + 2] = sRGBTransferFunction(SRGB[2]) * 255;\n  }\n\n  // eslint-disable-next-line no-shadow\n  class CalRGBCS extends ColorSpace {\n    constructor(whitePoint, blackPoint, gamma, matrix) {\n      super(\"CalRGB\", 3);\n\n      if (!whitePoint) {\n        throw new FormatError(\n          \"WhitePoint missing - required for color space CalRGB\"\n        );\n      }\n      blackPoint = blackPoint || new Float32Array(3);\n      gamma = gamma || new Float32Array([1, 1, 1]);\n      matrix = matrix || new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1]);\n\n      // Translate arguments to spec variables.\n      const XW = whitePoint[0];\n      const YW = whitePoint[1];\n      const ZW = whitePoint[2];\n      this.whitePoint = whitePoint;\n\n      const XB = blackPoint[0];\n      const YB = blackPoint[1];\n      const ZB = blackPoint[2];\n      this.blackPoint = blackPoint;\n\n      this.GR = gamma[0];\n      this.GG = gamma[1];\n      this.GB = gamma[2];\n\n      this.MXA = matrix[0];\n      this.MYA = matrix[1];\n      this.MZA = matrix[2];\n      this.MXB = matrix[3];\n      this.MYB = matrix[4];\n      this.MZB = matrix[5];\n      this.MXC = matrix[6];\n      this.MYC = matrix[7];\n      this.MZC = matrix[8];\n\n      // Validate variables as per spec.\n      if (XW < 0 || ZW < 0 || YW !== 1) {\n        throw new FormatError(\n          `Invalid WhitePoint components for ${this.name}` +\n            \", no fallback available\"\n        );\n      }\n\n      if (XB < 0 || YB < 0 || ZB < 0) {\n        info(\n          `Invalid BlackPoint for ${this.name} [${XB}, ${YB}, ${ZB}], ` +\n            \"falling back to default.\"\n        );\n        this.blackPoint = new Float32Array(3);\n      }\n\n      if (this.GR < 0 || this.GG < 0 || this.GB < 0) {\n        info(\n          `Invalid Gamma [${this.GR}, ${this.GG}, ${this.GB}] for ` +\n            `${this.name}, falling back to default.`\n        );\n        this.GR = this.GG = this.GB = 1;\n      }\n    }\n\n    getRgbItem(src, srcOffset, dest, destOffset) {\n      if (\n        typeof PDFJSDev === \"undefined\" ||\n        PDFJSDev.test(\"!PRODUCTION || TESTING\")\n      ) {\n        assert(\n          dest instanceof Uint8ClampedArray,\n          'CalRGBCS.getRgbItem: Unsupported \"dest\" type.'\n        );\n      }\n      convertToRgb(this, src, srcOffset, dest, destOffset, 1);\n    }\n\n    getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n      if (\n        typeof PDFJSDev === \"undefined\" ||\n        PDFJSDev.test(\"!PRODUCTION || TESTING\")\n      ) {\n        assert(\n          dest instanceof Uint8ClampedArray,\n          'CalRGBCS.getRgbBuffer: Unsupported \"dest\" type.'\n        );\n      }\n      const scale = 1 / ((1 << bits) - 1);\n\n      for (let i = 0; i < count; ++i) {\n        convertToRgb(this, src, srcOffset, dest, destOffset, scale);\n        srcOffset += 3;\n        destOffset += 3 + alpha01;\n      }\n    }\n\n    getOutputLength(inputLength, alpha01) {\n      return ((inputLength * (3 + alpha01)) / 3) | 0;\n    }\n  }\n  return CalRGBCS;\n})();\n\n/**\n * LabCS: Based on \"PDF Reference, Sixth Ed\", p.250\n *\n * The default color is `new Float32Array([0, 0, 0])`.\n */\nconst LabCS = (function LabCSClosure() {\n  // Function g(x) from spec\n  function fn_g(x) {\n    let result;\n    if (x >= 6 / 29) {\n      result = x * x * x;\n    } else {\n      result = (108 / 841) * (x - 4 / 29);\n    }\n    return result;\n  }\n\n  function decode(value, high1, low2, high2) {\n    return low2 + (value * (high2 - low2)) / high1;\n  }\n\n  // If decoding is needed maxVal should be 2^bits per component - 1.\n  function convertToRgb(cs, src, srcOffset, maxVal, dest, destOffset) {\n    // XXX: Lab input is in the range of [0, 100], [amin, amax], [bmin, bmax]\n    // not the usual [0, 1]. If a command like setFillColor is used the src\n    // values will already be within the correct range. However, if we are\n    // converting an image we have to map the values to the correct range given\n    // above.\n    // Ls,as,bs <---> L*,a*,b* in the spec\n    let Ls = src[srcOffset];\n    let as = src[srcOffset + 1];\n    let bs = src[srcOffset + 2];\n    if (maxVal !== false) {\n      Ls = decode(Ls, maxVal, 0, 100);\n      as = decode(as, maxVal, cs.amin, cs.amax);\n      bs = decode(bs, maxVal, cs.bmin, cs.bmax);\n    }\n\n    // Adjust limits of 'as' and 'bs'\n    if (as > cs.amax) {\n      as = cs.amax;\n    } else if (as < cs.amin) {\n      as = cs.amin;\n    }\n    if (bs > cs.bmax) {\n      bs = cs.bmax;\n    } else if (bs < cs.bmin) {\n      bs = cs.bmin;\n    }\n\n    // Computes intermediate variables X,Y,Z as per spec\n    const M = (Ls + 16) / 116;\n    const L = M + as / 500;\n    const N = M - bs / 200;\n\n    const X = cs.XW * fn_g(L);\n    const Y = cs.YW * fn_g(M);\n    const Z = cs.ZW * fn_g(N);\n\n    let r, g, b;\n    // Using different conversions for D50 and D65 white points,\n    // per http://www.color.org/srgb.pdf\n    if (cs.ZW < 1) {\n      // Assuming D50 (X=0.9642, Y=1.00, Z=0.8249)\n      r = X * 3.1339 + Y * -1.617 + Z * -0.4906;\n      g = X * -0.9785 + Y * 1.916 + Z * 0.0333;\n      b = X * 0.072 + Y * -0.229 + Z * 1.4057;\n    } else {\n      // Assuming D65 (X=0.9505, Y=1.00, Z=1.0888)\n      r = X * 3.2406 + Y * -1.5372 + Z * -0.4986;\n      g = X * -0.9689 + Y * 1.8758 + Z * 0.0415;\n      b = X * 0.0557 + Y * -0.204 + Z * 1.057;\n    }\n    // Convert the color values to the [0,255] range (clamping is automatic).\n    dest[destOffset] = Math.sqrt(r) * 255;\n    dest[destOffset + 1] = Math.sqrt(g) * 255;\n    dest[destOffset + 2] = Math.sqrt(b) * 255;\n  }\n\n  // eslint-disable-next-line no-shadow\n  class LabCS extends ColorSpace {\n    constructor(whitePoint, blackPoint, range) {\n      super(\"Lab\", 3);\n\n      if (!whitePoint) {\n        throw new FormatError(\n          \"WhitePoint missing - required for color space Lab\"\n        );\n      }\n      blackPoint = blackPoint || [0, 0, 0];\n      range = range || [-100, 100, -100, 100];\n\n      // Translate args to spec variables\n      this.XW = whitePoint[0];\n      this.YW = whitePoint[1];\n      this.ZW = whitePoint[2];\n      this.amin = range[0];\n      this.amax = range[1];\n      this.bmin = range[2];\n      this.bmax = range[3];\n\n      // These are here just for completeness - the spec doesn't offer any\n      // formulas that use BlackPoint in Lab\n      this.XB = blackPoint[0];\n      this.YB = blackPoint[1];\n      this.ZB = blackPoint[2];\n\n      // Validate vars as per spec\n      if (this.XW < 0 || this.ZW < 0 || this.YW !== 1) {\n        throw new FormatError(\n          \"Invalid WhitePoint components, no fallback available\"\n        );\n      }\n\n      if (this.XB < 0 || this.YB < 0 || this.ZB < 0) {\n        info(\"Invalid BlackPoint, falling back to default\");\n        this.XB = this.YB = this.ZB = 0;\n      }\n\n      if (this.amin > this.amax || this.bmin > this.bmax) {\n        info(\"Invalid Range, falling back to defaults\");\n        this.amin = -100;\n        this.amax = 100;\n        this.bmin = -100;\n        this.bmax = 100;\n      }\n    }\n\n    getRgbItem(src, srcOffset, dest, destOffset) {\n      if (\n        typeof PDFJSDev === \"undefined\" ||\n        PDFJSDev.test(\"!PRODUCTION || TESTING\")\n      ) {\n        assert(\n          dest instanceof Uint8ClampedArray,\n          'LabCS.getRgbItem: Unsupported \"dest\" type.'\n        );\n      }\n      convertToRgb(this, src, srcOffset, false, dest, destOffset);\n    }\n\n    getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n      if (\n        typeof PDFJSDev === \"undefined\" ||\n        PDFJSDev.test(\"!PRODUCTION || TESTING\")\n      ) {\n        assert(\n          dest instanceof Uint8ClampedArray,\n          'LabCS.getRgbBuffer: Unsupported \"dest\" type.'\n        );\n      }\n      const maxVal = (1 << bits) - 1;\n      for (let i = 0; i < count; i++) {\n        convertToRgb(this, src, srcOffset, maxVal, dest, destOffset);\n        srcOffset += 3;\n        destOffset += 3 + alpha01;\n      }\n    }\n\n    getOutputLength(inputLength, alpha01) {\n      return ((inputLength * (3 + alpha01)) / 3) | 0;\n    }\n\n    isDefaultDecode(decodeMap, bpc) {\n      // XXX: Decoding is handled with the lab conversion because of the strange\n      // ranges that are used.\n      return true;\n    }\n\n    get usesZeroToOneRange() {\n      return shadow(this, \"usesZeroToOneRange\", false);\n    }\n  }\n  return LabCS;\n})();\n\nexport { ColorSpace };\n", "/* Copyright 2019 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint no-var: error */\n\nimport { assert, info, shadow } from \"../shared/util.js\";\nimport { RefSetCache } from \"./primitives.js\";\n\nclass LocalImageCache {\n  constructor() {\n    this._nameRefMap = new Map();\n    this._imageMap = new Map();\n    this._imageCache = new RefSetCache();\n  }\n\n  getByName(name) {\n    const ref = this._nameRefMap.get(name);\n    if (ref) {\n      return this.getByRef(ref);\n    }\n    return this._imageMap.get(name) || null;\n  }\n\n  getByRef(ref) {\n    return this._imageCache.get(ref) || null;\n  }\n\n  set(name, ref = null, data) {\n    if (!name) {\n      throw new Error('LocalImageCache.set - expected \"name\" argument.');\n    }\n    if (ref) {\n      if (this._imageCache.has(ref)) {\n        return;\n      }\n      this._nameRefMap.set(name, ref);\n      this._imageCache.put(ref, data);\n      return;\n    }\n    // name\n    if (this._imageMap.has(name)) {\n      return;\n    }\n    this._imageMap.set(name, data);\n  }\n}\n\nclass GlobalImageCache {\n  static get NUM_PAGES_THRESHOLD() {\n    return shadow(this, \"NUM_PAGES_THRESHOLD\", 2);\n  }\n\n  static get MAX_IMAGES_TO_CACHE() {\n    return shadow(this, \"MAX_IMAGES_TO_CACHE\", 10);\n  }\n\n  constructor() {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      assert(\n        GlobalImageCache.NUM_PAGES_THRESHOLD > 1,\n        \"GlobalImageCache - invalid NUM_PAGES_THRESHOLD constant.\"\n      );\n    }\n    this._refCache = new RefSetCache();\n    this._imageCache = new RefSetCache();\n  }\n\n  shouldCache(ref, pageIndex) {\n    const pageIndexSet = this._refCache.get(ref);\n    const numPages = pageIndexSet\n      ? pageIndexSet.size + (pageIndexSet.has(pageIndex) ? 0 : 1)\n      : 1;\n\n    if (numPages < GlobalImageCache.NUM_PAGES_THRESHOLD) {\n      return false;\n    }\n    if (\n      !this._imageCache.has(ref) &&\n      this._imageCache.size >= GlobalImageCache.MAX_IMAGES_TO_CACHE\n    ) {\n      return false;\n    }\n    return true;\n  }\n\n  addPageIndex(ref, pageIndex) {\n    let pageIndexSet = this._refCache.get(ref);\n    if (!pageIndexSet) {\n      pageIndexSet = new Set();\n      this._refCache.put(ref, pageIndexSet);\n    }\n    pageIndexSet.add(pageIndex);\n  }\n\n  getData(ref, pageIndex) {\n    if (!this._refCache.has(ref)) {\n      return null;\n    }\n    const pageIndexSet = this._refCache.get(ref);\n\n    if (pageIndexSet.size < GlobalImageCache.NUM_PAGES_THRESHOLD) {\n      return null;\n    }\n    if (!this._imageCache.has(ref)) {\n      return null;\n    }\n    // Ensure that we keep track of all pages containing the image reference.\n    pageIndexSet.add(pageIndex);\n\n    return this._imageCache.get(ref);\n  }\n\n  setData(ref, data) {\n    if (!this._refCache.has(ref)) {\n      throw new Error(\n        'GlobalImageCache.setData - expected \"addPageIndex\" to have been called.'\n      );\n    }\n    if (this._imageCache.has(ref)) {\n      return;\n    }\n    if (this._imageCache.size >= GlobalImageCache.MAX_IMAGES_TO_CACHE) {\n      info(\n        \"GlobalImageCache.setData - ignoring image above MAX_IMAGES_TO_CACHE.\"\n      );\n      return;\n    }\n    this._imageCache.put(ref, data);\n  }\n\n  clear(onlyData = false) {\n    if (!onlyData) {\n      this._refCache.clear();\n    }\n    this._imageCache.clear();\n  }\n}\n\nexport { LocalImageCache, GlobalImageCache };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint no-var: error */\n\nimport {\n  AnnotationBorderStyleType,\n  AnnotationFieldFlag,\n  AnnotationFlag,\n  AnnotationReplyType,\n  AnnotationType,\n  assert,\n  isString,\n  OPS,\n  stringToBytes,\n  stringToPDFString,\n  Util,\n  warn,\n} from \"../shared/util.js\";\nimport { Catalog, FileSpec, ObjectLoader } from \"./obj.js\";\nimport { Dict, isDict, isName, isRef, isStream } from \"./primitives.js\";\nimport { ColorSpace } from \"./colorspace.js\";\nimport { getInheritableProperty } from \"./core_utils.js\";\nimport { OperatorList } from \"./operator_list.js\";\nimport { Stream } from \"./stream.js\";\n\nclass AnnotationFactory {\n  /**\n   * Create an `Annotation` object of the correct type for the given reference\n   * to an annotation dictionary. This yields a promise that is resolved when\n   * the `Annotation` object is constructed.\n   *\n   * @param {XRef} xref\n   * @param {Object} ref\n   * @param {PDFManager} pdfManager\n   * @param {Object} idFactory\n   * @returns {Promise} A promise that is resolved with an {Annotation}\n   *   instance.\n   */\n  static create(xref, ref, pdfManager, idFactory) {\n    return pdfManager.ensure(this, \"_create\", [\n      xref,\n      ref,\n      pdfManager,\n      idFactory,\n    ]);\n  }\n\n  /**\n   * @private\n   */\n  static _create(xref, ref, pdfManager, idFactory) {\n    const dict = xref.fetchIfRef(ref);\n    if (!isDict(dict)) {\n      return undefined;\n    }\n    const id = isRef(ref) ? ref.toString() : `annot_${idFactory.createObjId()}`;\n\n    // Determine the annotation's subtype.\n    let subtype = dict.get(\"Subtype\");\n    subtype = isName(subtype) ? subtype.name : null;\n\n    // Return the right annotation object based on the subtype and field type.\n    const parameters = {\n      xref,\n      dict,\n      subtype,\n      id,\n      pdfManager,\n    };\n\n    switch (subtype) {\n      case \"Link\":\n        return new LinkAnnotation(parameters);\n\n      case \"Text\":\n        return new TextAnnotation(parameters);\n\n      case \"Widget\":\n        let fieldType = getInheritableProperty({ dict, key: \"FT\" });\n        fieldType = isName(fieldType) ? fieldType.name : null;\n\n        switch (fieldType) {\n          case \"Tx\":\n            return new TextWidgetAnnotation(parameters);\n          case \"Btn\":\n            return new ButtonWidgetAnnotation(parameters);\n          case \"Ch\":\n            return new ChoiceWidgetAnnotation(parameters);\n        }\n        warn(\n          'Unimplemented widget field type \"' +\n            fieldType +\n            '\", ' +\n            \"falling back to base field type.\"\n        );\n        return new WidgetAnnotation(parameters);\n\n      case \"Popup\":\n        return new PopupAnnotation(parameters);\n\n      case \"FreeText\":\n        return new FreeTextAnnotation(parameters);\n\n      case \"Line\":\n        return new LineAnnotation(parameters);\n\n      case \"Square\":\n        return new SquareAnnotation(parameters);\n\n      case \"Circle\":\n        return new CircleAnnotation(parameters);\n\n      case \"PolyLine\":\n        return new PolylineAnnotation(parameters);\n\n      case \"Polygon\":\n        return new PolygonAnnotation(parameters);\n\n      case \"Caret\":\n        return new CaretAnnotation(parameters);\n\n      case \"Ink\":\n        return new InkAnnotation(parameters);\n\n      case \"Highlight\":\n        return new HighlightAnnotation(parameters);\n\n      case \"Underline\":\n        return new UnderlineAnnotation(parameters);\n\n      case \"Squiggly\":\n        return new SquigglyAnnotation(parameters);\n\n      case \"StrikeOut\":\n        return new StrikeOutAnnotation(parameters);\n\n      case \"Stamp\":\n        return new StampAnnotation(parameters);\n\n      case \"FileAttachment\":\n        return new FileAttachmentAnnotation(parameters);\n\n      default:\n        if (!subtype) {\n          warn(\"Annotation is missing the required /Subtype.\");\n        } else {\n          warn(\n            'Unimplemented annotation type \"' +\n              subtype +\n              '\", ' +\n              \"falling back to base annotation.\"\n          );\n        }\n        return new Annotation(parameters);\n    }\n  }\n}\n\nfunction getQuadPoints(dict, rect) {\n  if (!dict.has(\"QuadPoints\")) {\n    return null;\n  }\n\n  // The region is described as a number of quadrilaterals.\n  // Each quadrilateral must consist of eight coordinates.\n  const quadPoints = dict.getArray(\"QuadPoints\");\n  if (!Array.isArray(quadPoints) || quadPoints.length % 8 > 0) {\n    return null;\n  }\n\n  const quadPointsLists = [];\n  for (let i = 0, ii = quadPoints.length / 8; i < ii; i++) {\n    // Each series of eight numbers represents the coordinates for one\n    // quadrilateral in the order [x1, y1, x2, y2, x3, y3, x4, y4].\n    // Convert this to an array of objects with x and y coordinates.\n    quadPointsLists.push([]);\n    for (let j = i * 8, jj = i * 8 + 8; j < jj; j += 2) {\n      const x = quadPoints[j];\n      const y = quadPoints[j + 1];\n\n      // The quadpoints should be ignored if any coordinate in the array\n      // lies outside the region specified by the rectangle.\n      if (x < rect[0] || x > rect[2] || y < rect[1] || y > rect[3]) {\n        return null;\n      }\n      quadPointsLists[i].push({ x, y });\n    }\n  }\n  return quadPointsLists;\n}\n\nfunction getTransformMatrix(rect, bbox, matrix) {\n  // 12.5.5: Algorithm: Appearance streams\n  const [minX, minY, maxX, maxY] = Util.getAxialAlignedBoundingBox(\n    bbox,\n    matrix\n  );\n  if (minX === maxX || minY === maxY) {\n    // From real-life file, bbox was [0, 0, 0, 0]. In this case,\n    // just apply the transform for rect\n    return [1, 0, 0, 1, rect[0], rect[1]];\n  }\n\n  const xRatio = (rect[2] - rect[0]) / (maxX - minX);\n  const yRatio = (rect[3] - rect[1]) / (maxY - minY);\n  return [\n    xRatio,\n    0,\n    0,\n    yRatio,\n    rect[0] - minX * xRatio,\n    rect[1] - minY * yRatio,\n  ];\n}\n\nclass Annotation {\n  constructor(params) {\n    const dict = params.dict;\n\n    this.setContents(dict.get(\"Contents\"));\n    this.setModificationDate(dict.get(\"M\"));\n    this.setFlags(dict.get(\"F\"));\n    this.setRectangle(dict.getArray(\"Rect\"));\n    this.setColor(dict.getArray(\"C\"));\n    this.setBorderStyle(dict);\n    this.setAppearance(dict);\n\n    // Expose public properties using a data object.\n    this.data = {\n      annotationFlags: this.flags,\n      borderStyle: this.borderStyle,\n      color: this.color,\n      contents: this.contents,\n      hasAppearance: !!this.appearance,\n      id: params.id,\n      modificationDate: this.modificationDate,\n      rect: this.rectangle,\n      subtype: params.subtype,\n    };\n  }\n\n  /**\n   * @private\n   */\n  _hasFlag(flags, flag) {\n    return !!(flags & flag);\n  }\n\n  /**\n   * @private\n   */\n  _isViewable(flags) {\n    return (\n      !this._hasFlag(flags, AnnotationFlag.INVISIBLE) &&\n      !this._hasFlag(flags, AnnotationFlag.HIDDEN) &&\n      !this._hasFlag(flags, AnnotationFlag.NOVIEW)\n    );\n  }\n\n  /**\n   * @private\n   */\n  _isPrintable(flags) {\n    return (\n      this._hasFlag(flags, AnnotationFlag.PRINT) &&\n      !this._hasFlag(flags, AnnotationFlag.INVISIBLE) &&\n      !this._hasFlag(flags, AnnotationFlag.HIDDEN)\n    );\n  }\n\n  /**\n   * @type {boolean}\n   */\n  get viewable() {\n    if (this.flags === 0) {\n      return true;\n    }\n    return this._isViewable(this.flags);\n  }\n\n  /**\n   * @type {boolean}\n   */\n  get printable() {\n    if (this.flags === 0) {\n      return false;\n    }\n    return this._isPrintable(this.flags);\n  }\n\n  /**\n   * Set the contents.\n   *\n   * @public\n   * @memberof Annotation\n   * @param {string} contents - Text to display for the annotation or, if the\n   *                            type of annotation does not display text, a\n   *                            description of the annotation's contents\n   */\n  setContents(contents) {\n    this.contents = stringToPDFString(contents || \"\");\n  }\n\n  /**\n   * Set the modification date.\n   *\n   * @public\n   * @memberof Annotation\n   * @param {string} modificationDate - PDF date string that indicates when the\n   *                                    annotation was last modified\n   */\n  setModificationDate(modificationDate) {\n    this.modificationDate = isString(modificationDate)\n      ? modificationDate\n      : null;\n  }\n\n  /**\n   * Set the flags.\n   *\n   * @public\n   * @memberof Annotation\n   * @param {number} flags - Unsigned 32-bit integer specifying annotation\n   *                         characteristics\n   * @see {@link shared/util.js}\n   */\n  setFlags(flags) {\n    this.flags = Number.isInteger(flags) && flags > 0 ? flags : 0;\n  }\n\n  /**\n   * Check if a provided flag is set.\n   *\n   * @public\n   * @memberof Annotation\n   * @param {number} flag - Hexadecimal representation for an annotation\n   *                        characteristic\n   * @returns {boolean}\n   * @see {@link shared/util.js}\n   */\n  hasFlag(flag) {\n    return this._hasFlag(this.flags, flag);\n  }\n\n  /**\n   * Set the rectangle.\n   *\n   * @public\n   * @memberof Annotation\n   * @param {Array} rectangle - The rectangle array with exactly four entries\n   */\n  setRectangle(rectangle) {\n    if (Array.isArray(rectangle) && rectangle.length === 4) {\n      this.rectangle = Util.normalizeRect(rectangle);\n    } else {\n      this.rectangle = [0, 0, 0, 0];\n    }\n  }\n\n  /**\n   * Set the color and take care of color space conversion.\n   * The default value is black, in RGB color space.\n   *\n   * @public\n   * @memberof Annotation\n   * @param {Array} color - The color array containing either 0\n   *                        (transparent), 1 (grayscale), 3 (RGB) or\n   *                        4 (CMYK) elements\n   */\n  setColor(color) {\n    const rgbColor = new Uint8ClampedArray(3);\n    if (!Array.isArray(color)) {\n      this.color = rgbColor;\n      return;\n    }\n\n    switch (color.length) {\n      case 0: // Transparent, which we indicate with a null value\n        this.color = null;\n        break;\n\n      case 1: // Convert grayscale to RGB\n        ColorSpace.singletons.gray.getRgbItem(color, 0, rgbColor, 0);\n        this.color = rgbColor;\n        break;\n\n      case 3: // Convert RGB percentages to RGB\n        ColorSpace.singletons.rgb.getRgbItem(color, 0, rgbColor, 0);\n        this.color = rgbColor;\n        break;\n\n      case 4: // Convert CMYK to RGB\n        ColorSpace.singletons.cmyk.getRgbItem(color, 0, rgbColor, 0);\n        this.color = rgbColor;\n        break;\n\n      default:\n        this.color = rgbColor;\n        break;\n    }\n  }\n\n  /**\n   * Set the border style (as AnnotationBorderStyle object).\n   *\n   * @public\n   * @memberof Annotation\n   * @param {Dict} borderStyle - The border style dictionary\n   */\n  setBorderStyle(borderStyle) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      assert(this.rectangle, \"setRectangle must have been called previously.\");\n    }\n\n    this.borderStyle = new AnnotationBorderStyle();\n    if (!isDict(borderStyle)) {\n      return;\n    }\n    if (borderStyle.has(\"BS\")) {\n      const dict = borderStyle.get(\"BS\");\n      const dictType = dict.get(\"Type\");\n\n      if (!dictType || isName(dictType, \"Border\")) {\n        this.borderStyle.setWidth(dict.get(\"W\"), this.rectangle);\n        this.borderStyle.setStyle(dict.get(\"S\"));\n        this.borderStyle.setDashArray(dict.getArray(\"D\"));\n      }\n    } else if (borderStyle.has(\"Border\")) {\n      const array = borderStyle.getArray(\"Border\");\n      if (Array.isArray(array) && array.length >= 3) {\n        this.borderStyle.setHorizontalCornerRadius(array[0]);\n        this.borderStyle.setVerticalCornerRadius(array[1]);\n        this.borderStyle.setWidth(array[2], this.rectangle);\n\n        if (array.length === 4) {\n          // Dash array available\n          this.borderStyle.setDashArray(array[3]);\n        }\n      }\n    } else {\n      // There are no border entries in the dictionary. According to the\n      // specification, we should draw a solid border of width 1 in that\n      // case, but Adobe Reader did not implement that part of the\n      // specification and instead draws no border at all, so we do the same.\n      // See also https://github.com/mozilla/pdf.js/issues/6179.\n      this.borderStyle.setWidth(0);\n    }\n  }\n\n  /**\n   * Set the (normal) appearance.\n   *\n   * @public\n   * @memberof Annotation\n   * @param {Dict} dict - The annotation's data dictionary\n   */\n  setAppearance(dict) {\n    this.appearance = null;\n\n    const appearanceStates = dict.get(\"AP\");\n    if (!isDict(appearanceStates)) {\n      return;\n    }\n\n    // In case the normal appearance is a stream, then it is used directly.\n    const normalAppearanceState = appearanceStates.get(\"N\");\n    if (isStream(normalAppearanceState)) {\n      this.appearance = normalAppearanceState;\n      return;\n    }\n    if (!isDict(normalAppearanceState)) {\n      return;\n    }\n\n    // In case the normal appearance is a dictionary, the `AS` entry provides\n    // the key of the stream in this dictionary.\n    const as = dict.get(\"AS\");\n    if (!isName(as) || !normalAppearanceState.has(as.name)) {\n      return;\n    }\n    this.appearance = normalAppearanceState.get(as.name);\n  }\n\n  loadResources(keys) {\n    return this.appearance.dict.getAsync(\"Resources\").then(resources => {\n      if (!resources) {\n        return undefined;\n      }\n\n      const objectLoader = new ObjectLoader(resources, keys, resources.xref);\n      return objectLoader.load().then(function () {\n        return resources;\n      });\n    });\n  }\n\n  getOperatorList(evaluator, task, renderForms) {\n    if (!this.appearance) {\n      return Promise.resolve(new OperatorList());\n    }\n\n    const data = this.data;\n    const appearanceDict = this.appearance.dict;\n    const resourcesPromise = this.loadResources([\n      \"ExtGState\",\n      \"ColorSpace\",\n      \"Pattern\",\n      \"Shading\",\n      \"XObject\",\n      \"Font\",\n    ]);\n    const bbox = appearanceDict.getArray(\"BBox\") || [0, 0, 1, 1];\n    const matrix = appearanceDict.getArray(\"Matrix\") || [1, 0, 0, 1, 0, 0];\n    const transform = getTransformMatrix(data.rect, bbox, matrix);\n\n    return resourcesPromise.then(resources => {\n      const opList = new OperatorList();\n      opList.addOp(OPS.beginAnnotation, [data.rect, transform, matrix]);\n      return evaluator\n        .getOperatorList({\n          stream: this.appearance,\n          task,\n          resources,\n          operatorList: opList,\n        })\n        .then(() => {\n          opList.addOp(OPS.endAnnotation, []);\n          this.appearance.reset();\n          return opList;\n        });\n    });\n  }\n}\n\n/**\n * Contains all data regarding an annotation's border style.\n */\nclass AnnotationBorderStyle {\n  constructor() {\n    this.width = 1;\n    this.style = AnnotationBorderStyleType.SOLID;\n    this.dashArray = [3];\n    this.horizontalCornerRadius = 0;\n    this.verticalCornerRadius = 0;\n  }\n\n  /**\n   * Set the width.\n   *\n   * @public\n   * @memberof AnnotationBorderStyle\n   * @param {number} width - The width.\n   * @param {Array} rect - The annotation `Rect` entry.\n   */\n  setWidth(width, rect = [0, 0, 0, 0]) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      assert(\n        Array.isArray(rect) && rect.length === 4,\n        \"A valid `rect` parameter must be provided.\"\n      );\n    }\n\n    // Some corrupt PDF generators may provide the width as a `Name`,\n    // rather than as a number (fixes issue 10385).\n    if (isName(width)) {\n      this.width = 0; // This is consistent with the behaviour in Adobe Reader.\n      return;\n    }\n    if (Number.isInteger(width)) {\n      if (width > 0) {\n        const maxWidth = (rect[2] - rect[0]) / 2;\n        const maxHeight = (rect[3] - rect[1]) / 2;\n\n        // Ignore large `width`s, since they lead to the Annotation overflowing\n        // the size set by the `Rect` entry thus causing the `annotationLayer`\n        // to render it over the surrounding document (fixes bug1552113.pdf).\n        if (\n          maxWidth > 0 &&\n          maxHeight > 0 &&\n          (width > maxWidth || width > maxHeight)\n        ) {\n          warn(`AnnotationBorderStyle.setWidth - ignoring width: ${width}`);\n          width = 1;\n        }\n      }\n      this.width = width;\n    }\n  }\n\n  /**\n   * Set the style.\n   *\n   * @public\n   * @memberof AnnotationBorderStyle\n   * @param {Name} style - The annotation style.\n   * @see {@link shared/util.js}\n   */\n  setStyle(style) {\n    if (!isName(style)) {\n      return;\n    }\n    switch (style.name) {\n      case \"S\":\n        this.style = AnnotationBorderStyleType.SOLID;\n        break;\n\n      case \"D\":\n        this.style = AnnotationBorderStyleType.DASHED;\n        break;\n\n      case \"B\":\n        this.style = AnnotationBorderStyleType.BEVELED;\n        break;\n\n      case \"I\":\n        this.style = AnnotationBorderStyleType.INSET;\n        break;\n\n      case \"U\":\n        this.style = AnnotationBorderStyleType.UNDERLINE;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Set the dash array.\n   *\n   * @public\n   * @memberof AnnotationBorderStyle\n   * @param {Array} dashArray - The dash array with at least one element\n   */\n  setDashArray(dashArray) {\n    // We validate the dash array, but we do not use it because CSS does not\n    // allow us to change spacing of dashes. For more information, visit\n    // http://www.w3.org/TR/css3-background/#the-border-style.\n    if (Array.isArray(dashArray) && dashArray.length > 0) {\n      // According to the PDF specification: the elements in `dashArray`\n      // shall be numbers that are nonnegative and not all equal to zero.\n      let isValid = true;\n      let allZeros = true;\n      for (const element of dashArray) {\n        const validNumber = +element >= 0;\n        if (!validNumber) {\n          isValid = false;\n          break;\n        } else if (element > 0) {\n          allZeros = false;\n        }\n      }\n      if (isValid && !allZeros) {\n        this.dashArray = dashArray;\n      } else {\n        this.width = 0; // Adobe behavior when the array is invalid.\n      }\n    } else if (dashArray) {\n      this.width = 0; // Adobe behavior when the array is invalid.\n    }\n  }\n\n  /**\n   * Set the horizontal corner radius (from a Border dictionary).\n   *\n   * @public\n   * @memberof AnnotationBorderStyle\n   * @param {number} radius - The horizontal corner radius.\n   */\n  setHorizontalCornerRadius(radius) {\n    if (Number.isInteger(radius)) {\n      this.horizontalCornerRadius = radius;\n    }\n  }\n\n  /**\n   * Set the vertical corner radius (from a Border dictionary).\n   *\n   * @public\n   * @memberof AnnotationBorderStyle\n   * @param {number} radius - The vertical corner radius.\n   */\n  setVerticalCornerRadius(radius) {\n    if (Number.isInteger(radius)) {\n      this.verticalCornerRadius = radius;\n    }\n  }\n}\n\nclass MarkupAnnotation extends Annotation {\n  constructor(parameters) {\n    super(parameters);\n\n    const dict = parameters.dict;\n\n    if (dict.has(\"IRT\")) {\n      const rawIRT = dict.getRaw(\"IRT\");\n      this.data.inReplyTo = isRef(rawIRT) ? rawIRT.toString() : null;\n\n      const rt = dict.get(\"RT\");\n      this.data.replyType = isName(rt) ? rt.name : AnnotationReplyType.REPLY;\n    }\n\n    if (this.data.replyType === AnnotationReplyType.GROUP) {\n      // Subordinate annotations in a group should inherit\n      // the group attributes from the primary annotation.\n      const parent = dict.get(\"IRT\");\n\n      this.data.title = stringToPDFString(parent.get(\"T\") || \"\");\n\n      this.setContents(parent.get(\"Contents\"));\n      this.data.contents = this.contents;\n\n      if (!parent.has(\"CreationDate\")) {\n        this.data.creationDate = null;\n      } else {\n        this.setCreationDate(parent.get(\"CreationDate\"));\n        this.data.creationDate = this.creationDate;\n      }\n\n      if (!parent.has(\"M\")) {\n        this.data.modificationDate = null;\n      } else {\n        this.setModificationDate(parent.get(\"M\"));\n        this.data.modificationDate = this.modificationDate;\n      }\n\n      this.data.hasPopup = parent.has(\"Popup\");\n\n      if (!parent.has(\"C\")) {\n        // Fall back to the default background color.\n        this.data.color = null;\n      } else {\n        this.setColor(parent.getArray(\"C\"));\n        this.data.color = this.color;\n      }\n    } else {\n      this.data.title = stringToPDFString(dict.get(\"T\") || \"\");\n\n      this.setCreationDate(dict.get(\"CreationDate\"));\n      this.data.creationDate = this.creationDate;\n\n      this.data.hasPopup = dict.has(\"Popup\");\n\n      if (!dict.has(\"C\")) {\n        // Fall back to the default background color.\n        this.data.color = null;\n      }\n    }\n  }\n\n  /**\n   * Set the creation date.\n   *\n   * @public\n   * @memberof MarkupAnnotation\n   * @param {string} creationDate - PDF date string that indicates when the\n   *                                annotation was originally created\n   */\n  setCreationDate(creationDate) {\n    this.creationDate = isString(creationDate) ? creationDate : null;\n  }\n}\n\nclass WidgetAnnotation extends Annotation {\n  constructor(params) {\n    super(params);\n\n    const dict = params.dict;\n    const data = this.data;\n\n    data.annotationType = AnnotationType.WIDGET;\n    data.fieldName = this._constructFieldName(dict);\n    data.fieldValue = getInheritableProperty({\n      dict,\n      key: \"V\",\n      getArray: true,\n    });\n    data.alternativeText = stringToPDFString(dict.get(\"TU\") || \"\");\n    data.defaultAppearance = getInheritableProperty({ dict, key: \"DA\" }) || \"\";\n    const fieldType = getInheritableProperty({ dict, key: \"FT\" });\n    data.fieldType = isName(fieldType) ? fieldType.name : null;\n    this.fieldResources =\n      getInheritableProperty({ dict, key: \"DR\" }) || Dict.empty;\n\n    data.fieldFlags = getInheritableProperty({ dict, key: \"Ff\" });\n    if (!Number.isInteger(data.fieldFlags) || data.fieldFlags < 0) {\n      data.fieldFlags = 0;\n    }\n\n    data.readOnly = this.hasFieldFlag(AnnotationFieldFlag.READONLY);\n\n    // Hide signatures because we cannot validate them, and unset the fieldValue\n    // since it's (most likely) a `Dict` which is non-serializable and will thus\n    // cause errors when sending annotations to the main-thread (issue 10347).\n    if (data.fieldType === \"Sig\") {\n      data.fieldValue = null;\n      this.setFlags(AnnotationFlag.HIDDEN);\n    }\n  }\n\n  /**\n   * Construct the (fully qualified) field name from the (partial) field\n   * names of the field and its ancestors.\n   *\n   * @private\n   * @memberof WidgetAnnotation\n   * @param {Dict} dict - Complete widget annotation dictionary\n   * @returns {string}\n   */\n  _constructFieldName(dict) {\n    // Both the `Parent` and `T` fields are optional. While at least one of\n    // them should be provided, bad PDF generators may fail to do so.\n    if (!dict.has(\"T\") && !dict.has(\"Parent\")) {\n      warn(\"Unknown field name, falling back to empty field name.\");\n      return \"\";\n    }\n\n    // If no parent exists, the partial and fully qualified names are equal.\n    if (!dict.has(\"Parent\")) {\n      return stringToPDFString(dict.get(\"T\"));\n    }\n\n    // Form the fully qualified field name by appending the partial name to\n    // the parent's fully qualified name, separated by a period.\n    const fieldName = [];\n    if (dict.has(\"T\")) {\n      fieldName.unshift(stringToPDFString(dict.get(\"T\")));\n    }\n\n    let loopDict = dict;\n    while (loopDict.has(\"Parent\")) {\n      loopDict = loopDict.get(\"Parent\");\n      if (!isDict(loopDict)) {\n        // Even though it is not allowed according to the PDF specification,\n        // bad PDF generators may provide a `Parent` entry that is not a\n        // dictionary, but `null` for example (issue 8143).\n        break;\n      }\n\n      if (loopDict.has(\"T\")) {\n        fieldName.unshift(stringToPDFString(loopDict.get(\"T\")));\n      }\n    }\n    return fieldName.join(\".\");\n  }\n\n  /**\n   * Check if a provided field flag is set.\n   *\n   * @public\n   * @memberof WidgetAnnotation\n   * @param {number} flag - Hexadecimal representation for an annotation\n   *                        field characteristic\n   * @returns {boolean}\n   * @see {@link shared/util.js}\n   */\n  hasFieldFlag(flag) {\n    return !!(this.data.fieldFlags & flag);\n  }\n\n  getOperatorList(evaluator, task, renderForms) {\n    // Do not render form elements on the canvas when interactive forms are\n    // enabled. The display layer is responsible for rendering them instead.\n    if (renderForms) {\n      return Promise.resolve(new OperatorList());\n    }\n    return super.getOperatorList(evaluator, task, renderForms);\n  }\n}\n\nclass TextWidgetAnnotation extends WidgetAnnotation {\n  constructor(params) {\n    super(params);\n\n    const dict = params.dict;\n\n    // The field value is always a string.\n    this.data.fieldValue = stringToPDFString(this.data.fieldValue || \"\");\n\n    // Determine the alignment of text in the field.\n    let alignment = getInheritableProperty({ dict, key: \"Q\" });\n    if (!Number.isInteger(alignment) || alignment < 0 || alignment > 2) {\n      alignment = null;\n    }\n    this.data.textAlignment = alignment;\n\n    // Determine the maximum length of text in the field.\n    let maximumLength = getInheritableProperty({ dict, key: \"MaxLen\" });\n    if (!Number.isInteger(maximumLength) || maximumLength < 0) {\n      maximumLength = null;\n    }\n    this.data.maxLen = maximumLength;\n\n    // Process field flags for the display layer.\n    this.data.multiLine = this.hasFieldFlag(AnnotationFieldFlag.MULTILINE);\n    this.data.comb =\n      this.hasFieldFlag(AnnotationFieldFlag.COMB) &&\n      !this.hasFieldFlag(AnnotationFieldFlag.MULTILINE) &&\n      !this.hasFieldFlag(AnnotationFieldFlag.PASSWORD) &&\n      !this.hasFieldFlag(AnnotationFieldFlag.FILESELECT) &&\n      this.data.maxLen !== null;\n  }\n\n  getOperatorList(evaluator, task, renderForms) {\n    if (renderForms || this.appearance) {\n      return super.getOperatorList(evaluator, task, renderForms);\n    }\n\n    const operatorList = new OperatorList();\n\n    // Even if there is an appearance stream, ignore it. This is the\n    // behaviour used by Adobe Reader.\n    if (!this.data.defaultAppearance) {\n      return Promise.resolve(operatorList);\n    }\n\n    const stream = new Stream(stringToBytes(this.data.defaultAppearance));\n    return evaluator\n      .getOperatorList({\n        stream,\n        task,\n        resources: this.fieldResources,\n        operatorList,\n      })\n      .then(function () {\n        return operatorList;\n      });\n  }\n}\n\nclass ButtonWidgetAnnotation extends WidgetAnnotation {\n  constructor(params) {\n    super(params);\n\n    this.data.checkBox =\n      !this.hasFieldFlag(AnnotationFieldFlag.RADIO) &&\n      !this.hasFieldFlag(AnnotationFieldFlag.PUSHBUTTON);\n    this.data.radioButton =\n      this.hasFieldFlag(AnnotationFieldFlag.RADIO) &&\n      !this.hasFieldFlag(AnnotationFieldFlag.PUSHBUTTON);\n    this.data.pushButton = this.hasFieldFlag(AnnotationFieldFlag.PUSHBUTTON);\n\n    if (this.data.checkBox) {\n      this._processCheckBox(params);\n    } else if (this.data.radioButton) {\n      this._processRadioButton(params);\n    } else if (this.data.pushButton) {\n      this._processPushButton(params);\n    } else {\n      warn(\"Invalid field flags for button widget annotation\");\n    }\n  }\n\n  _processCheckBox(params) {\n    if (isName(this.data.fieldValue)) {\n      this.data.fieldValue = this.data.fieldValue.name;\n    }\n\n    const customAppearance = params.dict.get(\"AP\");\n    if (!isDict(customAppearance)) {\n      return;\n    }\n\n    const exportValueOptionsDict = customAppearance.get(\"D\");\n    if (!isDict(exportValueOptionsDict)) {\n      return;\n    }\n\n    const exportValues = exportValueOptionsDict.getKeys();\n    const hasCorrectOptionCount = exportValues.length === 2;\n    if (!hasCorrectOptionCount) {\n      return;\n    }\n\n    this.data.exportValue =\n      exportValues[0] === \"Off\" ? exportValues[1] : exportValues[0];\n  }\n\n  _processRadioButton(params) {\n    this.data.fieldValue = this.data.buttonValue = null;\n\n    // The parent field's `V` entry holds a `Name` object with the appearance\n    // state of whichever child field is currently in the \"on\" state.\n    const fieldParent = params.dict.get(\"Parent\");\n    if (isDict(fieldParent) && fieldParent.has(\"V\")) {\n      const fieldParentValue = fieldParent.get(\"V\");\n      if (isName(fieldParentValue)) {\n        this.data.fieldValue = fieldParentValue.name;\n      }\n    }\n\n    // The button's value corresponds to its appearance state.\n    const appearanceStates = params.dict.get(\"AP\");\n    if (!isDict(appearanceStates)) {\n      return;\n    }\n    const normalAppearanceState = appearanceStates.get(\"N\");\n    if (!isDict(normalAppearanceState)) {\n      return;\n    }\n    for (const key of normalAppearanceState.getKeys()) {\n      if (key !== \"Off\") {\n        this.data.buttonValue = key;\n        break;\n      }\n    }\n  }\n\n  _processPushButton(params) {\n    if (!params.dict.has(\"A\")) {\n      warn(\"Push buttons without action dictionaries are not supported\");\n      return;\n    }\n\n    Catalog.parseDestDictionary({\n      destDict: params.dict,\n      resultObj: this.data,\n      docBaseUrl: params.pdfManager.docBaseUrl,\n    });\n  }\n}\n\nclass ChoiceWidgetAnnotation extends WidgetAnnotation {\n  constructor(params) {\n    super(params);\n\n    // Determine the options. The options array may consist of strings or\n    // arrays. If the array consists of arrays, then the first element of\n    // each array is the export value and the second element of each array is\n    // the display value. If the array consists of strings, then these\n    // represent both the export and display value. In this case, we convert\n    // it to an array of arrays as well for convenience in the display layer.\n    // Note that the specification does not state that the `Opt` field is\n    // inheritable, but in practice PDF generators do make annotations\n    // inherit the options from a parent annotation (issue 8094).\n    this.data.options = [];\n\n    const options = getInheritableProperty({ dict: params.dict, key: \"Opt\" });\n    if (Array.isArray(options)) {\n      const xref = params.xref;\n      for (let i = 0, ii = options.length; i < ii; i++) {\n        const option = xref.fetchIfRef(options[i]);\n        const isOptionArray = Array.isArray(option);\n\n        this.data.options[i] = {\n          exportValue: isOptionArray ? xref.fetchIfRef(option[0]) : option,\n          displayValue: stringToPDFString(\n            isOptionArray ? xref.fetchIfRef(option[1]) : option\n          ),\n        };\n      }\n    }\n\n    // Determine the field value. In this case, it may be a string or an\n    // array of strings. For convenience in the display layer, convert the\n    // string to an array of one string as well.\n    if (!Array.isArray(this.data.fieldValue)) {\n      this.data.fieldValue = [this.data.fieldValue];\n    }\n\n    // Process field flags for the display layer.\n    this.data.combo = this.hasFieldFlag(AnnotationFieldFlag.COMBO);\n    this.data.multiSelect = this.hasFieldFlag(AnnotationFieldFlag.MULTISELECT);\n  }\n}\n\nclass TextAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    const DEFAULT_ICON_SIZE = 22; // px\n\n    super(parameters);\n\n    const dict = parameters.dict;\n    this.data.annotationType = AnnotationType.TEXT;\n\n    if (this.data.hasAppearance) {\n      this.data.name = \"NoIcon\";\n    } else {\n      this.data.rect[1] = this.data.rect[3] - DEFAULT_ICON_SIZE;\n      this.data.rect[2] = this.data.rect[0] + DEFAULT_ICON_SIZE;\n      this.data.name = dict.has(\"Name\") ? dict.get(\"Name\").name : \"Note\";\n    }\n\n    if (dict.has(\"State\")) {\n      this.data.state = dict.get(\"State\") || null;\n      this.data.stateModel = dict.get(\"StateModel\") || null;\n    } else {\n      this.data.state = null;\n      this.data.stateModel = null;\n    }\n  }\n}\n\nclass LinkAnnotation extends Annotation {\n  constructor(params) {\n    super(params);\n\n    this.data.annotationType = AnnotationType.LINK;\n\n    const quadPoints = getQuadPoints(params.dict, this.rectangle);\n    if (quadPoints) {\n      this.data.quadPoints = quadPoints;\n    }\n\n    Catalog.parseDestDictionary({\n      destDict: params.dict,\n      resultObj: this.data,\n      docBaseUrl: params.pdfManager.docBaseUrl,\n    });\n  }\n}\n\nclass PopupAnnotation extends Annotation {\n  constructor(parameters) {\n    super(parameters);\n\n    this.data.annotationType = AnnotationType.POPUP;\n\n    let parentItem = parameters.dict.get(\"Parent\");\n    if (!parentItem) {\n      warn(\"Popup annotation has a missing or invalid parent annotation.\");\n      return;\n    }\n\n    const parentSubtype = parentItem.get(\"Subtype\");\n    this.data.parentType = isName(parentSubtype) ? parentSubtype.name : null;\n    const rawParent = parameters.dict.getRaw(\"Parent\");\n    this.data.parentId = isRef(rawParent) ? rawParent.toString() : null;\n\n    const rt = parentItem.get(\"RT\");\n    if (isName(rt, AnnotationReplyType.GROUP)) {\n      // Subordinate annotations in a group should inherit\n      // the group attributes from the primary annotation.\n      parentItem = parentItem.get(\"IRT\");\n    }\n\n    if (!parentItem.has(\"M\")) {\n      this.data.modificationDate = null;\n    } else {\n      this.setModificationDate(parentItem.get(\"M\"));\n      this.data.modificationDate = this.modificationDate;\n    }\n\n    if (!parentItem.has(\"C\")) {\n      // Fall back to the default background color.\n      this.data.color = null;\n    } else {\n      this.setColor(parentItem.getArray(\"C\"));\n      this.data.color = this.color;\n    }\n\n    // If the Popup annotation is not viewable, but the parent annotation is,\n    // that is most likely a bug. Fallback to inherit the flags from the parent\n    // annotation (this is consistent with the behaviour in Adobe Reader).\n    if (!this.viewable) {\n      const parentFlags = parentItem.get(\"F\");\n      if (this._isViewable(parentFlags)) {\n        this.setFlags(parentFlags);\n      }\n    }\n\n    this.data.title = stringToPDFString(parentItem.get(\"T\") || \"\");\n    this.data.contents = stringToPDFString(parentItem.get(\"Contents\") || \"\");\n  }\n}\n\nclass FreeTextAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n\n    this.data.annotationType = AnnotationType.FREETEXT;\n  }\n}\n\nclass LineAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n\n    this.data.annotationType = AnnotationType.LINE;\n\n    this.data.lineCoordinates = Util.normalizeRect(\n      parameters.dict.getArray(\"L\")\n    );\n  }\n}\n\nclass SquareAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n\n    this.data.annotationType = AnnotationType.SQUARE;\n  }\n}\n\nclass CircleAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n\n    this.data.annotationType = AnnotationType.CIRCLE;\n  }\n}\n\nclass PolylineAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n\n    this.data.annotationType = AnnotationType.POLYLINE;\n\n    // The vertices array is an array of numbers representing the alternating\n    // horizontal and vertical coordinates, respectively, of each vertex.\n    // Convert this to an array of objects with x and y coordinates.\n    const rawVertices = parameters.dict.getArray(\"Vertices\");\n    this.data.vertices = [];\n    for (let i = 0, ii = rawVertices.length; i < ii; i += 2) {\n      this.data.vertices.push({\n        x: rawVertices[i],\n        y: rawVertices[i + 1],\n      });\n    }\n  }\n}\n\nclass PolygonAnnotation extends PolylineAnnotation {\n  constructor(parameters) {\n    // Polygons are specific forms of polylines, so reuse their logic.\n    super(parameters);\n\n    this.data.annotationType = AnnotationType.POLYGON;\n  }\n}\n\nclass CaretAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n\n    this.data.annotationType = AnnotationType.CARET;\n  }\n}\n\nclass InkAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n\n    this.data.annotationType = AnnotationType.INK;\n\n    const xref = parameters.xref;\n    const originalInkLists = parameters.dict.getArray(\"InkList\");\n    this.data.inkLists = [];\n    for (let i = 0, ii = originalInkLists.length; i < ii; ++i) {\n      // The raw ink lists array contains arrays of numbers representing\n      // the alternating horizontal and vertical coordinates, respectively,\n      // of each vertex. Convert this to an array of objects with x and y\n      // coordinates.\n      this.data.inkLists.push([]);\n      for (let j = 0, jj = originalInkLists[i].length; j < jj; j += 2) {\n        this.data.inkLists[i].push({\n          x: xref.fetchIfRef(originalInkLists[i][j]),\n          y: xref.fetchIfRef(originalInkLists[i][j + 1]),\n        });\n      }\n    }\n  }\n}\n\nclass HighlightAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n\n    this.data.annotationType = AnnotationType.HIGHLIGHT;\n\n    const quadPoints = getQuadPoints(parameters.dict, this.rectangle);\n    if (quadPoints) {\n      this.data.quadPoints = quadPoints;\n    }\n  }\n}\n\nclass UnderlineAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n\n    this.data.annotationType = AnnotationType.UNDERLINE;\n\n    const quadPoints = getQuadPoints(parameters.dict, this.rectangle);\n    if (quadPoints) {\n      this.data.quadPoints = quadPoints;\n    }\n  }\n}\n\nclass SquigglyAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n\n    this.data.annotationType = AnnotationType.SQUIGGLY;\n\n    const quadPoints = getQuadPoints(parameters.dict, this.rectangle);\n    if (quadPoints) {\n      this.data.quadPoints = quadPoints;\n    }\n  }\n}\n\nclass StrikeOutAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n\n    this.data.annotationType = AnnotationType.STRIKEOUT;\n\n    const quadPoints = getQuadPoints(parameters.dict, this.rectangle);\n    if (quadPoints) {\n      this.data.quadPoints = quadPoints;\n    }\n  }\n}\n\nclass StampAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n\n    this.data.annotationType = AnnotationType.STAMP;\n  }\n}\n\nclass FileAttachmentAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n\n    const file = new FileSpec(parameters.dict.get(\"FS\"), parameters.xref);\n\n    this.data.annotationType = AnnotationType.FILEATTACHMENT;\n    this.data.file = file.serializable;\n  }\n}\n\nexport {\n  Annotation,\n  AnnotationBorderStyle,\n  AnnotationFactory,\n  MarkupAnnotation,\n  getQuadPoints,\n};\n", "/* Copyright 2017 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, ImageKind, OPS, warn } from \"../shared/util.js\";\n\nvar QueueOptimizer = (function QueueOptimizerClosure() {\n  function addState(parentState, pattern, checkFn, iterateFn, processFn) {\n    var state = parentState;\n    for (var i = 0, ii = pattern.length - 1; i < ii; i++) {\n      var item = pattern[i];\n      state = state[item] || (state[item] = []);\n    }\n    state[pattern[pattern.length - 1]] = {\n      checkFn,\n      iterateFn,\n      processFn,\n    };\n  }\n\n  function handlePaintSolidColorImageMask(\n    iFirstSave,\n    count,\n    fnArray,\n    argsArray\n  ) {\n    // Handles special case of mainly LaTeX documents which use image masks to\n    // draw lines with the current fill style.\n    // 'count' groups of (save, transform, paintImageMaskXObject, restore)+\n    // have been found at iFirstSave.\n    var iFirstPIMXO = iFirstSave + 2;\n    for (var i = 0; i < count; i++) {\n      var arg = argsArray[iFirstPIMXO + 4 * i];\n      var imageMask = arg.length === 1 && arg[0];\n      if (\n        imageMask &&\n        imageMask.width === 1 &&\n        imageMask.height === 1 &&\n        (!imageMask.data.length ||\n          (imageMask.data.length === 1 && imageMask.data[0] === 0))\n      ) {\n        fnArray[iFirstPIMXO + 4 * i] = OPS.paintSolidColorImageMask;\n        continue;\n      }\n      break;\n    }\n    return count - i;\n  }\n\n  var InitialState = [];\n\n  // This replaces (save, transform, paintInlineImageXObject, restore)+\n  // sequences with one |paintInlineImageXObjectGroup| operation.\n  addState(\n    InitialState,\n    [OPS.save, OPS.transform, OPS.paintInlineImageXObject, OPS.restore],\n    null,\n    function iterateInlineImageGroup(context, i) {\n      var fnArray = context.fnArray;\n      var iFirstSave = context.iCurr - 3;\n      var pos = (i - iFirstSave) % 4;\n      switch (pos) {\n        case 0:\n          return fnArray[i] === OPS.save;\n        case 1:\n          return fnArray[i] === OPS.transform;\n        case 2:\n          return fnArray[i] === OPS.paintInlineImageXObject;\n        case 3:\n          return fnArray[i] === OPS.restore;\n      }\n      throw new Error(`iterateInlineImageGroup - invalid pos: ${pos}`);\n    },\n    function foundInlineImageGroup(context, i) {\n      var MIN_IMAGES_IN_INLINE_IMAGES_BLOCK = 10;\n      var MAX_IMAGES_IN_INLINE_IMAGES_BLOCK = 200;\n      var MAX_WIDTH = 1000;\n      var IMAGE_PADDING = 1;\n\n      var fnArray = context.fnArray,\n        argsArray = context.argsArray;\n      var curr = context.iCurr;\n      var iFirstSave = curr - 3;\n      var iFirstTransform = curr - 2;\n      var iFirstPIIXO = curr - 1;\n\n      var count = Math.min(\n        Math.floor((i - iFirstSave) / 4),\n        MAX_IMAGES_IN_INLINE_IMAGES_BLOCK\n      );\n      if (count < MIN_IMAGES_IN_INLINE_IMAGES_BLOCK) {\n        return i - ((i - iFirstSave) % 4);\n      }\n\n      // assuming that heights of those image is too small (~1 pixel)\n      // packing as much as possible by lines\n      var maxX = 0;\n      var map = [],\n        maxLineHeight = 0;\n      var currentX = IMAGE_PADDING,\n        currentY = IMAGE_PADDING;\n      var q;\n      for (q = 0; q < count; q++) {\n        var transform = argsArray[iFirstTransform + (q << 2)];\n        var img = argsArray[iFirstPIIXO + (q << 2)][0];\n        if (currentX + img.width > MAX_WIDTH) {\n          // starting new line\n          maxX = Math.max(maxX, currentX);\n          currentY += maxLineHeight + 2 * IMAGE_PADDING;\n          currentX = 0;\n          maxLineHeight = 0;\n        }\n        map.push({\n          transform,\n          x: currentX,\n          y: currentY,\n          w: img.width,\n          h: img.height,\n        });\n        currentX += img.width + 2 * IMAGE_PADDING;\n        maxLineHeight = Math.max(maxLineHeight, img.height);\n      }\n      var imgWidth = Math.max(maxX, currentX) + IMAGE_PADDING;\n      var imgHeight = currentY + maxLineHeight + IMAGE_PADDING;\n      var imgData = new Uint8ClampedArray(imgWidth * imgHeight * 4);\n      var imgRowSize = imgWidth << 2;\n      for (q = 0; q < count; q++) {\n        var data = argsArray[iFirstPIIXO + (q << 2)][0].data;\n        // Copy image by lines and extends pixels into padding.\n        var rowSize = map[q].w << 2;\n        var dataOffset = 0;\n        var offset = (map[q].x + map[q].y * imgWidth) << 2;\n        imgData.set(data.subarray(0, rowSize), offset - imgRowSize);\n        for (var k = 0, kk = map[q].h; k < kk; k++) {\n          imgData.set(data.subarray(dataOffset, dataOffset + rowSize), offset);\n          dataOffset += rowSize;\n          offset += imgRowSize;\n        }\n        imgData.set(data.subarray(dataOffset - rowSize, dataOffset), offset);\n        while (offset >= 0) {\n          data[offset - 4] = data[offset];\n          data[offset - 3] = data[offset + 1];\n          data[offset - 2] = data[offset + 2];\n          data[offset - 1] = data[offset + 3];\n          data[offset + rowSize] = data[offset + rowSize - 4];\n          data[offset + rowSize + 1] = data[offset + rowSize - 3];\n          data[offset + rowSize + 2] = data[offset + rowSize - 2];\n          data[offset + rowSize + 3] = data[offset + rowSize - 1];\n          offset -= imgRowSize;\n        }\n      }\n\n      // Replace queue items.\n      fnArray.splice(iFirstSave, count * 4, OPS.paintInlineImageXObjectGroup);\n      argsArray.splice(iFirstSave, count * 4, [\n        {\n          width: imgWidth,\n          height: imgHeight,\n          kind: ImageKind.RGBA_32BPP,\n          data: imgData,\n        },\n        map,\n      ]);\n\n      return iFirstSave + 1;\n    }\n  );\n\n  // This replaces (save, transform, paintImageMaskXObject, restore)+\n  // sequences with one |paintImageMaskXObjectGroup| or one\n  // |paintImageMaskXObjectRepeat| operation.\n  addState(\n    InitialState,\n    [OPS.save, OPS.transform, OPS.paintImageMaskXObject, OPS.restore],\n    null,\n    function iterateImageMaskGroup(context, i) {\n      var fnArray = context.fnArray;\n      var iFirstSave = context.iCurr - 3;\n      var pos = (i - iFirstSave) % 4;\n      switch (pos) {\n        case 0:\n          return fnArray[i] === OPS.save;\n        case 1:\n          return fnArray[i] === OPS.transform;\n        case 2:\n          return fnArray[i] === OPS.paintImageMaskXObject;\n        case 3:\n          return fnArray[i] === OPS.restore;\n      }\n      throw new Error(`iterateImageMaskGroup - invalid pos: ${pos}`);\n    },\n    function foundImageMaskGroup(context, i) {\n      var MIN_IMAGES_IN_MASKS_BLOCK = 10;\n      var MAX_IMAGES_IN_MASKS_BLOCK = 100;\n      var MAX_SAME_IMAGES_IN_MASKS_BLOCK = 1000;\n\n      var fnArray = context.fnArray,\n        argsArray = context.argsArray;\n      var curr = context.iCurr;\n      var iFirstSave = curr - 3;\n      var iFirstTransform = curr - 2;\n      var iFirstPIMXO = curr - 1;\n\n      // At this point, i is the index of the first op past the last valid\n      // quartet.\n      var count = Math.floor((i - iFirstSave) / 4);\n      count = handlePaintSolidColorImageMask(\n        iFirstSave,\n        count,\n        fnArray,\n        argsArray\n      );\n      if (count < MIN_IMAGES_IN_MASKS_BLOCK) {\n        return i - ((i - iFirstSave) % 4);\n      }\n\n      var q;\n      var isSameImage = false;\n      var iTransform, transformArgs;\n      var firstPIMXOArg0 = argsArray[iFirstPIMXO][0];\n      if (\n        argsArray[iFirstTransform][1] === 0 &&\n        argsArray[iFirstTransform][2] === 0\n      ) {\n        isSameImage = true;\n        var firstTransformArg0 = argsArray[iFirstTransform][0];\n        var firstTransformArg3 = argsArray[iFirstTransform][3];\n        iTransform = iFirstTransform + 4;\n        var iPIMXO = iFirstPIMXO + 4;\n        for (q = 1; q < count; q++, iTransform += 4, iPIMXO += 4) {\n          transformArgs = argsArray[iTransform];\n          if (\n            argsArray[iPIMXO][0] !== firstPIMXOArg0 ||\n            transformArgs[0] !== firstTransformArg0 ||\n            transformArgs[1] !== 0 ||\n            transformArgs[2] !== 0 ||\n            transformArgs[3] !== firstTransformArg3\n          ) {\n            if (q < MIN_IMAGES_IN_MASKS_BLOCK) {\n              isSameImage = false;\n            } else {\n              count = q;\n            }\n            break; // different image or transform\n          }\n        }\n      }\n\n      if (isSameImage) {\n        count = Math.min(count, MAX_SAME_IMAGES_IN_MASKS_BLOCK);\n        var positions = new Float32Array(count * 2);\n        iTransform = iFirstTransform;\n        for (q = 0; q < count; q++, iTransform += 4) {\n          transformArgs = argsArray[iTransform];\n          positions[q << 1] = transformArgs[4];\n          positions[(q << 1) + 1] = transformArgs[5];\n        }\n\n        // Replace queue items.\n        fnArray.splice(iFirstSave, count * 4, OPS.paintImageMaskXObjectRepeat);\n        argsArray.splice(iFirstSave, count * 4, [\n          firstPIMXOArg0,\n          firstTransformArg0,\n          firstTransformArg3,\n          positions,\n        ]);\n      } else {\n        count = Math.min(count, MAX_IMAGES_IN_MASKS_BLOCK);\n        var images = [];\n        for (q = 0; q < count; q++) {\n          transformArgs = argsArray[iFirstTransform + (q << 2)];\n          var maskParams = argsArray[iFirstPIMXO + (q << 2)][0];\n          images.push({\n            data: maskParams.data,\n            width: maskParams.width,\n            height: maskParams.height,\n            transform: transformArgs,\n          });\n        }\n\n        // Replace queue items.\n        fnArray.splice(iFirstSave, count * 4, OPS.paintImageMaskXObjectGroup);\n        argsArray.splice(iFirstSave, count * 4, [images]);\n      }\n\n      return iFirstSave + 1;\n    }\n  );\n\n  // This replaces (save, transform, paintImageXObject, restore)+ sequences\n  // with one paintImageXObjectRepeat operation, if the |transform| and\n  // |paintImageXObjectRepeat| ops are appropriate.\n  addState(\n    InitialState,\n    [OPS.save, OPS.transform, OPS.paintImageXObject, OPS.restore],\n    function (context) {\n      var argsArray = context.argsArray;\n      var iFirstTransform = context.iCurr - 2;\n      return (\n        argsArray[iFirstTransform][1] === 0 &&\n        argsArray[iFirstTransform][2] === 0\n      );\n    },\n    function iterateImageGroup(context, i) {\n      var fnArray = context.fnArray,\n        argsArray = context.argsArray;\n      var iFirstSave = context.iCurr - 3;\n      var pos = (i - iFirstSave) % 4;\n      switch (pos) {\n        case 0:\n          return fnArray[i] === OPS.save;\n        case 1:\n          if (fnArray[i] !== OPS.transform) {\n            return false;\n          }\n          var iFirstTransform = context.iCurr - 2;\n          var firstTransformArg0 = argsArray[iFirstTransform][0];\n          var firstTransformArg3 = argsArray[iFirstTransform][3];\n          if (\n            argsArray[i][0] !== firstTransformArg0 ||\n            argsArray[i][1] !== 0 ||\n            argsArray[i][2] !== 0 ||\n            argsArray[i][3] !== firstTransformArg3\n          ) {\n            return false; // transforms don't match\n          }\n          return true;\n        case 2:\n          if (fnArray[i] !== OPS.paintImageXObject) {\n            return false;\n          }\n          var iFirstPIXO = context.iCurr - 1;\n          var firstPIXOArg0 = argsArray[iFirstPIXO][0];\n          if (argsArray[i][0] !== firstPIXOArg0) {\n            return false; // images don't match\n          }\n          return true;\n        case 3:\n          return fnArray[i] === OPS.restore;\n      }\n      throw new Error(`iterateImageGroup - invalid pos: ${pos}`);\n    },\n    function (context, i) {\n      var MIN_IMAGES_IN_BLOCK = 3;\n      var MAX_IMAGES_IN_BLOCK = 1000;\n\n      var fnArray = context.fnArray,\n        argsArray = context.argsArray;\n      var curr = context.iCurr;\n      var iFirstSave = curr - 3;\n      var iFirstTransform = curr - 2;\n      var iFirstPIXO = curr - 1;\n      var firstPIXOArg0 = argsArray[iFirstPIXO][0];\n      var firstTransformArg0 = argsArray[iFirstTransform][0];\n      var firstTransformArg3 = argsArray[iFirstTransform][3];\n\n      // At this point, i is the index of the first op past the last valid\n      // quartet.\n      var count = Math.min(\n        Math.floor((i - iFirstSave) / 4),\n        MAX_IMAGES_IN_BLOCK\n      );\n      if (count < MIN_IMAGES_IN_BLOCK) {\n        return i - ((i - iFirstSave) % 4);\n      }\n\n      // Extract the (x,y) positions from all of the matching transforms.\n      var positions = new Float32Array(count * 2);\n      var iTransform = iFirstTransform;\n      for (var q = 0; q < count; q++, iTransform += 4) {\n        var transformArgs = argsArray[iTransform];\n        positions[q << 1] = transformArgs[4];\n        positions[(q << 1) + 1] = transformArgs[5];\n      }\n\n      // Replace queue items.\n      var args = [\n        firstPIXOArg0,\n        firstTransformArg0,\n        firstTransformArg3,\n        positions,\n      ];\n      fnArray.splice(iFirstSave, count * 4, OPS.paintImageXObjectRepeat);\n      argsArray.splice(iFirstSave, count * 4, args);\n\n      return iFirstSave + 1;\n    }\n  );\n\n  // This replaces (beginText, setFont, setTextMatrix, showText, endText)+\n  // sequences with (beginText, setFont, (setTextMatrix, showText)+, endText)+\n  // sequences, if the font for each one is the same.\n  addState(\n    InitialState,\n    [OPS.beginText, OPS.setFont, OPS.setTextMatrix, OPS.showText, OPS.endText],\n    null,\n    function iterateShowTextGroup(context, i) {\n      var fnArray = context.fnArray,\n        argsArray = context.argsArray;\n      var iFirstSave = context.iCurr - 4;\n      var pos = (i - iFirstSave) % 5;\n      switch (pos) {\n        case 0:\n          return fnArray[i] === OPS.beginText;\n        case 1:\n          return fnArray[i] === OPS.setFont;\n        case 2:\n          return fnArray[i] === OPS.setTextMatrix;\n        case 3:\n          if (fnArray[i] !== OPS.showText) {\n            return false;\n          }\n          var iFirstSetFont = context.iCurr - 3;\n          var firstSetFontArg0 = argsArray[iFirstSetFont][0];\n          var firstSetFontArg1 = argsArray[iFirstSetFont][1];\n          if (\n            argsArray[i][0] !== firstSetFontArg0 ||\n            argsArray[i][1] !== firstSetFontArg1\n          ) {\n            return false; // fonts don't match\n          }\n          return true;\n        case 4:\n          return fnArray[i] === OPS.endText;\n      }\n      throw new Error(`iterateShowTextGroup - invalid pos: ${pos}`);\n    },\n    function (context, i) {\n      var MIN_CHARS_IN_BLOCK = 3;\n      var MAX_CHARS_IN_BLOCK = 1000;\n\n      var fnArray = context.fnArray,\n        argsArray = context.argsArray;\n      var curr = context.iCurr;\n      var iFirstBeginText = curr - 4;\n      var iFirstSetFont = curr - 3;\n      var iFirstSetTextMatrix = curr - 2;\n      var iFirstShowText = curr - 1;\n      var iFirstEndText = curr;\n      var firstSetFontArg0 = argsArray[iFirstSetFont][0];\n      var firstSetFontArg1 = argsArray[iFirstSetFont][1];\n\n      // At this point, i is the index of the first op past the last valid\n      // quintet.\n      var count = Math.min(\n        Math.floor((i - iFirstBeginText) / 5),\n        MAX_CHARS_IN_BLOCK\n      );\n      if (count < MIN_CHARS_IN_BLOCK) {\n        return i - ((i - iFirstBeginText) % 5);\n      }\n\n      // If the preceding quintet is (<something>, setFont, setTextMatrix,\n      // showText, endText), include that as well. (E.g. <something> might be\n      // |dependency|.)\n      var iFirst = iFirstBeginText;\n      if (\n        iFirstBeginText >= 4 &&\n        fnArray[iFirstBeginText - 4] === fnArray[iFirstSetFont] &&\n        fnArray[iFirstBeginText - 3] === fnArray[iFirstSetTextMatrix] &&\n        fnArray[iFirstBeginText - 2] === fnArray[iFirstShowText] &&\n        fnArray[iFirstBeginText - 1] === fnArray[iFirstEndText] &&\n        argsArray[iFirstBeginText - 4][0] === firstSetFontArg0 &&\n        argsArray[iFirstBeginText - 4][1] === firstSetFontArg1\n      ) {\n        count++;\n        iFirst -= 5;\n      }\n\n      // Remove (endText, beginText, setFont) trios.\n      var iEndText = iFirst + 4;\n      for (var q = 1; q < count; q++) {\n        fnArray.splice(iEndText, 3);\n        argsArray.splice(iEndText, 3);\n        iEndText += 2;\n      }\n\n      return iEndText + 1;\n    }\n  );\n\n  // eslint-disable-next-line no-shadow\n  function QueueOptimizer(queue) {\n    this.queue = queue;\n    this.state = null;\n    this.context = {\n      iCurr: 0,\n      fnArray: queue.fnArray,\n      argsArray: queue.argsArray,\n    };\n    this.match = null;\n    this.lastProcessed = 0;\n  }\n\n  QueueOptimizer.prototype = {\n    _optimize() {\n      // Process new fnArray item(s) chunk.\n      const fnArray = this.queue.fnArray;\n      let i = this.lastProcessed,\n        ii = fnArray.length;\n      let state = this.state;\n      let match = this.match;\n      if (!state && !match && i + 1 === ii && !InitialState[fnArray[i]]) {\n        // Micro-optimization for the common case: last item is not\n        // optimizable, just skipping it.\n        this.lastProcessed = ii;\n        return;\n      }\n\n      const context = this.context;\n      while (i < ii) {\n        if (match) {\n          // Already find a block of potentially optimizable items, iterating...\n          const iterate = (0, match.iterateFn)(context, i);\n          if (iterate) {\n            i++;\n            continue;\n          }\n          // Found last items for the block, processing...\n          i = (0, match.processFn)(context, i + 1);\n          ii = fnArray.length;\n          match = null;\n          state = null;\n          if (i >= ii) {\n            break;\n          }\n        }\n        // Find the potentially optimizable items.\n        state = (state || InitialState)[fnArray[i]];\n        if (!state || Array.isArray(state)) {\n          i++;\n          continue;\n        }\n        // Found a start of the block based on addState rules.\n        context.iCurr = i;\n        i++;\n        if (state.checkFn && !(0, state.checkFn)(context)) {\n          // Check failed, continue search...\n          state = null;\n          continue;\n        }\n        match = state;\n        state = null;\n      }\n      this.state = state;\n      this.match = match;\n      this.lastProcessed = i;\n    },\n\n    push(fn, args) {\n      this.queue.fnArray.push(fn);\n      this.queue.argsArray.push(args);\n      this._optimize();\n    },\n\n    flush() {\n      while (this.match) {\n        const length = this.queue.fnArray.length;\n        this.lastProcessed = (0, this.match.processFn)(this.context, length);\n        this.match = null;\n        this.state = null;\n        // Repeat optimization until all chunks are exhausted.\n        this._optimize();\n      }\n    },\n\n    reset() {\n      this.state = null;\n      this.match = null;\n      this.lastProcessed = 0;\n    },\n  };\n  return QueueOptimizer;\n})();\n\nvar NullOptimizer = (function NullOptimizerClosure() {\n  // eslint-disable-next-line no-shadow\n  function NullOptimizer(queue) {\n    this.queue = queue;\n  }\n\n  NullOptimizer.prototype = {\n    push(fn, args) {\n      this.queue.fnArray.push(fn);\n      this.queue.argsArray.push(args);\n    },\n\n    flush() {},\n\n    reset() {},\n  };\n\n  return NullOptimizer;\n})();\n\nvar OperatorList = (function OperatorListClosure() {\n  var CHUNK_SIZE = 1000;\n  var CHUNK_SIZE_ABOUT = CHUNK_SIZE - 5; // close to chunk size\n\n  // eslint-disable-next-line no-shadow\n  function OperatorList(intent, streamSink, pageIndex) {\n    this._streamSink = streamSink;\n    this.fnArray = [];\n    this.argsArray = [];\n    if (streamSink && intent !== \"oplist\") {\n      this.optimizer = new QueueOptimizer(this);\n    } else {\n      this.optimizer = new NullOptimizer(this);\n    }\n    this.dependencies = Object.create(null);\n    this._totalLength = 0;\n    this.pageIndex = pageIndex;\n    this.intent = intent;\n    this.weight = 0;\n    this._resolved = streamSink ? null : Promise.resolve();\n  }\n\n  OperatorList.prototype = {\n    get length() {\n      return this.argsArray.length;\n    },\n\n    get ready() {\n      return this._resolved || this._streamSink.ready;\n    },\n\n    /**\n     * @type {number} The total length of the entire operator list, since\n     *                `this.length === 0` after flushing.\n     */\n    get totalLength() {\n      return this._totalLength + this.length;\n    },\n\n    addOp(fn, args) {\n      this.optimizer.push(fn, args);\n      this.weight++;\n      if (this._streamSink) {\n        if (this.weight >= CHUNK_SIZE) {\n          this.flush();\n        } else if (\n          this.weight >= CHUNK_SIZE_ABOUT &&\n          (fn === OPS.restore || fn === OPS.endText)\n        ) {\n          // heuristic to flush on boundary of restore or endText\n          this.flush();\n        }\n      }\n    },\n\n    addDependency(dependency) {\n      if (dependency in this.dependencies) {\n        return;\n      }\n      this.dependencies[dependency] = true;\n      this.addOp(OPS.dependency, [dependency]);\n    },\n\n    addDependencies(dependencies) {\n      for (var key in dependencies) {\n        this.addDependency(key);\n      }\n    },\n\n    addOpList(opList) {\n      if (!(opList instanceof OperatorList)) {\n        warn('addOpList - ignoring invalid \"opList\" parameter.');\n        return;\n      }\n      Object.assign(this.dependencies, opList.dependencies);\n      for (var i = 0, ii = opList.length; i < ii; i++) {\n        this.addOp(opList.fnArray[i], opList.argsArray[i]);\n      }\n    },\n\n    getIR() {\n      return {\n        fnArray: this.fnArray,\n        argsArray: this.argsArray,\n        length: this.length,\n      };\n    },\n\n    get _transfers() {\n      const transfers = [];\n      const { fnArray, argsArray, length } = this;\n      for (let i = 0; i < length; i++) {\n        switch (fnArray[i]) {\n          case OPS.paintInlineImageXObject:\n          case OPS.paintInlineImageXObjectGroup:\n          case OPS.paintImageMaskXObject:\n            const arg = argsArray[i][0]; // first param in imgData\n\n            if (\n              typeof PDFJSDev === \"undefined\" ||\n              PDFJSDev.test(\"!PRODUCTION || TESTING\")\n            ) {\n              assert(\n                arg.data instanceof Uint8ClampedArray,\n                'OperatorList._transfers: Unsupported \"arg.data\" type.'\n              );\n            }\n            if (!arg.cached) {\n              transfers.push(arg.data.buffer);\n            }\n            break;\n        }\n      }\n      return transfers;\n    },\n\n    flush(lastChunk = false) {\n      this.optimizer.flush();\n      const length = this.length;\n      this._totalLength += length;\n\n      this._streamSink.enqueue(\n        {\n          fnArray: this.fnArray,\n          argsArray: this.argsArray,\n          lastChunk,\n          length,\n        },\n        1,\n        this._transfers\n      );\n\n      this.dependencies = Object.create(null);\n      this.fnArray.length = 0;\n      this.argsArray.length = 0;\n      this.weight = 0;\n      this.optimizer.reset();\n    },\n  };\n\n  return OperatorList;\n})();\n\nexport { OperatorList };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AbortException,\n  assert,\n  CMapCompressionType,\n  createPromiseCapability,\n  FONT_IDENTITY_MATRIX,\n  FormatError,\n  IDENTITY_MATRIX,\n  info,\n  isArrayEqual,\n  isNum,\n  isString,\n  OPS,\n  stringToPDFString,\n  TextRenderingMode,\n  UNSUPPORTED_FEATURES,\n  Util,\n  warn,\n} from \"../shared/util.js\";\nimport { CMapFactory, IdentityCMap } from \"./cmap.js\";\nimport {\n  Cmd,\n  Dict,\n  EOF,\n  isDict,\n  isName,\n  isRef,\n  isStream,\n  Name,\n  Ref,\n} from \"./primitives.js\";\nimport {\n  ErrorFont,\n  Font,\n  FontFlags,\n  getFontType,\n  IdentityToUnicodeMap,\n  ToUnicodeMap,\n} from \"./fonts.js\";\nimport {\n  getEncoding,\n  MacRomanEncoding,\n  StandardEncoding,\n  SymbolSetEncoding,\n  WinAnsiEncoding,\n  ZapfDingbatsEncoding,\n} from \"./encodings.js\";\nimport { getLookupTableFactory, MissingDataException } from \"./core_utils.js\";\nimport {\n  getNormalizedUnicodes,\n  getUnicodeForGlyph,\n  reverseIfRtl,\n} from \"./unicode.js\";\nimport {\n  getSerifFonts,\n  getStdFontMap,\n  getSymbolsFonts,\n} from \"./standard_fonts.js\";\nimport { getTilingPatternIR, Pattern } from \"./pattern.js\";\nimport { Lexer, Parser } from \"./parser.js\";\nimport { bidi } from \"./bidi.js\";\nimport { ColorSpace } from \"./colorspace.js\";\nimport { DecodeStream } from \"./stream.js\";\nimport { getGlyphsUnicode } from \"./glyphlist.js\";\nimport { getMetrics } from \"./metrics.js\";\nimport { isPDFFunction } from \"./function.js\";\nimport { LocalImageCache } from \"./image_utils.js\";\nimport { MurmurHash3_64 } from \"./murmurhash3.js\";\nimport { OperatorList } from \"./operator_list.js\";\nimport { PDFImage } from \"./image.js\";\n\nvar PartialEvaluator = (function PartialEvaluatorClosure() {\n  const DefaultPartialEvaluatorOptions = {\n    maxImageSize: -1,\n    disableFontFace: false,\n    ignoreErrors: false,\n    isEvalSupported: true,\n    fontExtraProperties: false,\n  };\n\n  // eslint-disable-next-line no-shadow\n  function PartialEvaluator({\n    xref,\n    handler,\n    pageIndex,\n    idFactory,\n    fontCache,\n    builtInCMapCache,\n    globalImageCache,\n    options = null,\n    pdfFunctionFactory,\n  }) {\n    this.xref = xref;\n    this.handler = handler;\n    this.pageIndex = pageIndex;\n    this.idFactory = idFactory;\n    this.fontCache = fontCache;\n    this.builtInCMapCache = builtInCMapCache;\n    this.globalImageCache = globalImageCache;\n    this.options = options || DefaultPartialEvaluatorOptions;\n    this.pdfFunctionFactory = pdfFunctionFactory;\n    this.parsingType3Font = false;\n\n    this.fetchBuiltInCMap = async name => {\n      if (this.builtInCMapCache.has(name)) {\n        return this.builtInCMapCache.get(name);\n      }\n      const readableStream = this.handler.sendWithStream(\"FetchBuiltInCMap\", {\n        name,\n      });\n      const reader = readableStream.getReader();\n\n      const data = await new Promise(function (resolve, reject) {\n        function pump() {\n          reader.read().then(function ({ value, done }) {\n            if (done) {\n              return;\n            }\n            resolve(value);\n            pump();\n          }, reject);\n        }\n        pump();\n      });\n\n      if (data.compressionType !== CMapCompressionType.NONE) {\n        // Given the size of uncompressed CMaps, only cache compressed ones.\n        this.builtInCMapCache.set(name, data);\n      }\n      return data;\n    };\n  }\n\n  // Trying to minimize Date.now() usage and check every 100 time\n  var TIME_SLOT_DURATION_MS = 20;\n  var CHECK_TIME_EVERY = 100;\n  function TimeSlotManager() {\n    this.reset();\n  }\n  TimeSlotManager.prototype = {\n    check: function TimeSlotManager_check() {\n      if (++this.checked < CHECK_TIME_EVERY) {\n        return false;\n      }\n      this.checked = 0;\n      return this.endTime <= Date.now();\n    },\n    reset: function TimeSlotManager_reset() {\n      this.endTime = Date.now() + TIME_SLOT_DURATION_MS;\n      this.checked = 0;\n    },\n  };\n\n  // Convert PDF blend mode names to HTML5 blend mode names.\n  function normalizeBlendMode(value, parsingArray = false) {\n    if (Array.isArray(value)) {\n      // Use the first *supported* BM value in the Array (fixes issue11279.pdf).\n      for (let i = 0, ii = value.length; i < ii; i++) {\n        const maybeBM = normalizeBlendMode(value[i], /* parsingArray = */ true);\n        if (maybeBM) {\n          return maybeBM;\n        }\n      }\n      warn(`Unsupported blend mode Array: ${value}`);\n      return \"source-over\";\n    }\n\n    if (!isName(value)) {\n      if (parsingArray) {\n        return null;\n      }\n      return \"source-over\";\n    }\n    switch (value.name) {\n      case \"Normal\":\n      case \"Compatible\":\n        return \"source-over\";\n      case \"Multiply\":\n        return \"multiply\";\n      case \"Screen\":\n        return \"screen\";\n      case \"Overlay\":\n        return \"overlay\";\n      case \"Darken\":\n        return \"darken\";\n      case \"Lighten\":\n        return \"lighten\";\n      case \"ColorDodge\":\n        return \"color-dodge\";\n      case \"ColorBurn\":\n        return \"color-burn\";\n      case \"HardLight\":\n        return \"hard-light\";\n      case \"SoftLight\":\n        return \"soft-light\";\n      case \"Difference\":\n        return \"difference\";\n      case \"Exclusion\":\n        return \"exclusion\";\n      case \"Hue\":\n        return \"hue\";\n      case \"Saturation\":\n        return \"saturation\";\n      case \"Color\":\n        return \"color\";\n      case \"Luminosity\":\n        return \"luminosity\";\n    }\n    if (parsingArray) {\n      return null;\n    }\n    warn(`Unsupported blend mode: ${value.name}`);\n    return \"source-over\";\n  }\n\n  var deferred = Promise.resolve();\n\n  var TILING_PATTERN = 1,\n    SHADING_PATTERN = 2;\n\n  PartialEvaluator.prototype = {\n    clone(newOptions = DefaultPartialEvaluatorOptions) {\n      var newEvaluator = Object.create(this);\n      newEvaluator.options = newOptions;\n      return newEvaluator;\n    },\n\n    hasBlendModes: function PartialEvaluator_hasBlendModes(resources) {\n      if (!(resources instanceof Dict)) {\n        return false;\n      }\n\n      var processed = Object.create(null);\n      if (resources.objId) {\n        processed[resources.objId] = true;\n      }\n\n      var nodes = [resources],\n        xref = this.xref;\n      while (nodes.length) {\n        var node = nodes.shift();\n        // First check the current resources for blend modes.\n        var graphicStates = node.get(\"ExtGState\");\n        if (graphicStates instanceof Dict) {\n          var graphicStatesKeys = graphicStates.getKeys();\n          for (let i = 0, ii = graphicStatesKeys.length; i < ii; i++) {\n            const key = graphicStatesKeys[i];\n\n            let graphicState = graphicStates.getRaw(key);\n            if (graphicState instanceof Ref) {\n              if (processed[graphicState.toString()]) {\n                continue; // The ExtGState has already been processed.\n              }\n              try {\n                graphicState = xref.fetch(graphicState);\n              } catch (ex) {\n                if (ex instanceof MissingDataException) {\n                  throw ex;\n                }\n                if (this.options.ignoreErrors) {\n                  if (graphicState instanceof Ref) {\n                    // Avoid parsing a corrupt ExtGState more than once.\n                    processed[graphicState.toString()] = true;\n                  }\n                  // Error(s) in the ExtGState -- sending unsupported feature\n                  // notification and allow parsing/rendering to continue.\n                  this.handler.send(\"UnsupportedFeature\", {\n                    featureId: UNSUPPORTED_FEATURES.errorExtGState,\n                  });\n                  warn(`hasBlendModes - ignoring ExtGState: \"${ex}\".`);\n                  continue;\n                }\n                throw ex;\n              }\n            }\n            if (!(graphicState instanceof Dict)) {\n              continue;\n            }\n            if (graphicState.objId) {\n              processed[graphicState.objId] = true;\n            }\n\n            const bm = graphicState.get(\"BM\");\n            if (bm instanceof Name) {\n              if (bm.name !== \"Normal\") {\n                return true;\n              }\n              continue;\n            }\n            if (bm !== undefined && Array.isArray(bm)) {\n              for (let j = 0, jj = bm.length; j < jj; j++) {\n                if (bm[j] instanceof Name && bm[j].name !== \"Normal\") {\n                  return true;\n                }\n              }\n            }\n          }\n        }\n        // Descend into the XObjects to look for more resources and blend modes.\n        var xObjects = node.get(\"XObject\");\n        if (!(xObjects instanceof Dict)) {\n          continue;\n        }\n        var xObjectsKeys = xObjects.getKeys();\n        for (let i = 0, ii = xObjectsKeys.length; i < ii; i++) {\n          const key = xObjectsKeys[i];\n\n          var xObject = xObjects.getRaw(key);\n          if (xObject instanceof Ref) {\n            if (processed[xObject.toString()]) {\n              // The XObject has already been processed, and by avoiding a\n              // redundant `xref.fetch` we can *significantly* reduce the load\n              // time for badly generated PDF files (fixes issue6961.pdf).\n              continue;\n            }\n            try {\n              xObject = xref.fetch(xObject);\n            } catch (ex) {\n              if (ex instanceof MissingDataException) {\n                throw ex;\n              }\n              if (this.options.ignoreErrors) {\n                if (xObject instanceof Ref) {\n                  // Avoid parsing a corrupt XObject more than once.\n                  processed[xObject.toString()] = true;\n                }\n                // Error(s) in the XObject -- sending unsupported feature\n                // notification and allow parsing/rendering to continue.\n                this.handler.send(\"UnsupportedFeature\", {\n                  featureId: UNSUPPORTED_FEATURES.errorXObject,\n                });\n                warn(`hasBlendModes - ignoring XObject: \"${ex}\".`);\n                continue;\n              }\n              throw ex;\n            }\n          }\n          if (!isStream(xObject)) {\n            continue;\n          }\n          if (xObject.dict.objId) {\n            if (processed[xObject.dict.objId]) {\n              continue; // Stream has objId and was processed already.\n            }\n            processed[xObject.dict.objId] = true;\n          }\n          var xResources = xObject.dict.get(\"Resources\");\n          // Checking objId to detect an infinite loop.\n          if (\n            xResources instanceof Dict &&\n            (!xResources.objId || !processed[xResources.objId])\n          ) {\n            nodes.push(xResources);\n            if (xResources.objId) {\n              processed[xResources.objId] = true;\n            }\n          }\n        }\n      }\n      return false;\n    },\n\n    async buildFormXObject(\n      resources,\n      xobj,\n      smask,\n      operatorList,\n      task,\n      initialState\n    ) {\n      var dict = xobj.dict;\n      var matrix = dict.getArray(\"Matrix\");\n      var bbox = dict.getArray(\"BBox\");\n      if (Array.isArray(bbox) && bbox.length === 4) {\n        bbox = Util.normalizeRect(bbox);\n      } else {\n        bbox = null;\n      }\n      var group = dict.get(\"Group\");\n      if (group) {\n        var groupOptions = {\n          matrix,\n          bbox,\n          smask,\n          isolated: false,\n          knockout: false,\n        };\n\n        var groupSubtype = group.get(\"S\");\n        var colorSpace = null;\n        if (isName(groupSubtype, \"Transparency\")) {\n          groupOptions.isolated = group.get(\"I\") || false;\n          groupOptions.knockout = group.get(\"K\") || false;\n          if (group.has(\"CS\")) {\n            colorSpace = await this.parseColorSpace({\n              cs: group.get(\"CS\"),\n              resources,\n            });\n          }\n        }\n\n        if (smask && smask.backdrop) {\n          colorSpace = colorSpace || ColorSpace.singletons.rgb;\n          smask.backdrop = colorSpace.getRgb(smask.backdrop, 0);\n        }\n\n        operatorList.addOp(OPS.beginGroup, [groupOptions]);\n      }\n\n      operatorList.addOp(OPS.paintFormXObjectBegin, [matrix, bbox]);\n\n      return this.getOperatorList({\n        stream: xobj,\n        task,\n        resources: dict.get(\"Resources\") || resources,\n        operatorList,\n        initialState,\n      }).then(function () {\n        operatorList.addOp(OPS.paintFormXObjectEnd, []);\n\n        if (group) {\n          operatorList.addOp(OPS.endGroup, [groupOptions]);\n        }\n      });\n    },\n\n    async buildPaintImageXObject({\n      resources,\n      image,\n      isInline = false,\n      operatorList,\n      cacheKey,\n      localImageCache,\n    }) {\n      var dict = image.dict;\n      const imageRef = dict.objId;\n      var w = dict.get(\"Width\", \"W\");\n      var h = dict.get(\"Height\", \"H\");\n\n      if (!(w && isNum(w)) || !(h && isNum(h))) {\n        warn(\"Image dimensions are missing, or not numbers.\");\n        return undefined;\n      }\n      var maxImageSize = this.options.maxImageSize;\n      if (maxImageSize !== -1 && w * h > maxImageSize) {\n        warn(\"Image exceeded maximum allowed size and was removed.\");\n        return undefined;\n      }\n\n      var imageMask = dict.get(\"ImageMask\", \"IM\") || false;\n      var imgData, args;\n      if (imageMask) {\n        // This depends on a tmpCanvas being filled with the\n        // current fillStyle, such that processing the pixel\n        // data can't be done here. Instead of creating a\n        // complete PDFImage, only read the information needed\n        // for later.\n\n        var width = dict.get(\"Width\", \"W\");\n        var height = dict.get(\"Height\", \"H\");\n        var bitStrideLength = (width + 7) >> 3;\n        var imgArray = image.getBytes(\n          bitStrideLength * height,\n          /* forceClamped = */ true\n        );\n        var decode = dict.getArray(\"Decode\", \"D\");\n\n        imgData = PDFImage.createMask({\n          imgArray,\n          width,\n          height,\n          imageIsFromDecodeStream: image instanceof DecodeStream,\n          inverseDecode: !!decode && decode[0] > 0,\n        });\n        imgData.cached = !!cacheKey;\n        args = [imgData];\n\n        operatorList.addOp(OPS.paintImageMaskXObject, args);\n        if (cacheKey) {\n          localImageCache.set(cacheKey, imageRef, {\n            fn: OPS.paintImageMaskXObject,\n            args,\n          });\n        }\n        return undefined;\n      }\n\n      var softMask = dict.get(\"SMask\", \"SM\") || false;\n      var mask = dict.get(\"Mask\") || false;\n\n      var SMALL_IMAGE_DIMENSIONS = 200;\n      // Inlining small images into the queue as RGB data\n      if (isInline && !softMask && !mask && w + h < SMALL_IMAGE_DIMENSIONS) {\n        const imageObj = new PDFImage({\n          xref: this.xref,\n          res: resources,\n          image,\n          isInline,\n          pdfFunctionFactory: this.pdfFunctionFactory,\n        });\n        // We force the use of RGBA_32BPP images here, because we can't handle\n        // any other kind.\n        imgData = imageObj.createImageData(/* forceRGBA = */ true);\n        operatorList.addOp(OPS.paintInlineImageXObject, [imgData]);\n        return undefined;\n      }\n\n      // If there is no imageMask, create the PDFImage and a lot\n      // of image processing can be done here.\n      let objId = `img_${this.idFactory.createObjId()}`,\n        cacheGlobally = false;\n\n      if (this.parsingType3Font) {\n        objId = `${this.idFactory.getDocId()}_type3res_${objId}`;\n      } else if (imageRef) {\n        cacheGlobally = this.globalImageCache.shouldCache(\n          imageRef,\n          this.pageIndex\n        );\n\n        if (cacheGlobally) {\n          objId = `${this.idFactory.getDocId()}_${objId}`;\n        }\n      }\n\n      // Ensure that the dependency is added before the image is decoded.\n      operatorList.addDependency(objId);\n      args = [objId, w, h];\n\n      const imgPromise = PDFImage.buildImage({\n        xref: this.xref,\n        res: resources,\n        image,\n        isInline,\n        pdfFunctionFactory: this.pdfFunctionFactory,\n      })\n        .then(imageObj => {\n          imgData = imageObj.createImageData(/* forceRGBA = */ false);\n\n          if (this.parsingType3Font) {\n            return this.handler.sendWithPromise(\n              \"commonobj\",\n              [objId, \"FontType3Res\", imgData],\n              [imgData.data.buffer]\n            );\n          } else if (cacheGlobally) {\n            this.handler.send(\n              \"commonobj\",\n              [objId, \"Image\", imgData],\n              [imgData.data.buffer]\n            );\n            return undefined;\n          }\n          this.handler.send(\n            \"obj\",\n            [objId, this.pageIndex, \"Image\", imgData],\n            [imgData.data.buffer]\n          );\n          return undefined;\n        })\n        .catch(reason => {\n          warn(\"Unable to decode image: \" + reason);\n\n          if (this.parsingType3Font) {\n            return this.handler.sendWithPromise(\"commonobj\", [\n              objId,\n              \"FontType3Res\",\n              null,\n            ]);\n          } else if (cacheGlobally) {\n            this.handler.send(\"commonobj\", [objId, \"Image\", null]);\n            return undefined;\n          }\n          this.handler.send(\"obj\", [objId, this.pageIndex, \"Image\", null]);\n          return undefined;\n        });\n\n      if (this.parsingType3Font) {\n        // In the very rare case where a Type3 image resource is being parsed,\n        // wait for the image to be both decoded *and* sent to simplify the\n        // rendering code on the main-thread (see issue10717.pdf).\n        await imgPromise;\n      }\n\n      operatorList.addOp(OPS.paintImageXObject, args);\n      if (cacheKey) {\n        localImageCache.set(cacheKey, imageRef, {\n          fn: OPS.paintImageXObject,\n          args,\n        });\n\n        if (imageRef) {\n          assert(!isInline, \"Cannot cache an inline image globally.\");\n          this.globalImageCache.addPageIndex(imageRef, this.pageIndex);\n\n          if (cacheGlobally) {\n            this.globalImageCache.setData(imageRef, {\n              objId,\n              fn: OPS.paintImageXObject,\n              args,\n            });\n          }\n        }\n      }\n      return undefined;\n    },\n\n    handleSMask: function PartialEvaluator_handleSmask(\n      smask,\n      resources,\n      operatorList,\n      task,\n      stateManager\n    ) {\n      var smaskContent = smask.get(\"G\");\n      var smaskOptions = {\n        subtype: smask.get(\"S\").name,\n        backdrop: smask.get(\"BC\"),\n      };\n\n      // The SMask might have a alpha/luminosity value transfer function --\n      // we will build a map of integer values in range 0..255 to be fast.\n      var transferObj = smask.get(\"TR\");\n      if (isPDFFunction(transferObj)) {\n        const transferFn = this.pdfFunctionFactory.create(transferObj);\n        var transferMap = new Uint8Array(256);\n        var tmp = new Float32Array(1);\n        for (var i = 0; i < 256; i++) {\n          tmp[0] = i / 255;\n          transferFn(tmp, 0, tmp, 0);\n          transferMap[i] = (tmp[0] * 255) | 0;\n        }\n        smaskOptions.transferMap = transferMap;\n      }\n\n      return this.buildFormXObject(\n        resources,\n        smaskContent,\n        smaskOptions,\n        operatorList,\n        task,\n        stateManager.state.clone()\n      );\n    },\n\n    handleTilingType(\n      fn,\n      args,\n      resources,\n      pattern,\n      patternDict,\n      operatorList,\n      task\n    ) {\n      // Create an IR of the pattern code.\n      const tilingOpList = new OperatorList();\n      // Merge the available resources, to prevent issues when the patternDict\n      // is missing some /Resources entries (fixes issue6541.pdf).\n      const resourcesArray = [patternDict.get(\"Resources\"), resources];\n      const patternResources = Dict.merge(this.xref, resourcesArray);\n\n      return this.getOperatorList({\n        stream: pattern,\n        task,\n        resources: patternResources,\n        operatorList: tilingOpList,\n      })\n        .then(function () {\n          return getTilingPatternIR(\n            {\n              fnArray: tilingOpList.fnArray,\n              argsArray: tilingOpList.argsArray,\n            },\n            patternDict,\n            args\n          );\n        })\n        .then(\n          function (tilingPatternIR) {\n            // Add the dependencies to the parent operator list so they are\n            // resolved before the sub operator list is executed synchronously.\n            operatorList.addDependencies(tilingOpList.dependencies);\n            operatorList.addOp(fn, tilingPatternIR);\n          },\n          reason => {\n            if (reason instanceof AbortException) {\n              return;\n            }\n            if (this.options.ignoreErrors) {\n              // Error(s) in the TilingPattern -- sending unsupported feature\n              // notification and allow rendering to continue.\n              this.handler.send(\"UnsupportedFeature\", {\n                featureId: UNSUPPORTED_FEATURES.errorTilingPattern,\n              });\n              warn(`handleTilingType - ignoring pattern: \"${reason}\".`);\n              return;\n            }\n            throw reason;\n          }\n        );\n    },\n\n    handleSetFont: function PartialEvaluator_handleSetFont(\n      resources,\n      fontArgs,\n      fontRef,\n      operatorList,\n      task,\n      state\n    ) {\n      // TODO(mack): Not needed?\n      var fontName;\n      if (fontArgs) {\n        fontArgs = fontArgs.slice();\n        fontName = fontArgs[0].name;\n      }\n\n      return this.loadFont(fontName, fontRef, resources)\n        .then(translated => {\n          if (!translated.font.isType3Font) {\n            return translated;\n          }\n          return translated\n            .loadType3Data(this, resources, operatorList, task)\n            .then(function () {\n              return translated;\n            })\n            .catch(reason => {\n              // Error in the font data -- sending unsupported feature\n              // notification.\n              this.handler.send(\"UnsupportedFeature\", {\n                featureId: UNSUPPORTED_FEATURES.errorFontLoadType3,\n              });\n              return new TranslatedFont({\n                loadedName: \"g_font_error\",\n                font: new ErrorFont(`Type3 font load error: ${reason}`),\n                dict: translated.font,\n                extraProperties: this.options.fontExtraProperties,\n              });\n            });\n        })\n        .then(translated => {\n          state.font = translated.font;\n          translated.send(this.handler);\n          return translated.loadedName;\n        });\n    },\n\n    handleText(chars, state) {\n      const font = state.font;\n      const glyphs = font.charsToGlyphs(chars);\n\n      if (font.data) {\n        const isAddToPathSet = !!(\n          state.textRenderingMode & TextRenderingMode.ADD_TO_PATH_FLAG\n        );\n        if (\n          isAddToPathSet ||\n          state.fillColorSpace.name === \"Pattern\" ||\n          font.disableFontFace ||\n          this.options.disableFontFace\n        ) {\n          PartialEvaluator.buildFontPaths(font, glyphs, this.handler);\n        }\n      }\n      return glyphs;\n    },\n\n    ensureStateFont(state) {\n      if (state.font) {\n        return;\n      }\n      const reason = new FormatError(\n        \"Missing setFont (Tf) operator before text rendering operator.\"\n      );\n\n      if (this.options.ignoreErrors) {\n        // Missing setFont operator before text rendering operator -- sending\n        // unsupported feature notification and allow rendering to continue.\n        this.handler.send(\"UnsupportedFeature\", {\n          featureId: UNSUPPORTED_FEATURES.errorFontState,\n        });\n        warn(`ensureStateFont: \"${reason}\".`);\n        return;\n      }\n      throw reason;\n    },\n\n    setGState: function PartialEvaluator_setGState(\n      resources,\n      gState,\n      operatorList,\n      task,\n      stateManager\n    ) {\n      // This array holds the converted/processed state data.\n      var gStateObj = [];\n      var gStateKeys = gState.getKeys();\n      var promise = Promise.resolve();\n      for (var i = 0, ii = gStateKeys.length; i < ii; i++) {\n        const key = gStateKeys[i];\n        const value = gState.get(key);\n        switch (key) {\n          case \"Type\":\n            break;\n          case \"LW\":\n          case \"LC\":\n          case \"LJ\":\n          case \"ML\":\n          case \"D\":\n          case \"RI\":\n          case \"FL\":\n          case \"CA\":\n          case \"ca\":\n            gStateObj.push([key, value]);\n            break;\n          case \"Font\":\n            promise = promise.then(() => {\n              return this.handleSetFont(\n                resources,\n                null,\n                value[0],\n                operatorList,\n                task,\n                stateManager.state\n              ).then(function (loadedName) {\n                operatorList.addDependency(loadedName);\n                gStateObj.push([key, [loadedName, value[1]]]);\n              });\n            });\n            break;\n          case \"BM\":\n            gStateObj.push([key, normalizeBlendMode(value)]);\n            break;\n          case \"SMask\":\n            if (isName(value, \"None\")) {\n              gStateObj.push([key, false]);\n              break;\n            }\n            if (isDict(value)) {\n              promise = promise.then(() => {\n                return this.handleSMask(\n                  value,\n                  resources,\n                  operatorList,\n                  task,\n                  stateManager\n                );\n              });\n              gStateObj.push([key, true]);\n            } else {\n              warn(\"Unsupported SMask type\");\n            }\n\n            break;\n          // Only generate info log messages for the following since\n          // they are unlikely to have a big impact on the rendering.\n          case \"OP\":\n          case \"op\":\n          case \"OPM\":\n          case \"BG\":\n          case \"BG2\":\n          case \"UCR\":\n          case \"UCR2\":\n          case \"TR\":\n          case \"TR2\":\n          case \"HT\":\n          case \"SM\":\n          case \"SA\":\n          case \"AIS\":\n          case \"TK\":\n            // TODO implement these operators.\n            info(\"graphic state operator \" + key);\n            break;\n          default:\n            info(\"Unknown graphic state operator \" + key);\n            break;\n        }\n      }\n      return promise.then(function () {\n        if (gStateObj.length > 0) {\n          operatorList.addOp(OPS.setGState, [gStateObj]);\n        }\n      });\n    },\n\n    loadFont: function PartialEvaluator_loadFont(fontName, font, resources) {\n      const errorFont = () => {\n        return Promise.resolve(\n          new TranslatedFont({\n            loadedName: \"g_font_error\",\n            font: new ErrorFont(`Font \"${fontName}\" is not available.`),\n            dict: font,\n            extraProperties: this.options.fontExtraProperties,\n          })\n        );\n      };\n\n      var fontRef,\n        xref = this.xref;\n      if (font) {\n        // Loading by ref.\n        if (!isRef(font)) {\n          throw new FormatError('The \"font\" object should be a reference.');\n        }\n        fontRef = font;\n      } else {\n        // Loading by name.\n        var fontRes = resources.get(\"Font\");\n        if (fontRes) {\n          fontRef = fontRes.getRaw(fontName);\n        }\n      }\n      if (!fontRef) {\n        const partialMsg = `Font \"${\n          fontName || (font && font.toString())\n        }\" is not available`;\n\n        if (!this.options.ignoreErrors && !this.parsingType3Font) {\n          warn(`${partialMsg}.`);\n          return errorFont();\n        }\n        // Font not found -- sending unsupported feature notification.\n        this.handler.send(\"UnsupportedFeature\", {\n          featureId: UNSUPPORTED_FEATURES.errorFontMissing,\n        });\n        warn(`${partialMsg} -- attempting to fallback to a default font.`);\n\n        // Falling back to a default font to avoid completely broken rendering,\n        // but note that there're no guarantees that things will look \"correct\".\n        fontRef = PartialEvaluator.getFallbackFontDict();\n      }\n\n      if (this.fontCache.has(fontRef)) {\n        return this.fontCache.get(fontRef);\n      }\n\n      font = xref.fetchIfRef(fontRef);\n      if (!isDict(font)) {\n        return errorFont();\n      }\n\n      // We are holding `font.translated` references just for `fontRef`s that\n      // are not actually `Ref`s, but rather `Dict`s. See explanation below.\n      if (font.translated) {\n        return font.translated;\n      }\n\n      var fontCapability = createPromiseCapability();\n\n      var preEvaluatedFont = this.preEvaluateFont(font);\n      const { descriptor, hash } = preEvaluatedFont;\n\n      var fontRefIsRef = isRef(fontRef),\n        fontID;\n      if (fontRefIsRef) {\n        fontID = fontRef.toString();\n      }\n\n      if (hash && isDict(descriptor)) {\n        if (!descriptor.fontAliases) {\n          descriptor.fontAliases = Object.create(null);\n        }\n        var fontAliases = descriptor.fontAliases;\n\n        if (fontAliases[hash]) {\n          var aliasFontRef = fontAliases[hash].aliasRef;\n          if (\n            fontRefIsRef &&\n            aliasFontRef &&\n            this.fontCache.has(aliasFontRef)\n          ) {\n            this.fontCache.putAlias(fontRef, aliasFontRef);\n            return this.fontCache.get(fontRef);\n          }\n        } else {\n          fontAliases[hash] = {\n            fontID: Font.getFontID(),\n          };\n        }\n\n        if (fontRefIsRef) {\n          fontAliases[hash].aliasRef = fontRef;\n        }\n        fontID = fontAliases[hash].fontID;\n      }\n\n      // Workaround for bad PDF generators that reference fonts incorrectly,\n      // where `fontRef` is a `Dict` rather than a `Ref` (fixes bug946506.pdf).\n      // In this case we should not put the font into `this.fontCache` (which is\n      // a `RefSetCache`), since it's not meaningful to use a `Dict` as a key.\n      //\n      // However, if we don't cache the font it's not possible to remove it\n      // when `cleanup` is triggered from the API, which causes issues on\n      // subsequent rendering operations (see issue7403.pdf).\n      // A simple workaround would be to just not hold `font.translated`\n      // references in this case, but this would force us to unnecessarily load\n      // the same fonts over and over.\n      //\n      // Instead, we cheat a bit by attempting to use a modified `fontID` as a\n      // key in `this.fontCache`, to allow the font to be cached.\n      // NOTE: This works because `RefSetCache` calls `toString()` on provided\n      //       keys. Also, since `fontRef` is used when getting cached fonts,\n      //       we'll not accidentally match fonts cached with the `fontID`.\n      if (fontRefIsRef) {\n        this.fontCache.put(fontRef, fontCapability.promise);\n      } else {\n        if (!fontID) {\n          fontID = this.idFactory.createObjId();\n        }\n        this.fontCache.put(`id_${fontID}`, fontCapability.promise);\n      }\n      assert(fontID, 'The \"fontID\" must be defined.');\n\n      // Keep track of each font we translated so the caller can\n      // load them asynchronously before calling display on a page.\n      font.loadedName = `${this.idFactory.getDocId()}_f${fontID}`;\n\n      font.translated = fontCapability.promise;\n\n      // TODO move promises into translate font\n      var translatedPromise;\n      try {\n        translatedPromise = this.translateFont(preEvaluatedFont);\n      } catch (e) {\n        translatedPromise = Promise.reject(e);\n      }\n\n      translatedPromise\n        .then(translatedFont => {\n          if (translatedFont.fontType !== undefined) {\n            var xrefFontStats = xref.stats.fontTypes;\n            xrefFontStats[translatedFont.fontType] = true;\n          }\n\n          fontCapability.resolve(\n            new TranslatedFont({\n              loadedName: font.loadedName,\n              font: translatedFont,\n              dict: font,\n              extraProperties: this.options.fontExtraProperties,\n            })\n          );\n        })\n        .catch(reason => {\n          // TODO fontCapability.reject?\n          // Error in the font data -- sending unsupported feature notification.\n          this.handler.send(\"UnsupportedFeature\", {\n            featureId: UNSUPPORTED_FEATURES.errorFontTranslate,\n          });\n\n          try {\n            // error, but it's still nice to have font type reported\n            var fontFile3 = descriptor && descriptor.get(\"FontFile3\");\n            var subtype = fontFile3 && fontFile3.get(\"Subtype\");\n            var fontType = getFontType(\n              preEvaluatedFont.type,\n              subtype && subtype.name\n            );\n            var xrefFontStats = xref.stats.fontTypes;\n            xrefFontStats[fontType] = true;\n          } catch (ex) {}\n\n          fontCapability.resolve(\n            new TranslatedFont({\n              loadedName: font.loadedName,\n              font: new ErrorFont(\n                reason instanceof Error ? reason.message : reason\n              ),\n              dict: font,\n              extraProperties: this.options.fontExtraProperties,\n            })\n          );\n        });\n      return fontCapability.promise;\n    },\n\n    buildPath(operatorList, fn, args, parsingText = false) {\n      var lastIndex = operatorList.length - 1;\n      if (!args) {\n        args = [];\n      }\n      if (\n        lastIndex < 0 ||\n        operatorList.fnArray[lastIndex] !== OPS.constructPath\n      ) {\n        // Handle corrupt PDF documents that contains path operators inside of\n        // text objects, which may shift subsequent text, by enclosing the path\n        // operator in save/restore operators (fixes issue10542_reduced.pdf).\n        //\n        // Note that this will effectively disable the optimization in the\n        // `else` branch below, but given that this type of corruption is\n        // *extremely* rare that shouldn't really matter much in practice.\n        if (parsingText) {\n          warn(`Encountered path operator \"${fn}\" inside of a text object.`);\n          operatorList.addOp(OPS.save, null);\n        }\n\n        operatorList.addOp(OPS.constructPath, [[fn], args]);\n\n        if (parsingText) {\n          operatorList.addOp(OPS.restore, null);\n        }\n      } else {\n        var opArgs = operatorList.argsArray[lastIndex];\n        opArgs[0].push(fn);\n        Array.prototype.push.apply(opArgs[1], args);\n      }\n    },\n\n    parseColorSpace({ cs, resources }) {\n      return new Promise(resolve => {\n        resolve(\n          ColorSpace.parse(cs, this.xref, resources, this.pdfFunctionFactory)\n        );\n      }).catch(reason => {\n        if (reason instanceof AbortException) {\n          return null;\n        }\n        if (this.options.ignoreErrors) {\n          // Error(s) in the ColorSpace -- sending unsupported feature\n          // notification and allow rendering to continue.\n          this.handler.send(\"UnsupportedFeature\", {\n            featureId: UNSUPPORTED_FEATURES.errorColorSpace,\n          });\n          warn(`parseColorSpace - ignoring ColorSpace: \"${reason}\".`);\n          return null;\n        }\n        throw reason;\n      });\n    },\n\n    async handleColorN(operatorList, fn, args, cs, patterns, resources, task) {\n      // compile tiling patterns\n      var patternName = args[args.length - 1];\n      // SCN/scn applies patterns along with normal colors\n      var pattern;\n      if (isName(patternName) && (pattern = patterns.get(patternName.name))) {\n        var dict = isStream(pattern) ? pattern.dict : pattern;\n        var typeNum = dict.get(\"PatternType\");\n\n        if (typeNum === TILING_PATTERN) {\n          var color = cs.base ? cs.base.getRgb(args, 0) : null;\n          return this.handleTilingType(\n            fn,\n            color,\n            resources,\n            pattern,\n            dict,\n            operatorList,\n            task\n          );\n        } else if (typeNum === SHADING_PATTERN) {\n          var shading = dict.get(\"Shading\");\n          var matrix = dict.getArray(\"Matrix\");\n          pattern = Pattern.parseShading(\n            shading,\n            matrix,\n            this.xref,\n            resources,\n            this.handler,\n            this.pdfFunctionFactory\n          );\n          operatorList.addOp(fn, pattern.getIR());\n          return undefined;\n        }\n        throw new FormatError(`Unknown PatternType: ${typeNum}`);\n      }\n      throw new FormatError(`Unknown PatternName: ${patternName}`);\n    },\n\n    getOperatorList({\n      stream,\n      task,\n      resources,\n      operatorList,\n      initialState = null,\n    }) {\n      // Ensure that `resources`/`initialState` is correctly initialized,\n      // even if the provided parameter is e.g. `null`.\n      resources = resources || Dict.empty;\n      initialState = initialState || new EvalState();\n\n      if (!operatorList) {\n        throw new Error('getOperatorList: missing \"operatorList\" parameter');\n      }\n\n      var self = this;\n      var xref = this.xref;\n      let parsingText = false;\n      const localImageCache = new LocalImageCache();\n\n      var xobjs = resources.get(\"XObject\") || Dict.empty;\n      var patterns = resources.get(\"Pattern\") || Dict.empty;\n      var stateManager = new StateManager(initialState);\n      var preprocessor = new EvaluatorPreprocessor(stream, xref, stateManager);\n      var timeSlotManager = new TimeSlotManager();\n\n      function closePendingRestoreOPS(argument) {\n        for (var i = 0, ii = preprocessor.savedStatesDepth; i < ii; i++) {\n          operatorList.addOp(OPS.restore, []);\n        }\n      }\n\n      return new Promise(function promiseBody(resolve, reject) {\n        const next = function (promise) {\n          Promise.all([promise, operatorList.ready]).then(function () {\n            try {\n              promiseBody(resolve, reject);\n            } catch (ex) {\n              reject(ex);\n            }\n          }, reject);\n        };\n        task.ensureNotTerminated();\n        timeSlotManager.reset();\n        var stop,\n          operation = {},\n          i,\n          ii,\n          cs;\n        while (!(stop = timeSlotManager.check())) {\n          // The arguments parsed by read() are used beyond this loop, so we\n          // cannot reuse the same array on each iteration. Therefore we pass\n          // in |null| as the initial value (see the comment on\n          // EvaluatorPreprocessor_read() for why).\n          operation.args = null;\n          if (!preprocessor.read(operation)) {\n            break;\n          }\n          var args = operation.args;\n          var fn = operation.fn;\n\n          switch (fn | 0) {\n            case OPS.paintXObject:\n              // eagerly compile XForm objects\n              var name = args[0].name;\n              if (name) {\n                const localImage = localImageCache.getByName(name);\n                if (localImage) {\n                  operatorList.addOp(localImage.fn, localImage.args);\n                  args = null;\n                  continue;\n                }\n              }\n\n              next(\n                new Promise(function (resolveXObject, rejectXObject) {\n                  if (!name) {\n                    throw new FormatError(\n                      \"XObject must be referred to by name.\"\n                    );\n                  }\n\n                  let xobj = xobjs.getRaw(name);\n                  if (xobj instanceof Ref) {\n                    const localImage = localImageCache.getByRef(xobj);\n                    if (localImage) {\n                      operatorList.addOp(localImage.fn, localImage.args);\n\n                      resolveXObject();\n                      return;\n                    }\n\n                    const globalImage = self.globalImageCache.getData(\n                      xobj,\n                      self.pageIndex\n                    );\n                    if (globalImage) {\n                      operatorList.addDependency(globalImage.objId);\n                      operatorList.addOp(globalImage.fn, globalImage.args);\n\n                      resolveXObject();\n                      return;\n                    }\n\n                    xobj = xref.fetch(xobj);\n                  }\n\n                  if (!xobj) {\n                    operatorList.addOp(fn, args);\n                    resolveXObject();\n                    return;\n                  }\n                  if (!isStream(xobj)) {\n                    throw new FormatError(\"XObject should be a stream\");\n                  }\n\n                  const type = xobj.dict.get(\"Subtype\");\n                  if (!isName(type)) {\n                    throw new FormatError(\"XObject should have a Name subtype\");\n                  }\n\n                  if (type.name === \"Form\") {\n                    stateManager.save();\n                    self\n                      .buildFormXObject(\n                        resources,\n                        xobj,\n                        null,\n                        operatorList,\n                        task,\n                        stateManager.state.clone()\n                      )\n                      .then(function () {\n                        stateManager.restore();\n                        resolveXObject();\n                      }, rejectXObject);\n                    return;\n                  } else if (type.name === \"Image\") {\n                    self\n                      .buildPaintImageXObject({\n                        resources,\n                        image: xobj,\n                        operatorList,\n                        cacheKey: name,\n                        localImageCache,\n                      })\n                      .then(resolveXObject, rejectXObject);\n                    return;\n                  } else if (type.name === \"PS\") {\n                    // PostScript XObjects are unused when viewing documents.\n                    // See section 4.7.1 of Adobe's PDF reference.\n                    info(\"Ignored XObject subtype PS\");\n                  } else {\n                    throw new FormatError(\n                      `Unhandled XObject subtype ${type.name}`\n                    );\n                  }\n                  resolveXObject();\n                }).catch(function (reason) {\n                  if (reason instanceof AbortException) {\n                    return;\n                  }\n                  if (self.options.ignoreErrors) {\n                    // Error(s) in the XObject -- sending unsupported feature\n                    // notification and allow rendering to continue.\n                    self.handler.send(\"UnsupportedFeature\", {\n                      featureId: UNSUPPORTED_FEATURES.errorXObject,\n                    });\n                    warn(`getOperatorList - ignoring XObject: \"${reason}\".`);\n                    return;\n                  }\n                  throw reason;\n                })\n              );\n              return;\n            case OPS.setFont:\n              var fontSize = args[1];\n              // eagerly collect all fonts\n              next(\n                self\n                  .handleSetFont(\n                    resources,\n                    args,\n                    null,\n                    operatorList,\n                    task,\n                    stateManager.state\n                  )\n                  .then(function (loadedName) {\n                    operatorList.addDependency(loadedName);\n                    operatorList.addOp(OPS.setFont, [loadedName, fontSize]);\n                  })\n              );\n              return;\n            case OPS.beginText:\n              parsingText = true;\n              break;\n            case OPS.endText:\n              parsingText = false;\n              break;\n            case OPS.endInlineImage:\n              var cacheKey = args[0].cacheKey;\n              if (cacheKey) {\n                const localImage = localImageCache.getByName(cacheKey);\n                if (localImage) {\n                  operatorList.addOp(localImage.fn, localImage.args);\n                  args = null;\n                  continue;\n                }\n              }\n              next(\n                self.buildPaintImageXObject({\n                  resources,\n                  image: args[0],\n                  isInline: true,\n                  operatorList,\n                  cacheKey,\n                  localImageCache,\n                })\n              );\n              return;\n            case OPS.showText:\n              if (!stateManager.state.font) {\n                self.ensureStateFont(stateManager.state);\n                continue;\n              }\n              args[0] = self.handleText(args[0], stateManager.state);\n              break;\n            case OPS.showSpacedText:\n              if (!stateManager.state.font) {\n                self.ensureStateFont(stateManager.state);\n                continue;\n              }\n              var arr = args[0];\n              var combinedGlyphs = [];\n              var arrLength = arr.length;\n              var state = stateManager.state;\n              for (i = 0; i < arrLength; ++i) {\n                var arrItem = arr[i];\n                if (isString(arrItem)) {\n                  Array.prototype.push.apply(\n                    combinedGlyphs,\n                    self.handleText(arrItem, state)\n                  );\n                } else if (isNum(arrItem)) {\n                  combinedGlyphs.push(arrItem);\n                }\n              }\n              args[0] = combinedGlyphs;\n              fn = OPS.showText;\n              break;\n            case OPS.nextLineShowText:\n              if (!stateManager.state.font) {\n                self.ensureStateFont(stateManager.state);\n                continue;\n              }\n              operatorList.addOp(OPS.nextLine);\n              args[0] = self.handleText(args[0], stateManager.state);\n              fn = OPS.showText;\n              break;\n            case OPS.nextLineSetSpacingShowText:\n              if (!stateManager.state.font) {\n                self.ensureStateFont(stateManager.state);\n                continue;\n              }\n              operatorList.addOp(OPS.nextLine);\n              operatorList.addOp(OPS.setWordSpacing, [args.shift()]);\n              operatorList.addOp(OPS.setCharSpacing, [args.shift()]);\n              args[0] = self.handleText(args[0], stateManager.state);\n              fn = OPS.showText;\n              break;\n            case OPS.setTextRenderingMode:\n              stateManager.state.textRenderingMode = args[0];\n              break;\n\n            case OPS.setFillColorSpace:\n              next(\n                self\n                  .parseColorSpace({\n                    cs: args[0],\n                    resources,\n                  })\n                  .then(function (colorSpace) {\n                    if (colorSpace) {\n                      stateManager.state.fillColorSpace = colorSpace;\n                    }\n                  })\n              );\n              return;\n            case OPS.setStrokeColorSpace:\n              next(\n                self\n                  .parseColorSpace({\n                    cs: args[0],\n                    resources,\n                  })\n                  .then(function (colorSpace) {\n                    if (colorSpace) {\n                      stateManager.state.strokeColorSpace = colorSpace;\n                    }\n                  })\n              );\n              return;\n            case OPS.setFillColor:\n              cs = stateManager.state.fillColorSpace;\n              args = cs.getRgb(args, 0);\n              fn = OPS.setFillRGBColor;\n              break;\n            case OPS.setStrokeColor:\n              cs = stateManager.state.strokeColorSpace;\n              args = cs.getRgb(args, 0);\n              fn = OPS.setStrokeRGBColor;\n              break;\n            case OPS.setFillGray:\n              stateManager.state.fillColorSpace = ColorSpace.singletons.gray;\n              args = ColorSpace.singletons.gray.getRgb(args, 0);\n              fn = OPS.setFillRGBColor;\n              break;\n            case OPS.setStrokeGray:\n              stateManager.state.strokeColorSpace = ColorSpace.singletons.gray;\n              args = ColorSpace.singletons.gray.getRgb(args, 0);\n              fn = OPS.setStrokeRGBColor;\n              break;\n            case OPS.setFillCMYKColor:\n              stateManager.state.fillColorSpace = ColorSpace.singletons.cmyk;\n              args = ColorSpace.singletons.cmyk.getRgb(args, 0);\n              fn = OPS.setFillRGBColor;\n              break;\n            case OPS.setStrokeCMYKColor:\n              stateManager.state.strokeColorSpace = ColorSpace.singletons.cmyk;\n              args = ColorSpace.singletons.cmyk.getRgb(args, 0);\n              fn = OPS.setStrokeRGBColor;\n              break;\n            case OPS.setFillRGBColor:\n              stateManager.state.fillColorSpace = ColorSpace.singletons.rgb;\n              args = ColorSpace.singletons.rgb.getRgb(args, 0);\n              break;\n            case OPS.setStrokeRGBColor:\n              stateManager.state.strokeColorSpace = ColorSpace.singletons.rgb;\n              args = ColorSpace.singletons.rgb.getRgb(args, 0);\n              break;\n            case OPS.setFillColorN:\n              cs = stateManager.state.fillColorSpace;\n              if (cs.name === \"Pattern\") {\n                next(\n                  self.handleColorN(\n                    operatorList,\n                    OPS.setFillColorN,\n                    args,\n                    cs,\n                    patterns,\n                    resources,\n                    task\n                  )\n                );\n                return;\n              }\n              args = cs.getRgb(args, 0);\n              fn = OPS.setFillRGBColor;\n              break;\n            case OPS.setStrokeColorN:\n              cs = stateManager.state.strokeColorSpace;\n              if (cs.name === \"Pattern\") {\n                next(\n                  self.handleColorN(\n                    operatorList,\n                    OPS.setStrokeColorN,\n                    args,\n                    cs,\n                    patterns,\n                    resources,\n                    task\n                  )\n                );\n                return;\n              }\n              args = cs.getRgb(args, 0);\n              fn = OPS.setStrokeRGBColor;\n              break;\n\n            case OPS.shadingFill:\n              var shadingRes = resources.get(\"Shading\");\n              if (!shadingRes) {\n                throw new FormatError(\"No shading resource found\");\n              }\n\n              var shading = shadingRes.get(args[0].name);\n              if (!shading) {\n                throw new FormatError(\"No shading object found\");\n              }\n\n              var shadingFill = Pattern.parseShading(\n                shading,\n                null,\n                xref,\n                resources,\n                self.handler,\n                self.pdfFunctionFactory\n              );\n              var patternIR = shadingFill.getIR();\n              args = [patternIR];\n              fn = OPS.shadingFill;\n              break;\n            case OPS.setGState:\n              var dictName = args[0];\n              var extGState = resources.get(\"ExtGState\");\n\n              if (!isDict(extGState) || !extGState.has(dictName.name)) {\n                break;\n              }\n\n              var gState = extGState.get(dictName.name);\n              next(\n                self.setGState(\n                  resources,\n                  gState,\n                  operatorList,\n                  task,\n                  stateManager\n                )\n              );\n              return;\n            case OPS.moveTo:\n            case OPS.lineTo:\n            case OPS.curveTo:\n            case OPS.curveTo2:\n            case OPS.curveTo3:\n            case OPS.closePath:\n            case OPS.rectangle:\n              self.buildPath(operatorList, fn, args, parsingText);\n              continue;\n            case OPS.markPoint:\n            case OPS.markPointProps:\n            case OPS.beginMarkedContent:\n            case OPS.beginMarkedContentProps:\n            case OPS.endMarkedContent:\n            case OPS.beginCompat:\n            case OPS.endCompat:\n              // Ignore operators where the corresponding handlers are known to\n              // be no-op in CanvasGraphics (display/canvas.js). This prevents\n              // serialization errors and is also a bit more efficient.\n              // We could also try to serialize all objects in a general way,\n              // e.g. as done in https://github.com/mozilla/pdf.js/pull/6266,\n              // but doing so is meaningless without knowing the semantics.\n              continue;\n            default:\n              // Note: Ignore the operator if it has `Dict` arguments, since\n              // those are non-serializable, otherwise postMessage will throw\n              // \"An object could not be cloned.\".\n              if (args !== null) {\n                for (i = 0, ii = args.length; i < ii; i++) {\n                  if (args[i] instanceof Dict) {\n                    break;\n                  }\n                }\n                if (i < ii) {\n                  warn(\"getOperatorList - ignoring operator: \" + fn);\n                  continue;\n                }\n              }\n          }\n          operatorList.addOp(fn, args);\n        }\n        if (stop) {\n          next(deferred);\n          return;\n        }\n        // Some PDFs don't close all restores inside object/form.\n        // Closing those for them.\n        closePendingRestoreOPS();\n        resolve();\n      }).catch(reason => {\n        if (reason instanceof AbortException) {\n          return;\n        }\n        if (this.options.ignoreErrors) {\n          // Error(s) in the OperatorList -- sending unsupported feature\n          // notification and allow rendering to continue.\n          this.handler.send(\"UnsupportedFeature\", {\n            featureId: UNSUPPORTED_FEATURES.errorOperatorList,\n          });\n          warn(\n            `getOperatorList - ignoring errors during \"${task.name}\" ` +\n              `task: \"${reason}\".`\n          );\n\n          closePendingRestoreOPS();\n          return;\n        }\n        throw reason;\n      });\n    },\n\n    getTextContent({\n      stream,\n      task,\n      resources,\n      stateManager = null,\n      normalizeWhitespace = false,\n      combineTextItems = false,\n      sink,\n      seenStyles = Object.create(null),\n    }) {\n      // Ensure that `resources`/`stateManager` is correctly initialized,\n      // even if the provided parameter is e.g. `null`.\n      resources = resources || Dict.empty;\n      stateManager = stateManager || new StateManager(new TextState());\n\n      var WhitespaceRegexp = /\\s/g;\n\n      var textContent = {\n        items: [],\n        styles: Object.create(null),\n      };\n      var textContentItem = {\n        initialized: false,\n        str: [],\n        width: 0,\n        height: 0,\n        vertical: false,\n        lastAdvanceWidth: 0,\n        lastAdvanceHeight: 0,\n        textAdvanceScale: 0,\n        spaceWidth: 0,\n        fakeSpaceMin: Infinity,\n        fakeMultiSpaceMin: Infinity,\n        fakeMultiSpaceMax: -0,\n        textRunBreakAllowed: false,\n        transform: null,\n        fontName: null,\n      };\n      var SPACE_FACTOR = 0.3;\n      var MULTI_SPACE_FACTOR = 1.5;\n      var MULTI_SPACE_FACTOR_MAX = 4;\n\n      var self = this;\n      var xref = this.xref;\n\n      // The xobj is parsed iff it's needed, e.g. if there is a `DO` cmd.\n      var xobjs = null;\n      const emptyXObjectCache = new LocalImageCache();\n\n      var preprocessor = new EvaluatorPreprocessor(stream, xref, stateManager);\n\n      var textState;\n\n      function ensureTextContentItem() {\n        if (textContentItem.initialized) {\n          return textContentItem;\n        }\n        var font = textState.font;\n        if (!(font.loadedName in seenStyles)) {\n          seenStyles[font.loadedName] = true;\n          textContent.styles[font.loadedName] = {\n            fontFamily: font.fallbackName,\n            ascent: font.ascent,\n            descent: font.descent,\n            vertical: font.vertical,\n          };\n        }\n        textContentItem.fontName = font.loadedName;\n\n        // 9.4.4 Text Space Details\n        var tsm = [\n          textState.fontSize * textState.textHScale,\n          0,\n          0,\n          textState.fontSize,\n          0,\n          textState.textRise,\n        ];\n\n        if (\n          font.isType3Font &&\n          textState.fontSize <= 1 &&\n          !isArrayEqual(textState.fontMatrix, FONT_IDENTITY_MATRIX)\n        ) {\n          const glyphHeight = font.bbox[3] - font.bbox[1];\n          if (glyphHeight > 0) {\n            tsm[3] *= glyphHeight * textState.fontMatrix[3];\n          }\n        }\n\n        var trm = Util.transform(\n          textState.ctm,\n          Util.transform(textState.textMatrix, tsm)\n        );\n        textContentItem.transform = trm;\n        if (!font.vertical) {\n          textContentItem.width = 0;\n          textContentItem.height = Math.sqrt(trm[2] * trm[2] + trm[3] * trm[3]);\n          textContentItem.vertical = false;\n        } else {\n          textContentItem.width = Math.sqrt(trm[0] * trm[0] + trm[1] * trm[1]);\n          textContentItem.height = 0;\n          textContentItem.vertical = true;\n        }\n\n        var a = textState.textLineMatrix[0];\n        var b = textState.textLineMatrix[1];\n        var scaleLineX = Math.sqrt(a * a + b * b);\n        a = textState.ctm[0];\n        b = textState.ctm[1];\n        var scaleCtmX = Math.sqrt(a * a + b * b);\n        textContentItem.textAdvanceScale = scaleCtmX * scaleLineX;\n        textContentItem.lastAdvanceWidth = 0;\n        textContentItem.lastAdvanceHeight = 0;\n\n        var spaceWidth = (font.spaceWidth / 1000) * textState.fontSize;\n        if (spaceWidth) {\n          textContentItem.spaceWidth = spaceWidth;\n          textContentItem.fakeSpaceMin = spaceWidth * SPACE_FACTOR;\n          textContentItem.fakeMultiSpaceMin = spaceWidth * MULTI_SPACE_FACTOR;\n          textContentItem.fakeMultiSpaceMax =\n            spaceWidth * MULTI_SPACE_FACTOR_MAX;\n          // It's okay for monospace fonts to fake as much space as needed.\n          textContentItem.textRunBreakAllowed = !font.isMonospace;\n        } else {\n          textContentItem.spaceWidth = 0;\n          textContentItem.fakeSpaceMin = Infinity;\n          textContentItem.fakeMultiSpaceMin = Infinity;\n          textContentItem.fakeMultiSpaceMax = 0;\n          textContentItem.textRunBreakAllowed = false;\n        }\n\n        textContentItem.initialized = true;\n        return textContentItem;\n      }\n\n      function replaceWhitespace(str) {\n        // Replaces all whitespaces with standard spaces (0x20), to avoid\n        // alignment issues between the textLayer and the canvas if the text\n        // contains e.g. tabs (fixes issue6612.pdf).\n        var i = 0,\n          ii = str.length,\n          code;\n        while (i < ii && (code = str.charCodeAt(i)) >= 0x20 && code <= 0x7f) {\n          i++;\n        }\n        return i < ii ? str.replace(WhitespaceRegexp, \" \") : str;\n      }\n\n      function runBidiTransform(textChunk) {\n        var str = textChunk.str.join(\"\");\n        var bidiResult = bidi(str, -1, textChunk.vertical);\n        return {\n          str: normalizeWhitespace\n            ? replaceWhitespace(bidiResult.str)\n            : bidiResult.str,\n          dir: bidiResult.dir,\n          width: textChunk.width,\n          height: textChunk.height,\n          transform: textChunk.transform,\n          fontName: textChunk.fontName,\n        };\n      }\n\n      function handleSetFont(fontName, fontRef) {\n        return self\n          .loadFont(fontName, fontRef, resources)\n          .then(function (translated) {\n            textState.font = translated.font;\n            textState.fontMatrix =\n              translated.font.fontMatrix || FONT_IDENTITY_MATRIX;\n          });\n      }\n\n      function buildTextContentItem(chars) {\n        var font = textState.font;\n        var textChunk = ensureTextContentItem();\n        var width = 0;\n        var height = 0;\n        var glyphs = font.charsToGlyphs(chars);\n        for (var i = 0; i < glyphs.length; i++) {\n          var glyph = glyphs[i];\n          var glyphWidth = null;\n          if (font.vertical && glyph.vmetric) {\n            glyphWidth = glyph.vmetric[0];\n          } else {\n            glyphWidth = glyph.width;\n          }\n\n          var glyphUnicode = glyph.unicode;\n          var NormalizedUnicodes = getNormalizedUnicodes();\n          if (NormalizedUnicodes[glyphUnicode] !== undefined) {\n            glyphUnicode = NormalizedUnicodes[glyphUnicode];\n          }\n          glyphUnicode = reverseIfRtl(glyphUnicode);\n\n          var charSpacing = textState.charSpacing;\n          if (glyph.isSpace) {\n            var wordSpacing = textState.wordSpacing;\n            charSpacing += wordSpacing;\n            if (wordSpacing > 0) {\n              addFakeSpaces(wordSpacing, textChunk.str);\n            }\n          }\n\n          var tx = 0;\n          var ty = 0;\n          if (!font.vertical) {\n            var w0 = glyphWidth * textState.fontMatrix[0];\n            tx = (w0 * textState.fontSize + charSpacing) * textState.textHScale;\n            width += tx;\n          } else {\n            var w1 = glyphWidth * textState.fontMatrix[0];\n            ty = w1 * textState.fontSize + charSpacing;\n            height += ty;\n          }\n          textState.translateTextMatrix(tx, ty);\n\n          textChunk.str.push(glyphUnicode);\n        }\n\n        if (!font.vertical) {\n          textChunk.lastAdvanceWidth = width;\n          textChunk.width += width;\n        } else {\n          textChunk.lastAdvanceHeight = height;\n          textChunk.height += Math.abs(height);\n        }\n\n        return textChunk;\n      }\n\n      function addFakeSpaces(width, strBuf) {\n        if (width < textContentItem.fakeSpaceMin) {\n          return;\n        }\n        if (width < textContentItem.fakeMultiSpaceMin) {\n          strBuf.push(\" \");\n          return;\n        }\n        var fakeSpaces = Math.round(width / textContentItem.spaceWidth);\n        while (fakeSpaces-- > 0) {\n          strBuf.push(\" \");\n        }\n      }\n\n      function flushTextContentItem() {\n        if (!textContentItem.initialized) {\n          return;\n        }\n\n        // Do final text scaling.\n        if (!textContentItem.vertical) {\n          textContentItem.width *= textContentItem.textAdvanceScale;\n        } else {\n          textContentItem.height *= textContentItem.textAdvanceScale;\n        }\n        textContent.items.push(runBidiTransform(textContentItem));\n\n        textContentItem.initialized = false;\n        textContentItem.str.length = 0;\n      }\n\n      function enqueueChunk() {\n        const length = textContent.items.length;\n        if (length > 0) {\n          sink.enqueue(textContent, length);\n          textContent.items = [];\n          textContent.styles = Object.create(null);\n        }\n      }\n\n      var timeSlotManager = new TimeSlotManager();\n\n      return new Promise(function promiseBody(resolve, reject) {\n        const next = function (promise) {\n          enqueueChunk();\n          Promise.all([promise, sink.ready]).then(function () {\n            try {\n              promiseBody(resolve, reject);\n            } catch (ex) {\n              reject(ex);\n            }\n          }, reject);\n        };\n        task.ensureNotTerminated();\n        timeSlotManager.reset();\n        var stop,\n          operation = {},\n          args = [];\n        while (!(stop = timeSlotManager.check())) {\n          // The arguments parsed by read() are not used beyond this loop, so\n          // we can reuse the same array on every iteration, thus avoiding\n          // unnecessary allocations.\n          args.length = 0;\n          operation.args = args;\n          if (!preprocessor.read(operation)) {\n            break;\n          }\n          textState = stateManager.state;\n          var fn = operation.fn;\n          args = operation.args;\n          var advance, diff;\n\n          switch (fn | 0) {\n            case OPS.setFont:\n              // Optimization to ignore multiple identical Tf commands.\n              var fontNameArg = args[0].name,\n                fontSizeArg = args[1];\n              if (\n                textState.font &&\n                fontNameArg === textState.fontName &&\n                fontSizeArg === textState.fontSize\n              ) {\n                break;\n              }\n\n              flushTextContentItem();\n              textState.fontName = fontNameArg;\n              textState.fontSize = fontSizeArg;\n              next(handleSetFont(fontNameArg, null));\n              return;\n            case OPS.setTextRise:\n              flushTextContentItem();\n              textState.textRise = args[0];\n              break;\n            case OPS.setHScale:\n              flushTextContentItem();\n              textState.textHScale = args[0] / 100;\n              break;\n            case OPS.setLeading:\n              flushTextContentItem();\n              textState.leading = args[0];\n              break;\n            case OPS.moveText:\n              // Optimization to treat same line movement as advance\n              var isSameTextLine = !textState.font\n                ? false\n                : (textState.font.vertical ? args[0] : args[1]) === 0;\n              advance = args[0] - args[1];\n              if (\n                combineTextItems &&\n                isSameTextLine &&\n                textContentItem.initialized &&\n                advance > 0 &&\n                advance <= textContentItem.fakeMultiSpaceMax\n              ) {\n                textState.translateTextLineMatrix(args[0], args[1]);\n                textContentItem.width +=\n                  args[0] - textContentItem.lastAdvanceWidth;\n                textContentItem.height +=\n                  args[1] - textContentItem.lastAdvanceHeight;\n                diff =\n                  args[0] -\n                  textContentItem.lastAdvanceWidth -\n                  (args[1] - textContentItem.lastAdvanceHeight);\n                addFakeSpaces(diff, textContentItem.str);\n                break;\n              }\n\n              flushTextContentItem();\n              textState.translateTextLineMatrix(args[0], args[1]);\n              textState.textMatrix = textState.textLineMatrix.slice();\n              break;\n            case OPS.setLeadingMoveText:\n              flushTextContentItem();\n              textState.leading = -args[1];\n              textState.translateTextLineMatrix(args[0], args[1]);\n              textState.textMatrix = textState.textLineMatrix.slice();\n              break;\n            case OPS.nextLine:\n              flushTextContentItem();\n              textState.carriageReturn();\n              break;\n            case OPS.setTextMatrix:\n              // Optimization to treat same line movement as advance.\n              advance = textState.calcTextLineMatrixAdvance(\n                args[0],\n                args[1],\n                args[2],\n                args[3],\n                args[4],\n                args[5]\n              );\n              if (\n                combineTextItems &&\n                advance !== null &&\n                textContentItem.initialized &&\n                advance.value > 0 &&\n                advance.value <= textContentItem.fakeMultiSpaceMax\n              ) {\n                textState.translateTextLineMatrix(\n                  advance.width,\n                  advance.height\n                );\n                textContentItem.width +=\n                  advance.width - textContentItem.lastAdvanceWidth;\n                textContentItem.height +=\n                  advance.height - textContentItem.lastAdvanceHeight;\n                diff =\n                  advance.width -\n                  textContentItem.lastAdvanceWidth -\n                  (advance.height - textContentItem.lastAdvanceHeight);\n                addFakeSpaces(diff, textContentItem.str);\n                break;\n              }\n\n              flushTextContentItem();\n              textState.setTextMatrix(\n                args[0],\n                args[1],\n                args[2],\n                args[3],\n                args[4],\n                args[5]\n              );\n              textState.setTextLineMatrix(\n                args[0],\n                args[1],\n                args[2],\n                args[3],\n                args[4],\n                args[5]\n              );\n              break;\n            case OPS.setCharSpacing:\n              textState.charSpacing = args[0];\n              break;\n            case OPS.setWordSpacing:\n              textState.wordSpacing = args[0];\n              break;\n            case OPS.beginText:\n              flushTextContentItem();\n              textState.textMatrix = IDENTITY_MATRIX.slice();\n              textState.textLineMatrix = IDENTITY_MATRIX.slice();\n              break;\n            case OPS.showSpacedText:\n              if (!stateManager.state.font) {\n                self.ensureStateFont(stateManager.state);\n                continue;\n              }\n              var items = args[0];\n              var offset;\n              for (var j = 0, jj = items.length; j < jj; j++) {\n                if (typeof items[j] === \"string\") {\n                  buildTextContentItem(items[j]);\n                } else if (isNum(items[j])) {\n                  ensureTextContentItem();\n\n                  // PDF Specification 5.3.2 states:\n                  // The number is expressed in thousandths of a unit of text\n                  // space.\n                  // This amount is subtracted from the current horizontal or\n                  // vertical coordinate, depending on the writing mode.\n                  // In the default coordinate system, a positive adjustment\n                  // has the effect of moving the next glyph painted either to\n                  // the left or down by the given amount.\n                  advance = (items[j] * textState.fontSize) / 1000;\n                  var breakTextRun = false;\n                  if (textState.font.vertical) {\n                    offset = advance;\n                    textState.translateTextMatrix(0, offset);\n                    breakTextRun =\n                      textContentItem.textRunBreakAllowed &&\n                      advance > textContentItem.fakeMultiSpaceMax;\n                    if (!breakTextRun) {\n                      // Value needs to be added to height to paint down.\n                      textContentItem.height += offset;\n                    }\n                  } else {\n                    advance = -advance;\n                    offset = advance * textState.textHScale;\n                    textState.translateTextMatrix(offset, 0);\n                    breakTextRun =\n                      textContentItem.textRunBreakAllowed &&\n                      advance > textContentItem.fakeMultiSpaceMax;\n                    if (!breakTextRun) {\n                      // Value needs to be subtracted from width to paint left.\n                      textContentItem.width += offset;\n                    }\n                  }\n                  if (breakTextRun) {\n                    flushTextContentItem();\n                  } else if (advance > 0) {\n                    addFakeSpaces(advance, textContentItem.str);\n                  }\n                }\n              }\n              break;\n            case OPS.showText:\n              if (!stateManager.state.font) {\n                self.ensureStateFont(stateManager.state);\n                continue;\n              }\n              buildTextContentItem(args[0]);\n              break;\n            case OPS.nextLineShowText:\n              if (!stateManager.state.font) {\n                self.ensureStateFont(stateManager.state);\n                continue;\n              }\n              flushTextContentItem();\n              textState.carriageReturn();\n              buildTextContentItem(args[0]);\n              break;\n            case OPS.nextLineSetSpacingShowText:\n              if (!stateManager.state.font) {\n                self.ensureStateFont(stateManager.state);\n                continue;\n              }\n              flushTextContentItem();\n              textState.wordSpacing = args[0];\n              textState.charSpacing = args[1];\n              textState.carriageReturn();\n              buildTextContentItem(args[2]);\n              break;\n            case OPS.paintXObject:\n              flushTextContentItem();\n              if (!xobjs) {\n                xobjs = resources.get(\"XObject\") || Dict.empty;\n              }\n\n              var name = args[0].name;\n              if (name && emptyXObjectCache.getByName(name)) {\n                break;\n              }\n\n              next(\n                new Promise(function (resolveXObject, rejectXObject) {\n                  if (!name) {\n                    throw new FormatError(\n                      \"XObject must be referred to by name.\"\n                    );\n                  }\n\n                  let xobj = xobjs.getRaw(name);\n                  if (xobj instanceof Ref) {\n                    if (emptyXObjectCache.getByRef(xobj)) {\n                      resolveXObject();\n                      return;\n                    }\n\n                    xobj = xref.fetch(xobj);\n                  }\n\n                  if (!xobj) {\n                    resolveXObject();\n                    return;\n                  }\n                  if (!isStream(xobj)) {\n                    throw new FormatError(\"XObject should be a stream\");\n                  }\n\n                  const type = xobj.dict.get(\"Subtype\");\n                  if (!isName(type)) {\n                    throw new FormatError(\"XObject should have a Name subtype\");\n                  }\n\n                  if (type.name !== \"Form\") {\n                    emptyXObjectCache.set(name, xobj.dict.objId, true);\n\n                    resolveXObject();\n                    return;\n                  }\n\n                  // Use a new `StateManager` to prevent incorrect positioning\n                  // of textItems *after* the Form XObject, since errors in the\n                  // data can otherwise prevent `restore` operators from\n                  // executing.\n                  // NOTE: Only an issue when `options.ignoreErrors === true`.\n                  const currentState = stateManager.state.clone();\n                  const xObjStateManager = new StateManager(currentState);\n\n                  const matrix = xobj.dict.getArray(\"Matrix\");\n                  if (Array.isArray(matrix) && matrix.length === 6) {\n                    xObjStateManager.transform(matrix);\n                  }\n\n                  // Enqueue the `textContent` chunk before parsing the /Form\n                  // XObject.\n                  enqueueChunk();\n                  const sinkWrapper = {\n                    enqueueInvoked: false,\n\n                    enqueue(chunk, size) {\n                      this.enqueueInvoked = true;\n                      sink.enqueue(chunk, size);\n                    },\n\n                    get desiredSize() {\n                      return sink.desiredSize;\n                    },\n\n                    get ready() {\n                      return sink.ready;\n                    },\n                  };\n\n                  self\n                    .getTextContent({\n                      stream: xobj,\n                      task,\n                      resources: xobj.dict.get(\"Resources\") || resources,\n                      stateManager: xObjStateManager,\n                      normalizeWhitespace,\n                      combineTextItems,\n                      sink: sinkWrapper,\n                      seenStyles,\n                    })\n                    .then(function () {\n                      if (!sinkWrapper.enqueueInvoked) {\n                        emptyXObjectCache.set(name, xobj.dict.objId, true);\n                      }\n                      resolveXObject();\n                    }, rejectXObject);\n                }).catch(function (reason) {\n                  if (reason instanceof AbortException) {\n                    return;\n                  }\n                  if (self.options.ignoreErrors) {\n                    // Error(s) in the XObject -- allow text-extraction to\n                    // continue.\n                    warn(`getTextContent - ignoring XObject: \"${reason}\".`);\n                    return;\n                  }\n                  throw reason;\n                })\n              );\n              return;\n            case OPS.setGState:\n              flushTextContentItem();\n              var dictName = args[0];\n              var extGState = resources.get(\"ExtGState\");\n\n              if (!isDict(extGState) || !isName(dictName)) {\n                break;\n              }\n              var gState = extGState.get(dictName.name);\n              if (!isDict(gState)) {\n                break;\n              }\n              var gStateFont = gState.get(\"Font\");\n              if (gStateFont) {\n                textState.fontName = null;\n                textState.fontSize = gStateFont[1];\n                next(handleSetFont(null, gStateFont[0]));\n                return;\n              }\n              break;\n          } // switch\n          if (textContent.items.length >= sink.desiredSize) {\n            // Wait for ready, if we reach highWaterMark.\n            stop = true;\n            break;\n          }\n        } // while\n        if (stop) {\n          next(deferred);\n          return;\n        }\n        flushTextContentItem();\n        enqueueChunk();\n        resolve();\n      }).catch(reason => {\n        if (reason instanceof AbortException) {\n          return;\n        }\n        if (this.options.ignoreErrors) {\n          // Error(s) in the TextContent -- allow text-extraction to continue.\n          warn(\n            `getTextContent - ignoring errors during \"${task.name}\" ` +\n              `task: \"${reason}\".`\n          );\n\n          flushTextContentItem();\n          enqueueChunk();\n          return;\n        }\n        throw reason;\n      });\n    },\n\n    extractDataStructures: function PartialEvaluator_extractDataStructures(\n      dict,\n      baseDict,\n      properties\n    ) {\n      const xref = this.xref;\n      let cidToGidBytes;\n      // 9.10.2\n      var toUnicode = dict.get(\"ToUnicode\") || baseDict.get(\"ToUnicode\");\n      var toUnicodePromise = toUnicode\n        ? this.readToUnicode(toUnicode)\n        : Promise.resolve(undefined);\n\n      if (properties.composite) {\n        // CIDSystemInfo helps to match CID to glyphs\n        var cidSystemInfo = dict.get(\"CIDSystemInfo\");\n        if (isDict(cidSystemInfo)) {\n          properties.cidSystemInfo = {\n            registry: stringToPDFString(cidSystemInfo.get(\"Registry\")),\n            ordering: stringToPDFString(cidSystemInfo.get(\"Ordering\")),\n            supplement: cidSystemInfo.get(\"Supplement\"),\n          };\n        }\n\n        var cidToGidMap = dict.get(\"CIDToGIDMap\");\n        if (isStream(cidToGidMap)) {\n          cidToGidBytes = cidToGidMap.getBytes();\n        }\n      }\n\n      // Based on 9.6.6 of the spec the encoding can come from multiple places\n      // and depends on the font type. The base encoding and differences are\n      // read here, but the encoding that is actually used is chosen during\n      // glyph mapping in the font.\n      // TODO: Loading the built in encoding in the font would allow the\n      // differences to be merged in here not require us to hold on to it.\n      var differences = [];\n      var baseEncodingName = null;\n      var encoding;\n      if (dict.has(\"Encoding\")) {\n        encoding = dict.get(\"Encoding\");\n        if (isDict(encoding)) {\n          baseEncodingName = encoding.get(\"BaseEncoding\");\n          baseEncodingName = isName(baseEncodingName)\n            ? baseEncodingName.name\n            : null;\n          // Load the differences between the base and original\n          if (encoding.has(\"Differences\")) {\n            var diffEncoding = encoding.get(\"Differences\");\n            var index = 0;\n            for (var j = 0, jj = diffEncoding.length; j < jj; j++) {\n              var data = xref.fetchIfRef(diffEncoding[j]);\n              if (isNum(data)) {\n                index = data;\n              } else if (isName(data)) {\n                differences[index++] = data.name;\n              } else {\n                throw new FormatError(\n                  `Invalid entry in 'Differences' array: ${data}`\n                );\n              }\n            }\n          }\n        } else if (isName(encoding)) {\n          baseEncodingName = encoding.name;\n        } else {\n          throw new FormatError(\"Encoding is not a Name nor a Dict\");\n        }\n        // According to table 114 if the encoding is a named encoding it must be\n        // one of these predefined encodings.\n        if (\n          baseEncodingName !== \"MacRomanEncoding\" &&\n          baseEncodingName !== \"MacExpertEncoding\" &&\n          baseEncodingName !== \"WinAnsiEncoding\"\n        ) {\n          baseEncodingName = null;\n        }\n      }\n\n      if (baseEncodingName) {\n        properties.defaultEncoding = getEncoding(baseEncodingName).slice();\n      } else {\n        var isSymbolicFont = !!(properties.flags & FontFlags.Symbolic);\n        var isNonsymbolicFont = !!(properties.flags & FontFlags.Nonsymbolic);\n        // According to \"Table 114\" in section \"9.6.6.1 General\" (under\n        // \"9.6.6 Character Encoding\") of the PDF specification, a Nonsymbolic\n        // font should use the `StandardEncoding` if no encoding is specified.\n        encoding = StandardEncoding;\n        if (properties.type === \"TrueType\" && !isNonsymbolicFont) {\n          encoding = WinAnsiEncoding;\n        }\n        // The Symbolic attribute can be misused for regular fonts\n        // Heuristic: we have to check if the font is a standard one also\n        if (isSymbolicFont) {\n          encoding = MacRomanEncoding;\n          if (!properties.file) {\n            if (/Symbol/i.test(properties.name)) {\n              encoding = SymbolSetEncoding;\n            } else if (/Dingbats|Wingdings/i.test(properties.name)) {\n              encoding = ZapfDingbatsEncoding;\n            }\n          }\n        }\n        properties.defaultEncoding = encoding;\n      }\n\n      properties.differences = differences;\n      properties.baseEncodingName = baseEncodingName;\n      properties.hasEncoding = !!baseEncodingName || differences.length > 0;\n      properties.dict = dict;\n      return toUnicodePromise\n        .then(readToUnicode => {\n          properties.toUnicode = readToUnicode;\n          return this.buildToUnicode(properties);\n        })\n        .then(builtToUnicode => {\n          properties.toUnicode = builtToUnicode;\n          if (cidToGidBytes) {\n            properties.cidToGidMap = this.readCidToGidMap(\n              cidToGidBytes,\n              builtToUnicode\n            );\n          }\n          return properties;\n        });\n    },\n\n    /**\n     * @returns {ToUnicodeMap}\n     * @private\n     */\n    _buildSimpleFontToUnicode(properties, forceGlyphs = false) {\n      assert(!properties.composite, \"Must be a simple font.\");\n\n      const toUnicode = [];\n      const encoding = properties.defaultEncoding.slice();\n      const baseEncodingName = properties.baseEncodingName;\n      // Merge in the differences array.\n      const differences = properties.differences;\n      for (const charcode in differences) {\n        const glyphName = differences[charcode];\n        if (glyphName === \".notdef\") {\n          // Skip .notdef to prevent rendering errors, e.g. boxes appearing\n          // where there should be spaces (fixes issue5256.pdf).\n          continue;\n        }\n        encoding[charcode] = glyphName;\n      }\n      const glyphsUnicodeMap = getGlyphsUnicode();\n      for (const charcode in encoding) {\n        // a) Map the character code to a character name.\n        let glyphName = encoding[charcode];\n        // b) Look up the character name in the Adobe Glyph List (see the\n        //    Bibliography) to obtain the corresponding Unicode value.\n        if (glyphName === \"\") {\n          continue;\n        } else if (glyphsUnicodeMap[glyphName] === undefined) {\n          // (undocumented) c) Few heuristics to recognize unknown glyphs\n          // NOTE: Adobe Reader does not do this step, but OSX Preview does\n          let code = 0;\n          switch (glyphName[0]) {\n            case \"G\": // Gxx glyph\n              if (glyphName.length === 3) {\n                code = parseInt(glyphName.substring(1), 16);\n              }\n              break;\n            case \"g\": // g00xx glyph\n              if (glyphName.length === 5) {\n                code = parseInt(glyphName.substring(1), 16);\n              }\n              break;\n            case \"C\": // Cdd{d} glyph\n            case \"c\": // cdd{d} glyph\n              if (glyphName.length >= 3 && glyphName.length <= 4) {\n                const codeStr = glyphName.substring(1);\n\n                if (forceGlyphs) {\n                  code = parseInt(codeStr, 16);\n                  break;\n                }\n                // Normally the Cdd{d}/cdd{d} glyphName format will contain\n                // regular, i.e. base 10, charCodes (see issue4550.pdf)...\n                code = +codeStr;\n\n                // ... however some PDF generators violate that assumption by\n                // containing glyph, i.e. base 16, codes instead.\n                // In that case we need to re-parse the *entire* encoding to\n                // prevent broken text-selection (fixes issue9655_reduced.pdf).\n                if (\n                  Number.isNaN(code) &&\n                  Number.isInteger(parseInt(codeStr, 16))\n                ) {\n                  return this._buildSimpleFontToUnicode(\n                    properties,\n                    /* forceGlyphs */ true\n                  );\n                }\n              }\n              break;\n            default:\n              // 'uniXXXX'/'uXXXX{XX}' glyphs\n              const unicode = getUnicodeForGlyph(glyphName, glyphsUnicodeMap);\n              if (unicode !== -1) {\n                code = unicode;\n              }\n          }\n          if (code > 0 && code <= 0x10ffff && Number.isInteger(code)) {\n            // If `baseEncodingName` is one the predefined encodings, and `code`\n            // equals `charcode`, using the glyph defined in the baseEncoding\n            // seems to yield a better `toUnicode` mapping (fixes issue 5070).\n            if (baseEncodingName && code === +charcode) {\n              const baseEncoding = getEncoding(baseEncodingName);\n              if (baseEncoding && (glyphName = baseEncoding[charcode])) {\n                toUnicode[charcode] = String.fromCharCode(\n                  glyphsUnicodeMap[glyphName]\n                );\n                continue;\n              }\n            }\n            toUnicode[charcode] = String.fromCodePoint(code);\n          }\n          continue;\n        }\n        toUnicode[charcode] = String.fromCharCode(glyphsUnicodeMap[glyphName]);\n      }\n      return new ToUnicodeMap(toUnicode);\n    },\n\n    /**\n     * Builds a char code to unicode map based on section 9.10 of the spec.\n     * @param {Object} properties Font properties object.\n     * @returns {Promise} A Promise that is resolved with a\n     *   {ToUnicodeMap|IdentityToUnicodeMap} object.\n     */\n    buildToUnicode(properties) {\n      properties.hasIncludedToUnicodeMap =\n        !!properties.toUnicode && properties.toUnicode.length > 0;\n\n      // Section 9.10.2 Mapping Character Codes to Unicode Values\n      if (properties.hasIncludedToUnicodeMap) {\n        // Some fonts contain incomplete ToUnicode data, causing issues with\n        // text-extraction. For simple fonts, containing encoding information,\n        // use a fallback ToUnicode map to improve this (fixes issue8229.pdf).\n        if (!properties.composite && properties.hasEncoding) {\n          properties.fallbackToUnicode = this._buildSimpleFontToUnicode(\n            properties\n          );\n        }\n\n        return Promise.resolve(properties.toUnicode);\n      }\n\n      // According to the spec if the font is a simple font we should only map\n      // to unicode if the base encoding is MacRoman, MacExpert, or WinAnsi or\n      // the differences array only contains adobe standard or symbol set names,\n      // in pratice it seems better to always try to create a toUnicode map\n      // based of the default encoding.\n      if (!properties.composite /* is simple font */) {\n        return Promise.resolve(this._buildSimpleFontToUnicode(properties));\n      }\n\n      // If the font is a composite font that uses one of the predefined CMaps\n      // listed in Table 118 (except Identity–H and Identity–V) or whose\n      // descendant CIDFont uses the Adobe-GB1, Adobe-CNS1, Adobe-Japan1, or\n      // Adobe-Korea1 character collection:\n      if (\n        properties.composite &&\n        ((properties.cMap.builtInCMap &&\n          !(properties.cMap instanceof IdentityCMap)) ||\n          (properties.cidSystemInfo.registry === \"Adobe\" &&\n            (properties.cidSystemInfo.ordering === \"GB1\" ||\n              properties.cidSystemInfo.ordering === \"CNS1\" ||\n              properties.cidSystemInfo.ordering === \"Japan1\" ||\n              properties.cidSystemInfo.ordering === \"Korea1\")))\n      ) {\n        // Then:\n        // a) Map the character code to a character identifier (CID) according\n        // to the font’s CMap.\n        // b) Obtain the registry and ordering of the character collection used\n        // by the font’s CMap (for example, Adobe and Japan1) from its\n        // CIDSystemInfo dictionary.\n        const registry = properties.cidSystemInfo.registry;\n        const ordering = properties.cidSystemInfo.ordering;\n        // c) Construct a second CMap name by concatenating the registry and\n        // ordering obtained in step (b) in the format registry–ordering–UCS2\n        // (for example, Adobe–Japan1–UCS2).\n        const ucs2CMapName = Name.get(registry + \"-\" + ordering + \"-UCS2\");\n        // d) Obtain the CMap with the name constructed in step (c) (available\n        // from the ASN Web site; see the Bibliography).\n        return CMapFactory.create({\n          encoding: ucs2CMapName,\n          fetchBuiltInCMap: this.fetchBuiltInCMap,\n          useCMap: null,\n        }).then(function (ucs2CMap) {\n          const cMap = properties.cMap;\n          const toUnicode = [];\n          cMap.forEach(function (charcode, cid) {\n            if (cid > 0xffff) {\n              throw new FormatError(\"Max size of CID is 65,535\");\n            }\n            // e) Map the CID obtained in step (a) according to the CMap\n            // obtained in step (d), producing a Unicode value.\n            const ucs2 = ucs2CMap.lookup(cid);\n            if (ucs2) {\n              toUnicode[charcode] = String.fromCharCode(\n                (ucs2.charCodeAt(0) << 8) + ucs2.charCodeAt(1)\n              );\n            }\n          });\n          return new ToUnicodeMap(toUnicode);\n        });\n      }\n\n      // The viewer's choice, just use an identity map.\n      return Promise.resolve(\n        new IdentityToUnicodeMap(properties.firstChar, properties.lastChar)\n      );\n    },\n\n    readToUnicode: function PartialEvaluator_readToUnicode(toUnicode) {\n      var cmapObj = toUnicode;\n      if (isName(cmapObj)) {\n        return CMapFactory.create({\n          encoding: cmapObj,\n          fetchBuiltInCMap: this.fetchBuiltInCMap,\n          useCMap: null,\n        }).then(function (cmap) {\n          if (cmap instanceof IdentityCMap) {\n            return new IdentityToUnicodeMap(0, 0xffff);\n          }\n          return new ToUnicodeMap(cmap.getMap());\n        });\n      } else if (isStream(cmapObj)) {\n        return CMapFactory.create({\n          encoding: cmapObj,\n          fetchBuiltInCMap: this.fetchBuiltInCMap,\n          useCMap: null,\n        }).then(\n          function (cmap) {\n            if (cmap instanceof IdentityCMap) {\n              return new IdentityToUnicodeMap(0, 0xffff);\n            }\n            var map = new Array(cmap.length);\n            // Convert UTF-16BE\n            // NOTE: cmap can be a sparse array, so use forEach instead of\n            // `for(;;)` to iterate over all keys.\n            cmap.forEach(function (charCode, token) {\n              var str = [];\n              for (var k = 0; k < token.length; k += 2) {\n                var w1 = (token.charCodeAt(k) << 8) | token.charCodeAt(k + 1);\n                if ((w1 & 0xf800) !== 0xd800) {\n                  // w1 < 0xD800 || w1 > 0xDFFF\n                  str.push(w1);\n                  continue;\n                }\n                k += 2;\n                var w2 = (token.charCodeAt(k) << 8) | token.charCodeAt(k + 1);\n                str.push(((w1 & 0x3ff) << 10) + (w2 & 0x3ff) + 0x10000);\n              }\n              map[charCode] = String.fromCodePoint.apply(String, str);\n            });\n            return new ToUnicodeMap(map);\n          },\n          reason => {\n            if (reason instanceof AbortException) {\n              return null;\n            }\n            if (this.options.ignoreErrors) {\n              // Error in the ToUnicode data -- sending unsupported feature\n              // notification and allow font parsing to continue.\n              this.handler.send(\"UnsupportedFeature\", {\n                featureId: UNSUPPORTED_FEATURES.errorFontToUnicode,\n              });\n              warn(`readToUnicode - ignoring ToUnicode data: \"${reason}\".`);\n              return null;\n            }\n            throw reason;\n          }\n        );\n      }\n      return Promise.resolve(null);\n    },\n\n    readCidToGidMap(glyphsData, toUnicode) {\n      // Extract the encoding from the CIDToGIDMap\n\n      // Set encoding 0 to later verify the font has an encoding\n      var result = [];\n      for (var j = 0, jj = glyphsData.length; j < jj; j++) {\n        var glyphID = (glyphsData[j++] << 8) | glyphsData[j];\n        const code = j >> 1;\n        if (glyphID === 0 && !toUnicode.has(code)) {\n          continue;\n        }\n        result[code] = glyphID;\n      }\n      return result;\n    },\n\n    extractWidths: function PartialEvaluator_extractWidths(\n      dict,\n      descriptor,\n      properties\n    ) {\n      var xref = this.xref;\n      var glyphsWidths = [];\n      var defaultWidth = 0;\n      var glyphsVMetrics = [];\n      var defaultVMetrics;\n      var i, ii, j, jj, start, code, widths;\n      if (properties.composite) {\n        defaultWidth = dict.has(\"DW\") ? dict.get(\"DW\") : 1000;\n\n        widths = dict.get(\"W\");\n        if (widths) {\n          for (i = 0, ii = widths.length; i < ii; i++) {\n            start = xref.fetchIfRef(widths[i++]);\n            code = xref.fetchIfRef(widths[i]);\n            if (Array.isArray(code)) {\n              for (j = 0, jj = code.length; j < jj; j++) {\n                glyphsWidths[start++] = xref.fetchIfRef(code[j]);\n              }\n            } else {\n              var width = xref.fetchIfRef(widths[++i]);\n              for (j = start; j <= code; j++) {\n                glyphsWidths[j] = width;\n              }\n            }\n          }\n        }\n\n        if (properties.vertical) {\n          var vmetrics = dict.getArray(\"DW2\") || [880, -1000];\n          defaultVMetrics = [vmetrics[1], defaultWidth * 0.5, vmetrics[0]];\n          vmetrics = dict.get(\"W2\");\n          if (vmetrics) {\n            for (i = 0, ii = vmetrics.length; i < ii; i++) {\n              start = xref.fetchIfRef(vmetrics[i++]);\n              code = xref.fetchIfRef(vmetrics[i]);\n              if (Array.isArray(code)) {\n                for (j = 0, jj = code.length; j < jj; j++) {\n                  glyphsVMetrics[start++] = [\n                    xref.fetchIfRef(code[j++]),\n                    xref.fetchIfRef(code[j++]),\n                    xref.fetchIfRef(code[j]),\n                  ];\n                }\n              } else {\n                var vmetric = [\n                  xref.fetchIfRef(vmetrics[++i]),\n                  xref.fetchIfRef(vmetrics[++i]),\n                  xref.fetchIfRef(vmetrics[++i]),\n                ];\n                for (j = start; j <= code; j++) {\n                  glyphsVMetrics[j] = vmetric;\n                }\n              }\n            }\n          }\n        }\n      } else {\n        var firstChar = properties.firstChar;\n        widths = dict.get(\"Widths\");\n        if (widths) {\n          j = firstChar;\n          for (i = 0, ii = widths.length; i < ii; i++) {\n            glyphsWidths[j++] = xref.fetchIfRef(widths[i]);\n          }\n          defaultWidth = parseFloat(descriptor.get(\"MissingWidth\")) || 0;\n        } else {\n          // Trying get the BaseFont metrics (see comment above).\n          var baseFontName = dict.get(\"BaseFont\");\n          if (isName(baseFontName)) {\n            var metrics = this.getBaseFontMetrics(baseFontName.name);\n\n            glyphsWidths = this.buildCharCodeToWidth(\n              metrics.widths,\n              properties\n            );\n            defaultWidth = metrics.defaultWidth;\n          }\n        }\n      }\n\n      // Heuristic: detection of monospace font by checking all non-zero widths\n      var isMonospace = true;\n      var firstWidth = defaultWidth;\n      for (var glyph in glyphsWidths) {\n        var glyphWidth = glyphsWidths[glyph];\n        if (!glyphWidth) {\n          continue;\n        }\n        if (!firstWidth) {\n          firstWidth = glyphWidth;\n          continue;\n        }\n        if (firstWidth !== glyphWidth) {\n          isMonospace = false;\n          break;\n        }\n      }\n      if (isMonospace) {\n        properties.flags |= FontFlags.FixedPitch;\n      }\n\n      properties.defaultWidth = defaultWidth;\n      properties.widths = glyphsWidths;\n      properties.defaultVMetrics = defaultVMetrics;\n      properties.vmetrics = glyphsVMetrics;\n    },\n\n    isSerifFont: function PartialEvaluator_isSerifFont(baseFontName) {\n      // Simulating descriptor flags attribute\n      var fontNameWoStyle = baseFontName.split(\"-\")[0];\n      return (\n        fontNameWoStyle in getSerifFonts() ||\n        fontNameWoStyle.search(/serif/gi) !== -1\n      );\n    },\n\n    getBaseFontMetrics: function PartialEvaluator_getBaseFontMetrics(name) {\n      var defaultWidth = 0;\n      var widths = [];\n      var monospace = false;\n      var stdFontMap = getStdFontMap();\n      var lookupName = stdFontMap[name] || name;\n      var Metrics = getMetrics();\n\n      if (!(lookupName in Metrics)) {\n        // Use default fonts for looking up font metrics if the passed\n        // font is not a base font\n        if (this.isSerifFont(name)) {\n          lookupName = \"Times-Roman\";\n        } else {\n          lookupName = \"Helvetica\";\n        }\n      }\n      var glyphWidths = Metrics[lookupName];\n\n      if (isNum(glyphWidths)) {\n        defaultWidth = glyphWidths;\n        monospace = true;\n      } else {\n        widths = glyphWidths(); // expand lazy widths array\n      }\n\n      return {\n        defaultWidth,\n        monospace,\n        widths,\n      };\n    },\n\n    buildCharCodeToWidth: function PartialEvaluator_bulildCharCodeToWidth(\n      widthsByGlyphName,\n      properties\n    ) {\n      var widths = Object.create(null);\n      var differences = properties.differences;\n      var encoding = properties.defaultEncoding;\n      for (var charCode = 0; charCode < 256; charCode++) {\n        if (\n          charCode in differences &&\n          widthsByGlyphName[differences[charCode]]\n        ) {\n          widths[charCode] = widthsByGlyphName[differences[charCode]];\n          continue;\n        }\n        if (charCode in encoding && widthsByGlyphName[encoding[charCode]]) {\n          widths[charCode] = widthsByGlyphName[encoding[charCode]];\n          continue;\n        }\n      }\n      return widths;\n    },\n\n    preEvaluateFont: function PartialEvaluator_preEvaluateFont(dict) {\n      var baseDict = dict;\n      var type = dict.get(\"Subtype\");\n      if (!isName(type)) {\n        throw new FormatError(\"invalid font Subtype\");\n      }\n\n      var composite = false;\n      var uint8array;\n      if (type.name === \"Type0\") {\n        // If font is a composite\n        //  - get the descendant font\n        //  - set the type according to the descendant font\n        //  - get the FontDescriptor from the descendant font\n        var df = dict.get(\"DescendantFonts\");\n        if (!df) {\n          throw new FormatError(\"Descendant fonts are not specified\");\n        }\n        dict = Array.isArray(df) ? this.xref.fetchIfRef(df[0]) : df;\n\n        type = dict.get(\"Subtype\");\n        if (!isName(type)) {\n          throw new FormatError(\"invalid font Subtype\");\n        }\n        composite = true;\n      }\n\n      var descriptor = dict.get(\"FontDescriptor\");\n      if (descriptor) {\n        var hash = new MurmurHash3_64();\n        var encoding = baseDict.getRaw(\"Encoding\");\n        if (isName(encoding)) {\n          hash.update(encoding.name);\n        } else if (isRef(encoding)) {\n          hash.update(encoding.toString());\n        } else if (isDict(encoding)) {\n          var keys = encoding.getKeys();\n          for (var i = 0, ii = keys.length; i < ii; i++) {\n            var entry = encoding.getRaw(keys[i]);\n            if (isName(entry)) {\n              hash.update(entry.name);\n            } else if (isRef(entry)) {\n              hash.update(entry.toString());\n            } else if (Array.isArray(entry)) {\n              // 'Differences' array (fixes bug1157493.pdf).\n              var diffLength = entry.length,\n                diffBuf = new Array(diffLength);\n\n              for (var j = 0; j < diffLength; j++) {\n                var diffEntry = entry[j];\n                if (isName(diffEntry)) {\n                  diffBuf[j] = diffEntry.name;\n                } else if (isNum(diffEntry) || isRef(diffEntry)) {\n                  diffBuf[j] = diffEntry.toString();\n                }\n              }\n              hash.update(diffBuf.join());\n            }\n          }\n        }\n\n        const firstChar = dict.get(\"FirstChar\") || 0;\n        const lastChar = dict.get(\"LastChar\") || (composite ? 0xffff : 0xff);\n        hash.update(`${firstChar}-${lastChar}`);\n\n        var toUnicode = dict.get(\"ToUnicode\") || baseDict.get(\"ToUnicode\");\n        if (isStream(toUnicode)) {\n          var stream = toUnicode.str || toUnicode;\n          uint8array = stream.buffer\n            ? new Uint8Array(stream.buffer.buffer, 0, stream.bufferLength)\n            : new Uint8Array(\n                stream.bytes.buffer,\n                stream.start,\n                stream.end - stream.start\n              );\n          hash.update(uint8array);\n        } else if (isName(toUnicode)) {\n          hash.update(toUnicode.name);\n        }\n\n        var widths = dict.get(\"Widths\") || baseDict.get(\"Widths\");\n        if (widths) {\n          uint8array = new Uint8Array(new Uint32Array(widths).buffer);\n          hash.update(uint8array);\n        }\n      }\n\n      return {\n        descriptor,\n        dict,\n        baseDict,\n        composite,\n        type: type.name,\n        hash: hash ? hash.hexdigest() : \"\",\n      };\n    },\n\n    translateFont: function PartialEvaluator_translateFont(preEvaluatedFont) {\n      var baseDict = preEvaluatedFont.baseDict;\n      var dict = preEvaluatedFont.dict;\n      var composite = preEvaluatedFont.composite;\n      var descriptor = preEvaluatedFont.descriptor;\n      var type = preEvaluatedFont.type;\n      var maxCharIndex = composite ? 0xffff : 0xff;\n      var properties;\n      const firstChar = dict.get(\"FirstChar\") || 0;\n      const lastChar = dict.get(\"LastChar\") || maxCharIndex;\n\n      if (!descriptor) {\n        if (type === \"Type3\") {\n          // FontDescriptor is only required for Type3 fonts when the document\n          // is a tagged pdf. Create a barbebones one to get by.\n          descriptor = new Dict(null);\n          descriptor.set(\"FontName\", Name.get(type));\n          descriptor.set(\"FontBBox\", dict.getArray(\"FontBBox\") || [0, 0, 0, 0]);\n        } else {\n          // Before PDF 1.5 if the font was one of the base 14 fonts, having a\n          // FontDescriptor was not required.\n          // This case is here for compatibility.\n          var baseFontName = dict.get(\"BaseFont\");\n          if (!isName(baseFontName)) {\n            throw new FormatError(\"Base font is not specified\");\n          }\n\n          // Using base font name as a font name.\n          baseFontName = baseFontName.name.replace(/[,_]/g, \"-\");\n          var metrics = this.getBaseFontMetrics(baseFontName);\n\n          // Simulating descriptor flags attribute\n          var fontNameWoStyle = baseFontName.split(\"-\")[0];\n          var flags =\n            (this.isSerifFont(fontNameWoStyle) ? FontFlags.Serif : 0) |\n            (metrics.monospace ? FontFlags.FixedPitch : 0) |\n            (getSymbolsFonts()[fontNameWoStyle]\n              ? FontFlags.Symbolic\n              : FontFlags.Nonsymbolic);\n\n          properties = {\n            type,\n            name: baseFontName,\n            widths: metrics.widths,\n            defaultWidth: metrics.defaultWidth,\n            flags,\n            firstChar,\n            lastChar,\n          };\n          const widths = dict.get(\"Widths\");\n          return this.extractDataStructures(dict, dict, properties).then(\n            newProperties => {\n              if (widths) {\n                const glyphWidths = [];\n                let j = firstChar;\n                for (let i = 0, ii = widths.length; i < ii; i++) {\n                  glyphWidths[j++] = this.xref.fetchIfRef(widths[i]);\n                }\n                newProperties.widths = glyphWidths;\n              } else {\n                newProperties.widths = this.buildCharCodeToWidth(\n                  metrics.widths,\n                  newProperties\n                );\n              }\n              return new Font(baseFontName, null, newProperties);\n            }\n          );\n        }\n      }\n\n      // According to the spec if 'FontDescriptor' is declared, 'FirstChar',\n      // 'LastChar' and 'Widths' should exist too, but some PDF encoders seem\n      // to ignore this rule when a variant of a standard font is used.\n      // TODO Fill the width array depending on which of the base font this is\n      // a variant.\n\n      var fontName = descriptor.get(\"FontName\");\n      var baseFont = dict.get(\"BaseFont\");\n      // Some bad PDFs have a string as the font name.\n      if (isString(fontName)) {\n        fontName = Name.get(fontName);\n      }\n      if (isString(baseFont)) {\n        baseFont = Name.get(baseFont);\n      }\n\n      if (type !== \"Type3\") {\n        var fontNameStr = fontName && fontName.name;\n        var baseFontStr = baseFont && baseFont.name;\n        if (fontNameStr !== baseFontStr) {\n          info(\n            `The FontDescriptor\\'s FontName is \"${fontNameStr}\" but ` +\n              `should be the same as the Font\\'s BaseFont \"${baseFontStr}\".`\n          );\n          // Workaround for cases where e.g. fontNameStr = 'Arial' and\n          // baseFontStr = 'Arial,Bold' (needed when no font file is embedded).\n          if (\n            fontNameStr &&\n            baseFontStr &&\n            baseFontStr.startsWith(fontNameStr)\n          ) {\n            fontName = baseFont;\n          }\n        }\n      }\n      fontName = fontName || baseFont;\n\n      if (!isName(fontName)) {\n        throw new FormatError(\"invalid font name\");\n      }\n\n      var fontFile = descriptor.get(\"FontFile\", \"FontFile2\", \"FontFile3\");\n      if (fontFile) {\n        if (fontFile.dict) {\n          var subtype = fontFile.dict.get(\"Subtype\");\n          if (subtype) {\n            subtype = subtype.name;\n          }\n          var length1 = fontFile.dict.get(\"Length1\");\n          var length2 = fontFile.dict.get(\"Length2\");\n          var length3 = fontFile.dict.get(\"Length3\");\n        }\n      }\n\n      properties = {\n        type,\n        name: fontName.name,\n        subtype,\n        file: fontFile,\n        length1,\n        length2,\n        length3,\n        loadedName: baseDict.loadedName,\n        composite,\n        fixedPitch: false,\n        fontMatrix: dict.getArray(\"FontMatrix\") || FONT_IDENTITY_MATRIX,\n        firstChar: firstChar || 0,\n        lastChar: lastChar || maxCharIndex,\n        bbox: descriptor.getArray(\"FontBBox\"),\n        ascent: descriptor.get(\"Ascent\"),\n        descent: descriptor.get(\"Descent\"),\n        xHeight: descriptor.get(\"XHeight\"),\n        capHeight: descriptor.get(\"CapHeight\"),\n        flags: descriptor.get(\"Flags\"),\n        italicAngle: descriptor.get(\"ItalicAngle\"),\n        isType3Font: false,\n      };\n\n      var cMapPromise;\n      if (composite) {\n        var cidEncoding = baseDict.get(\"Encoding\");\n        if (isName(cidEncoding)) {\n          properties.cidEncoding = cidEncoding.name;\n        }\n        cMapPromise = CMapFactory.create({\n          encoding: cidEncoding,\n          fetchBuiltInCMap: this.fetchBuiltInCMap,\n          useCMap: null,\n        }).then(function (cMap) {\n          properties.cMap = cMap;\n          properties.vertical = properties.cMap.vertical;\n        });\n      } else {\n        cMapPromise = Promise.resolve(undefined);\n      }\n\n      return cMapPromise\n        .then(() => {\n          return this.extractDataStructures(dict, baseDict, properties);\n        })\n        .then(newProperties => {\n          this.extractWidths(dict, descriptor, newProperties);\n\n          if (type === \"Type3\") {\n            newProperties.isType3Font = true;\n          }\n          return new Font(fontName.name, fontFile, newProperties);\n        });\n    },\n  };\n\n  PartialEvaluator.buildFontPaths = function (font, glyphs, handler) {\n    function buildPath(fontChar) {\n      if (font.renderer.hasBuiltPath(fontChar)) {\n        return;\n      }\n      handler.send(\"commonobj\", [\n        `${font.loadedName}_path_${fontChar}`,\n        \"FontPath\",\n        font.renderer.getPathJs(fontChar),\n      ]);\n    }\n\n    for (const glyph of glyphs) {\n      buildPath(glyph.fontChar);\n\n      // If the glyph has an accent we need to build a path for its\n      // fontChar too, otherwise CanvasGraphics_paintChar will fail.\n      const accent = glyph.accent;\n      if (accent && accent.fontChar) {\n        buildPath(accent.fontChar);\n      }\n    }\n  };\n\n  // TODO: Change this to a `static` getter, using shadowing, once\n  //       `PartialEvaluator` is converted to a proper class.\n  PartialEvaluator.getFallbackFontDict = function () {\n    if (this._fallbackFontDict) {\n      return this._fallbackFontDict;\n    }\n    const dict = new Dict();\n    dict.set(\"BaseFont\", Name.get(\"PDFJS-FallbackFont\"));\n    dict.set(\"Type\", Name.get(\"FallbackType\"));\n    dict.set(\"Subtype\", Name.get(\"FallbackType\"));\n    dict.set(\"Encoding\", Name.get(\"WinAnsiEncoding\"));\n\n    return (this._fallbackFontDict = dict);\n  };\n\n  return PartialEvaluator;\n})();\n\nclass TranslatedFont {\n  constructor({ loadedName, font, dict, extraProperties = false }) {\n    this.loadedName = loadedName;\n    this.font = font;\n    this.dict = dict;\n    this._extraProperties = extraProperties;\n    this.type3Loaded = null;\n    this.sent = false;\n  }\n\n  send(handler) {\n    if (this.sent) {\n      return;\n    }\n    this.sent = true;\n\n    handler.send(\"commonobj\", [\n      this.loadedName,\n      \"Font\",\n      this.font.exportData(this._extraProperties),\n    ]);\n  }\n\n  fallback(handler) {\n    if (!this.font.data) {\n      return;\n    }\n    // When font loading failed, fall back to the built-in font renderer.\n    this.font.disableFontFace = true;\n    // An arbitrary number of text rendering operators could have been\n    // encountered between the point in time when the 'Font' message was sent\n    // to the main-thread, and the point in time when the 'FontFallback'\n    // message was received on the worker-thread.\n    // To ensure that all 'FontPath's are available on the main-thread, when\n    // font loading failed, attempt to resend *all* previously parsed glyphs.\n    const glyphs = this.font.glyphCacheValues;\n    PartialEvaluator.buildFontPaths(this.font, glyphs, handler);\n  }\n\n  loadType3Data(evaluator, resources, parentOperatorList, task) {\n    if (!this.font.isType3Font) {\n      throw new Error(\"Must be a Type3 font.\");\n    }\n\n    if (this.type3Loaded) {\n      return this.type3Loaded;\n    }\n    // When parsing Type3 glyphs, always ignore them if there are errors.\n    // Compared to the parsing of e.g. an entire page, it doesn't really\n    // make sense to only be able to render a Type3 glyph partially.\n    //\n    // Also, ensure that any Type3 image resources (which should be very rare\n    // in practice) are completely decoded on the worker-thread, to simplify\n    // the rendering code on the main-thread (see issue10717.pdf).\n    var type3Options = Object.create(evaluator.options);\n    type3Options.ignoreErrors = false;\n    var type3Evaluator = evaluator.clone(type3Options);\n    type3Evaluator.parsingType3Font = true;\n\n    var translatedFont = this.font;\n    var loadCharProcsPromise = Promise.resolve();\n    var charProcs = this.dict.get(\"CharProcs\");\n    var fontResources = this.dict.get(\"Resources\") || resources;\n    var charProcKeys = charProcs.getKeys();\n    var charProcOperatorList = Object.create(null);\n\n    for (var i = 0, n = charProcKeys.length; i < n; ++i) {\n      const key = charProcKeys[i];\n      loadCharProcsPromise = loadCharProcsPromise.then(function () {\n        var glyphStream = charProcs.get(key);\n        var operatorList = new OperatorList();\n        return type3Evaluator\n          .getOperatorList({\n            stream: glyphStream,\n            task,\n            resources: fontResources,\n            operatorList,\n          })\n          .then(function () {\n            charProcOperatorList[key] = operatorList.getIR();\n\n            // Add the dependencies to the parent operator list so they are\n            // resolved before sub operator list is executed synchronously.\n            parentOperatorList.addDependencies(operatorList.dependencies);\n          })\n          .catch(function (reason) {\n            warn(`Type3 font resource \"${key}\" is not available.`);\n            const dummyOperatorList = new OperatorList();\n            charProcOperatorList[key] = dummyOperatorList.getIR();\n          });\n      });\n    }\n    this.type3Loaded = loadCharProcsPromise.then(function () {\n      translatedFont.charProcOperatorList = charProcOperatorList;\n    });\n    return this.type3Loaded;\n  }\n}\n\nvar StateManager = (function StateManagerClosure() {\n  // eslint-disable-next-line no-shadow\n  function StateManager(initialState) {\n    this.state = initialState;\n    this.stateStack = [];\n  }\n  StateManager.prototype = {\n    save() {\n      var old = this.state;\n      this.stateStack.push(this.state);\n      this.state = old.clone();\n    },\n    restore() {\n      var prev = this.stateStack.pop();\n      if (prev) {\n        this.state = prev;\n      }\n    },\n    transform(args) {\n      this.state.ctm = Util.transform(this.state.ctm, args);\n    },\n  };\n  return StateManager;\n})();\n\nvar TextState = (function TextStateClosure() {\n  // eslint-disable-next-line no-shadow\n  function TextState() {\n    this.ctm = new Float32Array(IDENTITY_MATRIX);\n    this.fontName = null;\n    this.fontSize = 0;\n    this.font = null;\n    this.fontMatrix = FONT_IDENTITY_MATRIX;\n    this.textMatrix = IDENTITY_MATRIX.slice();\n    this.textLineMatrix = IDENTITY_MATRIX.slice();\n    this.charSpacing = 0;\n    this.wordSpacing = 0;\n    this.leading = 0;\n    this.textHScale = 1;\n    this.textRise = 0;\n  }\n\n  TextState.prototype = {\n    setTextMatrix: function TextState_setTextMatrix(a, b, c, d, e, f) {\n      var m = this.textMatrix;\n      m[0] = a;\n      m[1] = b;\n      m[2] = c;\n      m[3] = d;\n      m[4] = e;\n      m[5] = f;\n    },\n    setTextLineMatrix: function TextState_setTextMatrix(a, b, c, d, e, f) {\n      var m = this.textLineMatrix;\n      m[0] = a;\n      m[1] = b;\n      m[2] = c;\n      m[3] = d;\n      m[4] = e;\n      m[5] = f;\n    },\n    translateTextMatrix: function TextState_translateTextMatrix(x, y) {\n      var m = this.textMatrix;\n      m[4] = m[0] * x + m[2] * y + m[4];\n      m[5] = m[1] * x + m[3] * y + m[5];\n    },\n    translateTextLineMatrix: function TextState_translateTextMatrix(x, y) {\n      var m = this.textLineMatrix;\n      m[4] = m[0] * x + m[2] * y + m[4];\n      m[5] = m[1] * x + m[3] * y + m[5];\n    },\n    calcTextLineMatrixAdvance: function TextState_calcTextLineMatrixAdvance(\n      a,\n      b,\n      c,\n      d,\n      e,\n      f\n    ) {\n      var font = this.font;\n      if (!font) {\n        return null;\n      }\n      var m = this.textLineMatrix;\n      if (!(a === m[0] && b === m[1] && c === m[2] && d === m[3])) {\n        return null;\n      }\n      var txDiff = e - m[4],\n        tyDiff = f - m[5];\n      if ((font.vertical && txDiff !== 0) || (!font.vertical && tyDiff !== 0)) {\n        return null;\n      }\n      var tx,\n        ty,\n        denominator = a * d - b * c;\n      if (font.vertical) {\n        tx = (-tyDiff * c) / denominator;\n        ty = (tyDiff * a) / denominator;\n      } else {\n        tx = (txDiff * d) / denominator;\n        ty = (-txDiff * b) / denominator;\n      }\n      return { width: tx, height: ty, value: font.vertical ? ty : tx };\n    },\n    calcRenderMatrix: function TextState_calcRendeMatrix(ctm) {\n      // 9.4.4 Text Space Details\n      var tsm = [\n        this.fontSize * this.textHScale,\n        0,\n        0,\n        this.fontSize,\n        0,\n        this.textRise,\n      ];\n      return Util.transform(ctm, Util.transform(this.textMatrix, tsm));\n    },\n    carriageReturn: function TextState_carriageReturn() {\n      this.translateTextLineMatrix(0, -this.leading);\n      this.textMatrix = this.textLineMatrix.slice();\n    },\n    clone: function TextState_clone() {\n      var clone = Object.create(this);\n      clone.textMatrix = this.textMatrix.slice();\n      clone.textLineMatrix = this.textLineMatrix.slice();\n      clone.fontMatrix = this.fontMatrix.slice();\n      return clone;\n    },\n  };\n  return TextState;\n})();\n\nvar EvalState = (function EvalStateClosure() {\n  // eslint-disable-next-line no-shadow\n  function EvalState() {\n    this.ctm = new Float32Array(IDENTITY_MATRIX);\n    this.font = null;\n    this.textRenderingMode = TextRenderingMode.FILL;\n    this.fillColorSpace = ColorSpace.singletons.gray;\n    this.strokeColorSpace = ColorSpace.singletons.gray;\n  }\n  EvalState.prototype = {\n    clone: function CanvasExtraState_clone() {\n      return Object.create(this);\n    },\n  };\n  return EvalState;\n})();\n\nvar EvaluatorPreprocessor = (function EvaluatorPreprocessorClosure() {\n  // Specifies properties for each command\n  //\n  // If variableArgs === true: [0, `numArgs`] expected\n  // If variableArgs === false: exactly `numArgs` expected\n  var getOPMap = getLookupTableFactory(function (t) {\n    // Graphic state\n    t.w = { id: OPS.setLineWidth, numArgs: 1, variableArgs: false };\n    t.J = { id: OPS.setLineCap, numArgs: 1, variableArgs: false };\n    t.j = { id: OPS.setLineJoin, numArgs: 1, variableArgs: false };\n    t.M = { id: OPS.setMiterLimit, numArgs: 1, variableArgs: false };\n    t.d = { id: OPS.setDash, numArgs: 2, variableArgs: false };\n    t.ri = { id: OPS.setRenderingIntent, numArgs: 1, variableArgs: false };\n    t.i = { id: OPS.setFlatness, numArgs: 1, variableArgs: false };\n    t.gs = { id: OPS.setGState, numArgs: 1, variableArgs: false };\n    t.q = { id: OPS.save, numArgs: 0, variableArgs: false };\n    t.Q = { id: OPS.restore, numArgs: 0, variableArgs: false };\n    t.cm = { id: OPS.transform, numArgs: 6, variableArgs: false };\n\n    // Path\n    t.m = { id: OPS.moveTo, numArgs: 2, variableArgs: false };\n    t.l = { id: OPS.lineTo, numArgs: 2, variableArgs: false };\n    t.c = { id: OPS.curveTo, numArgs: 6, variableArgs: false };\n    t.v = { id: OPS.curveTo2, numArgs: 4, variableArgs: false };\n    t.y = { id: OPS.curveTo3, numArgs: 4, variableArgs: false };\n    t.h = { id: OPS.closePath, numArgs: 0, variableArgs: false };\n    t.re = { id: OPS.rectangle, numArgs: 4, variableArgs: false };\n    t.S = { id: OPS.stroke, numArgs: 0, variableArgs: false };\n    t.s = { id: OPS.closeStroke, numArgs: 0, variableArgs: false };\n    t.f = { id: OPS.fill, numArgs: 0, variableArgs: false };\n    t.F = { id: OPS.fill, numArgs: 0, variableArgs: false };\n    t[\"f*\"] = { id: OPS.eoFill, numArgs: 0, variableArgs: false };\n    t.B = { id: OPS.fillStroke, numArgs: 0, variableArgs: false };\n    t[\"B*\"] = { id: OPS.eoFillStroke, numArgs: 0, variableArgs: false };\n    t.b = { id: OPS.closeFillStroke, numArgs: 0, variableArgs: false };\n    t[\"b*\"] = { id: OPS.closeEOFillStroke, numArgs: 0, variableArgs: false };\n    t.n = { id: OPS.endPath, numArgs: 0, variableArgs: false };\n\n    // Clipping\n    t.W = { id: OPS.clip, numArgs: 0, variableArgs: false };\n    t[\"W*\"] = { id: OPS.eoClip, numArgs: 0, variableArgs: false };\n\n    // Text\n    t.BT = { id: OPS.beginText, numArgs: 0, variableArgs: false };\n    t.ET = { id: OPS.endText, numArgs: 0, variableArgs: false };\n    t.Tc = { id: OPS.setCharSpacing, numArgs: 1, variableArgs: false };\n    t.Tw = { id: OPS.setWordSpacing, numArgs: 1, variableArgs: false };\n    t.Tz = { id: OPS.setHScale, numArgs: 1, variableArgs: false };\n    t.TL = { id: OPS.setLeading, numArgs: 1, variableArgs: false };\n    t.Tf = { id: OPS.setFont, numArgs: 2, variableArgs: false };\n    t.Tr = { id: OPS.setTextRenderingMode, numArgs: 1, variableArgs: false };\n    t.Ts = { id: OPS.setTextRise, numArgs: 1, variableArgs: false };\n    t.Td = { id: OPS.moveText, numArgs: 2, variableArgs: false };\n    t.TD = { id: OPS.setLeadingMoveText, numArgs: 2, variableArgs: false };\n    t.Tm = { id: OPS.setTextMatrix, numArgs: 6, variableArgs: false };\n    t[\"T*\"] = { id: OPS.nextLine, numArgs: 0, variableArgs: false };\n    t.Tj = { id: OPS.showText, numArgs: 1, variableArgs: false };\n    t.TJ = { id: OPS.showSpacedText, numArgs: 1, variableArgs: false };\n    t[\"'\"] = { id: OPS.nextLineShowText, numArgs: 1, variableArgs: false };\n    t['\"'] = {\n      id: OPS.nextLineSetSpacingShowText,\n      numArgs: 3,\n      variableArgs: false,\n    };\n\n    // Type3 fonts\n    t.d0 = { id: OPS.setCharWidth, numArgs: 2, variableArgs: false };\n    t.d1 = {\n      id: OPS.setCharWidthAndBounds,\n      numArgs: 6,\n      variableArgs: false,\n    };\n\n    // Color\n    t.CS = { id: OPS.setStrokeColorSpace, numArgs: 1, variableArgs: false };\n    t.cs = { id: OPS.setFillColorSpace, numArgs: 1, variableArgs: false };\n    t.SC = { id: OPS.setStrokeColor, numArgs: 4, variableArgs: true };\n    t.SCN = { id: OPS.setStrokeColorN, numArgs: 33, variableArgs: true };\n    t.sc = { id: OPS.setFillColor, numArgs: 4, variableArgs: true };\n    t.scn = { id: OPS.setFillColorN, numArgs: 33, variableArgs: true };\n    t.G = { id: OPS.setStrokeGray, numArgs: 1, variableArgs: false };\n    t.g = { id: OPS.setFillGray, numArgs: 1, variableArgs: false };\n    t.RG = { id: OPS.setStrokeRGBColor, numArgs: 3, variableArgs: false };\n    t.rg = { id: OPS.setFillRGBColor, numArgs: 3, variableArgs: false };\n    t.K = { id: OPS.setStrokeCMYKColor, numArgs: 4, variableArgs: false };\n    t.k = { id: OPS.setFillCMYKColor, numArgs: 4, variableArgs: false };\n\n    // Shading\n    t.sh = { id: OPS.shadingFill, numArgs: 1, variableArgs: false };\n\n    // Images\n    t.BI = { id: OPS.beginInlineImage, numArgs: 0, variableArgs: false };\n    t.ID = { id: OPS.beginImageData, numArgs: 0, variableArgs: false };\n    t.EI = { id: OPS.endInlineImage, numArgs: 1, variableArgs: false };\n\n    // XObjects\n    t.Do = { id: OPS.paintXObject, numArgs: 1, variableArgs: false };\n    t.MP = { id: OPS.markPoint, numArgs: 1, variableArgs: false };\n    t.DP = { id: OPS.markPointProps, numArgs: 2, variableArgs: false };\n    t.BMC = { id: OPS.beginMarkedContent, numArgs: 1, variableArgs: false };\n    t.BDC = {\n      id: OPS.beginMarkedContentProps,\n      numArgs: 2,\n      variableArgs: false,\n    };\n    t.EMC = { id: OPS.endMarkedContent, numArgs: 0, variableArgs: false };\n\n    // Compatibility\n    t.BX = { id: OPS.beginCompat, numArgs: 0, variableArgs: false };\n    t.EX = { id: OPS.endCompat, numArgs: 0, variableArgs: false };\n\n    // (reserved partial commands for the lexer)\n    t.BM = null;\n    t.BD = null;\n    t.true = null;\n    t.fa = null;\n    t.fal = null;\n    t.fals = null;\n    t.false = null;\n    t.nu = null;\n    t.nul = null;\n    t.null = null;\n  });\n\n  const MAX_INVALID_PATH_OPS = 20;\n\n  // eslint-disable-next-line no-shadow\n  function EvaluatorPreprocessor(stream, xref, stateManager) {\n    this.opMap = getOPMap();\n    // TODO(mduan): pass array of knownCommands rather than this.opMap\n    // dictionary\n    this.parser = new Parser({\n      lexer: new Lexer(stream, this.opMap),\n      xref,\n    });\n    this.stateManager = stateManager;\n    this.nonProcessedArgs = [];\n    this._numInvalidPathOPS = 0;\n  }\n\n  EvaluatorPreprocessor.prototype = {\n    get savedStatesDepth() {\n      return this.stateManager.stateStack.length;\n    },\n\n    // |operation| is an object with two fields:\n    //\n    // - |fn| is an out param.\n    //\n    // - |args| is an inout param. On entry, it should have one of two values.\n    //\n    //   - An empty array. This indicates that the caller is providing the\n    //     array in which the args will be stored in. The caller should use\n    //     this value if it can reuse a single array for each call to read().\n    //\n    //   - |null|. This indicates that the caller needs this function to create\n    //     the array in which any args are stored in. If there are zero args,\n    //     this function will leave |operation.args| as |null| (thus avoiding\n    //     allocations that would occur if we used an empty array to represent\n    //     zero arguments). Otherwise, it will replace |null| with a new array\n    //     containing the arguments. The caller should use this value if it\n    //     cannot reuse an array for each call to read().\n    //\n    // These two modes are present because this function is very hot and so\n    // avoiding allocations where possible is worthwhile.\n    //\n    read: function EvaluatorPreprocessor_read(operation) {\n      var args = operation.args;\n      while (true) {\n        var obj = this.parser.getObj();\n        if (obj instanceof Cmd) {\n          var cmd = obj.cmd;\n          // Check that the command is valid\n          var opSpec = this.opMap[cmd];\n          if (!opSpec) {\n            warn(`Unknown command \"${cmd}\".`);\n            continue;\n          }\n\n          var fn = opSpec.id;\n          var numArgs = opSpec.numArgs;\n          var argsLength = args !== null ? args.length : 0;\n\n          if (!opSpec.variableArgs) {\n            // Postscript commands can be nested, e.g. /F2 /GS2 gs 5.711 Tf\n            if (argsLength !== numArgs) {\n              var nonProcessedArgs = this.nonProcessedArgs;\n              while (argsLength > numArgs) {\n                nonProcessedArgs.push(args.shift());\n                argsLength--;\n              }\n              while (argsLength < numArgs && nonProcessedArgs.length !== 0) {\n                if (args === null) {\n                  args = [];\n                }\n                args.unshift(nonProcessedArgs.pop());\n                argsLength++;\n              }\n            }\n\n            if (argsLength < numArgs) {\n              const partialMsg =\n                `command ${cmd}: expected ${numArgs} args, ` +\n                `but received ${argsLength} args.`;\n\n              // Incomplete path operators, in particular, can result in fairly\n              // chaotic rendering artifacts. Hence the following heuristics is\n              // used to error, rather than just warn, once a number of invalid\n              // path operators have been encountered (fixes bug1443140.pdf).\n              if (\n                fn >= OPS.moveTo &&\n                fn <= OPS.endPath && // Path operator\n                ++this._numInvalidPathOPS > MAX_INVALID_PATH_OPS\n              ) {\n                throw new FormatError(`Invalid ${partialMsg}`);\n              }\n              // If we receive too few arguments, it's not possible to execute\n              // the command, hence we skip the command.\n              warn(`Skipping ${partialMsg}`);\n              if (args !== null) {\n                args.length = 0;\n              }\n              continue;\n            }\n          } else if (argsLength > numArgs) {\n            info(\n              `Command ${cmd}: expected [0, ${numArgs}] args, ` +\n                `but received ${argsLength} args.`\n            );\n          }\n\n          // TODO figure out how to type-check vararg functions\n          this.preprocessCommand(fn, args);\n\n          operation.fn = fn;\n          operation.args = args;\n          return true;\n        }\n        if (obj === EOF) {\n          return false; // no more commands\n        }\n        // argument\n        if (obj !== null) {\n          if (args === null) {\n            args = [];\n          }\n          args.push(obj);\n          if (args.length > 33) {\n            throw new FormatError(\"Too many arguments\");\n          }\n        }\n      }\n    },\n\n    preprocessCommand: function EvaluatorPreprocessor_preprocessCommand(\n      fn,\n      args\n    ) {\n      switch (fn | 0) {\n        case OPS.save:\n          this.stateManager.save();\n          break;\n        case OPS.restore:\n          this.stateManager.restore();\n          break;\n        case OPS.transform:\n          this.stateManager.transform(args);\n          break;\n      }\n    },\n  };\n  return EvaluatorPreprocessor;\n})();\n\nexport { PartialEvaluator };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CMapCompressionType,\n  FormatError,\n  isString,\n  unreachable,\n  warn,\n} from \"../shared/util.js\";\nimport { isCmd, isEOF, isName, isStream } from \"./primitives.js\";\nimport { Lexer } from \"./parser.js\";\nimport { MissingDataException } from \"./core_utils.js\";\nimport { Stream } from \"./stream.js\";\n\nvar BUILT_IN_CMAPS = [\n  // << Start unicode maps.\n  \"Adobe-GB1-UCS2\",\n  \"Adobe-CNS1-UCS2\",\n  \"Adobe-Japan1-UCS2\",\n  \"Adobe-Korea1-UCS2\",\n  // >> End unicode maps.\n  \"78-EUC-H\",\n  \"78-EUC-V\",\n  \"78-H\",\n  \"78-RKSJ-H\",\n  \"78-RKSJ-V\",\n  \"78-V\",\n  \"78ms-RKSJ-H\",\n  \"78ms-RKSJ-V\",\n  \"83pv-RKSJ-H\",\n  \"90ms-RKSJ-H\",\n  \"90ms-RKSJ-V\",\n  \"90msp-RKSJ-H\",\n  \"90msp-RKSJ-V\",\n  \"90pv-RKSJ-H\",\n  \"90pv-RKSJ-V\",\n  \"Add-H\",\n  \"Add-RKSJ-H\",\n  \"Add-RKSJ-V\",\n  \"Add-V\",\n  \"Adobe-CNS1-0\",\n  \"Adobe-CNS1-1\",\n  \"Adobe-CNS1-2\",\n  \"Adobe-CNS1-3\",\n  \"Adobe-CNS1-4\",\n  \"Adobe-CNS1-5\",\n  \"Adobe-CNS1-6\",\n  \"Adobe-GB1-0\",\n  \"Adobe-GB1-1\",\n  \"Adobe-GB1-2\",\n  \"Adobe-GB1-3\",\n  \"Adobe-GB1-4\",\n  \"Adobe-GB1-5\",\n  \"Adobe-Japan1-0\",\n  \"Adobe-Japan1-1\",\n  \"Adobe-Japan1-2\",\n  \"Adobe-Japan1-3\",\n  \"Adobe-Japan1-4\",\n  \"Adobe-Japan1-5\",\n  \"Adobe-Japan1-6\",\n  \"Adobe-Korea1-0\",\n  \"Adobe-Korea1-1\",\n  \"Adobe-Korea1-2\",\n  \"B5-H\",\n  \"B5-V\",\n  \"B5pc-H\",\n  \"B5pc-V\",\n  \"CNS-EUC-H\",\n  \"CNS-EUC-V\",\n  \"CNS1-H\",\n  \"CNS1-V\",\n  \"CNS2-H\",\n  \"CNS2-V\",\n  \"ETHK-B5-H\",\n  \"ETHK-B5-V\",\n  \"ETen-B5-H\",\n  \"ETen-B5-V\",\n  \"ETenms-B5-H\",\n  \"ETenms-B5-V\",\n  \"EUC-H\",\n  \"EUC-V\",\n  \"Ext-H\",\n  \"Ext-RKSJ-H\",\n  \"Ext-RKSJ-V\",\n  \"Ext-V\",\n  \"GB-EUC-H\",\n  \"GB-EUC-V\",\n  \"GB-H\",\n  \"GB-V\",\n  \"GBK-EUC-H\",\n  \"GBK-EUC-V\",\n  \"GBK2K-H\",\n  \"GBK2K-V\",\n  \"GBKp-EUC-H\",\n  \"GBKp-EUC-V\",\n  \"GBT-EUC-H\",\n  \"GBT-EUC-V\",\n  \"GBT-H\",\n  \"GBT-V\",\n  \"GBTpc-EUC-H\",\n  \"GBTpc-EUC-V\",\n  \"GBpc-EUC-H\",\n  \"GBpc-EUC-V\",\n  \"H\",\n  \"HKdla-B5-H\",\n  \"HKdla-B5-V\",\n  \"HKdlb-B5-H\",\n  \"HKdlb-B5-V\",\n  \"HKgccs-B5-H\",\n  \"HKgccs-B5-V\",\n  \"HKm314-B5-H\",\n  \"HKm314-B5-V\",\n  \"HKm471-B5-H\",\n  \"HKm471-B5-V\",\n  \"HKscs-B5-H\",\n  \"HKscs-B5-V\",\n  \"Hankaku\",\n  \"Hiragana\",\n  \"KSC-EUC-H\",\n  \"KSC-EUC-V\",\n  \"KSC-H\",\n  \"KSC-Johab-H\",\n  \"KSC-Johab-V\",\n  \"KSC-V\",\n  \"KSCms-UHC-H\",\n  \"KSCms-UHC-HW-H\",\n  \"KSCms-UHC-HW-V\",\n  \"KSCms-UHC-V\",\n  \"KSCpc-EUC-H\",\n  \"KSCpc-EUC-V\",\n  \"Katakana\",\n  \"NWP-H\",\n  \"NWP-V\",\n  \"RKSJ-H\",\n  \"RKSJ-V\",\n  \"Roman\",\n  \"UniCNS-UCS2-H\",\n  \"UniCNS-UCS2-V\",\n  \"UniCNS-UTF16-H\",\n  \"UniCNS-UTF16-V\",\n  \"UniCNS-UTF32-H\",\n  \"UniCNS-UTF32-V\",\n  \"UniCNS-UTF8-H\",\n  \"UniCNS-UTF8-V\",\n  \"UniGB-UCS2-H\",\n  \"UniGB-UCS2-V\",\n  \"UniGB-UTF16-H\",\n  \"UniGB-UTF16-V\",\n  \"UniGB-UTF32-H\",\n  \"UniGB-UTF32-V\",\n  \"UniGB-UTF8-H\",\n  \"UniGB-UTF8-V\",\n  \"UniJIS-UCS2-H\",\n  \"UniJIS-UCS2-HW-H\",\n  \"UniJIS-UCS2-HW-V\",\n  \"UniJIS-UCS2-V\",\n  \"UniJIS-UTF16-H\",\n  \"UniJIS-UTF16-V\",\n  \"UniJIS-UTF32-H\",\n  \"UniJIS-UTF32-V\",\n  \"UniJIS-UTF8-H\",\n  \"UniJIS-UTF8-V\",\n  \"UniJIS2004-UTF16-H\",\n  \"UniJIS2004-UTF16-V\",\n  \"UniJIS2004-UTF32-H\",\n  \"UniJIS2004-UTF32-V\",\n  \"UniJIS2004-UTF8-H\",\n  \"UniJIS2004-UTF8-V\",\n  \"UniJISPro-UCS2-HW-V\",\n  \"UniJISPro-UCS2-V\",\n  \"UniJISPro-UTF8-V\",\n  \"UniJISX0213-UTF32-H\",\n  \"UniJISX0213-UTF32-V\",\n  \"UniJISX02132004-UTF32-H\",\n  \"UniJISX02132004-UTF32-V\",\n  \"UniKS-UCS2-H\",\n  \"UniKS-UCS2-V\",\n  \"UniKS-UTF16-H\",\n  \"UniKS-UTF16-V\",\n  \"UniKS-UTF32-H\",\n  \"UniKS-UTF32-V\",\n  \"UniKS-UTF8-H\",\n  \"UniKS-UTF8-V\",\n  \"V\",\n  \"WP-Symbol\",\n];\n\n// Heuristic to avoid hanging the worker-thread for CMap data with ridiculously\n// large ranges, such as e.g. 0xFFFFFFFF (fixes issue11922_reduced.pdf).\nconst MAX_MAP_RANGE = 2 ** 24 - 1; // = 0xFFFFFF\n\n// CMap, not to be confused with TrueType's cmap.\nclass CMap {\n  constructor(builtInCMap = false) {\n    // Codespace ranges are stored as follows:\n    // [[1BytePairs], [2BytePairs], [3BytePairs], [4BytePairs]]\n    // where nBytePairs are ranges e.g. [low1, high1, low2, high2, ...]\n    this.codespaceRanges = [[], [], [], []];\n    this.numCodespaceRanges = 0;\n    // Map entries have one of two forms.\n    // - cid chars are 16-bit unsigned integers, stored as integers.\n    // - bf chars are variable-length byte sequences, stored as strings, with\n    //   one byte per character.\n    this._map = [];\n    this.name = \"\";\n    this.vertical = false;\n    this.useCMap = null;\n    this.builtInCMap = builtInCMap;\n  }\n\n  addCodespaceRange(n, low, high) {\n    this.codespaceRanges[n - 1].push(low, high);\n    this.numCodespaceRanges++;\n  }\n\n  mapCidRange(low, high, dstLow) {\n    if (high - low > MAX_MAP_RANGE) {\n      throw new Error(\"mapCidRange - ignoring data above MAX_MAP_RANGE.\");\n    }\n    while (low <= high) {\n      this._map[low++] = dstLow++;\n    }\n  }\n\n  mapBfRange(low, high, dstLow) {\n    if (high - low > MAX_MAP_RANGE) {\n      throw new Error(\"mapBfRange - ignoring data above MAX_MAP_RANGE.\");\n    }\n    var lastByte = dstLow.length - 1;\n    while (low <= high) {\n      this._map[low++] = dstLow;\n      // Only the last byte has to be incremented.\n      dstLow =\n        dstLow.substring(0, lastByte) +\n        String.fromCharCode(dstLow.charCodeAt(lastByte) + 1);\n    }\n  }\n\n  mapBfRangeToArray(low, high, array) {\n    if (high - low > MAX_MAP_RANGE) {\n      throw new Error(\"mapBfRangeToArray - ignoring data above MAX_MAP_RANGE.\");\n    }\n    const ii = array.length;\n    let i = 0;\n    while (low <= high && i < ii) {\n      this._map[low] = array[i++];\n      ++low;\n    }\n  }\n\n  // This is used for both bf and cid chars.\n  mapOne(src, dst) {\n    this._map[src] = dst;\n  }\n\n  lookup(code) {\n    return this._map[code];\n  }\n\n  contains(code) {\n    return this._map[code] !== undefined;\n  }\n\n  forEach(callback) {\n    // Most maps have fewer than 65536 entries, and for those we use normal\n    // array iteration. But really sparse tables are possible -- e.g. with\n    // indices in the *billions*. For such tables we use for..in, which isn't\n    // ideal because it stringifies the indices for all present elements, but\n    // it does avoid iterating over every undefined entry.\n    const map = this._map;\n    const length = map.length;\n    if (length <= 0x10000) {\n      for (let i = 0; i < length; i++) {\n        if (map[i] !== undefined) {\n          callback(i, map[i]);\n        }\n      }\n    } else {\n      for (const i in map) {\n        callback(i, map[i]);\n      }\n    }\n  }\n\n  charCodeOf(value) {\n    // `Array.prototype.indexOf` is *extremely* inefficient for arrays which\n    // are both very sparse and very large (see issue8372.pdf).\n    const map = this._map;\n    if (map.length <= 0x10000) {\n      return map.indexOf(value);\n    }\n    for (const charCode in map) {\n      if (map[charCode] === value) {\n        return charCode | 0;\n      }\n    }\n    return -1;\n  }\n\n  getMap() {\n    return this._map;\n  }\n\n  readCharCode(str, offset, out) {\n    let c = 0;\n    const codespaceRanges = this.codespaceRanges;\n    // 9.7.6.2 CMap Mapping\n    // The code length is at most 4.\n    for (let n = 0, nn = codespaceRanges.length; n < nn; n++) {\n      c = ((c << 8) | str.charCodeAt(offset + n)) >>> 0;\n      // Check each codespace range to see if it falls within.\n      const codespaceRange = codespaceRanges[n];\n      for (let k = 0, kk = codespaceRange.length; k < kk; ) {\n        const low = codespaceRange[k++];\n        const high = codespaceRange[k++];\n        if (c >= low && c <= high) {\n          out.charcode = c;\n          out.length = n + 1;\n          return;\n        }\n      }\n    }\n    out.charcode = 0;\n    out.length = 1;\n  }\n\n  get length() {\n    return this._map.length;\n  }\n\n  get isIdentityCMap() {\n    if (!(this.name === \"Identity-H\" || this.name === \"Identity-V\")) {\n      return false;\n    }\n    if (this._map.length !== 0x10000) {\n      return false;\n    }\n    for (let i = 0; i < 0x10000; i++) {\n      if (this._map[i] !== i) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\n// A special case of CMap, where the _map array implicitly has a length of\n// 65536 and each element is equal to its index.\nclass IdentityCMap extends CMap {\n  constructor(vertical, n) {\n    super();\n\n    this.vertical = vertical;\n    this.addCodespaceRange(n, 0, 0xffff);\n  }\n\n  mapCidRange(low, high, dstLow) {\n    unreachable(\"should not call mapCidRange\");\n  }\n\n  mapBfRange(low, high, dstLow) {\n    unreachable(\"should not call mapBfRange\");\n  }\n\n  mapBfRangeToArray(low, high, array) {\n    unreachable(\"should not call mapBfRangeToArray\");\n  }\n\n  mapOne(src, dst) {\n    unreachable(\"should not call mapCidOne\");\n  }\n\n  lookup(code) {\n    return Number.isInteger(code) && code <= 0xffff ? code : undefined;\n  }\n\n  contains(code) {\n    return Number.isInteger(code) && code <= 0xffff;\n  }\n\n  forEach(callback) {\n    for (let i = 0; i <= 0xffff; i++) {\n      callback(i, i);\n    }\n  }\n\n  charCodeOf(value) {\n    return Number.isInteger(value) && value <= 0xffff ? value : -1;\n  }\n\n  getMap() {\n    // Sometimes identity maps must be instantiated, but it's rare.\n    const map = new Array(0x10000);\n    for (let i = 0; i <= 0xffff; i++) {\n      map[i] = i;\n    }\n    return map;\n  }\n\n  get length() {\n    return 0x10000;\n  }\n\n  // eslint-disable-next-line getter-return\n  get isIdentityCMap() {\n    unreachable(\"should not access .isIdentityCMap\");\n  }\n}\n\nvar BinaryCMapReader = (function BinaryCMapReaderClosure() {\n  function hexToInt(a, size) {\n    var n = 0;\n    for (var i = 0; i <= size; i++) {\n      n = (n << 8) | a[i];\n    }\n    return n >>> 0;\n  }\n\n  function hexToStr(a, size) {\n    // This code is hot. Special-case some common values to avoid creating an\n    // object with subarray().\n    if (size === 1) {\n      return String.fromCharCode(a[0], a[1]);\n    }\n    if (size === 3) {\n      return String.fromCharCode(a[0], a[1], a[2], a[3]);\n    }\n    return String.fromCharCode.apply(null, a.subarray(0, size + 1));\n  }\n\n  function addHex(a, b, size) {\n    var c = 0;\n    for (var i = size; i >= 0; i--) {\n      c += a[i] + b[i];\n      a[i] = c & 255;\n      c >>= 8;\n    }\n  }\n\n  function incHex(a, size) {\n    var c = 1;\n    for (var i = size; i >= 0 && c > 0; i--) {\n      c += a[i];\n      a[i] = c & 255;\n      c >>= 8;\n    }\n  }\n\n  var MAX_NUM_SIZE = 16;\n  var MAX_ENCODED_NUM_SIZE = 19; // ceil(MAX_NUM_SIZE * 7 / 8)\n\n  function BinaryCMapStream(data) {\n    this.buffer = data;\n    this.pos = 0;\n    this.end = data.length;\n    this.tmpBuf = new Uint8Array(MAX_ENCODED_NUM_SIZE);\n  }\n\n  BinaryCMapStream.prototype = {\n    readByte() {\n      if (this.pos >= this.end) {\n        return -1;\n      }\n      return this.buffer[this.pos++];\n    },\n    readNumber() {\n      var n = 0;\n      var last;\n      do {\n        var b = this.readByte();\n        if (b < 0) {\n          throw new FormatError(\"unexpected EOF in bcmap\");\n        }\n        last = !(b & 0x80);\n        n = (n << 7) | (b & 0x7f);\n      } while (!last);\n      return n;\n    },\n    readSigned() {\n      var n = this.readNumber();\n      return n & 1 ? ~(n >>> 1) : n >>> 1;\n    },\n    readHex(num, size) {\n      num.set(this.buffer.subarray(this.pos, this.pos + size + 1));\n      this.pos += size + 1;\n    },\n    readHexNumber(num, size) {\n      var last;\n      var stack = this.tmpBuf,\n        sp = 0;\n      do {\n        var b = this.readByte();\n        if (b < 0) {\n          throw new FormatError(\"unexpected EOF in bcmap\");\n        }\n        last = !(b & 0x80);\n        stack[sp++] = b & 0x7f;\n      } while (!last);\n      var i = size,\n        buffer = 0,\n        bufferSize = 0;\n      while (i >= 0) {\n        while (bufferSize < 8 && stack.length > 0) {\n          buffer = (stack[--sp] << bufferSize) | buffer;\n          bufferSize += 7;\n        }\n        num[i] = buffer & 255;\n        i--;\n        buffer >>= 8;\n        bufferSize -= 8;\n      }\n    },\n    readHexSigned(num, size) {\n      this.readHexNumber(num, size);\n      var sign = num[size] & 1 ? 255 : 0;\n      var c = 0;\n      for (var i = 0; i <= size; i++) {\n        c = ((c & 1) << 8) | num[i];\n        num[i] = (c >> 1) ^ sign;\n      }\n    },\n    readString() {\n      var len = this.readNumber();\n      var s = \"\";\n      for (var i = 0; i < len; i++) {\n        s += String.fromCharCode(this.readNumber());\n      }\n      return s;\n    },\n  };\n\n  function processBinaryCMap(data, cMap, extend) {\n    return new Promise(function (resolve, reject) {\n      var stream = new BinaryCMapStream(data);\n      var header = stream.readByte();\n      cMap.vertical = !!(header & 1);\n\n      var useCMap = null;\n      var start = new Uint8Array(MAX_NUM_SIZE);\n      var end = new Uint8Array(MAX_NUM_SIZE);\n      var char = new Uint8Array(MAX_NUM_SIZE);\n      var charCode = new Uint8Array(MAX_NUM_SIZE);\n      var tmp = new Uint8Array(MAX_NUM_SIZE);\n      var code;\n\n      var b;\n      while ((b = stream.readByte()) >= 0) {\n        var type = b >> 5;\n        if (type === 7) {\n          // metadata, e.g. comment or usecmap\n          switch (b & 0x1f) {\n            case 0:\n              stream.readString(); // skipping comment\n              break;\n            case 1:\n              useCMap = stream.readString();\n              break;\n          }\n          continue;\n        }\n        var sequence = !!(b & 0x10);\n        var dataSize = b & 15;\n\n        if (dataSize + 1 > MAX_NUM_SIZE) {\n          throw new Error(\"processBinaryCMap: Invalid dataSize.\");\n        }\n\n        var ucs2DataSize = 1;\n        var subitemsCount = stream.readNumber();\n        var i;\n        switch (type) {\n          case 0: // codespacerange\n            stream.readHex(start, dataSize);\n            stream.readHexNumber(end, dataSize);\n            addHex(end, start, dataSize);\n            cMap.addCodespaceRange(\n              dataSize + 1,\n              hexToInt(start, dataSize),\n              hexToInt(end, dataSize)\n            );\n            for (i = 1; i < subitemsCount; i++) {\n              incHex(end, dataSize);\n              stream.readHexNumber(start, dataSize);\n              addHex(start, end, dataSize);\n              stream.readHexNumber(end, dataSize);\n              addHex(end, start, dataSize);\n              cMap.addCodespaceRange(\n                dataSize + 1,\n                hexToInt(start, dataSize),\n                hexToInt(end, dataSize)\n              );\n            }\n            break;\n          case 1: // notdefrange\n            stream.readHex(start, dataSize);\n            stream.readHexNumber(end, dataSize);\n            addHex(end, start, dataSize);\n            stream.readNumber(); // code\n            // undefined range, skipping\n            for (i = 1; i < subitemsCount; i++) {\n              incHex(end, dataSize);\n              stream.readHexNumber(start, dataSize);\n              addHex(start, end, dataSize);\n              stream.readHexNumber(end, dataSize);\n              addHex(end, start, dataSize);\n              stream.readNumber(); // code\n              // nop\n            }\n            break;\n          case 2: // cidchar\n            stream.readHex(char, dataSize);\n            code = stream.readNumber();\n            cMap.mapOne(hexToInt(char, dataSize), code);\n            for (i = 1; i < subitemsCount; i++) {\n              incHex(char, dataSize);\n              if (!sequence) {\n                stream.readHexNumber(tmp, dataSize);\n                addHex(char, tmp, dataSize);\n              }\n              code = stream.readSigned() + (code + 1);\n              cMap.mapOne(hexToInt(char, dataSize), code);\n            }\n            break;\n          case 3: // cidrange\n            stream.readHex(start, dataSize);\n            stream.readHexNumber(end, dataSize);\n            addHex(end, start, dataSize);\n            code = stream.readNumber();\n            cMap.mapCidRange(\n              hexToInt(start, dataSize),\n              hexToInt(end, dataSize),\n              code\n            );\n            for (i = 1; i < subitemsCount; i++) {\n              incHex(end, dataSize);\n              if (!sequence) {\n                stream.readHexNumber(start, dataSize);\n                addHex(start, end, dataSize);\n              } else {\n                start.set(end);\n              }\n              stream.readHexNumber(end, dataSize);\n              addHex(end, start, dataSize);\n              code = stream.readNumber();\n              cMap.mapCidRange(\n                hexToInt(start, dataSize),\n                hexToInt(end, dataSize),\n                code\n              );\n            }\n            break;\n          case 4: // bfchar\n            stream.readHex(char, ucs2DataSize);\n            stream.readHex(charCode, dataSize);\n            cMap.mapOne(\n              hexToInt(char, ucs2DataSize),\n              hexToStr(charCode, dataSize)\n            );\n            for (i = 1; i < subitemsCount; i++) {\n              incHex(char, ucs2DataSize);\n              if (!sequence) {\n                stream.readHexNumber(tmp, ucs2DataSize);\n                addHex(char, tmp, ucs2DataSize);\n              }\n              incHex(charCode, dataSize);\n              stream.readHexSigned(tmp, dataSize);\n              addHex(charCode, tmp, dataSize);\n              cMap.mapOne(\n                hexToInt(char, ucs2DataSize),\n                hexToStr(charCode, dataSize)\n              );\n            }\n            break;\n          case 5: // bfrange\n            stream.readHex(start, ucs2DataSize);\n            stream.readHexNumber(end, ucs2DataSize);\n            addHex(end, start, ucs2DataSize);\n            stream.readHex(charCode, dataSize);\n            cMap.mapBfRange(\n              hexToInt(start, ucs2DataSize),\n              hexToInt(end, ucs2DataSize),\n              hexToStr(charCode, dataSize)\n            );\n            for (i = 1; i < subitemsCount; i++) {\n              incHex(end, ucs2DataSize);\n              if (!sequence) {\n                stream.readHexNumber(start, ucs2DataSize);\n                addHex(start, end, ucs2DataSize);\n              } else {\n                start.set(end);\n              }\n              stream.readHexNumber(end, ucs2DataSize);\n              addHex(end, start, ucs2DataSize);\n              stream.readHex(charCode, dataSize);\n              cMap.mapBfRange(\n                hexToInt(start, ucs2DataSize),\n                hexToInt(end, ucs2DataSize),\n                hexToStr(charCode, dataSize)\n              );\n            }\n            break;\n          default:\n            reject(new Error(\"processBinaryCMap: Unknown type: \" + type));\n            return;\n        }\n      }\n\n      if (useCMap) {\n        resolve(extend(useCMap));\n        return;\n      }\n      resolve(cMap);\n    });\n  }\n\n  // eslint-disable-next-line no-shadow\n  function BinaryCMapReader() {}\n\n  BinaryCMapReader.prototype = {\n    process: processBinaryCMap,\n  };\n\n  return BinaryCMapReader;\n})();\n\nvar CMapFactory = (function CMapFactoryClosure() {\n  function strToInt(str) {\n    var a = 0;\n    for (var i = 0; i < str.length; i++) {\n      a = (a << 8) | str.charCodeAt(i);\n    }\n    return a >>> 0;\n  }\n\n  function expectString(obj) {\n    if (!isString(obj)) {\n      throw new FormatError(\"Malformed CMap: expected string.\");\n    }\n  }\n\n  function expectInt(obj) {\n    if (!Number.isInteger(obj)) {\n      throw new FormatError(\"Malformed CMap: expected int.\");\n    }\n  }\n\n  function parseBfChar(cMap, lexer) {\n    while (true) {\n      var obj = lexer.getObj();\n      if (isEOF(obj)) {\n        break;\n      }\n      if (isCmd(obj, \"endbfchar\")) {\n        return;\n      }\n      expectString(obj);\n      var src = strToInt(obj);\n      obj = lexer.getObj();\n      // TODO are /dstName used?\n      expectString(obj);\n      var dst = obj;\n      cMap.mapOne(src, dst);\n    }\n  }\n\n  function parseBfRange(cMap, lexer) {\n    while (true) {\n      var obj = lexer.getObj();\n      if (isEOF(obj)) {\n        break;\n      }\n      if (isCmd(obj, \"endbfrange\")) {\n        return;\n      }\n      expectString(obj);\n      var low = strToInt(obj);\n      obj = lexer.getObj();\n      expectString(obj);\n      var high = strToInt(obj);\n      obj = lexer.getObj();\n      if (Number.isInteger(obj) || isString(obj)) {\n        var dstLow = Number.isInteger(obj) ? String.fromCharCode(obj) : obj;\n        cMap.mapBfRange(low, high, dstLow);\n      } else if (isCmd(obj, \"[\")) {\n        obj = lexer.getObj();\n        var array = [];\n        while (!isCmd(obj, \"]\") && !isEOF(obj)) {\n          array.push(obj);\n          obj = lexer.getObj();\n        }\n        cMap.mapBfRangeToArray(low, high, array);\n      } else {\n        break;\n      }\n    }\n    throw new FormatError(\"Invalid bf range.\");\n  }\n\n  function parseCidChar(cMap, lexer) {\n    while (true) {\n      var obj = lexer.getObj();\n      if (isEOF(obj)) {\n        break;\n      }\n      if (isCmd(obj, \"endcidchar\")) {\n        return;\n      }\n      expectString(obj);\n      var src = strToInt(obj);\n      obj = lexer.getObj();\n      expectInt(obj);\n      var dst = obj;\n      cMap.mapOne(src, dst);\n    }\n  }\n\n  function parseCidRange(cMap, lexer) {\n    while (true) {\n      var obj = lexer.getObj();\n      if (isEOF(obj)) {\n        break;\n      }\n      if (isCmd(obj, \"endcidrange\")) {\n        return;\n      }\n      expectString(obj);\n      var low = strToInt(obj);\n      obj = lexer.getObj();\n      expectString(obj);\n      var high = strToInt(obj);\n      obj = lexer.getObj();\n      expectInt(obj);\n      var dstLow = obj;\n      cMap.mapCidRange(low, high, dstLow);\n    }\n  }\n\n  function parseCodespaceRange(cMap, lexer) {\n    while (true) {\n      var obj = lexer.getObj();\n      if (isEOF(obj)) {\n        break;\n      }\n      if (isCmd(obj, \"endcodespacerange\")) {\n        return;\n      }\n      if (!isString(obj)) {\n        break;\n      }\n      var low = strToInt(obj);\n      obj = lexer.getObj();\n      if (!isString(obj)) {\n        break;\n      }\n      var high = strToInt(obj);\n      cMap.addCodespaceRange(obj.length, low, high);\n    }\n    throw new FormatError(\"Invalid codespace range.\");\n  }\n\n  function parseWMode(cMap, lexer) {\n    var obj = lexer.getObj();\n    if (Number.isInteger(obj)) {\n      cMap.vertical = !!obj;\n    }\n  }\n\n  function parseCMapName(cMap, lexer) {\n    var obj = lexer.getObj();\n    if (isName(obj) && isString(obj.name)) {\n      cMap.name = obj.name;\n    }\n  }\n\n  function parseCMap(cMap, lexer, fetchBuiltInCMap, useCMap) {\n    var previous;\n    var embeddedUseCMap;\n    objLoop: while (true) {\n      try {\n        var obj = lexer.getObj();\n        if (isEOF(obj)) {\n          break;\n        } else if (isName(obj)) {\n          if (obj.name === \"WMode\") {\n            parseWMode(cMap, lexer);\n          } else if (obj.name === \"CMapName\") {\n            parseCMapName(cMap, lexer);\n          }\n          previous = obj;\n        } else if (isCmd(obj)) {\n          switch (obj.cmd) {\n            case \"endcmap\":\n              break objLoop;\n            case \"usecmap\":\n              if (isName(previous)) {\n                embeddedUseCMap = previous.name;\n              }\n              break;\n            case \"begincodespacerange\":\n              parseCodespaceRange(cMap, lexer);\n              break;\n            case \"beginbfchar\":\n              parseBfChar(cMap, lexer);\n              break;\n            case \"begincidchar\":\n              parseCidChar(cMap, lexer);\n              break;\n            case \"beginbfrange\":\n              parseBfRange(cMap, lexer);\n              break;\n            case \"begincidrange\":\n              parseCidRange(cMap, lexer);\n              break;\n          }\n        }\n      } catch (ex) {\n        if (ex instanceof MissingDataException) {\n          throw ex;\n        }\n        warn(\"Invalid cMap data: \" + ex);\n        continue;\n      }\n    }\n\n    if (!useCMap && embeddedUseCMap) {\n      // Load the useCMap definition from the file only if there wasn't one\n      // specified.\n      useCMap = embeddedUseCMap;\n    }\n    if (useCMap) {\n      return extendCMap(cMap, fetchBuiltInCMap, useCMap);\n    }\n    return Promise.resolve(cMap);\n  }\n\n  function extendCMap(cMap, fetchBuiltInCMap, useCMap) {\n    return createBuiltInCMap(useCMap, fetchBuiltInCMap).then(function (\n      newCMap\n    ) {\n      cMap.useCMap = newCMap;\n      // If there aren't any code space ranges defined clone all the parent ones\n      // into this cMap.\n      if (cMap.numCodespaceRanges === 0) {\n        var useCodespaceRanges = cMap.useCMap.codespaceRanges;\n        for (var i = 0; i < useCodespaceRanges.length; i++) {\n          cMap.codespaceRanges[i] = useCodespaceRanges[i].slice();\n        }\n        cMap.numCodespaceRanges = cMap.useCMap.numCodespaceRanges;\n      }\n      // Merge the map into the current one, making sure not to override\n      // any previously defined entries.\n      cMap.useCMap.forEach(function (key, value) {\n        if (!cMap.contains(key)) {\n          cMap.mapOne(key, cMap.useCMap.lookup(key));\n        }\n      });\n\n      return cMap;\n    });\n  }\n\n  function createBuiltInCMap(name, fetchBuiltInCMap) {\n    if (name === \"Identity-H\") {\n      return Promise.resolve(new IdentityCMap(false, 2));\n    } else if (name === \"Identity-V\") {\n      return Promise.resolve(new IdentityCMap(true, 2));\n    }\n    if (!BUILT_IN_CMAPS.includes(name)) {\n      return Promise.reject(new Error(\"Unknown CMap name: \" + name));\n    }\n    if (!fetchBuiltInCMap) {\n      return Promise.reject(\n        new Error(\"Built-in CMap parameters are not provided.\")\n      );\n    }\n\n    return fetchBuiltInCMap(name).then(function (data) {\n      var cMapData = data.cMapData,\n        compressionType = data.compressionType;\n      var cMap = new CMap(true);\n\n      if (compressionType === CMapCompressionType.BINARY) {\n        return new BinaryCMapReader().process(cMapData, cMap, function (\n          useCMap\n        ) {\n          return extendCMap(cMap, fetchBuiltInCMap, useCMap);\n        });\n      }\n      if (compressionType === CMapCompressionType.NONE) {\n        var lexer = new Lexer(new Stream(cMapData));\n        return parseCMap(cMap, lexer, fetchBuiltInCMap, null);\n      }\n      return Promise.reject(\n        new Error(\n          \"TODO: Only BINARY/NONE CMap compression is currently supported.\"\n        )\n      );\n    });\n  }\n\n  return {\n    async create(params) {\n      var encoding = params.encoding;\n      var fetchBuiltInCMap = params.fetchBuiltInCMap;\n      var useCMap = params.useCMap;\n\n      if (isName(encoding)) {\n        return createBuiltInCMap(encoding.name, fetchBuiltInCMap);\n      } else if (isStream(encoding)) {\n        var cMap = new CMap();\n        var lexer = new Lexer(encoding);\n        return parseCMap(cMap, lexer, fetchBuiltInCMap, useCMap).then(function (\n          parsedCMap\n        ) {\n          if (parsedCMap.isIdentityCMap) {\n            return createBuiltInCMap(parsedCMap.name, fetchBuiltInCMap);\n          }\n          return parsedCMap;\n        });\n      }\n      throw new Error(\"Encoding required.\");\n    },\n  };\n})();\n\nexport { CMap, IdentityCMap, CMapFactory };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  bytesToString,\n  FONT_IDENTITY_MATRIX,\n  FontType,\n  FormatError,\n  info,\n  isNum,\n  shadow,\n  string32,\n  unreachable,\n  warn,\n} from \"../shared/util.js\";\nimport {\n  CFF,\n  CFFCharset,\n  CFFCompiler,\n  CFFHeader,\n  CFFIndex,\n  CFFParser,\n  CFFPrivateDict,\n  CFFStandardStrings,\n  CFFStrings,\n  CFFTopDict,\n} from \"./cff_parser.js\";\nimport { getDingbatsGlyphsUnicode, getGlyphsUnicode } from \"./glyphlist.js\";\nimport {\n  getEncoding,\n  MacRomanEncoding,\n  StandardEncoding,\n  SymbolSetEncoding,\n  ZapfDingbatsEncoding,\n} from \"./encodings.js\";\nimport {\n  getGlyphMapForStandardFonts,\n  getNonStdFontMap,\n  getStdFontMap,\n  getSupplementalGlyphMapForArialBlack,\n  getSupplementalGlyphMapForCalibri,\n} from \"./standard_fonts.js\";\nimport {\n  getUnicodeForGlyph,\n  getUnicodeRangeFor,\n  mapSpecialUnicodeValues,\n} from \"./unicode.js\";\nimport {\n  isWhiteSpace,\n  MissingDataException,\n  readUint32,\n} from \"./core_utils.js\";\nimport { FontRendererFactory } from \"./font_renderer.js\";\nimport { IdentityCMap } from \"./cmap.js\";\nimport { Stream } from \"./stream.js\";\nimport { Type1Parser } from \"./type1_parser.js\";\n\n// Unicode Private Use Areas:\nconst PRIVATE_USE_AREAS = [\n  [0xe000, 0xf8ff], // BMP (0)\n  [0x100000, 0x10fffd], // PUP (16)\n];\n\n// PDF Glyph Space Units are one Thousandth of a TextSpace Unit\n// except for Type 3 fonts\nvar PDF_GLYPH_SPACE_UNITS = 1000;\n\n// Accented characters have issues on Windows and Linux. When this flag is\n// enabled glyphs that use seac and seac style endchar operators are truncated\n// and we instead just store the glyph id's of the base glyph and its accent to\n// be drawn individually.\n// Linux (freetype) requires that when a seac style endchar is used\n// that the charset must be a predefined one, however we build a\n// custom one. Windows just refuses to draw glyphs with seac operators.\nvar SEAC_ANALYSIS_ENABLED = true;\n\nconst EXPORT_DATA_PROPERTIES = [\n  \"ascent\",\n  \"bbox\",\n  \"black\",\n  \"bold\",\n  \"charProcOperatorList\",\n  \"composite\",\n  \"data\",\n  \"defaultVMetrics\",\n  \"defaultWidth\",\n  \"descent\",\n  \"fallbackName\",\n  \"fontMatrix\",\n  \"fontType\",\n  \"isMonospace\",\n  \"isSerifFont\",\n  \"isType3Font\",\n  \"italic\",\n  \"loadedName\",\n  \"mimetype\",\n  \"missingFile\",\n  \"name\",\n  \"remeasure\",\n  \"subtype\",\n  \"type\",\n  \"vertical\",\n];\n\nconst EXPORT_DATA_EXTRA_PROPERTIES = [\n  \"cMap\",\n  \"defaultEncoding\",\n  \"differences\",\n  \"isSymbolicFont\",\n  \"seacMap\",\n  \"toFontChar\",\n  \"toUnicode\",\n  \"vmetrics\",\n  \"widths\",\n];\n\nvar FontFlags = {\n  FixedPitch: 1,\n  Serif: 2,\n  Symbolic: 4,\n  Script: 8,\n  Nonsymbolic: 32,\n  Italic: 64,\n  AllCap: 65536,\n  SmallCap: 131072,\n  ForceBold: 262144,\n};\n\n// prettier-ignore\nvar MacStandardGlyphOrdering = [\n  \".notdef\", \".null\", \"nonmarkingreturn\", \"space\", \"exclam\", \"quotedbl\",\n  \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quotesingle\", \"parenleft\",\n  \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\",\n  \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\n  \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\",\n  \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\",\n  \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\",\n  \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"grave\", \"a\", \"b\",\n  \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\",\n  \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\",\n  \"asciitilde\", \"Adieresis\", \"Aring\", \"Ccedilla\", \"Eacute\", \"Ntilde\",\n  \"Odieresis\", \"Udieresis\", \"aacute\", \"agrave\", \"acircumflex\", \"adieresis\",\n  \"atilde\", \"aring\", \"ccedilla\", \"eacute\", \"egrave\", \"ecircumflex\", \"edieresis\",\n  \"iacute\", \"igrave\", \"icircumflex\", \"idieresis\", \"ntilde\", \"oacute\", \"ograve\",\n  \"ocircumflex\", \"odieresis\", \"otilde\", \"uacute\", \"ugrave\", \"ucircumflex\",\n  \"udieresis\", \"dagger\", \"degree\", \"cent\", \"sterling\", \"section\", \"bullet\",\n  \"paragraph\", \"germandbls\", \"registered\", \"copyright\", \"trademark\", \"acute\",\n  \"dieresis\", \"notequal\", \"AE\", \"Oslash\", \"infinity\", \"plusminus\", \"lessequal\",\n  \"greaterequal\", \"yen\", \"mu\", \"partialdiff\", \"summation\", \"product\", \"pi\",\n  \"integral\", \"ordfeminine\", \"ordmasculine\", \"Omega\", \"ae\", \"oslash\",\n  \"questiondown\", \"exclamdown\", \"logicalnot\", \"radical\", \"florin\",\n  \"approxequal\", \"Delta\", \"guillemotleft\", \"guillemotright\", \"ellipsis\",\n  \"nonbreakingspace\", \"Agrave\", \"Atilde\", \"Otilde\", \"OE\", \"oe\", \"endash\",\n  \"emdash\", \"quotedblleft\", \"quotedblright\", \"quoteleft\", \"quoteright\",\n  \"divide\", \"lozenge\", \"ydieresis\", \"Ydieresis\", \"fraction\", \"currency\",\n  \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"daggerdbl\", \"periodcentered\",\n  \"quotesinglbase\", \"quotedblbase\", \"perthousand\", \"Acircumflex\",\n  \"Ecircumflex\", \"Aacute\", \"Edieresis\", \"Egrave\", \"Iacute\", \"Icircumflex\",\n  \"Idieresis\", \"Igrave\", \"Oacute\", \"Ocircumflex\", \"apple\", \"Ograve\", \"Uacute\",\n  \"Ucircumflex\", \"Ugrave\", \"dotlessi\", \"circumflex\", \"tilde\", \"macron\",\n  \"breve\", \"dotaccent\", \"ring\", \"cedilla\", \"hungarumlaut\", \"ogonek\", \"caron\",\n  \"Lslash\", \"lslash\", \"Scaron\", \"scaron\", \"Zcaron\", \"zcaron\", \"brokenbar\",\n  \"Eth\", \"eth\", \"Yacute\", \"yacute\", \"Thorn\", \"thorn\", \"minus\", \"multiply\",\n  \"onesuperior\", \"twosuperior\", \"threesuperior\", \"onehalf\", \"onequarter\",\n  \"threequarters\", \"franc\", \"Gbreve\", \"gbreve\", \"Idotaccent\", \"Scedilla\",\n  \"scedilla\", \"Cacute\", \"cacute\", \"Ccaron\", \"ccaron\", \"dcroat\"];\n\nfunction adjustWidths(properties) {\n  if (!properties.fontMatrix) {\n    return;\n  }\n  if (properties.fontMatrix[0] === FONT_IDENTITY_MATRIX[0]) {\n    return;\n  }\n  // adjusting width to fontMatrix scale\n  var scale = 0.001 / properties.fontMatrix[0];\n  var glyphsWidths = properties.widths;\n  for (var glyph in glyphsWidths) {\n    glyphsWidths[glyph] *= scale;\n  }\n  properties.defaultWidth *= scale;\n}\n\nfunction adjustToUnicode(properties, builtInEncoding) {\n  if (properties.hasIncludedToUnicodeMap) {\n    return; // The font dictionary has a `ToUnicode` entry.\n  }\n  if (properties.hasEncoding) {\n    return; // The font dictionary has an `Encoding` entry.\n  }\n  if (builtInEncoding === properties.defaultEncoding) {\n    return; // No point in trying to adjust `toUnicode` if the encodings match.\n  }\n  if (properties.toUnicode instanceof IdentityToUnicodeMap) {\n    return;\n  }\n  var toUnicode = [],\n    glyphsUnicodeMap = getGlyphsUnicode();\n  for (var charCode in builtInEncoding) {\n    var glyphName = builtInEncoding[charCode];\n    var unicode = getUnicodeForGlyph(glyphName, glyphsUnicodeMap);\n    if (unicode !== -1) {\n      toUnicode[charCode] = String.fromCharCode(unicode);\n    }\n  }\n  properties.toUnicode.amend(toUnicode);\n}\n\nfunction getFontType(type, subtype) {\n  switch (type) {\n    case \"Type1\":\n      return subtype === \"Type1C\" ? FontType.TYPE1C : FontType.TYPE1;\n    case \"CIDFontType0\":\n      return subtype === \"CIDFontType0C\"\n        ? FontType.CIDFONTTYPE0C\n        : FontType.CIDFONTTYPE0;\n    case \"OpenType\":\n      return FontType.OPENTYPE;\n    case \"TrueType\":\n      return FontType.TRUETYPE;\n    case \"CIDFontType2\":\n      return FontType.CIDFONTTYPE2;\n    case \"MMType1\":\n      return FontType.MMTYPE1;\n    case \"Type0\":\n      return FontType.TYPE0;\n    default:\n      return FontType.UNKNOWN;\n  }\n}\n\n// Some bad PDF generators, e.g. Scribus PDF, include glyph names\n// in a 'uniXXXX' format -- attempting to recover proper ones.\nfunction recoverGlyphName(name, glyphsUnicodeMap) {\n  if (glyphsUnicodeMap[name] !== undefined) {\n    return name;\n  }\n  // The glyph name is non-standard, trying to recover.\n  var unicode = getUnicodeForGlyph(name, glyphsUnicodeMap);\n  if (unicode !== -1) {\n    for (var key in glyphsUnicodeMap) {\n      if (glyphsUnicodeMap[key] === unicode) {\n        return key;\n      }\n    }\n  }\n  info(\"Unable to recover a standard glyph name for: \" + name);\n  return name;\n}\n\nvar Glyph = (function GlyphClosure() {\n  // eslint-disable-next-line no-shadow\n  function Glyph(\n    fontChar,\n    unicode,\n    accent,\n    width,\n    vmetric,\n    operatorListId,\n    isSpace,\n    isInFont\n  ) {\n    this.fontChar = fontChar;\n    this.unicode = unicode;\n    this.accent = accent;\n    this.width = width;\n    this.vmetric = vmetric;\n    this.operatorListId = operatorListId;\n    this.isSpace = isSpace;\n    this.isInFont = isInFont;\n  }\n\n  Glyph.prototype.matchesForCache = function (\n    fontChar,\n    unicode,\n    accent,\n    width,\n    vmetric,\n    operatorListId,\n    isSpace,\n    isInFont\n  ) {\n    return (\n      this.fontChar === fontChar &&\n      this.unicode === unicode &&\n      this.accent === accent &&\n      this.width === width &&\n      this.vmetric === vmetric &&\n      this.operatorListId === operatorListId &&\n      this.isSpace === isSpace &&\n      this.isInFont === isInFont\n    );\n  };\n\n  return Glyph;\n})();\n\nvar ToUnicodeMap = (function ToUnicodeMapClosure() {\n  // eslint-disable-next-line no-shadow\n  function ToUnicodeMap(cmap = []) {\n    // The elements of this._map can be integers or strings, depending on how\n    // `cmap` was created.\n    this._map = cmap;\n  }\n\n  ToUnicodeMap.prototype = {\n    get length() {\n      return this._map.length;\n    },\n\n    forEach(callback) {\n      for (var charCode in this._map) {\n        callback(charCode, this._map[charCode].charCodeAt(0));\n      }\n    },\n\n    has(i) {\n      return this._map[i] !== undefined;\n    },\n\n    get(i) {\n      return this._map[i];\n    },\n\n    charCodeOf(value) {\n      // `Array.prototype.indexOf` is *extremely* inefficient for arrays which\n      // are both very sparse and very large (see issue8372.pdf).\n      const map = this._map;\n      if (map.length <= 0x10000) {\n        return map.indexOf(value);\n      }\n      for (const charCode in map) {\n        if (map[charCode] === value) {\n          return charCode | 0;\n        }\n      }\n      return -1;\n    },\n\n    amend(map) {\n      for (var charCode in map) {\n        this._map[charCode] = map[charCode];\n      }\n    },\n  };\n\n  return ToUnicodeMap;\n})();\n\nvar IdentityToUnicodeMap = (function IdentityToUnicodeMapClosure() {\n  // eslint-disable-next-line no-shadow\n  function IdentityToUnicodeMap(firstChar, lastChar) {\n    this.firstChar = firstChar;\n    this.lastChar = lastChar;\n  }\n\n  IdentityToUnicodeMap.prototype = {\n    get length() {\n      return this.lastChar + 1 - this.firstChar;\n    },\n\n    forEach(callback) {\n      for (var i = this.firstChar, ii = this.lastChar; i <= ii; i++) {\n        callback(i, i);\n      }\n    },\n\n    has(i) {\n      return this.firstChar <= i && i <= this.lastChar;\n    },\n\n    get(i) {\n      if (this.firstChar <= i && i <= this.lastChar) {\n        return String.fromCharCode(i);\n      }\n      return undefined;\n    },\n\n    charCodeOf(v) {\n      return Number.isInteger(v) && v >= this.firstChar && v <= this.lastChar\n        ? v\n        : -1;\n    },\n\n    amend(map) {\n      unreachable(\"Should not call amend()\");\n    },\n  };\n\n  return IdentityToUnicodeMap;\n})();\n\nvar OpenTypeFileBuilder = (function OpenTypeFileBuilderClosure() {\n  function writeInt16(dest, offset, num) {\n    dest[offset] = (num >> 8) & 0xff;\n    dest[offset + 1] = num & 0xff;\n  }\n\n  function writeInt32(dest, offset, num) {\n    dest[offset] = (num >> 24) & 0xff;\n    dest[offset + 1] = (num >> 16) & 0xff;\n    dest[offset + 2] = (num >> 8) & 0xff;\n    dest[offset + 3] = num & 0xff;\n  }\n\n  function writeData(dest, offset, data) {\n    var i, ii;\n    if (data instanceof Uint8Array) {\n      dest.set(data, offset);\n    } else if (typeof data === \"string\") {\n      for (i = 0, ii = data.length; i < ii; i++) {\n        dest[offset++] = data.charCodeAt(i) & 0xff;\n      }\n    } else {\n      // treating everything else as array\n      for (i = 0, ii = data.length; i < ii; i++) {\n        dest[offset++] = data[i] & 0xff;\n      }\n    }\n  }\n\n  // eslint-disable-next-line no-shadow\n  function OpenTypeFileBuilder(sfnt) {\n    this.sfnt = sfnt;\n    this.tables = Object.create(null);\n  }\n\n  OpenTypeFileBuilder.getSearchParams = function OpenTypeFileBuilder_getSearchParams(\n    entriesCount,\n    entrySize\n  ) {\n    var maxPower2 = 1,\n      log2 = 0;\n    while ((maxPower2 ^ entriesCount) > maxPower2) {\n      maxPower2 <<= 1;\n      log2++;\n    }\n    var searchRange = maxPower2 * entrySize;\n    return {\n      range: searchRange,\n      entry: log2,\n      rangeShift: entrySize * entriesCount - searchRange,\n    };\n  };\n\n  var OTF_HEADER_SIZE = 12;\n  var OTF_TABLE_ENTRY_SIZE = 16;\n\n  OpenTypeFileBuilder.prototype = {\n    toArray: function OpenTypeFileBuilder_toArray() {\n      var sfnt = this.sfnt;\n\n      // Tables needs to be written by ascendant alphabetic order\n      var tables = this.tables;\n      var tablesNames = Object.keys(tables);\n      tablesNames.sort();\n      var numTables = tablesNames.length;\n\n      var i, j, jj, table, tableName;\n      // layout the tables data\n      var offset = OTF_HEADER_SIZE + numTables * OTF_TABLE_ENTRY_SIZE;\n      var tableOffsets = [offset];\n      for (i = 0; i < numTables; i++) {\n        table = tables[tablesNames[i]];\n        var paddedLength = ((table.length + 3) & ~3) >>> 0;\n        offset += paddedLength;\n        tableOffsets.push(offset);\n      }\n\n      var file = new Uint8Array(offset);\n      // write the table data first (mostly for checksum)\n      for (i = 0; i < numTables; i++) {\n        table = tables[tablesNames[i]];\n        writeData(file, tableOffsets[i], table);\n      }\n\n      // sfnt version (4 bytes)\n      if (sfnt === \"true\") {\n        // Windows hates the Mac TrueType sfnt version number\n        sfnt = string32(0x00010000);\n      }\n      file[0] = sfnt.charCodeAt(0) & 0xff;\n      file[1] = sfnt.charCodeAt(1) & 0xff;\n      file[2] = sfnt.charCodeAt(2) & 0xff;\n      file[3] = sfnt.charCodeAt(3) & 0xff;\n\n      // numTables (2 bytes)\n      writeInt16(file, 4, numTables);\n\n      var searchParams = OpenTypeFileBuilder.getSearchParams(numTables, 16);\n\n      // searchRange (2 bytes)\n      writeInt16(file, 6, searchParams.range);\n      // entrySelector (2 bytes)\n      writeInt16(file, 8, searchParams.entry);\n      // rangeShift (2 bytes)\n      writeInt16(file, 10, searchParams.rangeShift);\n\n      offset = OTF_HEADER_SIZE;\n      // writing table entries\n      for (i = 0; i < numTables; i++) {\n        tableName = tablesNames[i];\n        file[offset] = tableName.charCodeAt(0) & 0xff;\n        file[offset + 1] = tableName.charCodeAt(1) & 0xff;\n        file[offset + 2] = tableName.charCodeAt(2) & 0xff;\n        file[offset + 3] = tableName.charCodeAt(3) & 0xff;\n\n        // checksum\n        var checksum = 0;\n        for (j = tableOffsets[i], jj = tableOffsets[i + 1]; j < jj; j += 4) {\n          var quad = readUint32(file, j);\n          checksum = (checksum + quad) >>> 0;\n        }\n        writeInt32(file, offset + 4, checksum);\n\n        // offset\n        writeInt32(file, offset + 8, tableOffsets[i]);\n        // length\n        writeInt32(file, offset + 12, tables[tableName].length);\n\n        offset += OTF_TABLE_ENTRY_SIZE;\n      }\n      return file;\n    },\n\n    addTable: function OpenTypeFileBuilder_addTable(tag, data) {\n      if (tag in this.tables) {\n        throw new Error(\"Table \" + tag + \" already exists\");\n      }\n      this.tables[tag] = data;\n    },\n  };\n\n  return OpenTypeFileBuilder;\n})();\n\n/**\n * 'Font' is the class the outside world should use, it encapsulate all the font\n * decoding logics whatever type it is (assuming the font type is supported).\n *\n * For example to read a Type1 font and to attach it to the document:\n *   var type1Font = new Font(\"MyFontName\", binaryFile, propertiesObject);\n *   type1Font.bind();\n */\nvar Font = (function FontClosure() {\n  // eslint-disable-next-line no-shadow\n  function Font(name, file, properties) {\n    var charCode;\n\n    this.name = name;\n    this.loadedName = properties.loadedName;\n    this.isType3Font = properties.isType3Font;\n    this.missingFile = false;\n\n    this.glyphCache = Object.create(null);\n\n    this.isSerifFont = !!(properties.flags & FontFlags.Serif);\n    this.isSymbolicFont = !!(properties.flags & FontFlags.Symbolic);\n    this.isMonospace = !!(properties.flags & FontFlags.FixedPitch);\n\n    var type = properties.type;\n    var subtype = properties.subtype;\n    this.type = type;\n    this.subtype = subtype;\n\n    let fallbackName = \"sans-serif\";\n    if (this.isMonospace) {\n      fallbackName = \"monospace\";\n    } else if (this.isSerifFont) {\n      fallbackName = \"serif\";\n    }\n    this.fallbackName = fallbackName;\n\n    this.differences = properties.differences;\n    this.widths = properties.widths;\n    this.defaultWidth = properties.defaultWidth;\n    this.composite = properties.composite;\n    this.cMap = properties.cMap;\n    this.ascent = properties.ascent / PDF_GLYPH_SPACE_UNITS;\n    this.descent = properties.descent / PDF_GLYPH_SPACE_UNITS;\n    this.fontMatrix = properties.fontMatrix;\n    this.bbox = properties.bbox;\n    this.defaultEncoding = properties.defaultEncoding;\n\n    this.toUnicode = properties.toUnicode;\n    this.fallbackToUnicode = properties.fallbackToUnicode || new ToUnicodeMap();\n\n    this.toFontChar = [];\n\n    if (properties.type === \"Type3\") {\n      for (charCode = 0; charCode < 256; charCode++) {\n        this.toFontChar[charCode] =\n          this.differences[charCode] || properties.defaultEncoding[charCode];\n      }\n      this.fontType = FontType.TYPE3;\n      return;\n    }\n\n    this.cidEncoding = properties.cidEncoding;\n    this.vertical = !!properties.vertical;\n    if (this.vertical) {\n      this.vmetrics = properties.vmetrics;\n      this.defaultVMetrics = properties.defaultVMetrics;\n    }\n\n    if (!file || file.isEmpty) {\n      if (file) {\n        // Some bad PDF generators will include empty font files,\n        // attempting to recover by assuming that no file exists.\n        warn('Font file is empty in \"' + name + '\" (' + this.loadedName + \")\");\n      }\n      this.fallbackToSystemFont();\n      return;\n    }\n\n    // Parse the font file to determine the correct type/subtype, rather than\n    // relying on the (often incorrect) data in the font dictionary; (see e.g.\n    //  issue6782.pdf, issue7598.pdf, and issue9949.pdf).\n    [type, subtype] = getFontFileType(file, properties);\n\n    if (type !== this.type || subtype !== this.subtype) {\n      info(\n        \"Inconsistent font file Type/SubType, expected: \" +\n          `${this.type}/${this.subtype} but found: ${type}/${subtype}.`\n      );\n    }\n\n    try {\n      var data;\n      switch (type) {\n        case \"MMType1\":\n          info(\"MMType1 font (\" + name + \"), falling back to Type1.\");\n        /* falls through */\n        case \"Type1\":\n        case \"CIDFontType0\":\n          this.mimetype = \"font/opentype\";\n\n          var cff =\n            subtype === \"Type1C\" || subtype === \"CIDFontType0C\"\n              ? new CFFFont(file, properties)\n              : new Type1Font(name, file, properties);\n\n          adjustWidths(properties);\n\n          // Wrap the CFF data inside an OTF font file\n          data = this.convert(name, cff, properties);\n          break;\n\n        case \"OpenType\":\n        case \"TrueType\":\n        case \"CIDFontType2\":\n          this.mimetype = \"font/opentype\";\n\n          // Repair the TrueType file. It is can be damaged in the point of\n          // view of the sanitizer\n          data = this.checkAndRepair(name, file, properties);\n          if (this.isOpenType) {\n            adjustWidths(properties);\n\n            type = \"OpenType\";\n          }\n          break;\n\n        default:\n          throw new FormatError(`Font ${type} is not supported`);\n      }\n    } catch (e) {\n      warn(e);\n      this.fallbackToSystemFont();\n      return;\n    }\n\n    this.data = data;\n    this.fontType = getFontType(type, subtype);\n\n    // Transfer some properties again that could change during font conversion\n    this.fontMatrix = properties.fontMatrix;\n    this.widths = properties.widths;\n    this.defaultWidth = properties.defaultWidth;\n    this.toUnicode = properties.toUnicode;\n    this.seacMap = properties.seacMap;\n  }\n\n  Font.getFontID = (function () {\n    var ID = 1;\n    return function Font_getFontID() {\n      return String(ID++);\n    };\n  })();\n\n  function int16(b0, b1) {\n    return (b0 << 8) + b1;\n  }\n\n  function writeSignedInt16(bytes, index, value) {\n    bytes[index + 1] = value;\n    bytes[index] = value >>> 8;\n  }\n\n  function signedInt16(b0, b1) {\n    var value = (b0 << 8) + b1;\n    return value & (1 << 15) ? value - 0x10000 : value;\n  }\n\n  function int32(b0, b1, b2, b3) {\n    return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\n  }\n\n  function string16(value) {\n    return String.fromCharCode((value >> 8) & 0xff, value & 0xff);\n  }\n\n  function safeString16(value) {\n    // clamp value to the 16-bit int range\n    if (value > 0x7fff) {\n      value = 0x7fff;\n    } else if (value < -0x8000) {\n      value = -0x8000;\n    }\n    return String.fromCharCode((value >> 8) & 0xff, value & 0xff);\n  }\n\n  function isTrueTypeFile(file) {\n    var header = file.peekBytes(4);\n    return (\n      readUint32(header, 0) === 0x00010000 || bytesToString(header) === \"true\"\n    );\n  }\n\n  function isTrueTypeCollectionFile(file) {\n    const header = file.peekBytes(4);\n    return bytesToString(header) === \"ttcf\";\n  }\n\n  function isOpenTypeFile(file) {\n    var header = file.peekBytes(4);\n    return bytesToString(header) === \"OTTO\";\n  }\n\n  function isType1File(file) {\n    var header = file.peekBytes(2);\n    // All Type1 font programs must begin with the comment '%!' (0x25 + 0x21).\n    if (header[0] === 0x25 && header[1] === 0x21) {\n      return true;\n    }\n    // ... obviously some fonts violate that part of the specification,\n    // please refer to the comment in |Type1Font| below (pfb file header).\n    if (header[0] === 0x80 && header[1] === 0x01) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Compared to other font formats, the header in CFF files is not constant\n   * but contains version numbers. To reduce the possibility of misclassifying\n   * font files as CFF, it's recommended to check for other font formats first.\n   */\n  function isCFFFile(file) {\n    const header = file.peekBytes(4);\n    if (\n      /* major version, [1, 255] */ header[0] >= 1 &&\n      /* minor version, [0, 255]; header[1] */\n      /* header size, [0, 255]; header[2] */\n      /* offset(0) size, [1, 4] */ header[3] >= 1 &&\n      header[3] <= 4\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  function getFontFileType(file, { type, subtype, composite }) {\n    let fileType, fileSubtype;\n\n    if (isTrueTypeFile(file) || isTrueTypeCollectionFile(file)) {\n      if (composite) {\n        fileType = \"CIDFontType2\";\n      } else {\n        fileType = \"TrueType\";\n      }\n    } else if (isOpenTypeFile(file)) {\n      if (composite) {\n        fileType = \"CIDFontType2\";\n      } else {\n        fileType = \"OpenType\";\n      }\n    } else if (isType1File(file)) {\n      if (composite) {\n        fileType = \"CIDFontType0\";\n      } else {\n        fileType = type === \"MMType1\" ? \"MMType1\" : \"Type1\";\n      }\n    } else if (isCFFFile(file)) {\n      if (composite) {\n        fileType = \"CIDFontType0\";\n        fileSubtype = \"CIDFontType0C\";\n      } else {\n        fileType = type === \"MMType1\" ? \"MMType1\" : \"Type1\";\n        fileSubtype = \"Type1C\";\n      }\n    } else {\n      warn(\"getFontFileType: Unable to detect correct font file Type/Subtype.\");\n      fileType = type;\n      fileSubtype = subtype;\n    }\n\n    return [fileType, fileSubtype];\n  }\n\n  function buildToFontChar(encoding, glyphsUnicodeMap, differences) {\n    var toFontChar = [],\n      unicode;\n    for (var i = 0, ii = encoding.length; i < ii; i++) {\n      unicode = getUnicodeForGlyph(encoding[i], glyphsUnicodeMap);\n      if (unicode !== -1) {\n        toFontChar[i] = unicode;\n      }\n    }\n    for (var charCode in differences) {\n      unicode = getUnicodeForGlyph(differences[charCode], glyphsUnicodeMap);\n      if (unicode !== -1) {\n        toFontChar[+charCode] = unicode;\n      }\n    }\n    return toFontChar;\n  }\n\n  /**\n   * Rebuilds the char code to glyph ID map by moving all char codes to the\n   * private use area. This is done to avoid issues with various problematic\n   * unicode areas where either a glyph won't be drawn or is deformed by a\n   * shaper.\n   * @returns {Object} Two properties:\n   * 'toFontChar' - maps original char codes(the value that will be read\n   * from commands such as show text) to the char codes that will be used in the\n   * font that we build\n   * 'charCodeToGlyphId' - maps the new font char codes to glyph ids\n   */\n  function adjustMapping(charCodeToGlyphId, hasGlyph, newGlyphZeroId) {\n    var newMap = Object.create(null);\n    var toFontChar = [];\n    var privateUseAreaIndex = 0;\n    var nextAvailableFontCharCode = PRIVATE_USE_AREAS[privateUseAreaIndex][0];\n    var privateUseOffetEnd = PRIVATE_USE_AREAS[privateUseAreaIndex][1];\n    for (var originalCharCode in charCodeToGlyphId) {\n      originalCharCode |= 0;\n      var glyphId = charCodeToGlyphId[originalCharCode];\n      // For missing glyphs don't create the mappings so the glyph isn't\n      // drawn.\n      if (!hasGlyph(glyphId)) {\n        continue;\n      }\n      if (nextAvailableFontCharCode > privateUseOffetEnd) {\n        privateUseAreaIndex++;\n        if (privateUseAreaIndex >= PRIVATE_USE_AREAS.length) {\n          warn(\"Ran out of space in font private use area.\");\n          break;\n        }\n        nextAvailableFontCharCode = PRIVATE_USE_AREAS[privateUseAreaIndex][0];\n        privateUseOffetEnd = PRIVATE_USE_AREAS[privateUseAreaIndex][1];\n      }\n      var fontCharCode = nextAvailableFontCharCode++;\n      if (glyphId === 0) {\n        glyphId = newGlyphZeroId;\n      }\n\n      newMap[fontCharCode] = glyphId;\n      toFontChar[originalCharCode] = fontCharCode;\n    }\n    return {\n      toFontChar,\n      charCodeToGlyphId: newMap,\n      nextAvailableFontCharCode,\n    };\n  }\n\n  function getRanges(glyphs, numGlyphs) {\n    // Array.sort() sorts by characters, not numerically, so convert to an\n    // array of characters.\n    var codes = [];\n    for (var charCode in glyphs) {\n      // Remove an invalid glyph ID mappings to make OTS happy.\n      if (glyphs[charCode] >= numGlyphs) {\n        continue;\n      }\n      codes.push({ fontCharCode: charCode | 0, glyphId: glyphs[charCode] });\n    }\n    // Some fonts have zero glyphs and are used only for text selection, but\n    // there needs to be at least one to build a valid cmap table.\n    if (codes.length === 0) {\n      codes.push({ fontCharCode: 0, glyphId: 0 });\n    }\n    codes.sort(function fontGetRangesSort(a, b) {\n      return a.fontCharCode - b.fontCharCode;\n    });\n\n    // Split the sorted codes into ranges.\n    var ranges = [];\n    var length = codes.length;\n    for (var n = 0; n < length; ) {\n      var start = codes[n].fontCharCode;\n      var codeIndices = [codes[n].glyphId];\n      ++n;\n      var end = start;\n      while (n < length && end + 1 === codes[n].fontCharCode) {\n        codeIndices.push(codes[n].glyphId);\n        ++end;\n        ++n;\n        if (end === 0xffff) {\n          break;\n        }\n      }\n      ranges.push([start, end, codeIndices]);\n    }\n\n    return ranges;\n  }\n\n  function createCmapTable(glyphs, numGlyphs) {\n    var ranges = getRanges(glyphs, numGlyphs);\n    var numTables = ranges[ranges.length - 1][1] > 0xffff ? 2 : 1;\n    var cmap =\n      \"\\x00\\x00\" + // version\n      string16(numTables) + // numTables\n      \"\\x00\\x03\" + // platformID\n      \"\\x00\\x01\" + // encodingID\n      string32(4 + numTables * 8); // start of the table record\n\n    var i, ii, j, jj;\n    for (i = ranges.length - 1; i >= 0; --i) {\n      if (ranges[i][0] <= 0xffff) {\n        break;\n      }\n    }\n    var bmpLength = i + 1;\n\n    if (ranges[i][0] < 0xffff && ranges[i][1] === 0xffff) {\n      ranges[i][1] = 0xfffe;\n    }\n    var trailingRangesCount = ranges[i][1] < 0xffff ? 1 : 0;\n    var segCount = bmpLength + trailingRangesCount;\n    var searchParams = OpenTypeFileBuilder.getSearchParams(segCount, 2);\n\n    // Fill up the 4 parallel arrays describing the segments.\n    var startCount = \"\";\n    var endCount = \"\";\n    var idDeltas = \"\";\n    var idRangeOffsets = \"\";\n    var glyphsIds = \"\";\n    var bias = 0;\n\n    var range, start, end, codes;\n    for (i = 0, ii = bmpLength; i < ii; i++) {\n      range = ranges[i];\n      start = range[0];\n      end = range[1];\n      startCount += string16(start);\n      endCount += string16(end);\n      codes = range[2];\n      var contiguous = true;\n      for (j = 1, jj = codes.length; j < jj; ++j) {\n        if (codes[j] !== codes[j - 1] + 1) {\n          contiguous = false;\n          break;\n        }\n      }\n      if (!contiguous) {\n        var offset = (segCount - i) * 2 + bias * 2;\n        bias += end - start + 1;\n\n        idDeltas += string16(0);\n        idRangeOffsets += string16(offset);\n\n        for (j = 0, jj = codes.length; j < jj; ++j) {\n          glyphsIds += string16(codes[j]);\n        }\n      } else {\n        var startCode = codes[0];\n\n        idDeltas += string16((startCode - start) & 0xffff);\n        idRangeOffsets += string16(0);\n      }\n    }\n\n    if (trailingRangesCount > 0) {\n      endCount += \"\\xFF\\xFF\";\n      startCount += \"\\xFF\\xFF\";\n      idDeltas += \"\\x00\\x01\";\n      idRangeOffsets += \"\\x00\\x00\";\n    }\n\n    var format314 =\n      \"\\x00\\x00\" + // language\n      string16(2 * segCount) +\n      string16(searchParams.range) +\n      string16(searchParams.entry) +\n      string16(searchParams.rangeShift) +\n      endCount +\n      \"\\x00\\x00\" +\n      startCount +\n      idDeltas +\n      idRangeOffsets +\n      glyphsIds;\n\n    var format31012 = \"\";\n    var header31012 = \"\";\n    if (numTables > 1) {\n      cmap +=\n        \"\\x00\\x03\" + // platformID\n        \"\\x00\\x0A\" + // encodingID\n        string32(4 + numTables * 8 + 4 + format314.length); // start of the table record\n      format31012 = \"\";\n      for (i = 0, ii = ranges.length; i < ii; i++) {\n        range = ranges[i];\n        start = range[0];\n        codes = range[2];\n        var code = codes[0];\n        for (j = 1, jj = codes.length; j < jj; ++j) {\n          if (codes[j] !== codes[j - 1] + 1) {\n            end = range[0] + j - 1;\n            format31012 +=\n              string32(start) + // startCharCode\n              string32(end) + // endCharCode\n              string32(code); // startGlyphID\n            start = end + 1;\n            code = codes[j];\n          }\n        }\n        format31012 +=\n          string32(start) + // startCharCode\n          string32(range[1]) + // endCharCode\n          string32(code); // startGlyphID\n      }\n      header31012 =\n        \"\\x00\\x0C\" + // format\n        \"\\x00\\x00\" + // reserved\n        string32(format31012.length + 16) + // length\n        \"\\x00\\x00\\x00\\x00\" + // language\n        string32(format31012.length / 12); // nGroups\n    }\n\n    return (\n      cmap +\n      \"\\x00\\x04\" + // format\n      string16(format314.length + 4) + // length\n      format314 +\n      header31012 +\n      format31012\n    );\n  }\n\n  function validateOS2Table(os2, file) {\n    file.pos = (file.start || 0) + os2.offset;\n    var version = file.getUint16();\n    // TODO verify all OS/2 tables fields, but currently we validate only those\n    // that give us issues\n    file.skip(60); // skipping type, misc sizes, panose, unicode ranges\n    var selection = file.getUint16();\n    if (version < 4 && selection & 0x0300) {\n      return false;\n    }\n    var firstChar = file.getUint16();\n    var lastChar = file.getUint16();\n    if (firstChar > lastChar) {\n      return false;\n    }\n    file.skip(6); // skipping sTypoAscender/Descender/LineGap\n    var usWinAscent = file.getUint16();\n    if (usWinAscent === 0) {\n      // makes font unreadable by windows\n      return false;\n    }\n\n    // OS/2 appears to be valid, resetting some fields\n    os2.data[8] = os2.data[9] = 0; // IE rejects fonts if fsType != 0\n    return true;\n  }\n\n  function createOS2Table(properties, charstrings, override) {\n    override = override || {\n      unitsPerEm: 0,\n      yMax: 0,\n      yMin: 0,\n      ascent: 0,\n      descent: 0,\n    };\n\n    var ulUnicodeRange1 = 0;\n    var ulUnicodeRange2 = 0;\n    var ulUnicodeRange3 = 0;\n    var ulUnicodeRange4 = 0;\n\n    var firstCharIndex = null;\n    var lastCharIndex = 0;\n\n    if (charstrings) {\n      for (var code in charstrings) {\n        code |= 0;\n        if (firstCharIndex > code || !firstCharIndex) {\n          firstCharIndex = code;\n        }\n        if (lastCharIndex < code) {\n          lastCharIndex = code;\n        }\n\n        var position = getUnicodeRangeFor(code);\n        if (position < 32) {\n          ulUnicodeRange1 |= 1 << position;\n        } else if (position < 64) {\n          ulUnicodeRange2 |= 1 << (position - 32);\n        } else if (position < 96) {\n          ulUnicodeRange3 |= 1 << (position - 64);\n        } else if (position < 123) {\n          ulUnicodeRange4 |= 1 << (position - 96);\n        } else {\n          throw new FormatError(\n            \"Unicode ranges Bits > 123 are reserved for internal usage\"\n          );\n        }\n      }\n      if (lastCharIndex > 0xffff) {\n        // OS2 only supports a 16 bit int. The spec says if supplementary\n        // characters are used the field should just be set to 0xFFFF.\n        lastCharIndex = 0xffff;\n      }\n    } else {\n      // TODO\n      firstCharIndex = 0;\n      lastCharIndex = 255;\n    }\n\n    var bbox = properties.bbox || [0, 0, 0, 0];\n    var unitsPerEm =\n      override.unitsPerEm ||\n      1 / (properties.fontMatrix || FONT_IDENTITY_MATRIX)[0];\n\n    // if the font units differ to the PDF glyph space units\n    // then scale up the values\n    var scale = properties.ascentScaled\n      ? 1.0\n      : unitsPerEm / PDF_GLYPH_SPACE_UNITS;\n\n    var typoAscent =\n      override.ascent || Math.round(scale * (properties.ascent || bbox[3]));\n    var typoDescent =\n      override.descent || Math.round(scale * (properties.descent || bbox[1]));\n    if (typoDescent > 0 && properties.descent > 0 && bbox[1] < 0) {\n      typoDescent = -typoDescent; // fixing incorrect descent\n    }\n    var winAscent = override.yMax || typoAscent;\n    var winDescent = -override.yMin || -typoDescent;\n\n    return (\n      \"\\x00\\x03\" + // version\n      \"\\x02\\x24\" + // xAvgCharWidth\n      \"\\x01\\xF4\" + // usWeightClass\n      \"\\x00\\x05\" + // usWidthClass\n      \"\\x00\\x00\" + // fstype (0 to let the font loads via font-face on IE)\n      \"\\x02\\x8A\" + // ySubscriptXSize\n      \"\\x02\\xBB\" + // ySubscriptYSize\n      \"\\x00\\x00\" + // ySubscriptXOffset\n      \"\\x00\\x8C\" + // ySubscriptYOffset\n      \"\\x02\\x8A\" + // ySuperScriptXSize\n      \"\\x02\\xBB\" + // ySuperScriptYSize\n      \"\\x00\\x00\" + // ySuperScriptXOffset\n      \"\\x01\\xDF\" + // ySuperScriptYOffset\n      \"\\x00\\x31\" + // yStrikeOutSize\n      \"\\x01\\x02\" + // yStrikeOutPosition\n      \"\\x00\\x00\" + // sFamilyClass\n      \"\\x00\\x00\\x06\" +\n      String.fromCharCode(properties.fixedPitch ? 0x09 : 0x00) +\n      \"\\x00\\x00\\x00\\x00\\x00\\x00\" + // Panose\n      string32(ulUnicodeRange1) + // ulUnicodeRange1 (Bits 0-31)\n      string32(ulUnicodeRange2) + // ulUnicodeRange2 (Bits 32-63)\n      string32(ulUnicodeRange3) + // ulUnicodeRange3 (Bits 64-95)\n      string32(ulUnicodeRange4) + // ulUnicodeRange4 (Bits 96-127)\n      \"\\x2A\\x32\\x31\\x2A\" + // achVendID\n      string16(properties.italicAngle ? 1 : 0) + // fsSelection\n      string16(firstCharIndex || properties.firstChar) + // usFirstCharIndex\n      string16(lastCharIndex || properties.lastChar) + // usLastCharIndex\n      string16(typoAscent) + // sTypoAscender\n      string16(typoDescent) + // sTypoDescender\n      \"\\x00\\x64\" + // sTypoLineGap (7%-10% of the unitsPerEM value)\n      string16(winAscent) + // usWinAscent\n      string16(winDescent) + // usWinDescent\n      \"\\x00\\x00\\x00\\x00\" + // ulCodePageRange1 (Bits 0-31)\n      \"\\x00\\x00\\x00\\x00\" + // ulCodePageRange2 (Bits 32-63)\n      string16(properties.xHeight) + // sxHeight\n      string16(properties.capHeight) + // sCapHeight\n      string16(0) + // usDefaultChar\n      string16(firstCharIndex || properties.firstChar) + // usBreakChar\n      \"\\x00\\x03\"\n    ); // usMaxContext\n  }\n\n  function createPostTable(properties) {\n    var angle = Math.floor(properties.italicAngle * 2 ** 16);\n    return (\n      \"\\x00\\x03\\x00\\x00\" + // Version number\n      string32(angle) + // italicAngle\n      \"\\x00\\x00\" + // underlinePosition\n      \"\\x00\\x00\" + // underlineThickness\n      string32(properties.fixedPitch) + // isFixedPitch\n      \"\\x00\\x00\\x00\\x00\" + // minMemType42\n      \"\\x00\\x00\\x00\\x00\" + // maxMemType42\n      \"\\x00\\x00\\x00\\x00\" + // minMemType1\n      \"\\x00\\x00\\x00\\x00\"\n    ); // maxMemType1\n  }\n\n  function createNameTable(name, proto) {\n    if (!proto) {\n      proto = [[], []]; // no strings and unicode strings\n    }\n\n    var strings = [\n      proto[0][0] || \"Original licence\", // 0.Copyright\n      proto[0][1] || name, // 1.Font family\n      proto[0][2] || \"Unknown\", // 2.Font subfamily (font weight)\n      proto[0][3] || \"uniqueID\", // 3.Unique ID\n      proto[0][4] || name, // 4.Full font name\n      proto[0][5] || \"Version 0.11\", // 5.Version\n      proto[0][6] || \"\", // 6.Postscript name\n      proto[0][7] || \"Unknown\", // 7.Trademark\n      proto[0][8] || \"Unknown\", // 8.Manufacturer\n      proto[0][9] || \"Unknown\", // 9.Designer\n    ];\n\n    // Mac want 1-byte per character strings while Windows want\n    // 2-bytes per character, so duplicate the names table\n    var stringsUnicode = [];\n    var i, ii, j, jj, str;\n    for (i = 0, ii = strings.length; i < ii; i++) {\n      str = proto[1][i] || strings[i];\n\n      var strBufUnicode = [];\n      for (j = 0, jj = str.length; j < jj; j++) {\n        strBufUnicode.push(string16(str.charCodeAt(j)));\n      }\n      stringsUnicode.push(strBufUnicode.join(\"\"));\n    }\n\n    var names = [strings, stringsUnicode];\n    var platforms = [\"\\x00\\x01\", \"\\x00\\x03\"];\n    var encodings = [\"\\x00\\x00\", \"\\x00\\x01\"];\n    var languages = [\"\\x00\\x00\", \"\\x04\\x09\"];\n\n    var namesRecordCount = strings.length * platforms.length;\n    var nameTable =\n      \"\\x00\\x00\" + // format\n      string16(namesRecordCount) + // Number of names Record\n      string16(namesRecordCount * 12 + 6); // Storage\n\n    // Build the name records field\n    var strOffset = 0;\n    for (i = 0, ii = platforms.length; i < ii; i++) {\n      var strs = names[i];\n      for (j = 0, jj = strs.length; j < jj; j++) {\n        str = strs[j];\n        var nameRecord =\n          platforms[i] + // platform ID\n          encodings[i] + // encoding ID\n          languages[i] + // language ID\n          string16(j) + // name ID\n          string16(str.length) +\n          string16(strOffset);\n        nameTable += nameRecord;\n        strOffset += str.length;\n      }\n    }\n\n    nameTable += strings.join(\"\") + stringsUnicode.join(\"\");\n    return nameTable;\n  }\n\n  Font.prototype = {\n    name: null,\n    font: null,\n    mimetype: null,\n    disableFontFace: false,\n\n    get renderer() {\n      var renderer = FontRendererFactory.create(this, SEAC_ANALYSIS_ENABLED);\n      return shadow(this, \"renderer\", renderer);\n    },\n\n    exportData(extraProperties = false) {\n      const exportDataProperties = extraProperties\n        ? [...EXPORT_DATA_PROPERTIES, ...EXPORT_DATA_EXTRA_PROPERTIES]\n        : EXPORT_DATA_PROPERTIES;\n\n      const data = Object.create(null);\n      let property, value;\n      for (property of exportDataProperties) {\n        value = this[property];\n        // Ignore properties that haven't been explicitly set.\n        if (value !== undefined) {\n          data[property] = value;\n        }\n      }\n      return data;\n    },\n\n    fallbackToSystemFont: function Font_fallbackToSystemFont() {\n      this.missingFile = true;\n      // The file data is not specified. Trying to fix the font name\n      // to be used with the canvas.font.\n      var name = this.name;\n      var type = this.type;\n      var subtype = this.subtype;\n      let fontName = name.replace(/[,_]/g, \"-\").replace(/\\s/g, \"\");\n      var stdFontMap = getStdFontMap(),\n        nonStdFontMap = getNonStdFontMap();\n      var isStandardFont =\n        !!stdFontMap[fontName] ||\n        !!(nonStdFontMap[fontName] && stdFontMap[nonStdFontMap[fontName]]);\n      fontName = stdFontMap[fontName] || nonStdFontMap[fontName] || fontName;\n\n      this.bold = fontName.search(/bold/gi) !== -1;\n      this.italic =\n        fontName.search(/oblique/gi) !== -1 ||\n        fontName.search(/italic/gi) !== -1;\n\n      // Use 'name' instead of 'fontName' here because the original\n      // name ArialBlack for example will be replaced by Helvetica.\n      this.black = name.search(/Black/g) !== -1;\n\n      // if at least one width is present, remeasure all chars when exists\n      this.remeasure = Object.keys(this.widths).length > 0;\n      if (\n        isStandardFont &&\n        type === \"CIDFontType2\" &&\n        this.cidEncoding.startsWith(\"Identity-\")\n      ) {\n        const GlyphMapForStandardFonts = getGlyphMapForStandardFonts();\n        // Standard fonts might be embedded as CID font without glyph mapping.\n        // Building one based on GlyphMapForStandardFonts.\n        const map = [];\n        for (const charCode in GlyphMapForStandardFonts) {\n          map[+charCode] = GlyphMapForStandardFonts[charCode];\n        }\n        if (/Arial-?Black/i.test(name)) {\n          var SupplementalGlyphMapForArialBlack = getSupplementalGlyphMapForArialBlack();\n          for (const charCode in SupplementalGlyphMapForArialBlack) {\n            map[+charCode] = SupplementalGlyphMapForArialBlack[charCode];\n          }\n        } else if (/Calibri/i.test(name)) {\n          const SupplementalGlyphMapForCalibri = getSupplementalGlyphMapForCalibri();\n          for (const charCode in SupplementalGlyphMapForCalibri) {\n            map[+charCode] = SupplementalGlyphMapForCalibri[charCode];\n          }\n        }\n\n        var isIdentityUnicode = this.toUnicode instanceof IdentityToUnicodeMap;\n        if (!isIdentityUnicode) {\n          this.toUnicode.forEach(function (charCode, unicodeCharCode) {\n            map[+charCode] = unicodeCharCode;\n          });\n        }\n        this.toFontChar = map;\n        this.toUnicode = new ToUnicodeMap(map);\n      } else if (/Symbol/i.test(fontName)) {\n        this.toFontChar = buildToFontChar(\n          SymbolSetEncoding,\n          getGlyphsUnicode(),\n          this.differences\n        );\n      } else if (/Dingbats/i.test(fontName)) {\n        if (/Wingdings/i.test(name)) {\n          warn(\"Non-embedded Wingdings font, falling back to ZapfDingbats.\");\n        }\n        this.toFontChar = buildToFontChar(\n          ZapfDingbatsEncoding,\n          getDingbatsGlyphsUnicode(),\n          this.differences\n        );\n      } else if (isStandardFont) {\n        this.toFontChar = buildToFontChar(\n          this.defaultEncoding,\n          getGlyphsUnicode(),\n          this.differences\n        );\n      } else {\n        const glyphsUnicodeMap = getGlyphsUnicode();\n        const map = [];\n        this.toUnicode.forEach((charCode, unicodeCharCode) => {\n          if (!this.composite) {\n            var glyphName =\n              this.differences[charCode] || this.defaultEncoding[charCode];\n            const unicode = getUnicodeForGlyph(glyphName, glyphsUnicodeMap);\n            if (unicode !== -1) {\n              unicodeCharCode = unicode;\n            }\n          }\n          map[+charCode] = unicodeCharCode;\n        });\n\n        // Attempt to improve the glyph mapping for (some) composite fonts that\n        // appear to lack meaningful ToUnicode data.\n        if (this.composite && this.toUnicode instanceof IdentityToUnicodeMap) {\n          if (/Verdana/i.test(name)) {\n            // Fixes issue11242_reduced.pdf\n            const GlyphMapForStandardFonts = getGlyphMapForStandardFonts();\n            for (const charCode in GlyphMapForStandardFonts) {\n              map[+charCode] = GlyphMapForStandardFonts[charCode];\n            }\n          }\n        }\n        this.toFontChar = map;\n      }\n      this.loadedName = fontName.split(\"-\")[0];\n      this.fontType = getFontType(type, subtype);\n    },\n\n    checkAndRepair: function Font_checkAndRepair(name, font, properties) {\n      const VALID_TABLES = [\n        \"OS/2\",\n        \"cmap\",\n        \"head\",\n        \"hhea\",\n        \"hmtx\",\n        \"maxp\",\n        \"name\",\n        \"post\",\n        \"loca\",\n        \"glyf\",\n        \"fpgm\",\n        \"prep\",\n        \"cvt \",\n        \"CFF \",\n      ];\n\n      function readTables(file, numTables) {\n        const tables = Object.create(null);\n        tables[\"OS/2\"] = null;\n        tables.cmap = null;\n        tables.head = null;\n        tables.hhea = null;\n        tables.hmtx = null;\n        tables.maxp = null;\n        tables.name = null;\n        tables.post = null;\n\n        for (let i = 0; i < numTables; i++) {\n          const table = readTableEntry(file);\n          if (!VALID_TABLES.includes(table.tag)) {\n            continue; // skipping table if it's not a required or optional table\n          }\n          if (table.length === 0) {\n            continue; // skipping empty tables\n          }\n          tables[table.tag] = table;\n        }\n        return tables;\n      }\n\n      function readTableEntry(file) {\n        var tag = bytesToString(file.getBytes(4));\n\n        var checksum = file.getInt32() >>> 0;\n        var offset = file.getInt32() >>> 0;\n        var length = file.getInt32() >>> 0;\n\n        // Read the table associated data\n        var previousPosition = file.pos;\n        file.pos = file.start ? file.start : 0;\n        file.skip(offset);\n        var data = file.getBytes(length);\n        file.pos = previousPosition;\n\n        if (tag === \"head\") {\n          // clearing checksum adjustment\n          data[8] = data[9] = data[10] = data[11] = 0;\n          data[17] |= 0x20; // Set font optimized for cleartype flag.\n        }\n\n        return {\n          tag,\n          checksum,\n          length,\n          offset,\n          data,\n        };\n      }\n\n      function readOpenTypeHeader(ttf) {\n        return {\n          version: bytesToString(ttf.getBytes(4)),\n          numTables: ttf.getUint16(),\n          searchRange: ttf.getUint16(),\n          entrySelector: ttf.getUint16(),\n          rangeShift: ttf.getUint16(),\n        };\n      }\n\n      function readTrueTypeCollectionHeader(ttc) {\n        const ttcTag = bytesToString(ttc.getBytes(4));\n        assert(ttcTag === \"ttcf\", \"Must be a TrueType Collection font.\");\n\n        const majorVersion = ttc.getUint16();\n        const minorVersion = ttc.getUint16();\n        const numFonts = ttc.getInt32() >>> 0;\n        const offsetTable = [];\n        for (let i = 0; i < numFonts; i++) {\n          offsetTable.push(ttc.getInt32() >>> 0);\n        }\n\n        const header = {\n          ttcTag,\n          majorVersion,\n          minorVersion,\n          numFonts,\n          offsetTable,\n        };\n        switch (majorVersion) {\n          case 1:\n            return header;\n          case 2:\n            header.dsigTag = ttc.getInt32() >>> 0;\n            header.dsigLength = ttc.getInt32() >>> 0;\n            header.dsigOffset = ttc.getInt32() >>> 0;\n            return header;\n        }\n        throw new FormatError(\n          `Invalid TrueType Collection majorVersion: ${majorVersion}.`\n        );\n      }\n\n      function readTrueTypeCollectionData(ttc, fontName) {\n        const { numFonts, offsetTable } = readTrueTypeCollectionHeader(ttc);\n\n        for (let i = 0; i < numFonts; i++) {\n          ttc.pos = (ttc.start || 0) + offsetTable[i];\n          const potentialHeader = readOpenTypeHeader(ttc);\n          const potentialTables = readTables(ttc, potentialHeader.numTables);\n\n          if (!potentialTables.name) {\n            throw new FormatError(\n              'TrueType Collection font must contain a \"name\" table.'\n            );\n          }\n          const nameTable = readNameTable(potentialTables.name);\n\n          for (let j = 0, jj = nameTable.length; j < jj; j++) {\n            for (let k = 0, kk = nameTable[j].length; k < kk; k++) {\n              const nameEntry = nameTable[j][k];\n              if (nameEntry && nameEntry.replace(/\\s/g, \"\") === fontName) {\n                return {\n                  header: potentialHeader,\n                  tables: potentialTables,\n                };\n              }\n            }\n          }\n        }\n        throw new FormatError(\n          `TrueType Collection does not contain \"${fontName}\" font.`\n        );\n      }\n\n      /**\n       * Read the appropriate subtable from the cmap according to 9.6.6.4 from\n       * PDF spec\n       */\n      function readCmapTable(cmap, file, isSymbolicFont, hasEncoding) {\n        if (!cmap) {\n          warn(\"No cmap table available.\");\n          return {\n            platformId: -1,\n            encodingId: -1,\n            mappings: [],\n            hasShortCmap: false,\n          };\n        }\n        var segment;\n        var start = (file.start ? file.start : 0) + cmap.offset;\n        file.pos = start;\n\n        file.skip(2); // version\n        var numTables = file.getUint16();\n\n        var potentialTable;\n        var canBreak = false;\n        // There's an order of preference in terms of which cmap subtable to\n        // use:\n        // - non-symbolic fonts the preference is a 3,1 table then a 1,0 table\n        // - symbolic fonts the preference is a 3,0 table then a 1,0 table\n        // The following takes advantage of the fact that the tables are sorted\n        // to work.\n        for (var i = 0; i < numTables; i++) {\n          var platformId = file.getUint16();\n          var encodingId = file.getUint16();\n          var offset = file.getInt32() >>> 0;\n          var useTable = false;\n\n          // Sometimes there are multiple of the same type of table. Default\n          // to choosing the first table and skip the rest.\n          if (\n            potentialTable &&\n            potentialTable.platformId === platformId &&\n            potentialTable.encodingId === encodingId\n          ) {\n            continue;\n          }\n\n          if (platformId === 0 && encodingId === 0) {\n            useTable = true;\n            // Continue the loop since there still may be a higher priority\n            // table.\n          } else if (platformId === 1 && encodingId === 0) {\n            useTable = true;\n            // Continue the loop since there still may be a higher priority\n            // table.\n          } else if (\n            platformId === 3 &&\n            encodingId === 1 &&\n            (hasEncoding || !potentialTable)\n          ) {\n            useTable = true;\n            if (!isSymbolicFont) {\n              canBreak = true;\n            }\n          } else if (isSymbolicFont && platformId === 3 && encodingId === 0) {\n            useTable = true;\n            canBreak = true;\n          }\n\n          if (useTable) {\n            potentialTable = {\n              platformId,\n              encodingId,\n              offset,\n            };\n          }\n          if (canBreak) {\n            break;\n          }\n        }\n\n        if (potentialTable) {\n          file.pos = start + potentialTable.offset;\n        }\n        if (!potentialTable || file.peekByte() === -1) {\n          warn(\"Could not find a preferred cmap table.\");\n          return {\n            platformId: -1,\n            encodingId: -1,\n            mappings: [],\n            hasShortCmap: false,\n          };\n        }\n\n        var format = file.getUint16();\n        file.skip(2 + 2); // length + language\n\n        var hasShortCmap = false;\n        var mappings = [];\n        var j, glyphId;\n\n        // TODO(mack): refactor this cmap subtable reading logic out\n        if (format === 0) {\n          for (j = 0; j < 256; j++) {\n            var index = file.getByte();\n            if (!index) {\n              continue;\n            }\n            mappings.push({\n              charCode: j,\n              glyphId: index,\n            });\n          }\n          hasShortCmap = true;\n        } else if (format === 4) {\n          // re-creating the table in format 4 since the encoding\n          // might be changed\n          var segCount = file.getUint16() >> 1;\n          file.skip(6); // skipping range fields\n          var segIndex,\n            segments = [];\n          for (segIndex = 0; segIndex < segCount; segIndex++) {\n            segments.push({ end: file.getUint16() });\n          }\n          file.skip(2);\n          for (segIndex = 0; segIndex < segCount; segIndex++) {\n            segments[segIndex].start = file.getUint16();\n          }\n\n          for (segIndex = 0; segIndex < segCount; segIndex++) {\n            segments[segIndex].delta = file.getUint16();\n          }\n\n          var offsetsCount = 0;\n          for (segIndex = 0; segIndex < segCount; segIndex++) {\n            segment = segments[segIndex];\n            var rangeOffset = file.getUint16();\n            if (!rangeOffset) {\n              segment.offsetIndex = -1;\n              continue;\n            }\n\n            var offsetIndex = (rangeOffset >> 1) - (segCount - segIndex);\n            segment.offsetIndex = offsetIndex;\n            offsetsCount = Math.max(\n              offsetsCount,\n              offsetIndex + segment.end - segment.start + 1\n            );\n          }\n\n          var offsets = [];\n          for (j = 0; j < offsetsCount; j++) {\n            offsets.push(file.getUint16());\n          }\n\n          for (segIndex = 0; segIndex < segCount; segIndex++) {\n            segment = segments[segIndex];\n            start = segment.start;\n            var end = segment.end;\n            var delta = segment.delta;\n            offsetIndex = segment.offsetIndex;\n\n            for (j = start; j <= end; j++) {\n              if (j === 0xffff) {\n                continue;\n              }\n\n              glyphId = offsetIndex < 0 ? j : offsets[offsetIndex + j - start];\n              glyphId = (glyphId + delta) & 0xffff;\n              mappings.push({\n                charCode: j,\n                glyphId,\n              });\n            }\n          }\n        } else if (format === 6) {\n          // Format 6 is a 2-bytes dense mapping, which means the font data\n          // lives glue together even if they are pretty far in the unicode\n          // table. (This looks weird, so I can have missed something), this\n          // works on Linux but seems to fails on Mac so let's rewrite the\n          // cmap table to a 3-1-4 style\n          var firstCode = file.getUint16();\n          var entryCount = file.getUint16();\n\n          for (j = 0; j < entryCount; j++) {\n            glyphId = file.getUint16();\n            var charCode = firstCode + j;\n\n            mappings.push({\n              charCode,\n              glyphId,\n            });\n          }\n        } else {\n          warn(\"cmap table has unsupported format: \" + format);\n          return {\n            platformId: -1,\n            encodingId: -1,\n            mappings: [],\n            hasShortCmap: false,\n          };\n        }\n\n        // removing duplicate entries\n        mappings.sort(function (a, b) {\n          return a.charCode - b.charCode;\n        });\n        for (i = 1; i < mappings.length; i++) {\n          if (mappings[i - 1].charCode === mappings[i].charCode) {\n            mappings.splice(i, 1);\n            i--;\n          }\n        }\n\n        return {\n          platformId: potentialTable.platformId,\n          encodingId: potentialTable.encodingId,\n          mappings,\n          hasShortCmap,\n        };\n      }\n\n      function sanitizeMetrics(\n        file,\n        header,\n        metrics,\n        numGlyphs,\n        dupFirstEntry\n      ) {\n        if (!header) {\n          if (metrics) {\n            metrics.data = null;\n          }\n          return;\n        }\n\n        file.pos = (file.start ? file.start : 0) + header.offset;\n        file.pos += 4; // version\n        file.pos += 2; // ascent\n        file.pos += 2; // descent\n        file.pos += 2; // linegap\n        file.pos += 2; // adv_width_max\n        file.pos += 2; // min_sb1\n        file.pos += 2; // min_sb2\n        file.pos += 2; // max_extent\n        file.pos += 2; // caret_slope_rise\n        file.pos += 2; // caret_slope_run\n        file.pos += 2; // caret_offset\n        file.pos += 8; // reserved\n        file.pos += 2; // format\n        var numOfMetrics = file.getUint16();\n\n        if (numOfMetrics > numGlyphs) {\n          info(\n            \"The numOfMetrics (\" +\n              numOfMetrics +\n              \") should not be \" +\n              \"greater than the numGlyphs (\" +\n              numGlyphs +\n              \")\"\n          );\n          // Reduce numOfMetrics if it is greater than numGlyphs\n          numOfMetrics = numGlyphs;\n          header.data[34] = (numOfMetrics & 0xff00) >> 8;\n          header.data[35] = numOfMetrics & 0x00ff;\n        }\n\n        var numOfSidebearings = numGlyphs - numOfMetrics;\n        var numMissing =\n          numOfSidebearings - ((metrics.length - numOfMetrics * 4) >> 1);\n\n        if (numMissing > 0) {\n          // For each missing glyph, we set both the width and lsb to 0 (zero).\n          // Since we need to add two properties for each glyph, this explains\n          // the use of |numMissing * 2| when initializing the typed array.\n          var entries = new Uint8Array(metrics.length + numMissing * 2);\n          entries.set(metrics.data);\n          if (dupFirstEntry) {\n            // Set the sidebearing value of the duplicated glyph.\n            entries[metrics.length] = metrics.data[2];\n            entries[metrics.length + 1] = metrics.data[3];\n          }\n          metrics.data = entries;\n        }\n      }\n\n      function sanitizeGlyph(\n        source,\n        sourceStart,\n        sourceEnd,\n        dest,\n        destStart,\n        hintsValid\n      ) {\n        var glyphProfile = {\n          length: 0,\n          sizeOfInstructions: 0,\n        };\n        if (sourceEnd - sourceStart <= 12) {\n          // glyph with data less than 12 is invalid one\n          return glyphProfile;\n        }\n        var glyf = source.subarray(sourceStart, sourceEnd);\n        var contoursCount = signedInt16(glyf[0], glyf[1]);\n        if (contoursCount < 0) {\n          // OTS doesn't like contour count to be less than -1.\n          contoursCount = -1;\n          writeSignedInt16(glyf, 0, contoursCount);\n          // complex glyph, writing as is\n          dest.set(glyf, destStart);\n          glyphProfile.length = glyf.length;\n          return glyphProfile;\n        }\n\n        var i,\n          j = 10,\n          flagsCount = 0;\n        for (i = 0; i < contoursCount; i++) {\n          var endPoint = (glyf[j] << 8) | glyf[j + 1];\n          flagsCount = endPoint + 1;\n          j += 2;\n        }\n        // skipping instructions\n        var instructionsStart = j;\n        var instructionsLength = (glyf[j] << 8) | glyf[j + 1];\n        glyphProfile.sizeOfInstructions = instructionsLength;\n        j += 2 + instructionsLength;\n        var instructionsEnd = j;\n        // validating flags\n        var coordinatesLength = 0;\n        for (i = 0; i < flagsCount; i++) {\n          var flag = glyf[j++];\n          if (flag & 0xc0) {\n            // reserved flags must be zero, cleaning up\n            glyf[j - 1] = flag & 0x3f;\n          }\n          let xLength = 2;\n          if (flag & 2) {\n            xLength = 1;\n          } else if (flag & 16) {\n            xLength = 0;\n          }\n          let yLength = 2;\n          if (flag & 4) {\n            yLength = 1;\n          } else if (flag & 32) {\n            yLength = 0;\n          }\n          const xyLength = xLength + yLength;\n          coordinatesLength += xyLength;\n          if (flag & 8) {\n            var repeat = glyf[j++];\n            i += repeat;\n            coordinatesLength += repeat * xyLength;\n          }\n        }\n        // glyph without coordinates will be rejected\n        if (coordinatesLength === 0) {\n          return glyphProfile;\n        }\n        var glyphDataLength = j + coordinatesLength;\n        if (glyphDataLength > glyf.length) {\n          // not enough data for coordinates\n          return glyphProfile;\n        }\n        if (!hintsValid && instructionsLength > 0) {\n          dest.set(glyf.subarray(0, instructionsStart), destStart);\n          dest.set([0, 0], destStart + instructionsStart);\n          dest.set(\n            glyf.subarray(instructionsEnd, glyphDataLength),\n            destStart + instructionsStart + 2\n          );\n          glyphDataLength -= instructionsLength;\n          if (glyf.length - glyphDataLength > 3) {\n            glyphDataLength = (glyphDataLength + 3) & ~3;\n          }\n          glyphProfile.length = glyphDataLength;\n          return glyphProfile;\n        }\n        if (glyf.length - glyphDataLength > 3) {\n          // truncating and aligning to 4 bytes the long glyph data\n          glyphDataLength = (glyphDataLength + 3) & ~3;\n          dest.set(glyf.subarray(0, glyphDataLength), destStart);\n          glyphProfile.length = glyphDataLength;\n          return glyphProfile;\n        }\n        // glyph data is fine\n        dest.set(glyf, destStart);\n        glyphProfile.length = glyf.length;\n        return glyphProfile;\n      }\n\n      function sanitizeHead(head, numGlyphs, locaLength) {\n        var data = head.data;\n\n        // Validate version:\n        // Should always be 0x00010000\n        var version = int32(data[0], data[1], data[2], data[3]);\n        if (version >> 16 !== 1) {\n          info(\"Attempting to fix invalid version in head table: \" + version);\n          data[0] = 0;\n          data[1] = 1;\n          data[2] = 0;\n          data[3] = 0;\n        }\n\n        var indexToLocFormat = int16(data[50], data[51]);\n        if (indexToLocFormat < 0 || indexToLocFormat > 1) {\n          info(\n            \"Attempting to fix invalid indexToLocFormat in head table: \" +\n              indexToLocFormat\n          );\n\n          // The value of indexToLocFormat should be 0 if the loca table\n          // consists of short offsets, and should be 1 if the loca table\n          // consists of long offsets.\n          //\n          // The number of entries in the loca table should be numGlyphs + 1.\n          //\n          // Using this information, we can work backwards to deduce if the\n          // size of each offset in the loca table, and thus figure out the\n          // appropriate value for indexToLocFormat.\n\n          var numGlyphsPlusOne = numGlyphs + 1;\n          if (locaLength === numGlyphsPlusOne << 1) {\n            // 0x0000 indicates the loca table consists of short offsets\n            data[50] = 0;\n            data[51] = 0;\n          } else if (locaLength === numGlyphsPlusOne << 2) {\n            // 0x0001 indicates the loca table consists of long offsets\n            data[50] = 0;\n            data[51] = 1;\n          } else {\n            throw new FormatError(\n              \"Could not fix indexToLocFormat: \" + indexToLocFormat\n            );\n          }\n        }\n      }\n\n      function sanitizeGlyphLocations(\n        loca,\n        glyf,\n        numGlyphs,\n        isGlyphLocationsLong,\n        hintsValid,\n        dupFirstEntry,\n        maxSizeOfInstructions\n      ) {\n        var itemSize, itemDecode, itemEncode;\n        if (isGlyphLocationsLong) {\n          itemSize = 4;\n          itemDecode = function fontItemDecodeLong(data, offset) {\n            return (\n              (data[offset] << 24) |\n              (data[offset + 1] << 16) |\n              (data[offset + 2] << 8) |\n              data[offset + 3]\n            );\n          };\n          itemEncode = function fontItemEncodeLong(data, offset, value) {\n            data[offset] = (value >>> 24) & 0xff;\n            data[offset + 1] = (value >> 16) & 0xff;\n            data[offset + 2] = (value >> 8) & 0xff;\n            data[offset + 3] = value & 0xff;\n          };\n        } else {\n          itemSize = 2;\n          itemDecode = function fontItemDecode(data, offset) {\n            return (data[offset] << 9) | (data[offset + 1] << 1);\n          };\n          itemEncode = function fontItemEncode(data, offset, value) {\n            data[offset] = (value >> 9) & 0xff;\n            data[offset + 1] = (value >> 1) & 0xff;\n          };\n        }\n        // The first glyph is duplicated.\n        var numGlyphsOut = dupFirstEntry ? numGlyphs + 1 : numGlyphs;\n        var locaDataSize = itemSize * (1 + numGlyphsOut);\n        // Resize loca table to account for duplicated glyph.\n        var locaData = new Uint8Array(locaDataSize);\n        locaData.set(loca.data.subarray(0, locaDataSize));\n        loca.data = locaData;\n        // removing the invalid glyphs\n        var oldGlyfData = glyf.data;\n        var oldGlyfDataLength = oldGlyfData.length;\n        var newGlyfData = new Uint8Array(oldGlyfDataLength);\n        var startOffset = itemDecode(locaData, 0);\n        var writeOffset = 0;\n        var missingGlyphs = Object.create(null);\n        itemEncode(locaData, 0, writeOffset);\n        var i, j;\n        for (i = 0, j = itemSize; i < numGlyphs; i++, j += itemSize) {\n          var endOffset = itemDecode(locaData, j);\n          // The spec says the offsets should be in ascending order, however\n          // some fonts use the offset of 0 to mark a glyph as missing.\n          if (endOffset === 0) {\n            endOffset = startOffset;\n          }\n          if (\n            endOffset > oldGlyfDataLength &&\n            ((oldGlyfDataLength + 3) & ~3) === endOffset\n          ) {\n            // Aspose breaks fonts by aligning the glyphs to the qword, but not\n            // the glyf table size, which makes last glyph out of range.\n            endOffset = oldGlyfDataLength;\n          }\n          if (endOffset > oldGlyfDataLength) {\n            // glyph end offset points outside glyf data, rejecting the glyph\n            startOffset = endOffset;\n          }\n\n          var glyphProfile = sanitizeGlyph(\n            oldGlyfData,\n            startOffset,\n            endOffset,\n            newGlyfData,\n            writeOffset,\n            hintsValid\n          );\n          var newLength = glyphProfile.length;\n          if (newLength === 0) {\n            missingGlyphs[i] = true;\n          }\n          if (glyphProfile.sizeOfInstructions > maxSizeOfInstructions) {\n            maxSizeOfInstructions = glyphProfile.sizeOfInstructions;\n          }\n          writeOffset += newLength;\n          itemEncode(locaData, j, writeOffset);\n          startOffset = endOffset;\n        }\n\n        if (writeOffset === 0) {\n          // glyf table cannot be empty -- redoing the glyf and loca tables\n          // to have single glyph with one point\n          var simpleGlyph = new Uint8Array([\n            0,\n            1,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            49,\n            0,\n          ]);\n          for (i = 0, j = itemSize; i < numGlyphsOut; i++, j += itemSize) {\n            itemEncode(locaData, j, simpleGlyph.length);\n          }\n          glyf.data = simpleGlyph;\n        } else if (dupFirstEntry) {\n          // Browsers will not display a glyph at position 0. Typically glyph 0\n          // is notdef, but a number of fonts put a valid glyph there so it must\n          // be duplicated and appended.\n          var firstEntryLength = itemDecode(locaData, itemSize);\n          if (newGlyfData.length > firstEntryLength + writeOffset) {\n            glyf.data = newGlyfData.subarray(0, firstEntryLength + writeOffset);\n          } else {\n            glyf.data = new Uint8Array(firstEntryLength + writeOffset);\n            glyf.data.set(newGlyfData.subarray(0, writeOffset));\n          }\n          glyf.data.set(newGlyfData.subarray(0, firstEntryLength), writeOffset);\n          itemEncode(\n            loca.data,\n            locaData.length - itemSize,\n            writeOffset + firstEntryLength\n          );\n        } else {\n          glyf.data = newGlyfData.subarray(0, writeOffset);\n        }\n        return {\n          missingGlyphs,\n          maxSizeOfInstructions,\n        };\n      }\n\n      function readPostScriptTable(post, propertiesObj, maxpNumGlyphs) {\n        var start = (font.start ? font.start : 0) + post.offset;\n        font.pos = start;\n\n        var length = post.length,\n          end = start + length;\n        var version = font.getInt32();\n        // skip rest to the tables\n        font.skip(28);\n\n        var glyphNames;\n        var valid = true;\n        var i;\n\n        switch (version) {\n          case 0x00010000:\n            glyphNames = MacStandardGlyphOrdering;\n            break;\n          case 0x00020000:\n            var numGlyphs = font.getUint16();\n            if (numGlyphs !== maxpNumGlyphs) {\n              valid = false;\n              break;\n            }\n            var glyphNameIndexes = [];\n            for (i = 0; i < numGlyphs; ++i) {\n              var index = font.getUint16();\n              if (index >= 32768) {\n                valid = false;\n                break;\n              }\n              glyphNameIndexes.push(index);\n            }\n            if (!valid) {\n              break;\n            }\n            var customNames = [];\n            var strBuf = [];\n            while (font.pos < end) {\n              var stringLength = font.getByte();\n              strBuf.length = stringLength;\n              for (i = 0; i < stringLength; ++i) {\n                strBuf[i] = String.fromCharCode(font.getByte());\n              }\n              customNames.push(strBuf.join(\"\"));\n            }\n            glyphNames = [];\n            for (i = 0; i < numGlyphs; ++i) {\n              var j = glyphNameIndexes[i];\n              if (j < 258) {\n                glyphNames.push(MacStandardGlyphOrdering[j]);\n                continue;\n              }\n              glyphNames.push(customNames[j - 258]);\n            }\n            break;\n          case 0x00030000:\n            break;\n          default:\n            warn(\"Unknown/unsupported post table version \" + version);\n            valid = false;\n            if (propertiesObj.defaultEncoding) {\n              glyphNames = propertiesObj.defaultEncoding;\n            }\n            break;\n        }\n        propertiesObj.glyphNames = glyphNames;\n        return valid;\n      }\n\n      function readNameTable(nameTable) {\n        var start = (font.start ? font.start : 0) + nameTable.offset;\n        font.pos = start;\n\n        var names = [[], []];\n        var length = nameTable.length,\n          end = start + length;\n        var format = font.getUint16();\n        var FORMAT_0_HEADER_LENGTH = 6;\n        if (format !== 0 || length < FORMAT_0_HEADER_LENGTH) {\n          // unsupported name table format or table \"too\" small\n          return names;\n        }\n        var numRecords = font.getUint16();\n        var stringsStart = font.getUint16();\n        var records = [];\n        var NAME_RECORD_LENGTH = 12;\n        var i, ii;\n\n        for (\n          i = 0;\n          i < numRecords && font.pos + NAME_RECORD_LENGTH <= end;\n          i++\n        ) {\n          var r = {\n            platform: font.getUint16(),\n            encoding: font.getUint16(),\n            language: font.getUint16(),\n            name: font.getUint16(),\n            length: font.getUint16(),\n            offset: font.getUint16(),\n          };\n          // using only Macintosh and Windows platform/encoding names\n          if (\n            (r.platform === 1 && r.encoding === 0 && r.language === 0) ||\n            (r.platform === 3 && r.encoding === 1 && r.language === 0x409)\n          ) {\n            records.push(r);\n          }\n        }\n        for (i = 0, ii = records.length; i < ii; i++) {\n          var record = records[i];\n          if (record.length <= 0) {\n            continue; // Nothing to process, ignoring.\n          }\n          var pos = start + stringsStart + record.offset;\n          if (pos + record.length > end) {\n            continue; // outside of name table, ignoring\n          }\n          font.pos = pos;\n          var nameIndex = record.name;\n          if (record.encoding) {\n            // unicode\n            var str = \"\";\n            for (var j = 0, jj = record.length; j < jj; j += 2) {\n              str += String.fromCharCode(font.getUint16());\n            }\n            names[1][nameIndex] = str;\n          } else {\n            names[0][nameIndex] = bytesToString(font.getBytes(record.length));\n          }\n        }\n        return names;\n      }\n\n      // prettier-ignore\n      var TTOpsStackDeltas = [\n        0, 0, 0, 0, 0, 0, 0, 0, -2, -2, -2, -2, 0, 0, -2, -5,\n        -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, -1, -1, -1, -1,\n        1, -1, -999, 0, 1, 0, -1, -2, 0, -1, -2, -1, -1, 0, -1, -1,\n        0, 0, -999, -999, -1, -1, -1, -1, -2, -999, -2, -2, -999, 0, -2, -2,\n        0, 0, -2, 0, -2, 0, 0, 0, -2, -1, -1, 1, 1, 0, 0, -1,\n        -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, -1, -1, 0, -999, -1, -1,\n        -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        -2, -999, -999, -999, -999, -999, -1, -1, -2, -2, 0, 0, 0, 0, -1, -1,\n        -999, -2, -2, 0, 0, -1, -2, -2, 0, 0, 0, -1, -1, -1, -2];\n      // 0xC0-DF == -1 and 0xE0-FF == -2\n\n      function sanitizeTTProgram(table, ttContext) {\n        var data = table.data;\n        var i = 0,\n          j,\n          n,\n          b,\n          funcId,\n          pc,\n          lastEndf = 0,\n          lastDeff = 0;\n        var stack = [];\n        var callstack = [];\n        var functionsCalled = [];\n        var tooComplexToFollowFunctions = ttContext.tooComplexToFollowFunctions;\n        var inFDEF = false,\n          ifLevel = 0,\n          inELSE = 0;\n        for (var ii = data.length; i < ii; ) {\n          var op = data[i++];\n          // The TrueType instruction set docs can be found at\n          // https://developer.apple.com/fonts/TTRefMan/RM05/Chap5.html\n          if (op === 0x40) {\n            // NPUSHB - pushes n bytes\n            n = data[i++];\n            if (inFDEF || inELSE) {\n              i += n;\n            } else {\n              for (j = 0; j < n; j++) {\n                stack.push(data[i++]);\n              }\n            }\n          } else if (op === 0x41) {\n            // NPUSHW - pushes n words\n            n = data[i++];\n            if (inFDEF || inELSE) {\n              i += n * 2;\n            } else {\n              for (j = 0; j < n; j++) {\n                b = data[i++];\n                stack.push((b << 8) | data[i++]);\n              }\n            }\n          } else if ((op & 0xf8) === 0xb0) {\n            // PUSHB - pushes bytes\n            n = op - 0xb0 + 1;\n            if (inFDEF || inELSE) {\n              i += n;\n            } else {\n              for (j = 0; j < n; j++) {\n                stack.push(data[i++]);\n              }\n            }\n          } else if ((op & 0xf8) === 0xb8) {\n            // PUSHW - pushes words\n            n = op - 0xb8 + 1;\n            if (inFDEF || inELSE) {\n              i += n * 2;\n            } else {\n              for (j = 0; j < n; j++) {\n                b = data[i++];\n                stack.push((b << 8) | data[i++]);\n              }\n            }\n          } else if (op === 0x2b && !tooComplexToFollowFunctions) {\n            // CALL\n            if (!inFDEF && !inELSE) {\n              // collecting information about which functions are used\n              funcId = stack[stack.length - 1];\n              if (isNaN(funcId)) {\n                info(\"TT: CALL empty stack (or invalid entry).\");\n              } else {\n                ttContext.functionsUsed[funcId] = true;\n                if (funcId in ttContext.functionsStackDeltas) {\n                  const newStackLength =\n                    stack.length + ttContext.functionsStackDeltas[funcId];\n                  if (newStackLength < 0) {\n                    warn(\"TT: CALL invalid functions stack delta.\");\n                    ttContext.hintsValid = false;\n                    return;\n                  }\n                  stack.length = newStackLength;\n                } else if (\n                  funcId in ttContext.functionsDefined &&\n                  !functionsCalled.includes(funcId)\n                ) {\n                  callstack.push({ data, i, stackTop: stack.length - 1 });\n                  functionsCalled.push(funcId);\n                  pc = ttContext.functionsDefined[funcId];\n                  if (!pc) {\n                    warn(\"TT: CALL non-existent function\");\n                    ttContext.hintsValid = false;\n                    return;\n                  }\n                  data = pc.data;\n                  i = pc.i;\n                }\n              }\n            }\n          } else if (op === 0x2c && !tooComplexToFollowFunctions) {\n            // FDEF\n            if (inFDEF || inELSE) {\n              warn(\"TT: nested FDEFs not allowed\");\n              tooComplexToFollowFunctions = true;\n            }\n            inFDEF = true;\n            // collecting information about which functions are defined\n            lastDeff = i;\n            funcId = stack.pop();\n            ttContext.functionsDefined[funcId] = { data, i };\n          } else if (op === 0x2d) {\n            // ENDF - end of function\n            if (inFDEF) {\n              inFDEF = false;\n              lastEndf = i;\n            } else {\n              pc = callstack.pop();\n              if (!pc) {\n                warn(\"TT: ENDF bad stack\");\n                ttContext.hintsValid = false;\n                return;\n              }\n              funcId = functionsCalled.pop();\n              data = pc.data;\n              i = pc.i;\n              ttContext.functionsStackDeltas[funcId] =\n                stack.length - pc.stackTop;\n            }\n          } else if (op === 0x89) {\n            // IDEF - instruction definition\n            if (inFDEF || inELSE) {\n              warn(\"TT: nested IDEFs not allowed\");\n              tooComplexToFollowFunctions = true;\n            }\n            inFDEF = true;\n            // recording it as a function to track ENDF\n            lastDeff = i;\n          } else if (op === 0x58) {\n            // IF\n            ++ifLevel;\n          } else if (op === 0x1b) {\n            // ELSE\n            inELSE = ifLevel;\n          } else if (op === 0x59) {\n            // EIF\n            if (inELSE === ifLevel) {\n              inELSE = 0;\n            }\n            --ifLevel;\n          } else if (op === 0x1c) {\n            // JMPR\n            if (!inFDEF && !inELSE) {\n              var offset = stack[stack.length - 1];\n              // only jumping forward to prevent infinite loop\n              if (offset > 0) {\n                i += offset - 1;\n              }\n            }\n          }\n          // Adjusting stack not extactly, but just enough to get function id\n          if (!inFDEF && !inELSE) {\n            let stackDelta = 0;\n            if (op <= 0x8e) {\n              stackDelta = TTOpsStackDeltas[op];\n            } else if (op >= 0xc0 && op <= 0xdf) {\n              stackDelta = -1;\n            } else if (op >= 0xe0) {\n              stackDelta = -2;\n            }\n            if (op >= 0x71 && op <= 0x75) {\n              n = stack.pop();\n              if (!isNaN(n)) {\n                stackDelta = -n * 2;\n              }\n            }\n            while (stackDelta < 0 && stack.length > 0) {\n              stack.pop();\n              stackDelta++;\n            }\n            while (stackDelta > 0) {\n              stack.push(NaN); // pushing any number into stack\n              stackDelta--;\n            }\n          }\n        }\n        ttContext.tooComplexToFollowFunctions = tooComplexToFollowFunctions;\n        var content = [data];\n        if (i > data.length) {\n          content.push(new Uint8Array(i - data.length));\n        }\n        if (lastDeff > lastEndf) {\n          warn(\"TT: complementing a missing function tail\");\n          // new function definition started, but not finished\n          // complete function by [CLEAR, ENDF]\n          content.push(new Uint8Array([0x22, 0x2d]));\n        }\n        foldTTTable(table, content);\n      }\n\n      function checkInvalidFunctions(ttContext, maxFunctionDefs) {\n        if (ttContext.tooComplexToFollowFunctions) {\n          return;\n        }\n        if (ttContext.functionsDefined.length > maxFunctionDefs) {\n          warn(\"TT: more functions defined than expected\");\n          ttContext.hintsValid = false;\n          return;\n        }\n        for (var j = 0, jj = ttContext.functionsUsed.length; j < jj; j++) {\n          if (j > maxFunctionDefs) {\n            warn(\"TT: invalid function id: \" + j);\n            ttContext.hintsValid = false;\n            return;\n          }\n          if (ttContext.functionsUsed[j] && !ttContext.functionsDefined[j]) {\n            warn(\"TT: undefined function: \" + j);\n            ttContext.hintsValid = false;\n            return;\n          }\n        }\n      }\n\n      function foldTTTable(table, content) {\n        if (content.length > 1) {\n          // concatenating the content items\n          var newLength = 0;\n          var j, jj;\n          for (j = 0, jj = content.length; j < jj; j++) {\n            newLength += content[j].length;\n          }\n          newLength = (newLength + 3) & ~3;\n          var result = new Uint8Array(newLength);\n          var pos = 0;\n          for (j = 0, jj = content.length; j < jj; j++) {\n            result.set(content[j], pos);\n            pos += content[j].length;\n          }\n          table.data = result;\n          table.length = newLength;\n        }\n      }\n\n      function sanitizeTTPrograms(fpgm, prep, cvt, maxFunctionDefs) {\n        var ttContext = {\n          functionsDefined: [],\n          functionsUsed: [],\n          functionsStackDeltas: [],\n          tooComplexToFollowFunctions: false,\n          hintsValid: true,\n        };\n        if (fpgm) {\n          sanitizeTTProgram(fpgm, ttContext);\n        }\n        if (prep) {\n          sanitizeTTProgram(prep, ttContext);\n        }\n        if (fpgm) {\n          checkInvalidFunctions(ttContext, maxFunctionDefs);\n        }\n        if (cvt && cvt.length & 1) {\n          var cvtData = new Uint8Array(cvt.length + 1);\n          cvtData.set(cvt.data);\n          cvt.data = cvtData;\n        }\n        return ttContext.hintsValid;\n      }\n\n      // The following steps modify the original font data, making copy\n      font = new Stream(new Uint8Array(font.getBytes()));\n\n      let header, tables;\n      if (isTrueTypeCollectionFile(font)) {\n        const ttcData = readTrueTypeCollectionData(font, this.name);\n        header = ttcData.header;\n        tables = ttcData.tables;\n      } else {\n        header = readOpenTypeHeader(font);\n        tables = readTables(font, header.numTables);\n      }\n      let cff, cffFile;\n\n      var isTrueType = !tables[\"CFF \"];\n      if (!isTrueType) {\n        const isComposite =\n          properties.composite &&\n          ((properties.cidToGidMap || []).length > 0 ||\n            !(properties.cMap instanceof IdentityCMap));\n        // OpenType font (skip composite fonts with non-default glyph mapping).\n        if (\n          (header.version === \"OTTO\" && !isComposite) ||\n          !tables.head ||\n          !tables.hhea ||\n          !tables.maxp ||\n          !tables.post\n        ) {\n          // No major tables: throwing everything at `CFFFont`.\n          cffFile = new Stream(tables[\"CFF \"].data);\n          cff = new CFFFont(cffFile, properties);\n\n          adjustWidths(properties);\n\n          return this.convert(name, cff, properties);\n        }\n\n        delete tables.glyf;\n        delete tables.loca;\n        delete tables.fpgm;\n        delete tables.prep;\n        delete tables[\"cvt \"];\n        this.isOpenType = true;\n      } else {\n        if (!tables.loca) {\n          throw new FormatError('Required \"loca\" table is not found');\n        }\n        if (!tables.glyf) {\n          warn('Required \"glyf\" table is not found -- trying to recover.');\n          // Note: We use `sanitizeGlyphLocations` to add dummy glyf data below.\n          tables.glyf = {\n            tag: \"glyf\",\n            data: new Uint8Array(0),\n          };\n        }\n        this.isOpenType = false;\n      }\n\n      if (!tables.maxp) {\n        throw new FormatError('Required \"maxp\" table is not found');\n      }\n\n      font.pos = (font.start || 0) + tables.maxp.offset;\n      var version = font.getInt32();\n      const numGlyphs = font.getUint16();\n      // Glyph 0 is duplicated and appended.\n      let numGlyphsOut = numGlyphs + 1;\n      let dupFirstEntry = true;\n      if (numGlyphsOut > 0xffff) {\n        dupFirstEntry = false;\n        numGlyphsOut = numGlyphs;\n        warn(\"Not enough space in glyfs to duplicate first glyph.\");\n      }\n      var maxFunctionDefs = 0;\n      var maxSizeOfInstructions = 0;\n      if (version >= 0x00010000 && tables.maxp.length >= 22) {\n        // maxZones can be invalid\n        font.pos += 8;\n        var maxZones = font.getUint16();\n        if (maxZones > 2) {\n          // reset to 2 if font has invalid maxZones\n          tables.maxp.data[14] = 0;\n          tables.maxp.data[15] = 2;\n        }\n        font.pos += 4;\n        maxFunctionDefs = font.getUint16();\n        font.pos += 4;\n        maxSizeOfInstructions = font.getUint16();\n      }\n\n      tables.maxp.data[4] = numGlyphsOut >> 8;\n      tables.maxp.data[5] = numGlyphsOut & 255;\n\n      var hintsValid = sanitizeTTPrograms(\n        tables.fpgm,\n        tables.prep,\n        tables[\"cvt \"],\n        maxFunctionDefs\n      );\n      if (!hintsValid) {\n        delete tables.fpgm;\n        delete tables.prep;\n        delete tables[\"cvt \"];\n      }\n\n      // Ensure the hmtx table contains the advance width and\n      // sidebearings information for numGlyphs in the maxp table\n      sanitizeMetrics(\n        font,\n        tables.hhea,\n        tables.hmtx,\n        numGlyphsOut,\n        dupFirstEntry\n      );\n\n      if (!tables.head) {\n        throw new FormatError('Required \"head\" table is not found');\n      }\n\n      sanitizeHead(tables.head, numGlyphs, isTrueType ? tables.loca.length : 0);\n\n      var missingGlyphs = Object.create(null);\n      if (isTrueType) {\n        var isGlyphLocationsLong = int16(\n          tables.head.data[50],\n          tables.head.data[51]\n        );\n        var glyphsInfo = sanitizeGlyphLocations(\n          tables.loca,\n          tables.glyf,\n          numGlyphs,\n          isGlyphLocationsLong,\n          hintsValid,\n          dupFirstEntry,\n          maxSizeOfInstructions\n        );\n        missingGlyphs = glyphsInfo.missingGlyphs;\n\n        // Some fonts have incorrect maxSizeOfInstructions values, so we use\n        // the computed value instead.\n        if (version >= 0x00010000 && tables.maxp.length >= 22) {\n          tables.maxp.data[26] = glyphsInfo.maxSizeOfInstructions >> 8;\n          tables.maxp.data[27] = glyphsInfo.maxSizeOfInstructions & 255;\n        }\n      }\n      if (!tables.hhea) {\n        throw new FormatError('Required \"hhea\" table is not found');\n      }\n\n      // Sanitizer reduces the glyph advanceWidth to the maxAdvanceWidth\n      // Sometimes it's 0. That needs to be fixed\n      if (tables.hhea.data[10] === 0 && tables.hhea.data[11] === 0) {\n        tables.hhea.data[10] = 0xff;\n        tables.hhea.data[11] = 0xff;\n      }\n\n      // Extract some more font properties from the OpenType head and\n      // hhea tables; yMin and descent value are always negative.\n      var metricsOverride = {\n        unitsPerEm: int16(tables.head.data[18], tables.head.data[19]),\n        yMax: int16(tables.head.data[42], tables.head.data[43]),\n        yMin: signedInt16(tables.head.data[38], tables.head.data[39]),\n        ascent: int16(tables.hhea.data[4], tables.hhea.data[5]),\n        descent: signedInt16(tables.hhea.data[6], tables.hhea.data[7]),\n      };\n\n      // PDF FontDescriptor metrics lie -- using data from actual font.\n      this.ascent = metricsOverride.ascent / metricsOverride.unitsPerEm;\n      this.descent = metricsOverride.descent / metricsOverride.unitsPerEm;\n\n      // The 'post' table has glyphs names.\n      if (tables.post) {\n        readPostScriptTable(tables.post, properties, numGlyphs);\n      }\n\n      // The original 'post' table is not needed, replace it.\n      tables.post = {\n        tag: \"post\",\n        data: createPostTable(properties),\n      };\n\n      const charCodeToGlyphId = [];\n\n      // Helper function to try to skip mapping of empty glyphs.\n      function hasGlyph(glyphId) {\n        return !missingGlyphs[glyphId];\n      }\n\n      if (properties.composite) {\n        var cidToGidMap = properties.cidToGidMap || [];\n        var isCidToGidMapEmpty = cidToGidMap.length === 0;\n\n        properties.cMap.forEach(function (charCode, cid) {\n          if (cid > 0xffff) {\n            throw new FormatError(\"Max size of CID is 65,535\");\n          }\n          var glyphId = -1;\n          if (isCidToGidMapEmpty) {\n            glyphId = cid;\n          } else if (cidToGidMap[cid] !== undefined) {\n            glyphId = cidToGidMap[cid];\n          }\n\n          if (glyphId >= 0 && glyphId < numGlyphs && hasGlyph(glyphId)) {\n            charCodeToGlyphId[charCode] = glyphId;\n          }\n        });\n      } else {\n        // Most of the following logic in this code branch is based on the\n        // 9.6.6.4 of the PDF spec.\n        var cmapTable = readCmapTable(\n          tables.cmap,\n          font,\n          this.isSymbolicFont,\n          properties.hasEncoding\n        );\n        var cmapPlatformId = cmapTable.platformId;\n        var cmapEncodingId = cmapTable.encodingId;\n        var cmapMappings = cmapTable.mappings;\n        var cmapMappingsLength = cmapMappings.length;\n\n        // The spec seems to imply that if the font is symbolic the encoding\n        // should be ignored, this doesn't appear to work for 'preistabelle.pdf'\n        // where the the font is symbolic and it has an encoding.\n        if (\n          (properties.hasEncoding &&\n            ((cmapPlatformId === 3 && cmapEncodingId === 1) ||\n              (cmapPlatformId === 1 && cmapEncodingId === 0))) ||\n          (cmapPlatformId === -1 &&\n          cmapEncodingId === -1 && // Temporary hack\n            !!getEncoding(properties.baseEncodingName))\n        ) {\n          // Temporary hack\n          // When no preferred cmap table was found and |baseEncodingName| is\n          // one of the predefined encodings, we seem to obtain a better\n          // |charCodeToGlyphId| map from the code below (fixes bug 1057544).\n          // TODO: Note that this is a hack which should be removed as soon as\n          //       we have proper support for more exotic cmap tables.\n\n          var baseEncoding = [];\n          if (\n            properties.baseEncodingName === \"MacRomanEncoding\" ||\n            properties.baseEncodingName === \"WinAnsiEncoding\"\n          ) {\n            baseEncoding = getEncoding(properties.baseEncodingName);\n          }\n          var glyphsUnicodeMap = getGlyphsUnicode();\n          for (let charCode = 0; charCode < 256; charCode++) {\n            var glyphName, standardGlyphName;\n            if (this.differences && charCode in this.differences) {\n              glyphName = this.differences[charCode];\n            } else if (\n              charCode in baseEncoding &&\n              baseEncoding[charCode] !== \"\"\n            ) {\n              glyphName = baseEncoding[charCode];\n            } else {\n              glyphName = StandardEncoding[charCode];\n            }\n            if (!glyphName) {\n              continue;\n            }\n            // Ensure that non-standard glyph names are resolved to valid ones.\n            standardGlyphName = recoverGlyphName(glyphName, glyphsUnicodeMap);\n\n            var unicodeOrCharCode;\n            if (cmapPlatformId === 3 && cmapEncodingId === 1) {\n              unicodeOrCharCode = glyphsUnicodeMap[standardGlyphName];\n            } else if (cmapPlatformId === 1 && cmapEncodingId === 0) {\n              // TODO: the encoding needs to be updated with mac os table.\n              unicodeOrCharCode = MacRomanEncoding.indexOf(standardGlyphName);\n            }\n\n            var found = false;\n            for (let i = 0; i < cmapMappingsLength; ++i) {\n              if (cmapMappings[i].charCode !== unicodeOrCharCode) {\n                continue;\n              }\n              charCodeToGlyphId[charCode] = cmapMappings[i].glyphId;\n              found = true;\n              break;\n            }\n            if (!found && properties.glyphNames) {\n              // Try to map using the post table.\n              var glyphId = properties.glyphNames.indexOf(glyphName);\n              // The post table ought to use the same kind of glyph names as the\n              // `differences` array, but check the standard ones as a fallback.\n              if (glyphId === -1 && standardGlyphName !== glyphName) {\n                glyphId = properties.glyphNames.indexOf(standardGlyphName);\n              }\n              if (glyphId > 0 && hasGlyph(glyphId)) {\n                charCodeToGlyphId[charCode] = glyphId;\n              }\n            }\n          }\n        } else if (cmapPlatformId === 0 && cmapEncodingId === 0) {\n          // Default Unicode semantics, use the charcodes as is.\n          for (let i = 0; i < cmapMappingsLength; ++i) {\n            charCodeToGlyphId[cmapMappings[i].charCode] =\n              cmapMappings[i].glyphId;\n          }\n        } else {\n          // When there is only a (1, 0) cmap table, the char code is a single\n          // byte and it is used directly as the char code.\n\n          // When a (3, 0) cmap table is present, it is used instead but the\n          // spec has special rules for char codes in the range of 0xF000 to\n          // 0xF0FF and it says the (3, 0) table should map the values from\n          // the (1, 0) table by prepending 0xF0 to the char codes. To reverse\n          // this, the upper bits of the char code are cleared, but only for the\n          // special range since some PDFs have char codes outside of this range\n          // (e.g. 0x2013) which when masked would overwrite other values in the\n          // cmap.\n          for (let i = 0; i < cmapMappingsLength; ++i) {\n            let charCode = cmapMappings[i].charCode;\n            if (\n              cmapPlatformId === 3 &&\n              charCode >= 0xf000 &&\n              charCode <= 0xf0ff\n            ) {\n              charCode &= 0xff;\n            }\n            charCodeToGlyphId[charCode] = cmapMappings[i].glyphId;\n          }\n        }\n      }\n\n      if (charCodeToGlyphId.length === 0) {\n        // defines at least one glyph\n        charCodeToGlyphId[0] = 0;\n      }\n\n      // Typically glyph 0 is duplicated and the mapping must be updated, but if\n      // there isn't enough room to duplicate, the glyph id is left the same. In\n      // this case, glyph 0 may not work correctly, but that is better than\n      // having the whole font fail.\n      let glyphZeroId = numGlyphsOut - 1;\n      if (!dupFirstEntry) {\n        glyphZeroId = 0;\n      }\n\n      // Converting glyphs and ids into font's cmap table\n      var newMapping = adjustMapping(charCodeToGlyphId, hasGlyph, glyphZeroId);\n      this.toFontChar = newMapping.toFontChar;\n      tables.cmap = {\n        tag: \"cmap\",\n        data: createCmapTable(newMapping.charCodeToGlyphId, numGlyphsOut),\n      };\n\n      if (!tables[\"OS/2\"] || !validateOS2Table(tables[\"OS/2\"], font)) {\n        tables[\"OS/2\"] = {\n          tag: \"OS/2\",\n          data: createOS2Table(\n            properties,\n            newMapping.charCodeToGlyphId,\n            metricsOverride\n          ),\n        };\n      }\n\n      if (!isTrueType) {\n        try {\n          // Trying to repair CFF file\n          cffFile = new Stream(tables[\"CFF \"].data);\n          var parser = new CFFParser(\n            cffFile,\n            properties,\n            SEAC_ANALYSIS_ENABLED\n          );\n          cff = parser.parse();\n          cff.duplicateFirstGlyph();\n          var compiler = new CFFCompiler(cff);\n          tables[\"CFF \"].data = compiler.compile();\n        } catch (e) {\n          warn(\"Failed to compile font \" + properties.loadedName);\n        }\n      }\n\n      // Re-creating 'name' table\n      if (!tables.name) {\n        tables.name = {\n          tag: \"name\",\n          data: createNameTable(this.name),\n        };\n      } else {\n        // ... using existing 'name' table as prototype\n        var namePrototype = readNameTable(tables.name);\n        tables.name.data = createNameTable(name, namePrototype);\n      }\n\n      var builder = new OpenTypeFileBuilder(header.version);\n      for (var tableTag in tables) {\n        builder.addTable(tableTag, tables[tableTag].data);\n      }\n      return builder.toArray();\n    },\n\n    convert: function Font_convert(fontName, font, properties) {\n      // TODO: Check the charstring widths to determine this.\n      properties.fixedPitch = false;\n\n      if (properties.builtInEncoding) {\n        // For Type1 fonts that do not include either `ToUnicode` or `Encoding`\n        // data, attempt to use the `builtInEncoding` to improve text selection.\n        adjustToUnicode(properties, properties.builtInEncoding);\n      }\n\n      // Type 1 fonts have a notdef inserted at the beginning, so glyph 0\n      // becomes glyph 1. In a CFF font glyph 0 is appended to the end of the\n      // char strings.\n      let glyphZeroId = 1;\n      if (font instanceof CFFFont) {\n        glyphZeroId = font.numGlyphs - 1;\n      }\n      var mapping = font.getGlyphMapping(properties);\n      var newMapping = adjustMapping(\n        mapping,\n        font.hasGlyphId.bind(font),\n        glyphZeroId\n      );\n      this.toFontChar = newMapping.toFontChar;\n      var numGlyphs = font.numGlyphs;\n\n      function getCharCodes(charCodeToGlyphId, glyphId) {\n        var charCodes = null;\n        for (var charCode in charCodeToGlyphId) {\n          if (glyphId === charCodeToGlyphId[charCode]) {\n            if (!charCodes) {\n              charCodes = [];\n            }\n            charCodes.push(charCode | 0);\n          }\n        }\n        return charCodes;\n      }\n\n      function createCharCode(charCodeToGlyphId, glyphId) {\n        for (var charCode in charCodeToGlyphId) {\n          if (glyphId === charCodeToGlyphId[charCode]) {\n            return charCode | 0;\n          }\n        }\n        newMapping.charCodeToGlyphId[\n          newMapping.nextAvailableFontCharCode\n        ] = glyphId;\n        return newMapping.nextAvailableFontCharCode++;\n      }\n\n      var seacs = font.seacs;\n      if (SEAC_ANALYSIS_ENABLED && seacs && seacs.length) {\n        var matrix = properties.fontMatrix || FONT_IDENTITY_MATRIX;\n        var charset = font.getCharset();\n        var seacMap = Object.create(null);\n        for (var glyphId in seacs) {\n          glyphId |= 0;\n          var seac = seacs[glyphId];\n          var baseGlyphName = StandardEncoding[seac[2]];\n          var accentGlyphName = StandardEncoding[seac[3]];\n          var baseGlyphId = charset.indexOf(baseGlyphName);\n          var accentGlyphId = charset.indexOf(accentGlyphName);\n          if (baseGlyphId < 0 || accentGlyphId < 0) {\n            continue;\n          }\n          var accentOffset = {\n            x: seac[0] * matrix[0] + seac[1] * matrix[2] + matrix[4],\n            y: seac[0] * matrix[1] + seac[1] * matrix[3] + matrix[5],\n          };\n\n          var charCodes = getCharCodes(mapping, glyphId);\n          if (!charCodes) {\n            // There's no point in mapping it if the char code was never mapped\n            // to begin with.\n            continue;\n          }\n          for (let i = 0, ii = charCodes.length; i < ii; i++) {\n            var charCode = charCodes[i];\n            // Find a fontCharCode that maps to the base and accent glyphs.\n            // If one doesn't exists, create it.\n            var charCodeToGlyphId = newMapping.charCodeToGlyphId;\n            var baseFontCharCode = createCharCode(\n              charCodeToGlyphId,\n              baseGlyphId\n            );\n            var accentFontCharCode = createCharCode(\n              charCodeToGlyphId,\n              accentGlyphId\n            );\n            seacMap[charCode] = {\n              baseFontCharCode,\n              accentFontCharCode,\n              accentOffset,\n            };\n          }\n        }\n        properties.seacMap = seacMap;\n      }\n\n      var unitsPerEm = 1 / (properties.fontMatrix || FONT_IDENTITY_MATRIX)[0];\n\n      var builder = new OpenTypeFileBuilder(\"\\x4F\\x54\\x54\\x4F\");\n      // PostScript Font Program\n      builder.addTable(\"CFF \", font.data);\n      // OS/2 and Windows Specific metrics\n      builder.addTable(\n        \"OS/2\",\n        createOS2Table(properties, newMapping.charCodeToGlyphId)\n      );\n      // Character to glyphs mapping\n      builder.addTable(\n        \"cmap\",\n        createCmapTable(newMapping.charCodeToGlyphId, numGlyphs)\n      );\n      // Font header\n      builder.addTable(\n        \"head\",\n        \"\\x00\\x01\\x00\\x00\" + // Version number\n        \"\\x00\\x00\\x10\\x00\" + // fontRevision\n        \"\\x00\\x00\\x00\\x00\" + // checksumAdjustement\n        \"\\x5F\\x0F\\x3C\\xF5\" + // magicNumber\n        \"\\x00\\x00\" + // Flags\n        safeString16(unitsPerEm) + // unitsPerEM\n        \"\\x00\\x00\\x00\\x00\\x9e\\x0b\\x7e\\x27\" + // creation date\n        \"\\x00\\x00\\x00\\x00\\x9e\\x0b\\x7e\\x27\" + // modifification date\n        \"\\x00\\x00\" + // xMin\n        safeString16(properties.descent) + // yMin\n        \"\\x0F\\xFF\" + // xMax\n        safeString16(properties.ascent) + // yMax\n        string16(properties.italicAngle ? 2 : 0) + // macStyle\n        \"\\x00\\x11\" + // lowestRecPPEM\n        \"\\x00\\x00\" + // fontDirectionHint\n        \"\\x00\\x00\" + // indexToLocFormat\n          \"\\x00\\x00\"\n      ); // glyphDataFormat\n\n      // Horizontal header\n      builder.addTable(\n        \"hhea\",\n        \"\\x00\\x01\\x00\\x00\" + // Version number\n        safeString16(properties.ascent) + // Typographic Ascent\n        safeString16(properties.descent) + // Typographic Descent\n        \"\\x00\\x00\" + // Line Gap\n        \"\\xFF\\xFF\" + // advanceWidthMax\n        \"\\x00\\x00\" + // minLeftSidebearing\n        \"\\x00\\x00\" + // minRightSidebearing\n        \"\\x00\\x00\" + // xMaxExtent\n        safeString16(properties.capHeight) + // caretSlopeRise\n        safeString16(Math.tan(properties.italicAngle) * properties.xHeight) + // caretSlopeRun\n        \"\\x00\\x00\" + // caretOffset\n        \"\\x00\\x00\" + // -reserved-\n        \"\\x00\\x00\" + // -reserved-\n        \"\\x00\\x00\" + // -reserved-\n        \"\\x00\\x00\" + // -reserved-\n        \"\\x00\\x00\" + // metricDataFormat\n          string16(numGlyphs)\n      ); // Number of HMetrics\n\n      // Horizontal metrics\n      builder.addTable(\n        \"hmtx\",\n        (function fontFieldsHmtx() {\n          var charstrings = font.charstrings;\n          var cffWidths = font.cff ? font.cff.widths : null;\n          var hmtx = \"\\x00\\x00\\x00\\x00\"; // Fake .notdef\n          for (let i = 1, ii = numGlyphs; i < ii; i++) {\n            var width = 0;\n            if (charstrings) {\n              var charstring = charstrings[i - 1];\n              width = \"width\" in charstring ? charstring.width : 0;\n            } else if (cffWidths) {\n              width = Math.ceil(cffWidths[i] || 0);\n            }\n            hmtx += string16(width) + string16(0);\n          }\n          return hmtx;\n        })()\n      );\n\n      // Maximum profile\n      builder.addTable(\n        \"maxp\",\n        \"\\x00\\x00\\x50\\x00\" + string16(numGlyphs) // Version number\n      ); // Num of glyphs\n\n      // Naming tables\n      builder.addTable(\"name\", createNameTable(fontName));\n\n      // PostScript information\n      builder.addTable(\"post\", createPostTable(properties));\n\n      return builder.toArray();\n    },\n\n    get spaceWidth() {\n      // trying to estimate space character width\n      var possibleSpaceReplacements = [\"space\", \"minus\", \"one\", \"i\", \"I\"];\n      var width;\n      for (var i = 0, ii = possibleSpaceReplacements.length; i < ii; i++) {\n        var glyphName = possibleSpaceReplacements[i];\n        // if possible, getting width by glyph name\n        if (glyphName in this.widths) {\n          width = this.widths[glyphName];\n          break;\n        }\n        var glyphsUnicodeMap = getGlyphsUnicode();\n        var glyphUnicode = glyphsUnicodeMap[glyphName];\n        // finding the charcode via unicodeToCID map\n        var charcode = 0;\n        if (this.composite && this.cMap.contains(glyphUnicode)) {\n          charcode = this.cMap.lookup(glyphUnicode);\n        }\n        // ... via toUnicode map\n        if (!charcode && this.toUnicode) {\n          charcode = this.toUnicode.charCodeOf(glyphUnicode);\n        }\n        // setting it to unicode if negative or undefined\n        if (charcode <= 0) {\n          charcode = glyphUnicode;\n        }\n        // trying to get width via charcode\n        width = this.widths[charcode];\n        if (width) {\n          break; // the non-zero width found\n        }\n      }\n      width = width || this.defaultWidth;\n      return shadow(this, \"spaceWidth\", width);\n    },\n\n    charToGlyph: function Font_charToGlyph(charcode, isSpace) {\n      var fontCharCode, width, operatorListId;\n\n      var widthCode = charcode;\n      if (this.cMap && this.cMap.contains(charcode)) {\n        widthCode = this.cMap.lookup(charcode);\n      }\n      width = this.widths[widthCode];\n      width = isNum(width) ? width : this.defaultWidth;\n      var vmetric = this.vmetrics && this.vmetrics[widthCode];\n\n      let unicode =\n        this.toUnicode.get(charcode) ||\n        this.fallbackToUnicode.get(charcode) ||\n        charcode;\n      if (typeof unicode === \"number\") {\n        unicode = String.fromCharCode(unicode);\n      }\n\n      var isInFont = charcode in this.toFontChar;\n      // First try the toFontChar map, if it's not there then try falling\n      // back to the char code.\n      fontCharCode = this.toFontChar[charcode] || charcode;\n      if (this.missingFile) {\n        const glyphName =\n          this.differences[charcode] || this.defaultEncoding[charcode];\n        if (\n          (glyphName === \".notdef\" || glyphName === \"\") &&\n          this.type === \"Type1\"\n        ) {\n          // .notdef glyphs should be invisible in non-embedded Type1 fonts, so\n          // replace them with spaces.\n          fontCharCode = 0x20;\n        }\n        fontCharCode = mapSpecialUnicodeValues(fontCharCode);\n      }\n\n      if (this.isType3Font) {\n        // Font char code in this case is actually a glyph name.\n        operatorListId = fontCharCode;\n      }\n\n      var accent = null;\n      if (this.seacMap && this.seacMap[charcode]) {\n        isInFont = true;\n        var seac = this.seacMap[charcode];\n        fontCharCode = seac.baseFontCharCode;\n        accent = {\n          fontChar: String.fromCodePoint(seac.accentFontCharCode),\n          offset: seac.accentOffset,\n        };\n      }\n\n      let fontChar = \"\";\n      if (typeof fontCharCode === \"number\") {\n        if (fontCharCode <= 0x10ffff) {\n          fontChar = String.fromCodePoint(fontCharCode);\n        } else {\n          warn(`charToGlyph - invalid fontCharCode: ${fontCharCode}`);\n        }\n      }\n\n      var glyph = this.glyphCache[charcode];\n      if (\n        !glyph ||\n        !glyph.matchesForCache(\n          fontChar,\n          unicode,\n          accent,\n          width,\n          vmetric,\n          operatorListId,\n          isSpace,\n          isInFont\n        )\n      ) {\n        glyph = new Glyph(\n          fontChar,\n          unicode,\n          accent,\n          width,\n          vmetric,\n          operatorListId,\n          isSpace,\n          isInFont\n        );\n        this.glyphCache[charcode] = glyph;\n      }\n      return glyph;\n    },\n\n    charsToGlyphs: function Font_charsToGlyphs(chars) {\n      var charsCache = this.charsCache;\n      var glyphs, glyph, charcode;\n\n      // if we translated this string before, just grab it from the cache\n      if (charsCache) {\n        glyphs = charsCache[chars];\n        if (glyphs) {\n          return glyphs;\n        }\n      }\n\n      // lazily create the translation cache\n      if (!charsCache) {\n        charsCache = this.charsCache = Object.create(null);\n      }\n\n      glyphs = [];\n      var charsCacheKey = chars;\n      var i = 0,\n        ii;\n\n      if (this.cMap) {\n        // composite fonts have multi-byte strings convert the string from\n        // single-byte to multi-byte\n        var c = Object.create(null);\n        while (i < chars.length) {\n          this.cMap.readCharCode(chars, i, c);\n          charcode = c.charcode;\n          var length = c.length;\n          i += length;\n          // Space is char with code 0x20 and length 1 in multiple-byte codes.\n          var isSpace = length === 1 && chars.charCodeAt(i - 1) === 0x20;\n          glyph = this.charToGlyph(charcode, isSpace);\n          glyphs.push(glyph);\n        }\n      } else {\n        for (i = 0, ii = chars.length; i < ii; ++i) {\n          charcode = chars.charCodeAt(i);\n          glyph = this.charToGlyph(charcode, charcode === 0x20);\n          glyphs.push(glyph);\n        }\n      }\n\n      // Enter the translated string into the cache\n      return (charsCache[charsCacheKey] = glyphs);\n    },\n\n    get glyphCacheValues() {\n      return Object.values(this.glyphCache);\n    },\n  };\n\n  return Font;\n})();\n\nvar ErrorFont = (function ErrorFontClosure() {\n  // eslint-disable-next-line no-shadow\n  function ErrorFont(error) {\n    this.error = error;\n    this.loadedName = \"g_font_error\";\n    this.missingFile = true;\n  }\n\n  ErrorFont.prototype = {\n    charsToGlyphs: function ErrorFont_charsToGlyphs() {\n      return [];\n    },\n    exportData(extraProperties = false) {\n      return { error: this.error };\n    },\n  };\n\n  return ErrorFont;\n})();\n\n/**\n * Shared logic for building a char code to glyph id mapping for Type1 and\n * simple CFF fonts. See section 9.6.6.2 of the spec.\n * @param {Object} properties Font properties object.\n * @param {Object} builtInEncoding The encoding contained within the actual font\n * data.\n * @param {Array} glyphNames Array of glyph names where the index is the\n * glyph ID.\n * @returns {Object} A char code to glyph ID map.\n */\nfunction type1FontGlyphMapping(properties, builtInEncoding, glyphNames) {\n  var charCodeToGlyphId = Object.create(null);\n  var glyphId, charCode, baseEncoding;\n  var isSymbolicFont = !!(properties.flags & FontFlags.Symbolic);\n\n  if (properties.baseEncodingName) {\n    // If a valid base encoding name was used, the mapping is initialized with\n    // that.\n    baseEncoding = getEncoding(properties.baseEncodingName);\n    for (charCode = 0; charCode < baseEncoding.length; charCode++) {\n      glyphId = glyphNames.indexOf(baseEncoding[charCode]);\n      if (glyphId >= 0) {\n        charCodeToGlyphId[charCode] = glyphId;\n      } else {\n        charCodeToGlyphId[charCode] = 0; // notdef\n      }\n    }\n  } else if (isSymbolicFont) {\n    // For a symbolic font the encoding should be the fonts built-in encoding.\n    for (charCode in builtInEncoding) {\n      charCodeToGlyphId[charCode] = builtInEncoding[charCode];\n    }\n  } else {\n    // For non-symbolic fonts that don't have a base encoding the standard\n    // encoding should be used.\n    baseEncoding = StandardEncoding;\n    for (charCode = 0; charCode < baseEncoding.length; charCode++) {\n      glyphId = glyphNames.indexOf(baseEncoding[charCode]);\n      if (glyphId >= 0) {\n        charCodeToGlyphId[charCode] = glyphId;\n      } else {\n        charCodeToGlyphId[charCode] = 0; // notdef\n      }\n    }\n  }\n\n  // Lastly, merge in the differences.\n  var differences = properties.differences,\n    glyphsUnicodeMap;\n  if (differences) {\n    for (charCode in differences) {\n      var glyphName = differences[charCode];\n      glyphId = glyphNames.indexOf(glyphName);\n\n      if (glyphId === -1) {\n        if (!glyphsUnicodeMap) {\n          glyphsUnicodeMap = getGlyphsUnicode();\n        }\n        var standardGlyphName = recoverGlyphName(glyphName, glyphsUnicodeMap);\n        if (standardGlyphName !== glyphName) {\n          glyphId = glyphNames.indexOf(standardGlyphName);\n        }\n      }\n      if (glyphId >= 0) {\n        charCodeToGlyphId[charCode] = glyphId;\n      } else {\n        charCodeToGlyphId[charCode] = 0; // notdef\n      }\n    }\n  }\n  return charCodeToGlyphId;\n}\n\n// Type1Font is also a CIDFontType0.\nvar Type1Font = (function Type1FontClosure() {\n  function findBlock(streamBytes, signature, startIndex) {\n    var streamBytesLength = streamBytes.length;\n    var signatureLength = signature.length;\n    var scanLength = streamBytesLength - signatureLength;\n\n    var i = startIndex,\n      j,\n      found = false;\n    while (i < scanLength) {\n      j = 0;\n      while (j < signatureLength && streamBytes[i + j] === signature[j]) {\n        j++;\n      }\n      if (j >= signatureLength) {\n        // `signature` found, skip over whitespace.\n        i += j;\n        while (i < streamBytesLength && isWhiteSpace(streamBytes[i])) {\n          i++;\n        }\n        found = true;\n        break;\n      }\n      i++;\n    }\n    return {\n      found,\n      length: i,\n    };\n  }\n\n  function getHeaderBlock(stream, suggestedLength) {\n    var EEXEC_SIGNATURE = [0x65, 0x65, 0x78, 0x65, 0x63];\n\n    var streamStartPos = stream.pos; // Save the initial stream position.\n    var headerBytes, headerBytesLength, block;\n    try {\n      headerBytes = stream.getBytes(suggestedLength);\n      headerBytesLength = headerBytes.length;\n    } catch (ex) {\n      if (ex instanceof MissingDataException) {\n        throw ex;\n      }\n      // Ignore errors if the `suggestedLength` is huge enough that a Uint8Array\n      // cannot hold the result of `getBytes`, and fallback to simply checking\n      // the entire stream (fixes issue3928.pdf).\n    }\n\n    if (headerBytesLength === suggestedLength) {\n      // Most of the time `suggestedLength` is correct, so to speed things up we\n      // initially only check the last few bytes to see if the header was found.\n      // Otherwise we (potentially) check the entire stream to prevent errors in\n      // `Type1Parser` (fixes issue5686.pdf).\n      block = findBlock(\n        headerBytes,\n        EEXEC_SIGNATURE,\n        suggestedLength - 2 * EEXEC_SIGNATURE.length\n      );\n\n      if (block.found && block.length === suggestedLength) {\n        return {\n          stream: new Stream(headerBytes),\n          length: suggestedLength,\n        };\n      }\n    }\n    warn('Invalid \"Length1\" property in Type1 font -- trying to recover.');\n    stream.pos = streamStartPos; // Reset the stream position.\n\n    var SCAN_BLOCK_LENGTH = 2048;\n    var actualLength;\n    while (true) {\n      var scanBytes = stream.peekBytes(SCAN_BLOCK_LENGTH);\n      block = findBlock(scanBytes, EEXEC_SIGNATURE, 0);\n\n      if (block.length === 0) {\n        break;\n      }\n      stream.pos += block.length; // Update the stream position.\n\n      if (block.found) {\n        actualLength = stream.pos - streamStartPos;\n        break;\n      }\n    }\n    stream.pos = streamStartPos; // Reset the stream position.\n\n    if (actualLength) {\n      return {\n        stream: new Stream(stream.getBytes(actualLength)),\n        length: actualLength,\n      };\n    }\n    warn('Unable to recover \"Length1\" property in Type1 font -- using as is.');\n    return {\n      stream: new Stream(stream.getBytes(suggestedLength)),\n      length: suggestedLength,\n    };\n  }\n\n  function getEexecBlock(stream, suggestedLength) {\n    // We should ideally parse the eexec block to ensure that `suggestedLength`\n    // is correct, so we don't truncate the block data if it's too small.\n    // However, this would also require checking if the fixed-content portion\n    // exists (using the 'Length3' property), and ensuring that it's valid.\n    //\n    // Given that `suggestedLength` almost always is correct, all the validation\n    // would require a great deal of unnecessary parsing for most fonts.\n    // To save time, we always fetch the entire stream instead, which also avoid\n    // issues if `suggestedLength` is huge (see comment in `getHeaderBlock`).\n    //\n    // NOTE: This means that the function can include the fixed-content portion\n    // in the returned eexec block. In practice this does *not* seem to matter,\n    // since `Type1Parser_extractFontProgram` will skip over any non-commands.\n    var eexecBytes = stream.getBytes();\n    return {\n      stream: new Stream(eexecBytes),\n      length: eexecBytes.length,\n    };\n  }\n\n  // eslint-disable-next-line no-shadow\n  function Type1Font(name, file, properties) {\n    // Some bad generators embed pfb file as is, we have to strip 6-byte header.\n    // Also, length1 and length2 might be off by 6 bytes as well.\n    // http://www.math.ubc.ca/~cass/piscript/type1.pdf\n    var PFB_HEADER_SIZE = 6;\n    var headerBlockLength = properties.length1;\n    var eexecBlockLength = properties.length2;\n    var pfbHeader = file.peekBytes(PFB_HEADER_SIZE);\n    var pfbHeaderPresent = pfbHeader[0] === 0x80 && pfbHeader[1] === 0x01;\n    if (pfbHeaderPresent) {\n      file.skip(PFB_HEADER_SIZE);\n      headerBlockLength =\n        (pfbHeader[5] << 24) |\n        (pfbHeader[4] << 16) |\n        (pfbHeader[3] << 8) |\n        pfbHeader[2];\n    }\n\n    // Get the data block containing glyphs and subrs information\n    var headerBlock = getHeaderBlock(file, headerBlockLength);\n    var headerBlockParser = new Type1Parser(\n      headerBlock.stream,\n      false,\n      SEAC_ANALYSIS_ENABLED\n    );\n    headerBlockParser.extractFontHeader(properties);\n\n    if (pfbHeaderPresent) {\n      pfbHeader = file.getBytes(PFB_HEADER_SIZE);\n      eexecBlockLength =\n        (pfbHeader[5] << 24) |\n        (pfbHeader[4] << 16) |\n        (pfbHeader[3] << 8) |\n        pfbHeader[2];\n    }\n\n    // Decrypt the data blocks and retrieve it's content\n    var eexecBlock = getEexecBlock(file, eexecBlockLength);\n    var eexecBlockParser = new Type1Parser(\n      eexecBlock.stream,\n      true,\n      SEAC_ANALYSIS_ENABLED\n    );\n    var data = eexecBlockParser.extractFontProgram(properties);\n    for (const key in data.properties) {\n      properties[key] = data.properties[key];\n    }\n\n    var charstrings = data.charstrings;\n    var type2Charstrings = this.getType2Charstrings(charstrings);\n    var subrs = this.getType2Subrs(data.subrs);\n\n    this.charstrings = charstrings;\n    this.data = this.wrap(\n      name,\n      type2Charstrings,\n      this.charstrings,\n      subrs,\n      properties\n    );\n    this.seacs = this.getSeacs(data.charstrings);\n  }\n\n  Type1Font.prototype = {\n    get numGlyphs() {\n      return this.charstrings.length + 1;\n    },\n\n    getCharset: function Type1Font_getCharset() {\n      var charset = [\".notdef\"];\n      var charstrings = this.charstrings;\n      for (var glyphId = 0; glyphId < charstrings.length; glyphId++) {\n        charset.push(charstrings[glyphId].glyphName);\n      }\n      return charset;\n    },\n\n    getGlyphMapping: function Type1Font_getGlyphMapping(properties) {\n      var charstrings = this.charstrings;\n\n      if (properties.composite) {\n        const charCodeToGlyphId = Object.create(null);\n        // Map CIDs directly to GIDs.\n        for (\n          let glyphId = 0, charstringsLen = charstrings.length;\n          glyphId < charstringsLen;\n          glyphId++\n        ) {\n          const charCode = properties.cMap.charCodeOf(glyphId);\n          // Add 1 because glyph 0 is duplicated.\n          charCodeToGlyphId[charCode] = glyphId + 1;\n        }\n        return charCodeToGlyphId;\n      }\n\n      var glyphNames = [\".notdef\"],\n        glyphId;\n      for (glyphId = 0; glyphId < charstrings.length; glyphId++) {\n        glyphNames.push(charstrings[glyphId].glyphName);\n      }\n      var encoding = properties.builtInEncoding;\n      if (encoding) {\n        var builtInEncoding = Object.create(null);\n        for (var charCode in encoding) {\n          glyphId = glyphNames.indexOf(encoding[charCode]);\n          if (glyphId >= 0) {\n            builtInEncoding[charCode] = glyphId;\n          }\n        }\n      }\n\n      return type1FontGlyphMapping(properties, builtInEncoding, glyphNames);\n    },\n\n    hasGlyphId: function Type1Font_hasGlyphID(id) {\n      if (id < 0 || id >= this.numGlyphs) {\n        return false;\n      }\n      if (id === 0) {\n        // notdef is always defined.\n        return true;\n      }\n      var glyph = this.charstrings[id - 1];\n      return glyph.charstring.length > 0;\n    },\n\n    getSeacs: function Type1Font_getSeacs(charstrings) {\n      var i, ii;\n      var seacMap = [];\n      for (i = 0, ii = charstrings.length; i < ii; i++) {\n        var charstring = charstrings[i];\n        if (charstring.seac) {\n          // Offset by 1 for .notdef\n          seacMap[i + 1] = charstring.seac;\n        }\n      }\n      return seacMap;\n    },\n\n    getType2Charstrings: function Type1Font_getType2Charstrings(\n      type1Charstrings\n    ) {\n      var type2Charstrings = [];\n      for (var i = 0, ii = type1Charstrings.length; i < ii; i++) {\n        type2Charstrings.push(type1Charstrings[i].charstring);\n      }\n      return type2Charstrings;\n    },\n\n    getType2Subrs: function Type1Font_getType2Subrs(type1Subrs) {\n      var bias = 0;\n      var count = type1Subrs.length;\n      if (count < 1133) {\n        bias = 107;\n      } else if (count < 33769) {\n        bias = 1131;\n      } else {\n        bias = 32768;\n      }\n\n      // Add a bunch of empty subrs to deal with the Type2 bias\n      var type2Subrs = [];\n      var i;\n      for (i = 0; i < bias; i++) {\n        type2Subrs.push([0x0b]);\n      }\n\n      for (i = 0; i < count; i++) {\n        type2Subrs.push(type1Subrs[i]);\n      }\n\n      return type2Subrs;\n    },\n\n    wrap: function Type1Font_wrap(\n      name,\n      glyphs,\n      charstrings,\n      subrs,\n      properties\n    ) {\n      var cff = new CFF();\n      cff.header = new CFFHeader(1, 0, 4, 4);\n\n      cff.names = [name];\n\n      var topDict = new CFFTopDict();\n      // CFF strings IDs 0...390 are predefined names, so refering\n      // to entries in our own String INDEX starts at SID 391.\n      topDict.setByName(\"version\", 391);\n      topDict.setByName(\"Notice\", 392);\n      topDict.setByName(\"FullName\", 393);\n      topDict.setByName(\"FamilyName\", 394);\n      topDict.setByName(\"Weight\", 395);\n      topDict.setByName(\"Encoding\", null); // placeholder\n      topDict.setByName(\"FontMatrix\", properties.fontMatrix);\n      topDict.setByName(\"FontBBox\", properties.bbox);\n      topDict.setByName(\"charset\", null); // placeholder\n      topDict.setByName(\"CharStrings\", null); // placeholder\n      topDict.setByName(\"Private\", null); // placeholder\n      cff.topDict = topDict;\n\n      var strings = new CFFStrings();\n      strings.add(\"Version 0.11\"); // Version\n      strings.add(\"See original notice\"); // Notice\n      strings.add(name); // FullName\n      strings.add(name); // FamilyName\n      strings.add(\"Medium\"); // Weight\n      cff.strings = strings;\n\n      cff.globalSubrIndex = new CFFIndex();\n\n      var count = glyphs.length;\n      var charsetArray = [\".notdef\"];\n      var i, ii;\n      for (i = 0; i < count; i++) {\n        const glyphName = charstrings[i].glyphName;\n        const index = CFFStandardStrings.indexOf(glyphName);\n        if (index === -1) {\n          strings.add(glyphName);\n        }\n        charsetArray.push(glyphName);\n      }\n      cff.charset = new CFFCharset(false, 0, charsetArray);\n\n      var charStringsIndex = new CFFIndex();\n      charStringsIndex.add([0x8b, 0x0e]); // .notdef\n      for (i = 0; i < count; i++) {\n        charStringsIndex.add(glyphs[i]);\n      }\n      cff.charStrings = charStringsIndex;\n\n      var privateDict = new CFFPrivateDict();\n      privateDict.setByName(\"Subrs\", null); // placeholder\n      var fields = [\n        \"BlueValues\",\n        \"OtherBlues\",\n        \"FamilyBlues\",\n        \"FamilyOtherBlues\",\n        \"StemSnapH\",\n        \"StemSnapV\",\n        \"BlueShift\",\n        \"BlueFuzz\",\n        \"BlueScale\",\n        \"LanguageGroup\",\n        \"ExpansionFactor\",\n        \"ForceBold\",\n        \"StdHW\",\n        \"StdVW\",\n      ];\n      for (i = 0, ii = fields.length; i < ii; i++) {\n        var field = fields[i];\n        if (!(field in properties.privateData)) {\n          continue;\n        }\n        var value = properties.privateData[field];\n        if (Array.isArray(value)) {\n          // All of the private dictionary array data in CFF must be stored as\n          // \"delta-encoded\" numbers.\n          for (var j = value.length - 1; j > 0; j--) {\n            value[j] -= value[j - 1]; // ... difference from previous value\n          }\n        }\n        privateDict.setByName(field, value);\n      }\n      cff.topDict.privateDict = privateDict;\n\n      var subrIndex = new CFFIndex();\n      for (i = 0, ii = subrs.length; i < ii; i++) {\n        subrIndex.add(subrs[i]);\n      }\n      privateDict.subrsIndex = subrIndex;\n\n      var compiler = new CFFCompiler(cff);\n      return compiler.compile();\n    },\n  };\n\n  return Type1Font;\n})();\n\nvar CFFFont = (function CFFFontClosure() {\n  // eslint-disable-next-line no-shadow\n  function CFFFont(file, properties) {\n    this.properties = properties;\n\n    var parser = new CFFParser(file, properties, SEAC_ANALYSIS_ENABLED);\n    this.cff = parser.parse();\n    this.cff.duplicateFirstGlyph();\n    var compiler = new CFFCompiler(this.cff);\n    this.seacs = this.cff.seacs;\n    try {\n      this.data = compiler.compile();\n    } catch (e) {\n      warn(\"Failed to compile font \" + properties.loadedName);\n      // There may have just been an issue with the compiler, set the data\n      // anyway and hope the font loaded.\n      this.data = file;\n    }\n  }\n\n  CFFFont.prototype = {\n    get numGlyphs() {\n      return this.cff.charStrings.count;\n    },\n    getCharset: function CFFFont_getCharset() {\n      return this.cff.charset.charset;\n    },\n    getGlyphMapping: function CFFFont_getGlyphMapping() {\n      var cff = this.cff;\n      var properties = this.properties;\n      var charsets = cff.charset.charset;\n      var charCodeToGlyphId;\n      var glyphId;\n\n      if (properties.composite) {\n        charCodeToGlyphId = Object.create(null);\n        let charCode;\n        if (cff.isCIDFont) {\n          // If the font is actually a CID font then we should use the charset\n          // to map CIDs to GIDs.\n          for (glyphId = 0; glyphId < charsets.length; glyphId++) {\n            var cid = charsets[glyphId];\n            charCode = properties.cMap.charCodeOf(cid);\n            charCodeToGlyphId[charCode] = glyphId;\n          }\n        } else {\n          // If it is NOT actually a CID font then CIDs should be mapped\n          // directly to GIDs.\n          for (glyphId = 0; glyphId < cff.charStrings.count; glyphId++) {\n            charCode = properties.cMap.charCodeOf(glyphId);\n            charCodeToGlyphId[charCode] = glyphId;\n          }\n        }\n        return charCodeToGlyphId;\n      }\n\n      var encoding = cff.encoding ? cff.encoding.encoding : null;\n      charCodeToGlyphId = type1FontGlyphMapping(properties, encoding, charsets);\n      return charCodeToGlyphId;\n    },\n    hasGlyphId: function CFFFont_hasGlyphID(id) {\n      return this.cff.hasGlyphId(id);\n    },\n  };\n\n  return CFFFont;\n})();\n\nexport {\n  SEAC_ANALYSIS_ENABLED,\n  ErrorFont,\n  Font,\n  FontFlags,\n  ToUnicodeMap,\n  IdentityToUnicodeMap,\n  getFontType,\n};\n", "/* Copyright 2016 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  bytesToString,\n  FormatError,\n  info,\n  stringToBytes,\n  Util,\n  warn,\n} from \"../shared/util.js\";\nimport {\n  ExpertCharset,\n  ExpertSubsetCharset,\n  ISOAdobeCharset,\n} from \"./charsets.js\";\nimport { ExpertEncoding, StandardEncoding } from \"./encodings.js\";\n\n// Maximum subroutine call depth of type 2 chartrings. Matches OTS.\nvar MAX_SUBR_NESTING = 10;\n\n/**\n * The CFF class takes a Type1 file and wrap it into a\n * 'Compact Font Format' which itself embed Type2 charstrings.\n */\n// prettier-ignore\nvar CFFStandardStrings = [\n  \".notdef\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\",\n  \"ampersand\", \"quoteright\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\",\n  \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\",\n  \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\",\n  \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\",\n  \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\",\n  \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\",\n  \"underscore\", \"quoteleft\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\",\n  \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\",\n  \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"exclamdown\", \"cent\",\n  \"sterling\", \"fraction\", \"yen\", \"florin\", \"section\", \"currency\",\n  \"quotesingle\", \"quotedblleft\", \"guillemotleft\", \"guilsinglleft\",\n  \"guilsinglright\", \"fi\", \"fl\", \"endash\", \"dagger\", \"daggerdbl\",\n  \"periodcentered\", \"paragraph\", \"bullet\", \"quotesinglbase\", \"quotedblbase\",\n  \"quotedblright\", \"guillemotright\", \"ellipsis\", \"perthousand\", \"questiondown\",\n  \"grave\", \"acute\", \"circumflex\", \"tilde\", \"macron\", \"breve\", \"dotaccent\",\n  \"dieresis\", \"ring\", \"cedilla\", \"hungarumlaut\", \"ogonek\", \"caron\", \"emdash\",\n  \"AE\", \"ordfeminine\", \"Lslash\", \"Oslash\", \"OE\", \"ordmasculine\", \"ae\",\n  \"dotlessi\", \"lslash\", \"oslash\", \"oe\", \"germandbls\", \"onesuperior\",\n  \"logicalnot\", \"mu\", \"trademark\", \"Eth\", \"onehalf\", \"plusminus\", \"Thorn\",\n  \"onequarter\", \"divide\", \"brokenbar\", \"degree\", \"thorn\", \"threequarters\",\n  \"twosuperior\", \"registered\", \"minus\", \"eth\", \"multiply\", \"threesuperior\",\n  \"copyright\", \"Aacute\", \"Acircumflex\", \"Adieresis\", \"Agrave\", \"Aring\",\n  \"Atilde\", \"Ccedilla\", \"Eacute\", \"Ecircumflex\", \"Edieresis\", \"Egrave\",\n  \"Iacute\", \"Icircumflex\", \"Idieresis\", \"Igrave\", \"Ntilde\", \"Oacute\",\n  \"Ocircumflex\", \"Odieresis\", \"Ograve\", \"Otilde\", \"Scaron\", \"Uacute\",\n  \"Ucircumflex\", \"Udieresis\", \"Ugrave\", \"Yacute\", \"Ydieresis\", \"Zcaron\",\n  \"aacute\", \"acircumflex\", \"adieresis\", \"agrave\", \"aring\", \"atilde\",\n  \"ccedilla\", \"eacute\", \"ecircumflex\", \"edieresis\", \"egrave\", \"iacute\",\n  \"icircumflex\", \"idieresis\", \"igrave\", \"ntilde\", \"oacute\", \"ocircumflex\",\n  \"odieresis\", \"ograve\", \"otilde\", \"scaron\", \"uacute\", \"ucircumflex\",\n  \"udieresis\", \"ugrave\", \"yacute\", \"ydieresis\", \"zcaron\", \"exclamsmall\",\n  \"Hungarumlautsmall\", \"dollaroldstyle\", \"dollarsuperior\", \"ampersandsmall\",\n  \"Acutesmall\", \"parenleftsuperior\", \"parenrightsuperior\", \"twodotenleader\",\n  \"onedotenleader\", \"zerooldstyle\", \"oneoldstyle\", \"twooldstyle\",\n  \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\", \"sixoldstyle\",\n  \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\", \"commasuperior\",\n  \"threequartersemdash\", \"periodsuperior\", \"questionsmall\", \"asuperior\",\n  \"bsuperior\", \"centsuperior\", \"dsuperior\", \"esuperior\", \"isuperior\",\n  \"lsuperior\", \"msuperior\", \"nsuperior\", \"osuperior\", \"rsuperior\", \"ssuperior\",\n  \"tsuperior\", \"ff\", \"ffi\", \"ffl\", \"parenleftinferior\", \"parenrightinferior\",\n  \"Circumflexsmall\", \"hyphensuperior\", \"Gravesmall\", \"Asmall\", \"Bsmall\",\n  \"Csmall\", \"Dsmall\", \"Esmall\", \"Fsmall\", \"Gsmall\", \"Hsmall\", \"Ismall\",\n  \"Jsmall\", \"Ksmall\", \"Lsmall\", \"Msmall\", \"Nsmall\", \"Osmall\", \"Psmall\",\n  \"Qsmall\", \"Rsmall\", \"Ssmall\", \"Tsmall\", \"Usmall\", \"Vsmall\", \"Wsmall\",\n  \"Xsmall\", \"Ysmall\", \"Zsmall\", \"colonmonetary\", \"onefitted\", \"rupiah\",\n  \"Tildesmall\", \"exclamdownsmall\", \"centoldstyle\", \"Lslashsmall\",\n  \"Scaronsmall\", \"Zcaronsmall\", \"Dieresissmall\", \"Brevesmall\", \"Caronsmall\",\n  \"Dotaccentsmall\", \"Macronsmall\", \"figuredash\", \"hypheninferior\",\n  \"Ogoneksmall\", \"Ringsmall\", \"Cedillasmall\", \"questiondownsmall\", \"oneeighth\",\n  \"threeeighths\", \"fiveeighths\", \"seveneighths\", \"onethird\", \"twothirds\",\n  \"zerosuperior\", \"foursuperior\", \"fivesuperior\", \"sixsuperior\",\n  \"sevensuperior\", \"eightsuperior\", \"ninesuperior\", \"zeroinferior\",\n  \"oneinferior\", \"twoinferior\", \"threeinferior\", \"fourinferior\",\n  \"fiveinferior\", \"sixinferior\", \"seveninferior\", \"eightinferior\",\n  \"nineinferior\", \"centinferior\", \"dollarinferior\", \"periodinferior\",\n  \"commainferior\", \"Agravesmall\", \"Aacutesmall\", \"Acircumflexsmall\",\n  \"Atildesmall\", \"Adieresissmall\", \"Aringsmall\", \"AEsmall\", \"Ccedillasmall\",\n  \"Egravesmall\", \"Eacutesmall\", \"Ecircumflexsmall\", \"Edieresissmall\",\n  \"Igravesmall\", \"Iacutesmall\", \"Icircumflexsmall\", \"Idieresissmall\",\n  \"Ethsmall\", \"Ntildesmall\", \"Ogravesmall\", \"Oacutesmall\", \"Ocircumflexsmall\",\n  \"Otildesmall\", \"Odieresissmall\", \"OEsmall\", \"Oslashsmall\", \"Ugravesmall\",\n  \"Uacutesmall\", \"Ucircumflexsmall\", \"Udieresissmall\", \"Yacutesmall\",\n  \"Thornsmall\", \"Ydieresissmall\", \"001.000\", \"001.001\", \"001.002\", \"001.003\",\n  \"Black\", \"Bold\", \"Book\", \"Light\", \"Medium\", \"Regular\", \"Roman\", \"Semibold\"\n];\n\nconst NUM_STANDARD_CFF_STRINGS = 391;\n\nvar CFFParser = (function CFFParserClosure() {\n  var CharstringValidationData = [\n    null,\n    { id: \"hstem\", min: 2, stackClearing: true, stem: true },\n    null,\n    { id: \"vstem\", min: 2, stackClearing: true, stem: true },\n    { id: \"vmoveto\", min: 1, stackClearing: true },\n    { id: \"rlineto\", min: 2, resetStack: true },\n    { id: \"hlineto\", min: 1, resetStack: true },\n    { id: \"vlineto\", min: 1, resetStack: true },\n    { id: \"rrcurveto\", min: 6, resetStack: true },\n    null,\n    { id: \"callsubr\", min: 1, undefStack: true },\n    { id: \"return\", min: 0, undefStack: true },\n    null, // 12\n    null,\n    { id: \"endchar\", min: 0, stackClearing: true },\n    null,\n    null,\n    null,\n    { id: \"hstemhm\", min: 2, stackClearing: true, stem: true },\n    { id: \"hintmask\", min: 0, stackClearing: true },\n    { id: \"cntrmask\", min: 0, stackClearing: true },\n    { id: \"rmoveto\", min: 2, stackClearing: true },\n    { id: \"hmoveto\", min: 1, stackClearing: true },\n    { id: \"vstemhm\", min: 2, stackClearing: true, stem: true },\n    { id: \"rcurveline\", min: 8, resetStack: true },\n    { id: \"rlinecurve\", min: 8, resetStack: true },\n    { id: \"vvcurveto\", min: 4, resetStack: true },\n    { id: \"hhcurveto\", min: 4, resetStack: true },\n    null, // shortint\n    { id: \"callgsubr\", min: 1, undefStack: true },\n    { id: \"vhcurveto\", min: 4, resetStack: true },\n    { id: \"hvcurveto\", min: 4, resetStack: true },\n  ];\n  var CharstringValidationData12 = [\n    null,\n    null,\n    null,\n    { id: \"and\", min: 2, stackDelta: -1 },\n    { id: \"or\", min: 2, stackDelta: -1 },\n    { id: \"not\", min: 1, stackDelta: 0 },\n    null,\n    null,\n    null,\n    { id: \"abs\", min: 1, stackDelta: 0 },\n    {\n      id: \"add\",\n      min: 2,\n      stackDelta: -1,\n      stackFn: function stack_div(stack, index) {\n        stack[index - 2] = stack[index - 2] + stack[index - 1];\n      },\n    },\n    {\n      id: \"sub\",\n      min: 2,\n      stackDelta: -1,\n      stackFn: function stack_div(stack, index) {\n        stack[index - 2] = stack[index - 2] - stack[index - 1];\n      },\n    },\n    {\n      id: \"div\",\n      min: 2,\n      stackDelta: -1,\n      stackFn: function stack_div(stack, index) {\n        stack[index - 2] = stack[index - 2] / stack[index - 1];\n      },\n    },\n    null,\n    {\n      id: \"neg\",\n      min: 1,\n      stackDelta: 0,\n      stackFn: function stack_div(stack, index) {\n        stack[index - 1] = -stack[index - 1];\n      },\n    },\n    { id: \"eq\", min: 2, stackDelta: -1 },\n    null,\n    null,\n    { id: \"drop\", min: 1, stackDelta: -1 },\n    null,\n    { id: \"put\", min: 2, stackDelta: -2 },\n    { id: \"get\", min: 1, stackDelta: 0 },\n    { id: \"ifelse\", min: 4, stackDelta: -3 },\n    { id: \"random\", min: 0, stackDelta: 1 },\n    {\n      id: \"mul\",\n      min: 2,\n      stackDelta: -1,\n      stackFn: function stack_div(stack, index) {\n        stack[index - 2] = stack[index - 2] * stack[index - 1];\n      },\n    },\n    null,\n    { id: \"sqrt\", min: 1, stackDelta: 0 },\n    { id: \"dup\", min: 1, stackDelta: 1 },\n    { id: \"exch\", min: 2, stackDelta: 0 },\n    { id: \"index\", min: 2, stackDelta: 0 },\n    { id: \"roll\", min: 3, stackDelta: -2 },\n    null,\n    null,\n    null,\n    { id: \"hflex\", min: 7, resetStack: true },\n    { id: \"flex\", min: 13, resetStack: true },\n    { id: \"hflex1\", min: 9, resetStack: true },\n    { id: \"flex1\", min: 11, resetStack: true },\n  ];\n\n  // eslint-disable-next-line no-shadow\n  function CFFParser(file, properties, seacAnalysisEnabled) {\n    this.bytes = file.getBytes();\n    this.properties = properties;\n    this.seacAnalysisEnabled = !!seacAnalysisEnabled;\n  }\n  CFFParser.prototype = {\n    parse: function CFFParser_parse() {\n      var properties = this.properties;\n      var cff = new CFF();\n      this.cff = cff;\n\n      // The first five sections must be in order, all the others are reached\n      // via offsets contained in one of the below.\n      var header = this.parseHeader();\n      var nameIndex = this.parseIndex(header.endPos);\n      var topDictIndex = this.parseIndex(nameIndex.endPos);\n      var stringIndex = this.parseIndex(topDictIndex.endPos);\n      var globalSubrIndex = this.parseIndex(stringIndex.endPos);\n\n      var topDictParsed = this.parseDict(topDictIndex.obj.get(0));\n      var topDict = this.createDict(CFFTopDict, topDictParsed, cff.strings);\n\n      cff.header = header.obj;\n      cff.names = this.parseNameIndex(nameIndex.obj);\n      cff.strings = this.parseStringIndex(stringIndex.obj);\n      cff.topDict = topDict;\n      cff.globalSubrIndex = globalSubrIndex.obj;\n\n      this.parsePrivateDict(cff.topDict);\n\n      cff.isCIDFont = topDict.hasName(\"ROS\");\n\n      var charStringOffset = topDict.getByName(\"CharStrings\");\n      var charStringIndex = this.parseIndex(charStringOffset).obj;\n\n      var fontMatrix = topDict.getByName(\"FontMatrix\");\n      if (fontMatrix) {\n        properties.fontMatrix = fontMatrix;\n      }\n\n      var fontBBox = topDict.getByName(\"FontBBox\");\n      if (fontBBox) {\n        // adjusting ascent/descent\n        properties.ascent = Math.max(fontBBox[3], fontBBox[1]);\n        properties.descent = Math.min(fontBBox[1], fontBBox[3]);\n        properties.ascentScaled = true;\n      }\n\n      var charset, encoding;\n      if (cff.isCIDFont) {\n        var fdArrayIndex = this.parseIndex(topDict.getByName(\"FDArray\")).obj;\n        for (var i = 0, ii = fdArrayIndex.count; i < ii; ++i) {\n          var dictRaw = fdArrayIndex.get(i);\n          var fontDict = this.createDict(\n            CFFTopDict,\n            this.parseDict(dictRaw),\n            cff.strings\n          );\n          this.parsePrivateDict(fontDict);\n          cff.fdArray.push(fontDict);\n        }\n        // cid fonts don't have an encoding\n        encoding = null;\n        charset = this.parseCharsets(\n          topDict.getByName(\"charset\"),\n          charStringIndex.count,\n          cff.strings,\n          true\n        );\n        cff.fdSelect = this.parseFDSelect(\n          topDict.getByName(\"FDSelect\"),\n          charStringIndex.count\n        );\n      } else {\n        charset = this.parseCharsets(\n          topDict.getByName(\"charset\"),\n          charStringIndex.count,\n          cff.strings,\n          false\n        );\n        encoding = this.parseEncoding(\n          topDict.getByName(\"Encoding\"),\n          properties,\n          cff.strings,\n          charset.charset\n        );\n      }\n\n      cff.charset = charset;\n      cff.encoding = encoding;\n\n      var charStringsAndSeacs = this.parseCharStrings({\n        charStrings: charStringIndex,\n        localSubrIndex: topDict.privateDict.subrsIndex,\n        globalSubrIndex: globalSubrIndex.obj,\n        fdSelect: cff.fdSelect,\n        fdArray: cff.fdArray,\n        privateDict: topDict.privateDict,\n      });\n      cff.charStrings = charStringsAndSeacs.charStrings;\n      cff.seacs = charStringsAndSeacs.seacs;\n      cff.widths = charStringsAndSeacs.widths;\n\n      return cff;\n    },\n    parseHeader: function CFFParser_parseHeader() {\n      var bytes = this.bytes;\n      var bytesLength = bytes.length;\n      var offset = 0;\n\n      // Prevent an infinite loop, by checking that the offset is within the\n      // bounds of the bytes array. Necessary in empty, or invalid, font files.\n      while (offset < bytesLength && bytes[offset] !== 1) {\n        ++offset;\n      }\n      if (offset >= bytesLength) {\n        throw new FormatError(\"Invalid CFF header\");\n      }\n      if (offset !== 0) {\n        info(\"cff data is shifted\");\n        bytes = bytes.subarray(offset);\n        this.bytes = bytes;\n      }\n      var major = bytes[0];\n      var minor = bytes[1];\n      var hdrSize = bytes[2];\n      var offSize = bytes[3];\n      var header = new CFFHeader(major, minor, hdrSize, offSize);\n      return { obj: header, endPos: hdrSize };\n    },\n    parseDict: function CFFParser_parseDict(dict) {\n      var pos = 0;\n\n      function parseOperand() {\n        var value = dict[pos++];\n        if (value === 30) {\n          return parseFloatOperand();\n        } else if (value === 28) {\n          value = dict[pos++];\n          value = ((value << 24) | (dict[pos++] << 16)) >> 16;\n          return value;\n        } else if (value === 29) {\n          value = dict[pos++];\n          value = (value << 8) | dict[pos++];\n          value = (value << 8) | dict[pos++];\n          value = (value << 8) | dict[pos++];\n          return value;\n        } else if (value >= 32 && value <= 246) {\n          return value - 139;\n        } else if (value >= 247 && value <= 250) {\n          return (value - 247) * 256 + dict[pos++] + 108;\n        } else if (value >= 251 && value <= 254) {\n          return -((value - 251) * 256) - dict[pos++] - 108;\n        }\n        warn('CFFParser_parseDict: \"' + value + '\" is a reserved command.');\n        return NaN;\n      }\n\n      function parseFloatOperand() {\n        var str = \"\";\n        var eof = 15;\n        // prettier-ignore\n        const lookup = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\n                        \"9\", \".\", \"E\", \"E-\", null, \"-\"];\n        var length = dict.length;\n        while (pos < length) {\n          var b = dict[pos++];\n          var b1 = b >> 4;\n          var b2 = b & 15;\n\n          if (b1 === eof) {\n            break;\n          }\n          str += lookup[b1];\n\n          if (b2 === eof) {\n            break;\n          }\n          str += lookup[b2];\n        }\n        return parseFloat(str);\n      }\n\n      var operands = [];\n      var entries = [];\n\n      pos = 0;\n      var end = dict.length;\n      while (pos < end) {\n        var b = dict[pos];\n        if (b <= 21) {\n          if (b === 12) {\n            b = (b << 8) | dict[++pos];\n          }\n          entries.push([b, operands]);\n          operands = [];\n          ++pos;\n        } else {\n          operands.push(parseOperand());\n        }\n      }\n      return entries;\n    },\n    parseIndex: function CFFParser_parseIndex(pos) {\n      var cffIndex = new CFFIndex();\n      var bytes = this.bytes;\n      var count = (bytes[pos++] << 8) | bytes[pos++];\n      var offsets = [];\n      var end = pos;\n      var i, ii;\n\n      if (count !== 0) {\n        var offsetSize = bytes[pos++];\n        // add 1 for offset to determine size of last object\n        var startPos = pos + (count + 1) * offsetSize - 1;\n\n        for (i = 0, ii = count + 1; i < ii; ++i) {\n          var offset = 0;\n          for (var j = 0; j < offsetSize; ++j) {\n            offset <<= 8;\n            offset += bytes[pos++];\n          }\n          offsets.push(startPos + offset);\n        }\n        end = offsets[count];\n      }\n      for (i = 0, ii = offsets.length - 1; i < ii; ++i) {\n        var offsetStart = offsets[i];\n        var offsetEnd = offsets[i + 1];\n        cffIndex.add(bytes.subarray(offsetStart, offsetEnd));\n      }\n      return { obj: cffIndex, endPos: end };\n    },\n    parseNameIndex: function CFFParser_parseNameIndex(index) {\n      var names = [];\n      for (var i = 0, ii = index.count; i < ii; ++i) {\n        var name = index.get(i);\n        names.push(bytesToString(name));\n      }\n      return names;\n    },\n    parseStringIndex: function CFFParser_parseStringIndex(index) {\n      var strings = new CFFStrings();\n      for (var i = 0, ii = index.count; i < ii; ++i) {\n        var data = index.get(i);\n        strings.add(bytesToString(data));\n      }\n      return strings;\n    },\n    createDict: function CFFParser_createDict(Type, dict, strings) {\n      var cffDict = new Type(strings);\n      for (var i = 0, ii = dict.length; i < ii; ++i) {\n        var pair = dict[i];\n        var key = pair[0];\n        var value = pair[1];\n        cffDict.setByKey(key, value);\n      }\n      return cffDict;\n    },\n    parseCharString: function CFFParser_parseCharString(\n      state,\n      data,\n      localSubrIndex,\n      globalSubrIndex\n    ) {\n      if (!data || state.callDepth > MAX_SUBR_NESTING) {\n        return false;\n      }\n      var stackSize = state.stackSize;\n      var stack = state.stack;\n\n      var length = data.length;\n\n      for (var j = 0; j < length; ) {\n        var value = data[j++];\n        var validationCommand = null;\n        if (value === 12) {\n          var q = data[j++];\n          if (q === 0) {\n            // The CFF specification state that the 'dotsection' command\n            // (12, 0) is deprecated and treated as a no-op, but all Type2\n            // charstrings processors should support them. Unfortunately\n            // the font sanitizer don't. As a workaround the sequence (12, 0)\n            // is replaced by a useless (0, hmoveto).\n            data[j - 2] = 139;\n            data[j - 1] = 22;\n            stackSize = 0;\n          } else {\n            validationCommand = CharstringValidationData12[q];\n          }\n        } else if (value === 28) {\n          // number (16 bit)\n          stack[stackSize] = ((data[j] << 24) | (data[j + 1] << 16)) >> 16;\n          j += 2;\n          stackSize++;\n        } else if (value === 14) {\n          if (stackSize >= 4) {\n            stackSize -= 4;\n            if (this.seacAnalysisEnabled) {\n              state.seac = stack.slice(stackSize, stackSize + 4);\n              return false;\n            }\n          }\n          validationCommand = CharstringValidationData[value];\n        } else if (value >= 32 && value <= 246) {\n          // number\n          stack[stackSize] = value - 139;\n          stackSize++;\n        } else if (value >= 247 && value <= 254) {\n          // number (+1 bytes)\n          stack[stackSize] =\n            value < 251\n              ? ((value - 247) << 8) + data[j] + 108\n              : -((value - 251) << 8) - data[j] - 108;\n          j++;\n          stackSize++;\n        } else if (value === 255) {\n          // number (32 bit)\n          stack[stackSize] =\n            ((data[j] << 24) |\n              (data[j + 1] << 16) |\n              (data[j + 2] << 8) |\n              data[j + 3]) /\n            65536;\n          j += 4;\n          stackSize++;\n        } else if (value === 19 || value === 20) {\n          state.hints += stackSize >> 1;\n          // skipping right amount of hints flag data\n          j += (state.hints + 7) >> 3;\n          stackSize %= 2;\n          validationCommand = CharstringValidationData[value];\n        } else if (value === 10 || value === 29) {\n          var subrsIndex;\n          if (value === 10) {\n            subrsIndex = localSubrIndex;\n          } else {\n            subrsIndex = globalSubrIndex;\n          }\n          if (!subrsIndex) {\n            validationCommand = CharstringValidationData[value];\n            warn(\"Missing subrsIndex for \" + validationCommand.id);\n            return false;\n          }\n          var bias = 32768;\n          if (subrsIndex.count < 1240) {\n            bias = 107;\n          } else if (subrsIndex.count < 33900) {\n            bias = 1131;\n          }\n          var subrNumber = stack[--stackSize] + bias;\n          if (\n            subrNumber < 0 ||\n            subrNumber >= subrsIndex.count ||\n            isNaN(subrNumber)\n          ) {\n            validationCommand = CharstringValidationData[value];\n            warn(\"Out of bounds subrIndex for \" + validationCommand.id);\n            return false;\n          }\n          state.stackSize = stackSize;\n          state.callDepth++;\n          var valid = this.parseCharString(\n            state,\n            subrsIndex.get(subrNumber),\n            localSubrIndex,\n            globalSubrIndex\n          );\n          if (!valid) {\n            return false;\n          }\n          state.callDepth--;\n          stackSize = state.stackSize;\n          continue;\n        } else if (value === 11) {\n          state.stackSize = stackSize;\n          return true;\n        } else {\n          validationCommand = CharstringValidationData[value];\n        }\n        if (validationCommand) {\n          if (validationCommand.stem) {\n            state.hints += stackSize >> 1;\n            if (value === 3 || value === 23) {\n              // vstem or vstemhm.\n              state.hasVStems = true;\n            } else if (state.hasVStems && (value === 1 || value === 18)) {\n              // Some browsers don't draw glyphs that specify vstems before\n              // hstems. As a workaround, replace hstem (1) and hstemhm (18)\n              // with a pointless vstem (3) or vstemhm (23).\n              warn(\"CFF stem hints are in wrong order\");\n              data[j - 1] = value === 1 ? 3 : 23;\n            }\n          }\n          if (\"min\" in validationCommand) {\n            if (!state.undefStack && stackSize < validationCommand.min) {\n              warn(\n                \"Not enough parameters for \" +\n                  validationCommand.id +\n                  \"; actual: \" +\n                  stackSize +\n                  \", expected: \" +\n                  validationCommand.min\n              );\n              return false;\n            }\n          }\n          if (state.firstStackClearing && validationCommand.stackClearing) {\n            state.firstStackClearing = false;\n            // the optional character width can be found before the first\n            // stack-clearing command arguments\n            stackSize -= validationCommand.min;\n            if (stackSize >= 2 && validationCommand.stem) {\n              // there are even amount of arguments for stem commands\n              stackSize %= 2;\n            } else if (stackSize > 1) {\n              warn(\"Found too many parameters for stack-clearing command\");\n            }\n            if (stackSize > 0 && stack[stackSize - 1] >= 0) {\n              state.width = stack[stackSize - 1];\n            }\n          }\n          if (\"stackDelta\" in validationCommand) {\n            if (\"stackFn\" in validationCommand) {\n              validationCommand.stackFn(stack, stackSize);\n            }\n            stackSize += validationCommand.stackDelta;\n          } else if (validationCommand.stackClearing) {\n            stackSize = 0;\n          } else if (validationCommand.resetStack) {\n            stackSize = 0;\n            state.undefStack = false;\n          } else if (validationCommand.undefStack) {\n            stackSize = 0;\n            state.undefStack = true;\n            state.firstStackClearing = false;\n          }\n        }\n      }\n      state.stackSize = stackSize;\n      return true;\n    },\n    parseCharStrings({\n      charStrings,\n      localSubrIndex,\n      globalSubrIndex,\n      fdSelect,\n      fdArray,\n      privateDict,\n    }) {\n      var seacs = [];\n      var widths = [];\n      var count = charStrings.count;\n      for (var i = 0; i < count; i++) {\n        var charstring = charStrings.get(i);\n        var state = {\n          callDepth: 0,\n          stackSize: 0,\n          stack: [],\n          undefStack: true,\n          hints: 0,\n          firstStackClearing: true,\n          seac: null,\n          width: null,\n          hasVStems: false,\n        };\n        var valid = true;\n        var localSubrToUse = null;\n        var privateDictToUse = privateDict;\n        if (fdSelect && fdArray.length) {\n          var fdIndex = fdSelect.getFDIndex(i);\n          if (fdIndex === -1) {\n            warn(\"Glyph index is not in fd select.\");\n            valid = false;\n          }\n          if (fdIndex >= fdArray.length) {\n            warn(\"Invalid fd index for glyph index.\");\n            valid = false;\n          }\n          if (valid) {\n            privateDictToUse = fdArray[fdIndex].privateDict;\n            localSubrToUse = privateDictToUse.subrsIndex;\n          }\n        } else if (localSubrIndex) {\n          localSubrToUse = localSubrIndex;\n        }\n        if (valid) {\n          valid = this.parseCharString(\n            state,\n            charstring,\n            localSubrToUse,\n            globalSubrIndex\n          );\n        }\n        if (state.width !== null) {\n          const nominalWidth = privateDictToUse.getByName(\"nominalWidthX\");\n          widths[i] = nominalWidth + state.width;\n        } else {\n          const defaultWidth = privateDictToUse.getByName(\"defaultWidthX\");\n          widths[i] = defaultWidth;\n        }\n        if (state.seac !== null) {\n          seacs[i] = state.seac;\n        }\n        if (!valid) {\n          // resetting invalid charstring to single 'endchar'\n          charStrings.set(i, new Uint8Array([14]));\n        }\n      }\n      return { charStrings, seacs, widths };\n    },\n    emptyPrivateDictionary: function CFFParser_emptyPrivateDictionary(\n      parentDict\n    ) {\n      var privateDict = this.createDict(CFFPrivateDict, [], parentDict.strings);\n      parentDict.setByKey(18, [0, 0]);\n      parentDict.privateDict = privateDict;\n    },\n    parsePrivateDict: function CFFParser_parsePrivateDict(parentDict) {\n      // no private dict, do nothing\n      if (!parentDict.hasName(\"Private\")) {\n        this.emptyPrivateDictionary(parentDict);\n        return;\n      }\n      var privateOffset = parentDict.getByName(\"Private\");\n      // make sure the params are formatted correctly\n      if (!Array.isArray(privateOffset) || privateOffset.length !== 2) {\n        parentDict.removeByName(\"Private\");\n        return;\n      }\n      var size = privateOffset[0];\n      var offset = privateOffset[1];\n      // remove empty dicts or ones that refer to invalid location\n      if (size === 0 || offset >= this.bytes.length) {\n        this.emptyPrivateDictionary(parentDict);\n        return;\n      }\n\n      var privateDictEnd = offset + size;\n      var dictData = this.bytes.subarray(offset, privateDictEnd);\n      var dict = this.parseDict(dictData);\n      var privateDict = this.createDict(\n        CFFPrivateDict,\n        dict,\n        parentDict.strings\n      );\n      parentDict.privateDict = privateDict;\n\n      // Parse the Subrs index also since it's relative to the private dict.\n      if (!privateDict.getByName(\"Subrs\")) {\n        return;\n      }\n      var subrsOffset = privateDict.getByName(\"Subrs\");\n      var relativeOffset = offset + subrsOffset;\n      // Validate the offset.\n      if (subrsOffset === 0 || relativeOffset >= this.bytes.length) {\n        this.emptyPrivateDictionary(parentDict);\n        return;\n      }\n      var subrsIndex = this.parseIndex(relativeOffset);\n      privateDict.subrsIndex = subrsIndex.obj;\n    },\n    parseCharsets: function CFFParser_parseCharsets(pos, length, strings, cid) {\n      if (pos === 0) {\n        return new CFFCharset(\n          true,\n          CFFCharsetPredefinedTypes.ISO_ADOBE,\n          ISOAdobeCharset\n        );\n      } else if (pos === 1) {\n        return new CFFCharset(\n          true,\n          CFFCharsetPredefinedTypes.EXPERT,\n          ExpertCharset\n        );\n      } else if (pos === 2) {\n        return new CFFCharset(\n          true,\n          CFFCharsetPredefinedTypes.EXPERT_SUBSET,\n          ExpertSubsetCharset\n        );\n      }\n\n      var bytes = this.bytes;\n      var start = pos;\n      var format = bytes[pos++];\n      const charset = [cid ? 0 : \".notdef\"];\n      var id, count, i;\n\n      // subtract 1 for the .notdef glyph\n      length -= 1;\n\n      switch (format) {\n        case 0:\n          for (i = 0; i < length; i++) {\n            id = (bytes[pos++] << 8) | bytes[pos++];\n            charset.push(cid ? id : strings.get(id));\n          }\n          break;\n        case 1:\n          while (charset.length <= length) {\n            id = (bytes[pos++] << 8) | bytes[pos++];\n            count = bytes[pos++];\n            for (i = 0; i <= count; i++) {\n              charset.push(cid ? id++ : strings.get(id++));\n            }\n          }\n          break;\n        case 2:\n          while (charset.length <= length) {\n            id = (bytes[pos++] << 8) | bytes[pos++];\n            count = (bytes[pos++] << 8) | bytes[pos++];\n            for (i = 0; i <= count; i++) {\n              charset.push(cid ? id++ : strings.get(id++));\n            }\n          }\n          break;\n        default:\n          throw new FormatError(\"Unknown charset format\");\n      }\n      // Raw won't be needed if we actually compile the charset.\n      var end = pos;\n      var raw = bytes.subarray(start, end);\n\n      return new CFFCharset(false, format, charset, raw);\n    },\n    parseEncoding: function CFFParser_parseEncoding(\n      pos,\n      properties,\n      strings,\n      charset\n    ) {\n      var encoding = Object.create(null);\n      var bytes = this.bytes;\n      var predefined = false;\n      var format, i, ii;\n      var raw = null;\n\n      function readSupplement() {\n        var supplementsCount = bytes[pos++];\n        for (i = 0; i < supplementsCount; i++) {\n          var code = bytes[pos++];\n          var sid = (bytes[pos++] << 8) + (bytes[pos++] & 0xff);\n          encoding[code] = charset.indexOf(strings.get(sid));\n        }\n      }\n\n      if (pos === 0 || pos === 1) {\n        predefined = true;\n        format = pos;\n        var baseEncoding = pos ? ExpertEncoding : StandardEncoding;\n        for (i = 0, ii = charset.length; i < ii; i++) {\n          var index = baseEncoding.indexOf(charset[i]);\n          if (index !== -1) {\n            encoding[index] = i;\n          }\n        }\n      } else {\n        var dataStart = pos;\n        format = bytes[pos++];\n        switch (format & 0x7f) {\n          case 0:\n            var glyphsCount = bytes[pos++];\n            for (i = 1; i <= glyphsCount; i++) {\n              encoding[bytes[pos++]] = i;\n            }\n            break;\n\n          case 1:\n            var rangesCount = bytes[pos++];\n            var gid = 1;\n            for (i = 0; i < rangesCount; i++) {\n              var start = bytes[pos++];\n              var left = bytes[pos++];\n              for (var j = start; j <= start + left; j++) {\n                encoding[j] = gid++;\n              }\n            }\n            break;\n\n          default:\n            throw new FormatError(`Unknown encoding format: ${format} in CFF`);\n        }\n        var dataEnd = pos;\n        if (format & 0x80) {\n          // hasSupplement\n          // The font sanitizer does not support CFF encoding with a\n          // supplement, since the encoding is not really used to map\n          // between gid to glyph, let's overwrite what is declared in\n          // the top dictionary to let the sanitizer think the font use\n          // StandardEncoding, that's a lie but that's ok.\n          bytes[dataStart] &= 0x7f;\n          readSupplement();\n        }\n        raw = bytes.subarray(dataStart, dataEnd);\n      }\n      format = format & 0x7f;\n      return new CFFEncoding(predefined, format, encoding, raw);\n    },\n    parseFDSelect: function CFFParser_parseFDSelect(pos, length) {\n      var bytes = this.bytes;\n      var format = bytes[pos++];\n      var fdSelect = [];\n      var i;\n\n      switch (format) {\n        case 0:\n          for (i = 0; i < length; ++i) {\n            var id = bytes[pos++];\n            fdSelect.push(id);\n          }\n          break;\n        case 3:\n          var rangesCount = (bytes[pos++] << 8) | bytes[pos++];\n          for (i = 0; i < rangesCount; ++i) {\n            var first = (bytes[pos++] << 8) | bytes[pos++];\n            if (i === 0 && first !== 0) {\n              warn(\n                \"parseFDSelect: The first range must have a first GID of 0\" +\n                  \" -- trying to recover.\"\n              );\n              first = 0;\n            }\n            var fdIndex = bytes[pos++];\n            var next = (bytes[pos] << 8) | bytes[pos + 1];\n            for (var j = first; j < next; ++j) {\n              fdSelect.push(fdIndex);\n            }\n          }\n          // Advance past the sentinel(next).\n          pos += 2;\n          break;\n        default:\n          throw new FormatError(`parseFDSelect: Unknown format \"${format}\".`);\n      }\n      if (fdSelect.length !== length) {\n        throw new FormatError(\"parseFDSelect: Invalid font data.\");\n      }\n\n      return new CFFFDSelect(format, fdSelect);\n    },\n  };\n  return CFFParser;\n})();\n\n// Compact Font Format\nvar CFF = (function CFFClosure() {\n  // eslint-disable-next-line no-shadow\n  function CFF() {\n    this.header = null;\n    this.names = [];\n    this.topDict = null;\n    this.strings = new CFFStrings();\n    this.globalSubrIndex = null;\n\n    // The following could really be per font, but since we only have one font\n    // store them here.\n    this.encoding = null;\n    this.charset = null;\n    this.charStrings = null;\n    this.fdArray = [];\n    this.fdSelect = null;\n\n    this.isCIDFont = false;\n  }\n  CFF.prototype = {\n    duplicateFirstGlyph: function CFF_duplicateFirstGlyph() {\n      // Browsers will not display a glyph at position 0. Typically glyph 0 is\n      // notdef, but a number of fonts put a valid glyph there so it must be\n      // duplicated and appended.\n      if (this.charStrings.count >= 65535) {\n        warn(\"Not enough space in charstrings to duplicate first glyph.\");\n        return;\n      }\n      var glyphZero = this.charStrings.get(0);\n      this.charStrings.add(glyphZero);\n      if (this.isCIDFont) {\n        this.fdSelect.fdSelect.push(this.fdSelect.fdSelect[0]);\n      }\n    },\n    hasGlyphId: function CFF_hasGlyphID(id) {\n      if (id < 0 || id >= this.charStrings.count) {\n        return false;\n      }\n      var glyph = this.charStrings.get(id);\n      return glyph.length > 0;\n    },\n  };\n\n  return CFF;\n})();\n\nvar CFFHeader = (function CFFHeaderClosure() {\n  // eslint-disable-next-line no-shadow\n  function CFFHeader(major, minor, hdrSize, offSize) {\n    this.major = major;\n    this.minor = minor;\n    this.hdrSize = hdrSize;\n    this.offSize = offSize;\n  }\n  return CFFHeader;\n})();\n\nvar CFFStrings = (function CFFStringsClosure() {\n  // eslint-disable-next-line no-shadow\n  function CFFStrings() {\n    this.strings = [];\n  }\n  CFFStrings.prototype = {\n    get: function CFFStrings_get(index) {\n      if (index >= 0 && index <= NUM_STANDARD_CFF_STRINGS - 1) {\n        return CFFStandardStrings[index];\n      }\n      if (index - NUM_STANDARD_CFF_STRINGS <= this.strings.length) {\n        return this.strings[index - NUM_STANDARD_CFF_STRINGS];\n      }\n      return CFFStandardStrings[0];\n    },\n    getSID: function CFFStrings_getSID(str) {\n      let index = CFFStandardStrings.indexOf(str);\n      if (index !== -1) {\n        return index;\n      }\n      index = this.strings.indexOf(str);\n      if (index !== -1) {\n        return index + NUM_STANDARD_CFF_STRINGS;\n      }\n      return -1;\n    },\n    add: function CFFStrings_add(value) {\n      this.strings.push(value);\n    },\n    get count() {\n      return this.strings.length;\n    },\n  };\n  return CFFStrings;\n})();\n\nvar CFFIndex = (function CFFIndexClosure() {\n  // eslint-disable-next-line no-shadow\n  function CFFIndex() {\n    this.objects = [];\n    this.length = 0;\n  }\n  CFFIndex.prototype = {\n    add: function CFFIndex_add(data) {\n      this.length += data.length;\n      this.objects.push(data);\n    },\n    set: function CFFIndex_set(index, data) {\n      this.length += data.length - this.objects[index].length;\n      this.objects[index] = data;\n    },\n    get: function CFFIndex_get(index) {\n      return this.objects[index];\n    },\n    get count() {\n      return this.objects.length;\n    },\n  };\n  return CFFIndex;\n})();\n\nvar CFFDict = (function CFFDictClosure() {\n  // eslint-disable-next-line no-shadow\n  function CFFDict(tables, strings) {\n    this.keyToNameMap = tables.keyToNameMap;\n    this.nameToKeyMap = tables.nameToKeyMap;\n    this.defaults = tables.defaults;\n    this.types = tables.types;\n    this.opcodes = tables.opcodes;\n    this.order = tables.order;\n    this.strings = strings;\n    this.values = Object.create(null);\n  }\n  CFFDict.prototype = {\n    // value should always be an array\n    setByKey: function CFFDict_setByKey(key, value) {\n      if (!(key in this.keyToNameMap)) {\n        return false;\n      }\n      var valueLength = value.length;\n      // ignore empty values\n      if (valueLength === 0) {\n        return true;\n      }\n      // Ignore invalid values (fixes bug1068432.pdf and bug1308536.pdf).\n      for (var i = 0; i < valueLength; i++) {\n        if (isNaN(value[i])) {\n          warn('Invalid CFFDict value: \"' + value + '\" for key \"' + key + '\".');\n          return true;\n        }\n      }\n      var type = this.types[key];\n      // remove the array wrapping these types of values\n      if (type === \"num\" || type === \"sid\" || type === \"offset\") {\n        value = value[0];\n      }\n      this.values[key] = value;\n      return true;\n    },\n    setByName: function CFFDict_setByName(name, value) {\n      if (!(name in this.nameToKeyMap)) {\n        throw new FormatError(`Invalid dictionary name \"${name}\"`);\n      }\n      this.values[this.nameToKeyMap[name]] = value;\n    },\n    hasName: function CFFDict_hasName(name) {\n      return this.nameToKeyMap[name] in this.values;\n    },\n    getByName: function CFFDict_getByName(name) {\n      if (!(name in this.nameToKeyMap)) {\n        throw new FormatError(`Invalid dictionary name ${name}\"`);\n      }\n      var key = this.nameToKeyMap[name];\n      if (!(key in this.values)) {\n        return this.defaults[key];\n      }\n      return this.values[key];\n    },\n    removeByName: function CFFDict_removeByName(name) {\n      delete this.values[this.nameToKeyMap[name]];\n    },\n  };\n  CFFDict.createTables = function CFFDict_createTables(layout) {\n    var tables = {\n      keyToNameMap: {},\n      nameToKeyMap: {},\n      defaults: {},\n      types: {},\n      opcodes: {},\n      order: [],\n    };\n    for (var i = 0, ii = layout.length; i < ii; ++i) {\n      var entry = layout[i];\n      var key = Array.isArray(entry[0])\n        ? (entry[0][0] << 8) + entry[0][1]\n        : entry[0];\n      tables.keyToNameMap[key] = entry[1];\n      tables.nameToKeyMap[entry[1]] = key;\n      tables.types[key] = entry[2];\n      tables.defaults[key] = entry[3];\n      tables.opcodes[key] = Array.isArray(entry[0]) ? entry[0] : [entry[0]];\n      tables.order.push(key);\n    }\n    return tables;\n  };\n  return CFFDict;\n})();\n\nvar CFFTopDict = (function CFFTopDictClosure() {\n  var layout = [\n    [[12, 30], \"ROS\", [\"sid\", \"sid\", \"num\"], null],\n    [[12, 20], \"SyntheticBase\", \"num\", null],\n    [0, \"version\", \"sid\", null],\n    [1, \"Notice\", \"sid\", null],\n    [[12, 0], \"Copyright\", \"sid\", null],\n    [2, \"FullName\", \"sid\", null],\n    [3, \"FamilyName\", \"sid\", null],\n    [4, \"Weight\", \"sid\", null],\n    [[12, 1], \"isFixedPitch\", \"num\", 0],\n    [[12, 2], \"ItalicAngle\", \"num\", 0],\n    [[12, 3], \"UnderlinePosition\", \"num\", -100],\n    [[12, 4], \"UnderlineThickness\", \"num\", 50],\n    [[12, 5], \"PaintType\", \"num\", 0],\n    [[12, 6], \"CharstringType\", \"num\", 2],\n    // prettier-ignore\n    [[12, 7], \"FontMatrix\", [\"num\", \"num\", \"num\", \"num\", \"num\", \"num\"],\n                            [0.001, 0, 0, 0.001, 0, 0]],\n    [13, \"UniqueID\", \"num\", null],\n    [5, \"FontBBox\", [\"num\", \"num\", \"num\", \"num\"], [0, 0, 0, 0]],\n    [[12, 8], \"StrokeWidth\", \"num\", 0],\n    [14, \"XUID\", \"array\", null],\n    [15, \"charset\", \"offset\", 0],\n    [16, \"Encoding\", \"offset\", 0],\n    [17, \"CharStrings\", \"offset\", 0],\n    [18, \"Private\", [\"offset\", \"offset\"], null],\n    [[12, 21], \"PostScript\", \"sid\", null],\n    [[12, 22], \"BaseFontName\", \"sid\", null],\n    [[12, 23], \"BaseFontBlend\", \"delta\", null],\n    [[12, 31], \"CIDFontVersion\", \"num\", 0],\n    [[12, 32], \"CIDFontRevision\", \"num\", 0],\n    [[12, 33], \"CIDFontType\", \"num\", 0],\n    [[12, 34], \"CIDCount\", \"num\", 8720],\n    [[12, 35], \"UIDBase\", \"num\", null],\n    // XXX: CID Fonts on DirectWrite 6.1 only seem to work if FDSelect comes\n    // before FDArray.\n    [[12, 37], \"FDSelect\", \"offset\", null],\n    [[12, 36], \"FDArray\", \"offset\", null],\n    [[12, 38], \"FontName\", \"sid\", null],\n  ];\n  var tables = null;\n\n  // eslint-disable-next-line no-shadow\n  function CFFTopDict(strings) {\n    if (tables === null) {\n      tables = CFFDict.createTables(layout);\n    }\n    CFFDict.call(this, tables, strings);\n    this.privateDict = null;\n  }\n  CFFTopDict.prototype = Object.create(CFFDict.prototype);\n  return CFFTopDict;\n})();\n\nvar CFFPrivateDict = (function CFFPrivateDictClosure() {\n  var layout = [\n    [6, \"BlueValues\", \"delta\", null],\n    [7, \"OtherBlues\", \"delta\", null],\n    [8, \"FamilyBlues\", \"delta\", null],\n    [9, \"FamilyOtherBlues\", \"delta\", null],\n    [[12, 9], \"BlueScale\", \"num\", 0.039625],\n    [[12, 10], \"BlueShift\", \"num\", 7],\n    [[12, 11], \"BlueFuzz\", \"num\", 1],\n    [10, \"StdHW\", \"num\", null],\n    [11, \"StdVW\", \"num\", null],\n    [[12, 12], \"StemSnapH\", \"delta\", null],\n    [[12, 13], \"StemSnapV\", \"delta\", null],\n    [[12, 14], \"ForceBold\", \"num\", 0],\n    [[12, 17], \"LanguageGroup\", \"num\", 0],\n    [[12, 18], \"ExpansionFactor\", \"num\", 0.06],\n    [[12, 19], \"initialRandomSeed\", \"num\", 0],\n    [20, \"defaultWidthX\", \"num\", 0],\n    [21, \"nominalWidthX\", \"num\", 0],\n    [19, \"Subrs\", \"offset\", null],\n  ];\n  var tables = null;\n\n  // eslint-disable-next-line no-shadow\n  function CFFPrivateDict(strings) {\n    if (tables === null) {\n      tables = CFFDict.createTables(layout);\n    }\n    CFFDict.call(this, tables, strings);\n    this.subrsIndex = null;\n  }\n  CFFPrivateDict.prototype = Object.create(CFFDict.prototype);\n  return CFFPrivateDict;\n})();\n\nvar CFFCharsetPredefinedTypes = {\n  ISO_ADOBE: 0,\n  EXPERT: 1,\n  EXPERT_SUBSET: 2,\n};\nvar CFFCharset = (function CFFCharsetClosure() {\n  // eslint-disable-next-line no-shadow\n  function CFFCharset(predefined, format, charset, raw) {\n    this.predefined = predefined;\n    this.format = format;\n    this.charset = charset;\n    this.raw = raw;\n  }\n  return CFFCharset;\n})();\n\nvar CFFEncoding = (function CFFEncodingClosure() {\n  // eslint-disable-next-line no-shadow\n  function CFFEncoding(predefined, format, encoding, raw) {\n    this.predefined = predefined;\n    this.format = format;\n    this.encoding = encoding;\n    this.raw = raw;\n  }\n  return CFFEncoding;\n})();\n\nvar CFFFDSelect = (function CFFFDSelectClosure() {\n  // eslint-disable-next-line no-shadow\n  function CFFFDSelect(format, fdSelect) {\n    this.format = format;\n    this.fdSelect = fdSelect;\n  }\n  CFFFDSelect.prototype = {\n    getFDIndex: function CFFFDSelect_get(glyphIndex) {\n      if (glyphIndex < 0 || glyphIndex >= this.fdSelect.length) {\n        return -1;\n      }\n      return this.fdSelect[glyphIndex];\n    },\n  };\n  return CFFFDSelect;\n})();\n\n// Helper class to keep track of where an offset is within the data and helps\n// filling in that offset once it's known.\nvar CFFOffsetTracker = (function CFFOffsetTrackerClosure() {\n  // eslint-disable-next-line no-shadow\n  function CFFOffsetTracker() {\n    this.offsets = Object.create(null);\n  }\n  CFFOffsetTracker.prototype = {\n    isTracking: function CFFOffsetTracker_isTracking(key) {\n      return key in this.offsets;\n    },\n    track: function CFFOffsetTracker_track(key, location) {\n      if (key in this.offsets) {\n        throw new FormatError(`Already tracking location of ${key}`);\n      }\n      this.offsets[key] = location;\n    },\n    offset: function CFFOffsetTracker_offset(value) {\n      for (var key in this.offsets) {\n        this.offsets[key] += value;\n      }\n    },\n    setEntryLocation: function CFFOffsetTracker_setEntryLocation(\n      key,\n      values,\n      output\n    ) {\n      if (!(key in this.offsets)) {\n        throw new FormatError(`Not tracking location of ${key}`);\n      }\n      var data = output.data;\n      var dataOffset = this.offsets[key];\n      var size = 5;\n      for (var i = 0, ii = values.length; i < ii; ++i) {\n        var offset0 = i * size + dataOffset;\n        var offset1 = offset0 + 1;\n        var offset2 = offset0 + 2;\n        var offset3 = offset0 + 3;\n        var offset4 = offset0 + 4;\n        // It's easy to screw up offsets so perform this sanity check.\n        if (\n          data[offset0] !== 0x1d ||\n          data[offset1] !== 0 ||\n          data[offset2] !== 0 ||\n          data[offset3] !== 0 ||\n          data[offset4] !== 0\n        ) {\n          throw new FormatError(\"writing to an offset that is not empty\");\n        }\n        var value = values[i];\n        data[offset0] = 0x1d;\n        data[offset1] = (value >> 24) & 0xff;\n        data[offset2] = (value >> 16) & 0xff;\n        data[offset3] = (value >> 8) & 0xff;\n        data[offset4] = value & 0xff;\n      }\n    },\n  };\n  return CFFOffsetTracker;\n})();\n\n// Takes a CFF and converts it to the binary representation.\nvar CFFCompiler = (function CFFCompilerClosure() {\n  // eslint-disable-next-line no-shadow\n  function CFFCompiler(cff) {\n    this.cff = cff;\n  }\n  CFFCompiler.prototype = {\n    compile: function CFFCompiler_compile() {\n      var cff = this.cff;\n      var output = {\n        data: [],\n        length: 0,\n        add: function CFFCompiler_add(data) {\n          this.data = this.data.concat(data);\n          this.length = this.data.length;\n        },\n      };\n\n      // Compile the five entries that must be in order.\n      var header = this.compileHeader(cff.header);\n      output.add(header);\n\n      var nameIndex = this.compileNameIndex(cff.names);\n      output.add(nameIndex);\n\n      if (cff.isCIDFont) {\n        // The spec is unclear on how font matrices should relate to each other\n        // when there is one in the main top dict and the sub top dicts.\n        // Windows handles this differently than linux and osx so we have to\n        // normalize to work on all.\n        // Rules based off of some mailing list discussions:\n        // - If main font has a matrix and subfont doesn't, use the main matrix.\n        // - If no main font matrix and there is a subfont matrix, use the\n        //   subfont matrix.\n        // - If both have matrices, concat together.\n        // - If neither have matrices, use default.\n        // To make this work on all platforms we move the top matrix into each\n        // sub top dict and concat if necessary.\n        if (cff.topDict.hasName(\"FontMatrix\")) {\n          var base = cff.topDict.getByName(\"FontMatrix\");\n          cff.topDict.removeByName(\"FontMatrix\");\n          for (var i = 0, ii = cff.fdArray.length; i < ii; i++) {\n            var subDict = cff.fdArray[i];\n            var matrix = base.slice(0);\n            if (subDict.hasName(\"FontMatrix\")) {\n              matrix = Util.transform(matrix, subDict.getByName(\"FontMatrix\"));\n            }\n            subDict.setByName(\"FontMatrix\", matrix);\n          }\n        }\n      }\n\n      cff.topDict.setByName(\"charset\", 0);\n      var compiled = this.compileTopDicts(\n        [cff.topDict],\n        output.length,\n        cff.isCIDFont\n      );\n      output.add(compiled.output);\n      var topDictTracker = compiled.trackers[0];\n\n      var stringIndex = this.compileStringIndex(cff.strings.strings);\n      output.add(stringIndex);\n\n      var globalSubrIndex = this.compileIndex(cff.globalSubrIndex);\n      output.add(globalSubrIndex);\n\n      // Now start on the other entries that have no specific order.\n      if (cff.encoding && cff.topDict.hasName(\"Encoding\")) {\n        if (cff.encoding.predefined) {\n          topDictTracker.setEntryLocation(\n            \"Encoding\",\n            [cff.encoding.format],\n            output\n          );\n        } else {\n          var encoding = this.compileEncoding(cff.encoding);\n          topDictTracker.setEntryLocation(\"Encoding\", [output.length], output);\n          output.add(encoding);\n        }\n      }\n      var charset = this.compileCharset(\n        cff.charset,\n        cff.charStrings.count,\n        cff.strings,\n        cff.isCIDFont\n      );\n      topDictTracker.setEntryLocation(\"charset\", [output.length], output);\n      output.add(charset);\n\n      var charStrings = this.compileCharStrings(cff.charStrings);\n      topDictTracker.setEntryLocation(\"CharStrings\", [output.length], output);\n      output.add(charStrings);\n\n      if (cff.isCIDFont) {\n        // For some reason FDSelect must be in front of FDArray on windows. OSX\n        // and linux don't seem to care.\n        topDictTracker.setEntryLocation(\"FDSelect\", [output.length], output);\n        var fdSelect = this.compileFDSelect(cff.fdSelect);\n        output.add(fdSelect);\n        // It is unclear if the sub font dictionary can have CID related\n        // dictionary keys, but the sanitizer doesn't like them so remove them.\n        compiled = this.compileTopDicts(cff.fdArray, output.length, true);\n        topDictTracker.setEntryLocation(\"FDArray\", [output.length], output);\n        output.add(compiled.output);\n        var fontDictTrackers = compiled.trackers;\n\n        this.compilePrivateDicts(cff.fdArray, fontDictTrackers, output);\n      }\n\n      this.compilePrivateDicts([cff.topDict], [topDictTracker], output);\n\n      // If the font data ends with INDEX whose object data is zero-length,\n      // the sanitizer will bail out. Add a dummy byte to avoid that.\n      output.add([0]);\n\n      return output.data;\n    },\n    encodeNumber: function CFFCompiler_encodeNumber(value) {\n      if (parseFloat(value) === parseInt(value, 10) && !isNaN(value)) {\n        // isInt\n        return this.encodeInteger(value);\n      }\n      return this.encodeFloat(value);\n    },\n    encodeFloat: function CFFCompiler_encodeFloat(num) {\n      var value = num.toString();\n\n      // rounding inaccurate doubles\n      var m = /\\.(\\d*?)(?:9{5,20}|0{5,20})\\d{0,2}(?:e(.+)|$)/.exec(value);\n      if (m) {\n        var epsilon = parseFloat(\"1e\" + ((m[2] ? +m[2] : 0) + m[1].length));\n        value = (Math.round(num * epsilon) / epsilon).toString();\n      }\n\n      var nibbles = \"\";\n      var i, ii;\n      for (i = 0, ii = value.length; i < ii; ++i) {\n        var a = value[i];\n        if (a === \"e\") {\n          nibbles += value[++i] === \"-\" ? \"c\" : \"b\";\n        } else if (a === \".\") {\n          nibbles += \"a\";\n        } else if (a === \"-\") {\n          nibbles += \"e\";\n        } else {\n          nibbles += a;\n        }\n      }\n      nibbles += nibbles.length & 1 ? \"f\" : \"ff\";\n      var out = [30];\n      for (i = 0, ii = nibbles.length; i < ii; i += 2) {\n        out.push(parseInt(nibbles.substring(i, i + 2), 16));\n      }\n      return out;\n    },\n    encodeInteger: function CFFCompiler_encodeInteger(value) {\n      var code;\n      if (value >= -107 && value <= 107) {\n        code = [value + 139];\n      } else if (value >= 108 && value <= 1131) {\n        value = value - 108;\n        code = [(value >> 8) + 247, value & 0xff];\n      } else if (value >= -1131 && value <= -108) {\n        value = -value - 108;\n        code = [(value >> 8) + 251, value & 0xff];\n      } else if (value >= -32768 && value <= 32767) {\n        code = [0x1c, (value >> 8) & 0xff, value & 0xff];\n      } else {\n        code = [\n          0x1d,\n          (value >> 24) & 0xff,\n          (value >> 16) & 0xff,\n          (value >> 8) & 0xff,\n          value & 0xff,\n        ];\n      }\n      return code;\n    },\n    compileHeader: function CFFCompiler_compileHeader(header) {\n      return [header.major, header.minor, header.hdrSize, header.offSize];\n    },\n    compileNameIndex: function CFFCompiler_compileNameIndex(names) {\n      var nameIndex = new CFFIndex();\n      for (var i = 0, ii = names.length; i < ii; ++i) {\n        var name = names[i];\n        // OTS doesn't allow names to be over 127 characters.\n        var length = Math.min(name.length, 127);\n        var sanitizedName = new Array(length);\n        for (var j = 0; j < length; j++) {\n          // OTS requires chars to be between a range and not certain other\n          // chars.\n          var char = name[j];\n          if (\n            char < \"!\" ||\n            char > \"~\" ||\n            char === \"[\" ||\n            char === \"]\" ||\n            char === \"(\" ||\n            char === \")\" ||\n            char === \"{\" ||\n            char === \"}\" ||\n            char === \"<\" ||\n            char === \">\" ||\n            char === \"/\" ||\n            char === \"%\"\n          ) {\n            char = \"_\";\n          }\n          sanitizedName[j] = char;\n        }\n        sanitizedName = sanitizedName.join(\"\");\n\n        if (sanitizedName === \"\") {\n          sanitizedName = \"Bad_Font_Name\";\n        }\n        nameIndex.add(stringToBytes(sanitizedName));\n      }\n      return this.compileIndex(nameIndex);\n    },\n    compileTopDicts: function CFFCompiler_compileTopDicts(\n      dicts,\n      length,\n      removeCidKeys\n    ) {\n      var fontDictTrackers = [];\n      var fdArrayIndex = new CFFIndex();\n      for (var i = 0, ii = dicts.length; i < ii; ++i) {\n        var fontDict = dicts[i];\n        if (removeCidKeys) {\n          fontDict.removeByName(\"CIDFontVersion\");\n          fontDict.removeByName(\"CIDFontRevision\");\n          fontDict.removeByName(\"CIDFontType\");\n          fontDict.removeByName(\"CIDCount\");\n          fontDict.removeByName(\"UIDBase\");\n        }\n        var fontDictTracker = new CFFOffsetTracker();\n        var fontDictData = this.compileDict(fontDict, fontDictTracker);\n        fontDictTrackers.push(fontDictTracker);\n        fdArrayIndex.add(fontDictData);\n        fontDictTracker.offset(length);\n      }\n      fdArrayIndex = this.compileIndex(fdArrayIndex, fontDictTrackers);\n      return {\n        trackers: fontDictTrackers,\n        output: fdArrayIndex,\n      };\n    },\n    compilePrivateDicts: function CFFCompiler_compilePrivateDicts(\n      dicts,\n      trackers,\n      output\n    ) {\n      for (var i = 0, ii = dicts.length; i < ii; ++i) {\n        var fontDict = dicts[i];\n        var privateDict = fontDict.privateDict;\n        if (!privateDict || !fontDict.hasName(\"Private\")) {\n          throw new FormatError(\"There must be a private dictionary.\");\n        }\n        var privateDictTracker = new CFFOffsetTracker();\n        var privateDictData = this.compileDict(privateDict, privateDictTracker);\n\n        var outputLength = output.length;\n        privateDictTracker.offset(outputLength);\n        if (!privateDictData.length) {\n          // The private dictionary was empty, set the output length to zero to\n          // ensure the offset length isn't out of bounds in the eyes of the\n          // sanitizer.\n          outputLength = 0;\n        }\n\n        trackers[i].setEntryLocation(\n          \"Private\",\n          [privateDictData.length, outputLength],\n          output\n        );\n        output.add(privateDictData);\n\n        if (privateDict.subrsIndex && privateDict.hasName(\"Subrs\")) {\n          var subrs = this.compileIndex(privateDict.subrsIndex);\n          privateDictTracker.setEntryLocation(\n            \"Subrs\",\n            [privateDictData.length],\n            output\n          );\n          output.add(subrs);\n        }\n      }\n    },\n    compileDict: function CFFCompiler_compileDict(dict, offsetTracker) {\n      var out = [];\n      // The dictionary keys must be in a certain order.\n      var order = dict.order;\n      for (var i = 0; i < order.length; ++i) {\n        var key = order[i];\n        if (!(key in dict.values)) {\n          continue;\n        }\n        var values = dict.values[key];\n        var types = dict.types[key];\n        if (!Array.isArray(types)) {\n          types = [types];\n        }\n        if (!Array.isArray(values)) {\n          values = [values];\n        }\n\n        // Remove any empty dict values.\n        if (values.length === 0) {\n          continue;\n        }\n\n        for (var j = 0, jj = types.length; j < jj; ++j) {\n          var type = types[j];\n          var value = values[j];\n          switch (type) {\n            case \"num\":\n            case \"sid\":\n              out = out.concat(this.encodeNumber(value));\n              break;\n            case \"offset\":\n              // For offsets we just insert a 32bit integer so we don't have to\n              // deal with figuring out the length of the offset when it gets\n              // replaced later on by the compiler.\n              var name = dict.keyToNameMap[key];\n              // Some offsets have the offset and the length, so just record the\n              // position of the first one.\n              if (!offsetTracker.isTracking(name)) {\n                offsetTracker.track(name, out.length);\n              }\n              out = out.concat([0x1d, 0, 0, 0, 0]);\n              break;\n            case \"array\":\n            case \"delta\":\n              out = out.concat(this.encodeNumber(value));\n              for (var k = 1, kk = values.length; k < kk; ++k) {\n                out = out.concat(this.encodeNumber(values[k]));\n              }\n              break;\n            default:\n              throw new FormatError(`Unknown data type of ${type}`);\n          }\n        }\n        out = out.concat(dict.opcodes[key]);\n      }\n      return out;\n    },\n    compileStringIndex: function CFFCompiler_compileStringIndex(strings) {\n      var stringIndex = new CFFIndex();\n      for (var i = 0, ii = strings.length; i < ii; ++i) {\n        stringIndex.add(stringToBytes(strings[i]));\n      }\n      return this.compileIndex(stringIndex);\n    },\n    compileGlobalSubrIndex: function CFFCompiler_compileGlobalSubrIndex() {\n      var globalSubrIndex = this.cff.globalSubrIndex;\n      this.out.writeByteArray(this.compileIndex(globalSubrIndex));\n    },\n    compileCharStrings: function CFFCompiler_compileCharStrings(charStrings) {\n      var charStringsIndex = new CFFIndex();\n      for (var i = 0; i < charStrings.count; i++) {\n        var glyph = charStrings.get(i);\n        // If the CharString outline is empty, replace it with .notdef to\n        // prevent OTS from rejecting the font (fixes bug1252420.pdf).\n        if (glyph.length === 0) {\n          charStringsIndex.add(new Uint8Array([0x8b, 0x0e]));\n          continue;\n        }\n        charStringsIndex.add(glyph);\n      }\n      return this.compileIndex(charStringsIndex);\n    },\n    compileCharset: function CFFCompiler_compileCharset(\n      charset,\n      numGlyphs,\n      strings,\n      isCIDFont\n    ) {\n      // Freetype requires the number of charset strings be correct and MacOS\n      // requires a valid mapping for printing.\n      let out;\n      const numGlyphsLessNotDef = numGlyphs - 1;\n      if (isCIDFont) {\n        // In a CID font, the charset is a mapping of CIDs not SIDs so just\n        // create an identity mapping.\n        out = new Uint8Array([\n          2, // format\n          0, // first CID upper byte\n          0, // first CID lower byte\n          (numGlyphsLessNotDef >> 8) & 0xff,\n          numGlyphsLessNotDef & 0xff,\n        ]);\n      } else {\n        const length = 1 + numGlyphsLessNotDef * 2;\n        out = new Uint8Array(length);\n        out[0] = 0; // format 0\n        let charsetIndex = 0;\n        const numCharsets = charset.charset.length;\n        let warned = false;\n        for (let i = 1; i < out.length; i += 2) {\n          let sid = 0;\n          if (charsetIndex < numCharsets) {\n            const name = charset.charset[charsetIndex++];\n            sid = strings.getSID(name);\n            if (sid === -1) {\n              sid = 0;\n              if (!warned) {\n                warned = true;\n                warn(`Couldn't find ${name} in CFF strings`);\n              }\n            }\n          }\n          out[i] = (sid >> 8) & 0xff;\n          out[i + 1] = sid & 0xff;\n        }\n      }\n      return this.compileTypedArray(out);\n    },\n    compileEncoding: function CFFCompiler_compileEncoding(encoding) {\n      return this.compileTypedArray(encoding.raw);\n    },\n    compileFDSelect: function CFFCompiler_compileFDSelect(fdSelect) {\n      const format = fdSelect.format;\n      let out, i;\n      switch (format) {\n        case 0:\n          out = new Uint8Array(1 + fdSelect.fdSelect.length);\n          out[0] = format;\n          for (i = 0; i < fdSelect.fdSelect.length; i++) {\n            out[i + 1] = fdSelect.fdSelect[i];\n          }\n          break;\n        case 3:\n          const start = 0;\n          let lastFD = fdSelect.fdSelect[0];\n          const ranges = [\n            format,\n            0, // nRanges place holder\n            0, // nRanges place holder\n            (start >> 8) & 0xff,\n            start & 0xff,\n            lastFD,\n          ];\n          for (i = 1; i < fdSelect.fdSelect.length; i++) {\n            const currentFD = fdSelect.fdSelect[i];\n            if (currentFD !== lastFD) {\n              ranges.push((i >> 8) & 0xff, i & 0xff, currentFD);\n              lastFD = currentFD;\n            }\n          }\n          // 3 bytes are pushed for every range and there are 3 header bytes.\n          const numRanges = (ranges.length - 3) / 3;\n          ranges[1] = (numRanges >> 8) & 0xff;\n          ranges[2] = numRanges & 0xff;\n          // sentinel\n          ranges.push((i >> 8) & 0xff, i & 0xff);\n          out = new Uint8Array(ranges);\n          break;\n      }\n      return this.compileTypedArray(out);\n    },\n    compileTypedArray: function CFFCompiler_compileTypedArray(data) {\n      var out = [];\n      for (var i = 0, ii = data.length; i < ii; ++i) {\n        out[i] = data[i];\n      }\n      return out;\n    },\n    compileIndex: function CFFCompiler_compileIndex(index, trackers) {\n      trackers = trackers || [];\n      var objects = index.objects;\n      // First 2 bytes contains the number of objects contained into this index\n      var count = objects.length;\n\n      // If there is no object, just create an index. This technically\n      // should just be [0, 0] but OTS has an issue with that.\n      if (count === 0) {\n        return [0, 0, 0];\n      }\n\n      var data = [(count >> 8) & 0xff, count & 0xff];\n\n      var lastOffset = 1,\n        i;\n      for (i = 0; i < count; ++i) {\n        lastOffset += objects[i].length;\n      }\n\n      var offsetSize;\n      if (lastOffset < 0x100) {\n        offsetSize = 1;\n      } else if (lastOffset < 0x10000) {\n        offsetSize = 2;\n      } else if (lastOffset < 0x1000000) {\n        offsetSize = 3;\n      } else {\n        offsetSize = 4;\n      }\n\n      // Next byte contains the offset size use to reference object in the file\n      data.push(offsetSize);\n\n      // Add another offset after this one because we need a new offset\n      var relativeOffset = 1;\n      for (i = 0; i < count + 1; i++) {\n        if (offsetSize === 1) {\n          data.push(relativeOffset & 0xff);\n        } else if (offsetSize === 2) {\n          data.push((relativeOffset >> 8) & 0xff, relativeOffset & 0xff);\n        } else if (offsetSize === 3) {\n          data.push(\n            (relativeOffset >> 16) & 0xff,\n            (relativeOffset >> 8) & 0xff,\n            relativeOffset & 0xff\n          );\n        } else {\n          data.push(\n            (relativeOffset >>> 24) & 0xff,\n            (relativeOffset >> 16) & 0xff,\n            (relativeOffset >> 8) & 0xff,\n            relativeOffset & 0xff\n          );\n        }\n\n        if (objects[i]) {\n          relativeOffset += objects[i].length;\n        }\n      }\n\n      for (i = 0; i < count; i++) {\n        // Notify the tracker where the object will be offset in the data.\n        if (trackers[i]) {\n          trackers[i].offset(data.length);\n        }\n        for (var j = 0, jj = objects[i].length; j < jj; j++) {\n          data.push(objects[i][j]);\n        }\n      }\n      return data;\n    },\n  };\n  return CFFCompiler;\n})();\n\nexport {\n  CFFStandardStrings,\n  CFFParser,\n  CFF,\n  CFFHeader,\n  CFFStrings,\n  CFFIndex,\n  CFFCharset,\n  CFFTopDict,\n  CFFPrivateDict,\n  CFFCompiler,\n  CFFFDSelect,\n};\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint no-var: error */\n\n// prettier-ignore\nconst ISOAdobeCharset = [\n  \".notdef\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\",\n  \"percent\", \"ampersand\", \"quoteright\", \"parenleft\", \"parenright\",\n  \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\",\n  \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\n  \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\",\n  \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\",\n  \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\",\n  \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\",\n  \"quoteleft\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\",\n  \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\",\n  \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"exclamdown\", \"cent\",\n  \"sterling\", \"fraction\", \"yen\", \"florin\", \"section\", \"currency\",\n  \"quotesingle\", \"quotedblleft\", \"guillemotleft\", \"guilsinglleft\",\n  \"guilsinglright\", \"fi\", \"fl\", \"endash\", \"dagger\", \"daggerdbl\",\n  \"periodcentered\", \"paragraph\", \"bullet\", \"quotesinglbase\",\n  \"quotedblbase\", \"quotedblright\", \"guillemotright\", \"ellipsis\",\n  \"perthousand\", \"questiondown\", \"grave\", \"acute\", \"circumflex\", \"tilde\",\n  \"macron\", \"breve\", \"dotaccent\", \"dieresis\", \"ring\", \"cedilla\",\n  \"hungarumlaut\", \"ogonek\", \"caron\", \"emdash\", \"AE\", \"ordfeminine\",\n  \"Lslash\", \"Oslash\", \"OE\", \"ordmasculine\", \"ae\", \"dotlessi\", \"lslash\",\n  \"oslash\", \"oe\", \"germandbls\", \"onesuperior\", \"logicalnot\", \"mu\",\n  \"trademark\", \"Eth\", \"onehalf\", \"plusminus\", \"Thorn\", \"onequarter\",\n  \"divide\", \"brokenbar\", \"degree\", \"thorn\", \"threequarters\", \"twosuperior\",\n  \"registered\", \"minus\", \"eth\", \"multiply\", \"threesuperior\", \"copyright\",\n  \"Aacute\", \"Acircumflex\", \"Adieresis\", \"Agrave\", \"Aring\", \"Atilde\",\n  \"Ccedilla\", \"Eacute\", \"Ecircumflex\", \"Edieresis\", \"Egrave\", \"Iacute\",\n  \"Icircumflex\", \"Idieresis\", \"Igrave\", \"Ntilde\", \"Oacute\", \"Ocircumflex\",\n  \"Odieresis\", \"Ograve\", \"Otilde\", \"Scaron\", \"Uacute\", \"Ucircumflex\",\n  \"Udieresis\", \"Ugrave\", \"Yacute\", \"Ydieresis\", \"Zcaron\", \"aacute\",\n  \"acircumflex\", \"adieresis\", \"agrave\", \"aring\", \"atilde\", \"ccedilla\",\n  \"eacute\", \"ecircumflex\", \"edieresis\", \"egrave\", \"iacute\", \"icircumflex\",\n  \"idieresis\", \"igrave\", \"ntilde\", \"oacute\", \"ocircumflex\", \"odieresis\",\n  \"ograve\", \"otilde\", \"scaron\", \"uacute\", \"ucircumflex\", \"udieresis\",\n  \"ugrave\", \"yacute\", \"ydieresis\", \"zcaron\"\n];\n\n// prettier-ignore\nconst ExpertCharset = [\n  \".notdef\", \"space\", \"exclamsmall\", \"Hungarumlautsmall\", \"dollaroldstyle\",\n  \"dollarsuperior\", \"ampersandsmall\", \"Acutesmall\", \"parenleftsuperior\",\n  \"parenrightsuperior\", \"twodotenleader\", \"onedotenleader\", \"comma\",\n  \"hyphen\", \"period\", \"fraction\", \"zerooldstyle\", \"oneoldstyle\",\n  \"twooldstyle\", \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\",\n  \"sixoldstyle\", \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\",\n  \"colon\", \"semicolon\", \"commasuperior\", \"threequartersemdash\",\n  \"periodsuperior\", \"questionsmall\", \"asuperior\", \"bsuperior\",\n  \"centsuperior\", \"dsuperior\", \"esuperior\", \"isuperior\", \"lsuperior\",\n  \"msuperior\", \"nsuperior\", \"osuperior\", \"rsuperior\", \"ssuperior\",\n  \"tsuperior\", \"ff\", \"fi\", \"fl\", \"ffi\", \"ffl\", \"parenleftinferior\",\n  \"parenrightinferior\", \"Circumflexsmall\", \"hyphensuperior\", \"Gravesmall\",\n  \"Asmall\", \"Bsmall\", \"Csmall\", \"Dsmall\", \"Esmall\", \"Fsmall\", \"Gsmall\",\n  \"Hsmall\", \"Ismall\", \"Jsmall\", \"Ksmall\", \"Lsmall\", \"Msmall\", \"Nsmall\",\n  \"Osmall\", \"Psmall\", \"Qsmall\", \"Rsmall\", \"Ssmall\", \"Tsmall\", \"Usmall\",\n  \"Vsmall\", \"Wsmall\", \"Xsmall\", \"Ysmall\", \"Zsmall\", \"colonmonetary\",\n  \"onefitted\", \"rupiah\", \"Tildesmall\", \"exclamdownsmall\", \"centoldstyle\",\n  \"Lslashsmall\", \"Scaronsmall\", \"Zcaronsmall\", \"Dieresissmall\",\n  \"Brevesmall\", \"Caronsmall\", \"Dotaccentsmall\", \"Macronsmall\",\n  \"figuredash\", \"hypheninferior\", \"Ogoneksmall\", \"Ringsmall\",\n  \"Cedillasmall\", \"onequarter\", \"onehalf\", \"threequarters\",\n  \"questiondownsmall\", \"oneeighth\", \"threeeighths\", \"fiveeighths\",\n  \"seveneighths\", \"onethird\", \"twothirds\", \"zerosuperior\", \"onesuperior\",\n  \"twosuperior\", \"threesuperior\", \"foursuperior\", \"fivesuperior\",\n  \"sixsuperior\", \"sevensuperior\", \"eightsuperior\", \"ninesuperior\",\n  \"zeroinferior\", \"oneinferior\", \"twoinferior\", \"threeinferior\",\n  \"fourinferior\", \"fiveinferior\", \"sixinferior\", \"seveninferior\",\n  \"eightinferior\", \"nineinferior\", \"centinferior\", \"dollarinferior\",\n  \"periodinferior\", \"commainferior\", \"Agravesmall\", \"Aacutesmall\",\n  \"Acircumflexsmall\", \"Atildesmall\", \"Adieresissmall\", \"Aringsmall\",\n  \"AEsmall\", \"Ccedillasmall\", \"Egravesmall\", \"Eacutesmall\",\n  \"Ecircumflexsmall\", \"Edieresissmall\", \"Igravesmall\", \"Iacutesmall\",\n  \"Icircumflexsmall\", \"Idieresissmall\", \"Ethsmall\", \"Ntildesmall\",\n  \"Ogravesmall\", \"Oacutesmall\", \"Ocircumflexsmall\", \"Otildesmall\",\n  \"Odieresissmall\", \"OEsmall\", \"Oslashsmall\", \"Ugravesmall\", \"Uacutesmall\",\n  \"Ucircumflexsmall\", \"Udieresissmall\", \"Yacutesmall\", \"Thornsmall\",\n  \"Ydieresissmall\"\n];\n\n// prettier-ignore\nconst ExpertSubsetCharset = [\n  \".notdef\", \"space\", \"dollaroldstyle\", \"dollarsuperior\",\n  \"parenleftsuperior\", \"parenrightsuperior\", \"twodotenleader\",\n  \"onedotenleader\", \"comma\", \"hyphen\", \"period\", \"fraction\",\n  \"zerooldstyle\", \"oneoldstyle\", \"twooldstyle\", \"threeoldstyle\",\n  \"fouroldstyle\", \"fiveoldstyle\", \"sixoldstyle\", \"sevenoldstyle\",\n  \"eightoldstyle\", \"nineoldstyle\", \"colon\", \"semicolon\", \"commasuperior\",\n  \"threequartersemdash\", \"periodsuperior\", \"asuperior\", \"bsuperior\",\n  \"centsuperior\", \"dsuperior\", \"esuperior\", \"isuperior\", \"lsuperior\",\n  \"msuperior\", \"nsuperior\", \"osuperior\", \"rsuperior\", \"ssuperior\",\n  \"tsuperior\", \"ff\", \"fi\", \"fl\", \"ffi\", \"ffl\", \"parenleftinferior\",\n  \"parenrightinferior\", \"hyphensuperior\", \"colonmonetary\", \"onefitted\",\n  \"rupiah\", \"centoldstyle\", \"figuredash\", \"hypheninferior\", \"onequarter\",\n  \"onehalf\", \"threequarters\", \"oneeighth\", \"threeeighths\", \"fiveeighths\",\n  \"seveneighths\", \"onethird\", \"twothirds\", \"zerosuperior\", \"onesuperior\",\n  \"twosuperior\", \"threesuperior\", \"foursuperior\", \"fivesuperior\",\n  \"sixsuperior\", \"sevensuperior\", \"eightsuperior\", \"ninesuperior\",\n  \"zeroinferior\", \"oneinferior\", \"twoinferior\", \"threeinferior\",\n  \"fourinferior\", \"fiveinferior\", \"sixinferior\", \"seveninferior\",\n  \"eightinferior\", \"nineinferior\", \"centinferior\", \"dollarinferior\",\n  \"periodinferior\", \"commainferior\"\n];\n\nexport { ISOAdobeCharset, ExpertCharset, ExpertSubsetCharset };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// prettier-ignore\nconst ExpertEncoding = [\n  \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\n  \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\n  \"space\", \"exclamsmall\", \"Hungarumlautsmall\", \"\", \"dollaroldstyle\",\n  \"dollarsuperior\", \"ampersandsmall\", \"Acutesmall\", \"parenleftsuperior\",\n  \"parenrightsuperior\", \"twodotenleader\", \"onedotenleader\", \"comma\",\n  \"hyphen\", \"period\", \"fraction\", \"zerooldstyle\", \"oneoldstyle\",\n  \"twooldstyle\", \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\",\n  \"sixoldstyle\", \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\", \"colon\",\n  \"semicolon\", \"commasuperior\", \"threequartersemdash\", \"periodsuperior\",\n  \"questionsmall\", \"\", \"asuperior\", \"bsuperior\", \"centsuperior\", \"dsuperior\",\n  \"esuperior\", \"\", \"\", \"\", \"isuperior\", \"\", \"\", \"lsuperior\", \"msuperior\",\n  \"nsuperior\", \"osuperior\", \"\", \"\", \"rsuperior\", \"ssuperior\", \"tsuperior\",\n  \"\", \"ff\", \"fi\", \"fl\", \"ffi\", \"ffl\", \"parenleftinferior\", \"\",\n  \"parenrightinferior\", \"Circumflexsmall\", \"hyphensuperior\", \"Gravesmall\",\n  \"Asmall\", \"Bsmall\", \"Csmall\", \"Dsmall\", \"Esmall\", \"Fsmall\", \"Gsmall\",\n  \"Hsmall\", \"Ismall\", \"Jsmall\", \"Ksmall\", \"Lsmall\", \"Msmall\", \"Nsmall\",\n  \"Osmall\", \"Psmall\", \"Qsmall\", \"Rsmall\", \"Ssmall\", \"Tsmall\", \"Usmall\",\n  \"Vsmall\", \"Wsmall\", \"Xsmall\", \"Ysmall\", \"Zsmall\", \"colonmonetary\",\n  \"onefitted\", \"rupiah\", \"Tildesmall\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\n  \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\n  \"\", \"\", \"\", \"\", \"\", \"\", \"exclamdownsmall\", \"centoldstyle\", \"Lslashsmall\",\n  \"\", \"\", \"Scaronsmall\", \"Zcaronsmall\", \"Dieresissmall\", \"Brevesmall\",\n  \"Caronsmall\", \"\", \"Dotaccentsmall\", \"\", \"\", \"Macronsmall\", \"\", \"\",\n  \"figuredash\", \"hypheninferior\", \"\", \"\", \"Ogoneksmall\", \"Ringsmall\",\n  \"Cedillasmall\", \"\", \"\", \"\", \"onequarter\", \"onehalf\", \"threequarters\",\n  \"questiondownsmall\", \"oneeighth\", \"threeeighths\", \"fiveeighths\",\n  \"seveneighths\", \"onethird\", \"twothirds\", \"\", \"\", \"zerosuperior\",\n  \"onesuperior\", \"twosuperior\", \"threesuperior\", \"foursuperior\",\n  \"fivesuperior\", \"sixsuperior\", \"sevensuperior\", \"eightsuperior\",\n  \"ninesuperior\", \"zeroinferior\", \"oneinferior\", \"twoinferior\",\n  \"threeinferior\", \"fourinferior\", \"fiveinferior\", \"sixinferior\",\n  \"seveninferior\", \"eightinferior\", \"nineinferior\", \"centinferior\",\n  \"dollarinferior\", \"periodinferior\", \"commainferior\", \"Agravesmall\",\n  \"Aacutesmall\", \"Acircumflexsmall\", \"Atildesmall\", \"Adieresissmall\",\n  \"Aringsmall\", \"AEsmall\", \"Ccedillasmall\", \"Egravesmall\", \"Eacutesmall\",\n  \"Ecircumflexsmall\", \"Edieresissmall\", \"Igravesmall\", \"Iacutesmall\",\n  \"Icircumflexsmall\", \"Idieresissmall\", \"Ethsmall\", \"Ntildesmall\",\n  \"Ogravesmall\", \"Oacutesmall\", \"Ocircumflexsmall\", \"Otildesmall\",\n  \"Odieresissmall\", \"OEsmall\", \"Oslashsmall\", \"Ugravesmall\", \"Uacutesmall\",\n  \"Ucircumflexsmall\", \"Udieresissmall\", \"Yacutesmall\", \"Thornsmall\",\n  \"Ydieresissmall\"];\n\n// prettier-ignore\nconst MacExpertEncoding = [\n  \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\n  \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\n  \"space\", \"exclamsmall\", \"Hungarumlautsmall\", \"centoldstyle\",\n  \"dollaroldstyle\", \"dollarsuperior\", \"ampersandsmall\", \"Acutesmall\",\n  \"parenleftsuperior\", \"parenrightsuperior\", \"twodotenleader\",\n  \"onedotenleader\", \"comma\", \"hyphen\", \"period\", \"fraction\", \"zerooldstyle\",\n  \"oneoldstyle\", \"twooldstyle\", \"threeoldstyle\", \"fouroldstyle\",\n  \"fiveoldstyle\", \"sixoldstyle\", \"sevenoldstyle\", \"eightoldstyle\",\n  \"nineoldstyle\", \"colon\", \"semicolon\", \"\", \"threequartersemdash\", \"\",\n  \"questionsmall\", \"\", \"\", \"\", \"\", \"Ethsmall\", \"\", \"\", \"onequarter\",\n  \"onehalf\", \"threequarters\", \"oneeighth\", \"threeeighths\", \"fiveeighths\",\n  \"seveneighths\", \"onethird\", \"twothirds\", \"\", \"\", \"\", \"\", \"\", \"\", \"ff\",\n  \"fi\", \"fl\", \"ffi\", \"ffl\", \"parenleftinferior\", \"\", \"parenrightinferior\",\n  \"Circumflexsmall\", \"hypheninferior\", \"Gravesmall\", \"Asmall\", \"Bsmall\",\n  \"Csmall\", \"Dsmall\", \"Esmall\", \"Fsmall\", \"Gsmall\", \"Hsmall\", \"Ismall\",\n  \"Jsmall\", \"Ksmall\", \"Lsmall\", \"Msmall\", \"Nsmall\", \"Osmall\", \"Psmall\",\n  \"Qsmall\", \"Rsmall\", \"Ssmall\", \"Tsmall\", \"Usmall\", \"Vsmall\", \"Wsmall\",\n  \"Xsmall\", \"Ysmall\", \"Zsmall\", \"colonmonetary\", \"onefitted\", \"rupiah\",\n  \"Tildesmall\", \"\", \"\", \"asuperior\", \"centsuperior\", \"\", \"\", \"\", \"\",\n  \"Aacutesmall\", \"Agravesmall\", \"Acircumflexsmall\", \"Adieresissmall\",\n  \"Atildesmall\", \"Aringsmall\", \"Ccedillasmall\", \"Eacutesmall\", \"Egravesmall\",\n  \"Ecircumflexsmall\", \"Edieresissmall\", \"Iacutesmall\", \"Igravesmall\",\n  \"Icircumflexsmall\", \"Idieresissmall\", \"Ntildesmall\", \"Oacutesmall\",\n  \"Ogravesmall\", \"Ocircumflexsmall\", \"Odieresissmall\", \"Otildesmall\",\n  \"Uacutesmall\", \"Ugravesmall\", \"Ucircumflexsmall\", \"Udieresissmall\", \"\",\n  \"eightsuperior\", \"fourinferior\", \"threeinferior\", \"sixinferior\",\n  \"eightinferior\", \"seveninferior\", \"Scaronsmall\", \"\", \"centinferior\",\n  \"twoinferior\", \"\", \"Dieresissmall\", \"\", \"Caronsmall\", \"osuperior\",\n  \"fiveinferior\", \"\", \"commainferior\", \"periodinferior\", \"Yacutesmall\", \"\",\n  \"dollarinferior\", \"\", \"\", \"Thornsmall\", \"\", \"nineinferior\", \"zeroinferior\",\n  \"Zcaronsmall\", \"AEsmall\", \"Oslashsmall\", \"questiondownsmall\",\n  \"oneinferior\", \"Lslashsmall\", \"\", \"\", \"\", \"\", \"\", \"\", \"Cedillasmall\", \"\",\n  \"\", \"\", \"\", \"\", \"OEsmall\", \"figuredash\", \"hyphensuperior\", \"\", \"\", \"\", \"\",\n  \"exclamdownsmall\", \"\", \"Ydieresissmall\", \"\", \"onesuperior\", \"twosuperior\",\n  \"threesuperior\", \"foursuperior\", \"fivesuperior\", \"sixsuperior\",\n  \"sevensuperior\", \"ninesuperior\", \"zerosuperior\", \"\", \"esuperior\",\n  \"rsuperior\", \"tsuperior\", \"\", \"\", \"isuperior\", \"ssuperior\", \"dsuperior\",\n  \"\", \"\", \"\", \"\", \"\", \"lsuperior\", \"Ogoneksmall\", \"Brevesmall\",\n  \"Macronsmall\", \"bsuperior\", \"nsuperior\", \"msuperior\", \"commasuperior\",\n  \"periodsuperior\", \"Dotaccentsmall\", \"Ringsmall\", \"\", \"\", \"\", \"\"];\n\n// prettier-ignore\nconst MacRomanEncoding = [\n  \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\n  \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\n  \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\",\n  \"ampersand\", \"quotesingle\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\",\n  \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\",\n  \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\",\n  \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\",\n  \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\",\n  \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\",\n  \"asciicircum\", \"underscore\", \"grave\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\",\n  \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\",\n  \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"\",\n  \"Adieresis\", \"Aring\", \"Ccedilla\", \"Eacute\", \"Ntilde\", \"Odieresis\",\n  \"Udieresis\", \"aacute\", \"agrave\", \"acircumflex\", \"adieresis\", \"atilde\",\n  \"aring\", \"ccedilla\", \"eacute\", \"egrave\", \"ecircumflex\", \"edieresis\",\n  \"iacute\", \"igrave\", \"icircumflex\", \"idieresis\", \"ntilde\", \"oacute\",\n  \"ograve\", \"ocircumflex\", \"odieresis\", \"otilde\", \"uacute\", \"ugrave\",\n  \"ucircumflex\", \"udieresis\", \"dagger\", \"degree\", \"cent\", \"sterling\",\n  \"section\", \"bullet\", \"paragraph\", \"germandbls\", \"registered\", \"copyright\",\n  \"trademark\", \"acute\", \"dieresis\", \"notequal\", \"AE\", \"Oslash\", \"infinity\",\n  \"plusminus\", \"lessequal\", \"greaterequal\", \"yen\", \"mu\", \"partialdiff\",\n  \"summation\", \"product\", \"pi\", \"integral\", \"ordfeminine\", \"ordmasculine\",\n  \"Omega\", \"ae\", \"oslash\", \"questiondown\", \"exclamdown\", \"logicalnot\",\n  \"radical\", \"florin\", \"approxequal\", \"Delta\", \"guillemotleft\",\n  \"guillemotright\", \"ellipsis\", \"space\", \"Agrave\", \"Atilde\", \"Otilde\", \"OE\",\n  \"oe\", \"endash\", \"emdash\", \"quotedblleft\", \"quotedblright\", \"quoteleft\",\n  \"quoteright\", \"divide\", \"lozenge\", \"ydieresis\", \"Ydieresis\", \"fraction\",\n  \"currency\", \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"daggerdbl\",\n  \"periodcentered\", \"quotesinglbase\", \"quotedblbase\", \"perthousand\",\n  \"Acircumflex\", \"Ecircumflex\", \"Aacute\", \"Edieresis\", \"Egrave\", \"Iacute\",\n  \"Icircumflex\", \"Idieresis\", \"Igrave\", \"Oacute\", \"Ocircumflex\", \"apple\",\n  \"Ograve\", \"Uacute\", \"Ucircumflex\", \"Ugrave\", \"dotlessi\", \"circumflex\",\n  \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"ring\", \"cedilla\", \"hungarumlaut\",\n  \"ogonek\", \"caron\"];\n\n// prettier-ignore\nconst StandardEncoding = [\n  \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\n  \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\n  \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\",\n  \"ampersand\", \"quoteright\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\",\n  \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\",\n  \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\",\n  \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\",\n  \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\",\n  \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\",\n  \"asciicircum\", \"underscore\", \"quoteleft\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\",\n  \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\",\n  \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\",\n  \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\n  \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"exclamdown\",\n  \"cent\", \"sterling\", \"fraction\", \"yen\", \"florin\", \"section\", \"currency\",\n  \"quotesingle\", \"quotedblleft\", \"guillemotleft\", \"guilsinglleft\",\n  \"guilsinglright\", \"fi\", \"fl\", \"\", \"endash\", \"dagger\", \"daggerdbl\",\n  \"periodcentered\", \"\", \"paragraph\", \"bullet\", \"quotesinglbase\",\n  \"quotedblbase\", \"quotedblright\", \"guillemotright\", \"ellipsis\",\n  \"perthousand\", \"\", \"questiondown\", \"\", \"grave\", \"acute\", \"circumflex\",\n  \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"dieresis\", \"\", \"ring\", \"cedilla\",\n  \"\", \"hungarumlaut\", \"ogonek\", \"caron\", \"emdash\", \"\", \"\", \"\", \"\", \"\", \"\",\n  \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"AE\", \"\", \"ordfeminine\", \"\", \"\",\n  \"\", \"\", \"Lslash\", \"Oslash\", \"OE\", \"ordmasculine\", \"\", \"\", \"\", \"\", \"\", \"ae\",\n  \"\", \"\", \"\", \"dotlessi\", \"\", \"\", \"lslash\", \"oslash\", \"oe\", \"germandbls\", \"\",\n  \"\", \"\", \"\"];\n\n// prettier-ignore\nconst WinAnsiEncoding = [\n  \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\n  \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\n  \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\",\n  \"ampersand\", \"quotesingle\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\",\n  \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\",\n  \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\",\n  \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\",\n  \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\",\n  \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\",\n  \"asciicircum\", \"underscore\", \"grave\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\",\n  \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\",\n  \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\",\n  \"bullet\", \"Euro\", \"bullet\", \"quotesinglbase\", \"florin\", \"quotedblbase\",\n  \"ellipsis\", \"dagger\", \"daggerdbl\", \"circumflex\", \"perthousand\", \"Scaron\",\n  \"guilsinglleft\", \"OE\", \"bullet\", \"Zcaron\", \"bullet\", \"bullet\", \"quoteleft\",\n  \"quoteright\", \"quotedblleft\", \"quotedblright\", \"bullet\", \"endash\",\n  \"emdash\", \"tilde\", \"trademark\", \"scaron\", \"guilsinglright\", \"oe\", \"bullet\",\n  \"zcaron\", \"Ydieresis\", \"space\", \"exclamdown\", \"cent\", \"sterling\",\n  \"currency\", \"yen\", \"brokenbar\", \"section\", \"dieresis\", \"copyright\",\n  \"ordfeminine\", \"guillemotleft\", \"logicalnot\", \"hyphen\", \"registered\",\n  \"macron\", \"degree\", \"plusminus\", \"twosuperior\", \"threesuperior\", \"acute\",\n  \"mu\", \"paragraph\", \"periodcentered\", \"cedilla\", \"onesuperior\",\n  \"ordmasculine\", \"guillemotright\", \"onequarter\", \"onehalf\", \"threequarters\",\n  \"questiondown\", \"Agrave\", \"Aacute\", \"Acircumflex\", \"Atilde\", \"Adieresis\",\n  \"Aring\", \"AE\", \"Ccedilla\", \"Egrave\", \"Eacute\", \"Ecircumflex\", \"Edieresis\",\n  \"Igrave\", \"Iacute\", \"Icircumflex\", \"Idieresis\", \"Eth\", \"Ntilde\", \"Ograve\",\n  \"Oacute\", \"Ocircumflex\", \"Otilde\", \"Odieresis\", \"multiply\", \"Oslash\",\n  \"Ugrave\", \"Uacute\", \"Ucircumflex\", \"Udieresis\", \"Yacute\", \"Thorn\",\n  \"germandbls\", \"agrave\", \"aacute\", \"acircumflex\", \"atilde\", \"adieresis\",\n  \"aring\", \"ae\", \"ccedilla\", \"egrave\", \"eacute\", \"ecircumflex\", \"edieresis\",\n  \"igrave\", \"iacute\", \"icircumflex\", \"idieresis\", \"eth\", \"ntilde\", \"ograve\",\n  \"oacute\", \"ocircumflex\", \"otilde\", \"odieresis\", \"divide\", \"oslash\",\n  \"ugrave\", \"uacute\", \"ucircumflex\", \"udieresis\", \"yacute\", \"thorn\",\n  \"ydieresis\"];\n\n// prettier-ignore\nconst SymbolSetEncoding = [\n  \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\n  \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\n  \"space\", \"exclam\", \"universal\", \"numbersign\", \"existential\", \"percent\",\n  \"ampersand\", \"suchthat\", \"parenleft\", \"parenright\", \"asteriskmath\", \"plus\",\n  \"comma\", \"minus\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\",\n  \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\",\n  \"equal\", \"greater\", \"question\", \"congruent\", \"Alpha\", \"Beta\", \"Chi\",\n  \"Delta\", \"Epsilon\", \"Phi\", \"Gamma\", \"Eta\", \"Iota\", \"theta1\", \"Kappa\",\n  \"Lambda\", \"Mu\", \"Nu\", \"Omicron\", \"Pi\", \"Theta\", \"Rho\", \"Sigma\", \"Tau\",\n  \"Upsilon\", \"sigma1\", \"Omega\", \"Xi\", \"Psi\", \"Zeta\", \"bracketleft\",\n  \"therefore\", \"bracketright\", \"perpendicular\", \"underscore\", \"radicalex\",\n  \"alpha\", \"beta\", \"chi\", \"delta\", \"epsilon\", \"phi\", \"gamma\", \"eta\", \"iota\",\n  \"phi1\", \"kappa\", \"lambda\", \"mu\", \"nu\", \"omicron\", \"pi\", \"theta\", \"rho\",\n  \"sigma\", \"tau\", \"upsilon\", \"omega1\", \"omega\", \"xi\", \"psi\", \"zeta\",\n  \"braceleft\", \"bar\", \"braceright\", \"similar\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\n  \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\n  \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Euro\", \"Upsilon1\", \"minute\", \"lessequal\",\n  \"fraction\", \"infinity\", \"florin\", \"club\", \"diamond\", \"heart\", \"spade\",\n  \"arrowboth\", \"arrowleft\", \"arrowup\", \"arrowright\", \"arrowdown\", \"degree\",\n  \"plusminus\", \"second\", \"greaterequal\", \"multiply\", \"proportional\",\n  \"partialdiff\", \"bullet\", \"divide\", \"notequal\", \"equivalence\",\n  \"approxequal\", \"ellipsis\", \"arrowvertex\", \"arrowhorizex\", \"carriagereturn\",\n  \"aleph\", \"Ifraktur\", \"Rfraktur\", \"weierstrass\", \"circlemultiply\",\n  \"circleplus\", \"emptyset\", \"intersection\", \"union\", \"propersuperset\",\n  \"reflexsuperset\", \"notsubset\", \"propersubset\", \"reflexsubset\", \"element\",\n  \"notelement\", \"angle\", \"gradient\", \"registerserif\", \"copyrightserif\",\n  \"trademarkserif\", \"product\", \"radical\", \"dotmath\", \"logicalnot\",\n  \"logicaland\", \"logicalor\", \"arrowdblboth\", \"arrowdblleft\", \"arrowdblup\",\n  \"arrowdblright\", \"arrowdbldown\", \"lozenge\", \"angleleft\", \"registersans\",\n  \"copyrightsans\", \"trademarksans\", \"summation\", \"parenlefttp\",\n  \"parenleftex\", \"parenleftbt\", \"bracketlefttp\", \"bracketleftex\",\n  \"bracketleftbt\", \"bracelefttp\", \"braceleftmid\", \"braceleftbt\", \"braceex\",\n  \"\", \"angleright\", \"integral\", \"integraltp\", \"integralex\", \"integralbt\",\n  \"parenrighttp\", \"parenrightex\", \"parenrightbt\", \"bracketrighttp\",\n  \"bracketrightex\", \"bracketrightbt\", \"bracerighttp\", \"bracerightmid\",\n  \"bracerightbt\", \"\"];\n\n// prettier-ignore\nconst ZapfDingbatsEncoding = [\n  \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\n  \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\n  \"space\", \"a1\", \"a2\", \"a202\", \"a3\", \"a4\", \"a5\", \"a119\", \"a118\", \"a117\",\n  \"a11\", \"a12\", \"a13\", \"a14\", \"a15\", \"a16\", \"a105\", \"a17\", \"a18\", \"a19\",\n  \"a20\", \"a21\", \"a22\", \"a23\", \"a24\", \"a25\", \"a26\", \"a27\", \"a28\", \"a6\", \"a7\",\n  \"a8\", \"a9\", \"a10\", \"a29\", \"a30\", \"a31\", \"a32\", \"a33\", \"a34\", \"a35\", \"a36\",\n  \"a37\", \"a38\", \"a39\", \"a40\", \"a41\", \"a42\", \"a43\", \"a44\", \"a45\", \"a46\",\n  \"a47\", \"a48\", \"a49\", \"a50\", \"a51\", \"a52\", \"a53\", \"a54\", \"a55\", \"a56\",\n  \"a57\", \"a58\", \"a59\", \"a60\", \"a61\", \"a62\", \"a63\", \"a64\", \"a65\", \"a66\",\n  \"a67\", \"a68\", \"a69\", \"a70\", \"a71\", \"a72\", \"a73\", \"a74\", \"a203\", \"a75\",\n  \"a204\", \"a76\", \"a77\", \"a78\", \"a79\", \"a81\", \"a82\", \"a83\", \"a84\", \"a97\",\n  \"a98\", \"a99\", \"a100\", \"\", \"a89\", \"a90\", \"a93\", \"a94\", \"a91\", \"a92\", \"a205\",\n  \"a85\", \"a206\", \"a86\", \"a87\", \"a88\", \"a95\", \"a96\", \"\", \"\", \"\", \"\", \"\", \"\",\n  \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"a101\", \"a102\", \"a103\",\n  \"a104\", \"a106\", \"a107\", \"a108\", \"a112\", \"a111\", \"a110\", \"a109\", \"a120\",\n  \"a121\", \"a122\", \"a123\", \"a124\", \"a125\", \"a126\", \"a127\", \"a128\", \"a129\",\n  \"a130\", \"a131\", \"a132\", \"a133\", \"a134\", \"a135\", \"a136\", \"a137\", \"a138\",\n  \"a139\", \"a140\", \"a141\", \"a142\", \"a143\", \"a144\", \"a145\", \"a146\", \"a147\",\n  \"a148\", \"a149\", \"a150\", \"a151\", \"a152\", \"a153\", \"a154\", \"a155\", \"a156\",\n  \"a157\", \"a158\", \"a159\", \"a160\", \"a161\", \"a163\", \"a164\", \"a196\", \"a165\",\n  \"a192\", \"a166\", \"a167\", \"a168\", \"a169\", \"a170\", \"a171\", \"a172\", \"a173\",\n  \"a162\", \"a174\", \"a175\", \"a176\", \"a177\", \"a178\", \"a179\", \"a193\", \"a180\",\n  \"a199\", \"a181\", \"a200\", \"a182\", \"\", \"a201\", \"a183\", \"a184\", \"a197\", \"a185\",\n  \"a194\", \"a198\", \"a186\", \"a195\", \"a187\", \"a188\", \"a189\", \"a190\", \"a191\", \"\"];\n\nfunction getEncoding(encodingName) {\n  switch (encodingName) {\n    case \"WinAnsiEncoding\":\n      return WinAnsiEncoding;\n    case \"StandardEncoding\":\n      return StandardEncoding;\n    case \"MacRomanEncoding\":\n      return MacRomanEncoding;\n    case \"SymbolSetEncoding\":\n      return SymbolSetEncoding;\n    case \"ZapfDingbatsEncoding\":\n      return ZapfDingbatsEncoding;\n    case \"ExpertEncoding\":\n      return ExpertEncoding;\n    case \"MacExpertEncoding\":\n      return MacExpertEncoding;\n    default:\n      return null;\n  }\n}\n\nexport {\n  WinAnsiEncoding,\n  StandardEncoding,\n  MacRomanEncoding,\n  SymbolSetEncoding,\n  ZapfDingbatsEncoding,\n  ExpertEncoding,\n  getEncoding,\n};\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* no-babel-preset */\n\nvar getLookupTableFactory = require(\"./core_utils.js\").getLookupTableFactory;\n\nvar getGlyphsUnicode = getLookupTableFactory(function (t) {\n  t.A = 0x0041;\n  t.AE = 0x00c6;\n  t.AEacute = 0x01fc;\n  t.AEmacron = 0x01e2;\n  t.AEsmall = 0xf7e6;\n  t.Aacute = 0x00c1;\n  t.Aacutesmall = 0xf7e1;\n  t.Abreve = 0x0102;\n  t.Abreveacute = 0x1eae;\n  t.Abrevecyrillic = 0x04d0;\n  t.Abrevedotbelow = 0x1eb6;\n  t.Abrevegrave = 0x1eb0;\n  t.Abrevehookabove = 0x1eb2;\n  t.Abrevetilde = 0x1eb4;\n  t.Acaron = 0x01cd;\n  t.Acircle = 0x24b6;\n  t.Acircumflex = 0x00c2;\n  t.Acircumflexacute = 0x1ea4;\n  t.Acircumflexdotbelow = 0x1eac;\n  t.Acircumflexgrave = 0x1ea6;\n  t.Acircumflexhookabove = 0x1ea8;\n  t.Acircumflexsmall = 0xf7e2;\n  t.Acircumflextilde = 0x1eaa;\n  t.Acute = 0xf6c9;\n  t.Acutesmall = 0xf7b4;\n  t.Acyrillic = 0x0410;\n  t.Adblgrave = 0x0200;\n  t.Adieresis = 0x00c4;\n  t.Adieresiscyrillic = 0x04d2;\n  t.Adieresismacron = 0x01de;\n  t.Adieresissmall = 0xf7e4;\n  t.Adotbelow = 0x1ea0;\n  t.Adotmacron = 0x01e0;\n  t.Agrave = 0x00c0;\n  t.Agravesmall = 0xf7e0;\n  t.Ahookabove = 0x1ea2;\n  t.Aiecyrillic = 0x04d4;\n  t.Ainvertedbreve = 0x0202;\n  t.Alpha = 0x0391;\n  t.Alphatonos = 0x0386;\n  t.Amacron = 0x0100;\n  t.Amonospace = 0xff21;\n  t.Aogonek = 0x0104;\n  t.Aring = 0x00c5;\n  t.Aringacute = 0x01fa;\n  t.Aringbelow = 0x1e00;\n  t.Aringsmall = 0xf7e5;\n  t.Asmall = 0xf761;\n  t.Atilde = 0x00c3;\n  t.Atildesmall = 0xf7e3;\n  t.Aybarmenian = 0x0531;\n  t.B = 0x0042;\n  t.Bcircle = 0x24b7;\n  t.Bdotaccent = 0x1e02;\n  t.Bdotbelow = 0x1e04;\n  t.Becyrillic = 0x0411;\n  t.Benarmenian = 0x0532;\n  t.Beta = 0x0392;\n  t.Bhook = 0x0181;\n  t.Blinebelow = 0x1e06;\n  t.Bmonospace = 0xff22;\n  t.Brevesmall = 0xf6f4;\n  t.Bsmall = 0xf762;\n  t.Btopbar = 0x0182;\n  t.C = 0x0043;\n  t.Caarmenian = 0x053e;\n  t.Cacute = 0x0106;\n  t.Caron = 0xf6ca;\n  t.Caronsmall = 0xf6f5;\n  t.Ccaron = 0x010c;\n  t.Ccedilla = 0x00c7;\n  t.Ccedillaacute = 0x1e08;\n  t.Ccedillasmall = 0xf7e7;\n  t.Ccircle = 0x24b8;\n  t.Ccircumflex = 0x0108;\n  t.Cdot = 0x010a;\n  t.Cdotaccent = 0x010a;\n  t.Cedillasmall = 0xf7b8;\n  t.Chaarmenian = 0x0549;\n  t.Cheabkhasiancyrillic = 0x04bc;\n  t.Checyrillic = 0x0427;\n  t.Chedescenderabkhasiancyrillic = 0x04be;\n  t.Chedescendercyrillic = 0x04b6;\n  t.Chedieresiscyrillic = 0x04f4;\n  t.Cheharmenian = 0x0543;\n  t.Chekhakassiancyrillic = 0x04cb;\n  t.Cheverticalstrokecyrillic = 0x04b8;\n  t.Chi = 0x03a7;\n  t.Chook = 0x0187;\n  t.Circumflexsmall = 0xf6f6;\n  t.Cmonospace = 0xff23;\n  t.Coarmenian = 0x0551;\n  t.Csmall = 0xf763;\n  t.D = 0x0044;\n  t.DZ = 0x01f1;\n  t.DZcaron = 0x01c4;\n  t.Daarmenian = 0x0534;\n  t.Dafrican = 0x0189;\n  t.Dcaron = 0x010e;\n  t.Dcedilla = 0x1e10;\n  t.Dcircle = 0x24b9;\n  t.Dcircumflexbelow = 0x1e12;\n  t.Dcroat = 0x0110;\n  t.Ddotaccent = 0x1e0a;\n  t.Ddotbelow = 0x1e0c;\n  t.Decyrillic = 0x0414;\n  t.Deicoptic = 0x03ee;\n  t.Delta = 0x2206;\n  t.Deltagreek = 0x0394;\n  t.Dhook = 0x018a;\n  t.Dieresis = 0xf6cb;\n  t.DieresisAcute = 0xf6cc;\n  t.DieresisGrave = 0xf6cd;\n  t.Dieresissmall = 0xf7a8;\n  t.Digammagreek = 0x03dc;\n  t.Djecyrillic = 0x0402;\n  t.Dlinebelow = 0x1e0e;\n  t.Dmonospace = 0xff24;\n  t.Dotaccentsmall = 0xf6f7;\n  t.Dslash = 0x0110;\n  t.Dsmall = 0xf764;\n  t.Dtopbar = 0x018b;\n  t.Dz = 0x01f2;\n  t.Dzcaron = 0x01c5;\n  t.Dzeabkhasiancyrillic = 0x04e0;\n  t.Dzecyrillic = 0x0405;\n  t.Dzhecyrillic = 0x040f;\n  t.E = 0x0045;\n  t.Eacute = 0x00c9;\n  t.Eacutesmall = 0xf7e9;\n  t.Ebreve = 0x0114;\n  t.Ecaron = 0x011a;\n  t.Ecedillabreve = 0x1e1c;\n  t.Echarmenian = 0x0535;\n  t.Ecircle = 0x24ba;\n  t.Ecircumflex = 0x00ca;\n  t.Ecircumflexacute = 0x1ebe;\n  t.Ecircumflexbelow = 0x1e18;\n  t.Ecircumflexdotbelow = 0x1ec6;\n  t.Ecircumflexgrave = 0x1ec0;\n  t.Ecircumflexhookabove = 0x1ec2;\n  t.Ecircumflexsmall = 0xf7ea;\n  t.Ecircumflextilde = 0x1ec4;\n  t.Ecyrillic = 0x0404;\n  t.Edblgrave = 0x0204;\n  t.Edieresis = 0x00cb;\n  t.Edieresissmall = 0xf7eb;\n  t.Edot = 0x0116;\n  t.Edotaccent = 0x0116;\n  t.Edotbelow = 0x1eb8;\n  t.Efcyrillic = 0x0424;\n  t.Egrave = 0x00c8;\n  t.Egravesmall = 0xf7e8;\n  t.Eharmenian = 0x0537;\n  t.Ehookabove = 0x1eba;\n  t.Eightroman = 0x2167;\n  t.Einvertedbreve = 0x0206;\n  t.Eiotifiedcyrillic = 0x0464;\n  t.Elcyrillic = 0x041b;\n  t.Elevenroman = 0x216a;\n  t.Emacron = 0x0112;\n  t.Emacronacute = 0x1e16;\n  t.Emacrongrave = 0x1e14;\n  t.Emcyrillic = 0x041c;\n  t.Emonospace = 0xff25;\n  t.Encyrillic = 0x041d;\n  t.Endescendercyrillic = 0x04a2;\n  t.Eng = 0x014a;\n  t.Enghecyrillic = 0x04a4;\n  t.Enhookcyrillic = 0x04c7;\n  t.Eogonek = 0x0118;\n  t.Eopen = 0x0190;\n  t.Epsilon = 0x0395;\n  t.Epsilontonos = 0x0388;\n  t.Ercyrillic = 0x0420;\n  t.Ereversed = 0x018e;\n  t.Ereversedcyrillic = 0x042d;\n  t.Escyrillic = 0x0421;\n  t.Esdescendercyrillic = 0x04aa;\n  t.Esh = 0x01a9;\n  t.Esmall = 0xf765;\n  t.Eta = 0x0397;\n  t.Etarmenian = 0x0538;\n  t.Etatonos = 0x0389;\n  t.Eth = 0x00d0;\n  t.Ethsmall = 0xf7f0;\n  t.Etilde = 0x1ebc;\n  t.Etildebelow = 0x1e1a;\n  t.Euro = 0x20ac;\n  t.Ezh = 0x01b7;\n  t.Ezhcaron = 0x01ee;\n  t.Ezhreversed = 0x01b8;\n  t.F = 0x0046;\n  t.Fcircle = 0x24bb;\n  t.Fdotaccent = 0x1e1e;\n  t.Feharmenian = 0x0556;\n  t.Feicoptic = 0x03e4;\n  t.Fhook = 0x0191;\n  t.Fitacyrillic = 0x0472;\n  t.Fiveroman = 0x2164;\n  t.Fmonospace = 0xff26;\n  t.Fourroman = 0x2163;\n  t.Fsmall = 0xf766;\n  t.G = 0x0047;\n  t.GBsquare = 0x3387;\n  t.Gacute = 0x01f4;\n  t.Gamma = 0x0393;\n  t.Gammaafrican = 0x0194;\n  t.Gangiacoptic = 0x03ea;\n  t.Gbreve = 0x011e;\n  t.Gcaron = 0x01e6;\n  t.Gcedilla = 0x0122;\n  t.Gcircle = 0x24bc;\n  t.Gcircumflex = 0x011c;\n  t.Gcommaaccent = 0x0122;\n  t.Gdot = 0x0120;\n  t.Gdotaccent = 0x0120;\n  t.Gecyrillic = 0x0413;\n  t.Ghadarmenian = 0x0542;\n  t.Ghemiddlehookcyrillic = 0x0494;\n  t.Ghestrokecyrillic = 0x0492;\n  t.Gheupturncyrillic = 0x0490;\n  t.Ghook = 0x0193;\n  t.Gimarmenian = 0x0533;\n  t.Gjecyrillic = 0x0403;\n  t.Gmacron = 0x1e20;\n  t.Gmonospace = 0xff27;\n  t.Grave = 0xf6ce;\n  t.Gravesmall = 0xf760;\n  t.Gsmall = 0xf767;\n  t.Gsmallhook = 0x029b;\n  t.Gstroke = 0x01e4;\n  t.H = 0x0048;\n  t.H18533 = 0x25cf;\n  t.H18543 = 0x25aa;\n  t.H18551 = 0x25ab;\n  t.H22073 = 0x25a1;\n  t.HPsquare = 0x33cb;\n  t.Haabkhasiancyrillic = 0x04a8;\n  t.Hadescendercyrillic = 0x04b2;\n  t.Hardsigncyrillic = 0x042a;\n  t.Hbar = 0x0126;\n  t.Hbrevebelow = 0x1e2a;\n  t.Hcedilla = 0x1e28;\n  t.Hcircle = 0x24bd;\n  t.Hcircumflex = 0x0124;\n  t.Hdieresis = 0x1e26;\n  t.Hdotaccent = 0x1e22;\n  t.Hdotbelow = 0x1e24;\n  t.Hmonospace = 0xff28;\n  t.Hoarmenian = 0x0540;\n  t.Horicoptic = 0x03e8;\n  t.Hsmall = 0xf768;\n  t.Hungarumlaut = 0xf6cf;\n  t.Hungarumlautsmall = 0xf6f8;\n  t.Hzsquare = 0x3390;\n  t.I = 0x0049;\n  t.IAcyrillic = 0x042f;\n  t.IJ = 0x0132;\n  t.IUcyrillic = 0x042e;\n  t.Iacute = 0x00cd;\n  t.Iacutesmall = 0xf7ed;\n  t.Ibreve = 0x012c;\n  t.Icaron = 0x01cf;\n  t.Icircle = 0x24be;\n  t.Icircumflex = 0x00ce;\n  t.Icircumflexsmall = 0xf7ee;\n  t.Icyrillic = 0x0406;\n  t.Idblgrave = 0x0208;\n  t.Idieresis = 0x00cf;\n  t.Idieresisacute = 0x1e2e;\n  t.Idieresiscyrillic = 0x04e4;\n  t.Idieresissmall = 0xf7ef;\n  t.Idot = 0x0130;\n  t.Idotaccent = 0x0130;\n  t.Idotbelow = 0x1eca;\n  t.Iebrevecyrillic = 0x04d6;\n  t.Iecyrillic = 0x0415;\n  t.Ifraktur = 0x2111;\n  t.Igrave = 0x00cc;\n  t.Igravesmall = 0xf7ec;\n  t.Ihookabove = 0x1ec8;\n  t.Iicyrillic = 0x0418;\n  t.Iinvertedbreve = 0x020a;\n  t.Iishortcyrillic = 0x0419;\n  t.Imacron = 0x012a;\n  t.Imacroncyrillic = 0x04e2;\n  t.Imonospace = 0xff29;\n  t.Iniarmenian = 0x053b;\n  t.Iocyrillic = 0x0401;\n  t.Iogonek = 0x012e;\n  t.Iota = 0x0399;\n  t.Iotaafrican = 0x0196;\n  t.Iotadieresis = 0x03aa;\n  t.Iotatonos = 0x038a;\n  t.Ismall = 0xf769;\n  t.Istroke = 0x0197;\n  t.Itilde = 0x0128;\n  t.Itildebelow = 0x1e2c;\n  t.Izhitsacyrillic = 0x0474;\n  t.Izhitsadblgravecyrillic = 0x0476;\n  t.J = 0x004a;\n  t.Jaarmenian = 0x0541;\n  t.Jcircle = 0x24bf;\n  t.Jcircumflex = 0x0134;\n  t.Jecyrillic = 0x0408;\n  t.Jheharmenian = 0x054b;\n  t.Jmonospace = 0xff2a;\n  t.Jsmall = 0xf76a;\n  t.K = 0x004b;\n  t.KBsquare = 0x3385;\n  t.KKsquare = 0x33cd;\n  t.Kabashkircyrillic = 0x04a0;\n  t.Kacute = 0x1e30;\n  t.Kacyrillic = 0x041a;\n  t.Kadescendercyrillic = 0x049a;\n  t.Kahookcyrillic = 0x04c3;\n  t.Kappa = 0x039a;\n  t.Kastrokecyrillic = 0x049e;\n  t.Kaverticalstrokecyrillic = 0x049c;\n  t.Kcaron = 0x01e8;\n  t.Kcedilla = 0x0136;\n  t.Kcircle = 0x24c0;\n  t.Kcommaaccent = 0x0136;\n  t.Kdotbelow = 0x1e32;\n  t.Keharmenian = 0x0554;\n  t.Kenarmenian = 0x053f;\n  t.Khacyrillic = 0x0425;\n  t.Kheicoptic = 0x03e6;\n  t.Khook = 0x0198;\n  t.Kjecyrillic = 0x040c;\n  t.Klinebelow = 0x1e34;\n  t.Kmonospace = 0xff2b;\n  t.Koppacyrillic = 0x0480;\n  t.Koppagreek = 0x03de;\n  t.Ksicyrillic = 0x046e;\n  t.Ksmall = 0xf76b;\n  t.L = 0x004c;\n  t.LJ = 0x01c7;\n  t.LL = 0xf6bf;\n  t.Lacute = 0x0139;\n  t.Lambda = 0x039b;\n  t.Lcaron = 0x013d;\n  t.Lcedilla = 0x013b;\n  t.Lcircle = 0x24c1;\n  t.Lcircumflexbelow = 0x1e3c;\n  t.Lcommaaccent = 0x013b;\n  t.Ldot = 0x013f;\n  t.Ldotaccent = 0x013f;\n  t.Ldotbelow = 0x1e36;\n  t.Ldotbelowmacron = 0x1e38;\n  t.Liwnarmenian = 0x053c;\n  t.Lj = 0x01c8;\n  t.Ljecyrillic = 0x0409;\n  t.Llinebelow = 0x1e3a;\n  t.Lmonospace = 0xff2c;\n  t.Lslash = 0x0141;\n  t.Lslashsmall = 0xf6f9;\n  t.Lsmall = 0xf76c;\n  t.M = 0x004d;\n  t.MBsquare = 0x3386;\n  t.Macron = 0xf6d0;\n  t.Macronsmall = 0xf7af;\n  t.Macute = 0x1e3e;\n  t.Mcircle = 0x24c2;\n  t.Mdotaccent = 0x1e40;\n  t.Mdotbelow = 0x1e42;\n  t.Menarmenian = 0x0544;\n  t.Mmonospace = 0xff2d;\n  t.Msmall = 0xf76d;\n  t.Mturned = 0x019c;\n  t.Mu = 0x039c;\n  t.N = 0x004e;\n  t.NJ = 0x01ca;\n  t.Nacute = 0x0143;\n  t.Ncaron = 0x0147;\n  t.Ncedilla = 0x0145;\n  t.Ncircle = 0x24c3;\n  t.Ncircumflexbelow = 0x1e4a;\n  t.Ncommaaccent = 0x0145;\n  t.Ndotaccent = 0x1e44;\n  t.Ndotbelow = 0x1e46;\n  t.Nhookleft = 0x019d;\n  t.Nineroman = 0x2168;\n  t.Nj = 0x01cb;\n  t.Njecyrillic = 0x040a;\n  t.Nlinebelow = 0x1e48;\n  t.Nmonospace = 0xff2e;\n  t.Nowarmenian = 0x0546;\n  t.Nsmall = 0xf76e;\n  t.Ntilde = 0x00d1;\n  t.Ntildesmall = 0xf7f1;\n  t.Nu = 0x039d;\n  t.O = 0x004f;\n  t.OE = 0x0152;\n  t.OEsmall = 0xf6fa;\n  t.Oacute = 0x00d3;\n  t.Oacutesmall = 0xf7f3;\n  t.Obarredcyrillic = 0x04e8;\n  t.Obarreddieresiscyrillic = 0x04ea;\n  t.Obreve = 0x014e;\n  t.Ocaron = 0x01d1;\n  t.Ocenteredtilde = 0x019f;\n  t.Ocircle = 0x24c4;\n  t.Ocircumflex = 0x00d4;\n  t.Ocircumflexacute = 0x1ed0;\n  t.Ocircumflexdotbelow = 0x1ed8;\n  t.Ocircumflexgrave = 0x1ed2;\n  t.Ocircumflexhookabove = 0x1ed4;\n  t.Ocircumflexsmall = 0xf7f4;\n  t.Ocircumflextilde = 0x1ed6;\n  t.Ocyrillic = 0x041e;\n  t.Odblacute = 0x0150;\n  t.Odblgrave = 0x020c;\n  t.Odieresis = 0x00d6;\n  t.Odieresiscyrillic = 0x04e6;\n  t.Odieresissmall = 0xf7f6;\n  t.Odotbelow = 0x1ecc;\n  t.Ogoneksmall = 0xf6fb;\n  t.Ograve = 0x00d2;\n  t.Ogravesmall = 0xf7f2;\n  t.Oharmenian = 0x0555;\n  t.Ohm = 0x2126;\n  t.Ohookabove = 0x1ece;\n  t.Ohorn = 0x01a0;\n  t.Ohornacute = 0x1eda;\n  t.Ohorndotbelow = 0x1ee2;\n  t.Ohorngrave = 0x1edc;\n  t.Ohornhookabove = 0x1ede;\n  t.Ohorntilde = 0x1ee0;\n  t.Ohungarumlaut = 0x0150;\n  t.Oi = 0x01a2;\n  t.Oinvertedbreve = 0x020e;\n  t.Omacron = 0x014c;\n  t.Omacronacute = 0x1e52;\n  t.Omacrongrave = 0x1e50;\n  t.Omega = 0x2126;\n  t.Omegacyrillic = 0x0460;\n  t.Omegagreek = 0x03a9;\n  t.Omegaroundcyrillic = 0x047a;\n  t.Omegatitlocyrillic = 0x047c;\n  t.Omegatonos = 0x038f;\n  t.Omicron = 0x039f;\n  t.Omicrontonos = 0x038c;\n  t.Omonospace = 0xff2f;\n  t.Oneroman = 0x2160;\n  t.Oogonek = 0x01ea;\n  t.Oogonekmacron = 0x01ec;\n  t.Oopen = 0x0186;\n  t.Oslash = 0x00d8;\n  t.Oslashacute = 0x01fe;\n  t.Oslashsmall = 0xf7f8;\n  t.Osmall = 0xf76f;\n  t.Ostrokeacute = 0x01fe;\n  t.Otcyrillic = 0x047e;\n  t.Otilde = 0x00d5;\n  t.Otildeacute = 0x1e4c;\n  t.Otildedieresis = 0x1e4e;\n  t.Otildesmall = 0xf7f5;\n  t.P = 0x0050;\n  t.Pacute = 0x1e54;\n  t.Pcircle = 0x24c5;\n  t.Pdotaccent = 0x1e56;\n  t.Pecyrillic = 0x041f;\n  t.Peharmenian = 0x054a;\n  t.Pemiddlehookcyrillic = 0x04a6;\n  t.Phi = 0x03a6;\n  t.Phook = 0x01a4;\n  t.Pi = 0x03a0;\n  t.Piwrarmenian = 0x0553;\n  t.Pmonospace = 0xff30;\n  t.Psi = 0x03a8;\n  t.Psicyrillic = 0x0470;\n  t.Psmall = 0xf770;\n  t.Q = 0x0051;\n  t.Qcircle = 0x24c6;\n  t.Qmonospace = 0xff31;\n  t.Qsmall = 0xf771;\n  t.R = 0x0052;\n  t.Raarmenian = 0x054c;\n  t.Racute = 0x0154;\n  t.Rcaron = 0x0158;\n  t.Rcedilla = 0x0156;\n  t.Rcircle = 0x24c7;\n  t.Rcommaaccent = 0x0156;\n  t.Rdblgrave = 0x0210;\n  t.Rdotaccent = 0x1e58;\n  t.Rdotbelow = 0x1e5a;\n  t.Rdotbelowmacron = 0x1e5c;\n  t.Reharmenian = 0x0550;\n  t.Rfraktur = 0x211c;\n  t.Rho = 0x03a1;\n  t.Ringsmall = 0xf6fc;\n  t.Rinvertedbreve = 0x0212;\n  t.Rlinebelow = 0x1e5e;\n  t.Rmonospace = 0xff32;\n  t.Rsmall = 0xf772;\n  t.Rsmallinverted = 0x0281;\n  t.Rsmallinvertedsuperior = 0x02b6;\n  t.S = 0x0053;\n  t.SF010000 = 0x250c;\n  t.SF020000 = 0x2514;\n  t.SF030000 = 0x2510;\n  t.SF040000 = 0x2518;\n  t.SF050000 = 0x253c;\n  t.SF060000 = 0x252c;\n  t.SF070000 = 0x2534;\n  t.SF080000 = 0x251c;\n  t.SF090000 = 0x2524;\n  t.SF100000 = 0x2500;\n  t.SF110000 = 0x2502;\n  t.SF190000 = 0x2561;\n  t.SF200000 = 0x2562;\n  t.SF210000 = 0x2556;\n  t.SF220000 = 0x2555;\n  t.SF230000 = 0x2563;\n  t.SF240000 = 0x2551;\n  t.SF250000 = 0x2557;\n  t.SF260000 = 0x255d;\n  t.SF270000 = 0x255c;\n  t.SF280000 = 0x255b;\n  t.SF360000 = 0x255e;\n  t.SF370000 = 0x255f;\n  t.SF380000 = 0x255a;\n  t.SF390000 = 0x2554;\n  t.SF400000 = 0x2569;\n  t.SF410000 = 0x2566;\n  t.SF420000 = 0x2560;\n  t.SF430000 = 0x2550;\n  t.SF440000 = 0x256c;\n  t.SF450000 = 0x2567;\n  t.SF460000 = 0x2568;\n  t.SF470000 = 0x2564;\n  t.SF480000 = 0x2565;\n  t.SF490000 = 0x2559;\n  t.SF500000 = 0x2558;\n  t.SF510000 = 0x2552;\n  t.SF520000 = 0x2553;\n  t.SF530000 = 0x256b;\n  t.SF540000 = 0x256a;\n  t.Sacute = 0x015a;\n  t.Sacutedotaccent = 0x1e64;\n  t.Sampigreek = 0x03e0;\n  t.Scaron = 0x0160;\n  t.Scarondotaccent = 0x1e66;\n  t.Scaronsmall = 0xf6fd;\n  t.Scedilla = 0x015e;\n  t.Schwa = 0x018f;\n  t.Schwacyrillic = 0x04d8;\n  t.Schwadieresiscyrillic = 0x04da;\n  t.Scircle = 0x24c8;\n  t.Scircumflex = 0x015c;\n  t.Scommaaccent = 0x0218;\n  t.Sdotaccent = 0x1e60;\n  t.Sdotbelow = 0x1e62;\n  t.Sdotbelowdotaccent = 0x1e68;\n  t.Seharmenian = 0x054d;\n  t.Sevenroman = 0x2166;\n  t.Shaarmenian = 0x0547;\n  t.Shacyrillic = 0x0428;\n  t.Shchacyrillic = 0x0429;\n  t.Sheicoptic = 0x03e2;\n  t.Shhacyrillic = 0x04ba;\n  t.Shimacoptic = 0x03ec;\n  t.Sigma = 0x03a3;\n  t.Sixroman = 0x2165;\n  t.Smonospace = 0xff33;\n  t.Softsigncyrillic = 0x042c;\n  t.Ssmall = 0xf773;\n  t.Stigmagreek = 0x03da;\n  t.T = 0x0054;\n  t.Tau = 0x03a4;\n  t.Tbar = 0x0166;\n  t.Tcaron = 0x0164;\n  t.Tcedilla = 0x0162;\n  t.Tcircle = 0x24c9;\n  t.Tcircumflexbelow = 0x1e70;\n  t.Tcommaaccent = 0x0162;\n  t.Tdotaccent = 0x1e6a;\n  t.Tdotbelow = 0x1e6c;\n  t.Tecyrillic = 0x0422;\n  t.Tedescendercyrillic = 0x04ac;\n  t.Tenroman = 0x2169;\n  t.Tetsecyrillic = 0x04b4;\n  t.Theta = 0x0398;\n  t.Thook = 0x01ac;\n  t.Thorn = 0x00de;\n  t.Thornsmall = 0xf7fe;\n  t.Threeroman = 0x2162;\n  t.Tildesmall = 0xf6fe;\n  t.Tiwnarmenian = 0x054f;\n  t.Tlinebelow = 0x1e6e;\n  t.Tmonospace = 0xff34;\n  t.Toarmenian = 0x0539;\n  t.Tonefive = 0x01bc;\n  t.Tonesix = 0x0184;\n  t.Tonetwo = 0x01a7;\n  t.Tretroflexhook = 0x01ae;\n  t.Tsecyrillic = 0x0426;\n  t.Tshecyrillic = 0x040b;\n  t.Tsmall = 0xf774;\n  t.Twelveroman = 0x216b;\n  t.Tworoman = 0x2161;\n  t.U = 0x0055;\n  t.Uacute = 0x00da;\n  t.Uacutesmall = 0xf7fa;\n  t.Ubreve = 0x016c;\n  t.Ucaron = 0x01d3;\n  t.Ucircle = 0x24ca;\n  t.Ucircumflex = 0x00db;\n  t.Ucircumflexbelow = 0x1e76;\n  t.Ucircumflexsmall = 0xf7fb;\n  t.Ucyrillic = 0x0423;\n  t.Udblacute = 0x0170;\n  t.Udblgrave = 0x0214;\n  t.Udieresis = 0x00dc;\n  t.Udieresisacute = 0x01d7;\n  t.Udieresisbelow = 0x1e72;\n  t.Udieresiscaron = 0x01d9;\n  t.Udieresiscyrillic = 0x04f0;\n  t.Udieresisgrave = 0x01db;\n  t.Udieresismacron = 0x01d5;\n  t.Udieresissmall = 0xf7fc;\n  t.Udotbelow = 0x1ee4;\n  t.Ugrave = 0x00d9;\n  t.Ugravesmall = 0xf7f9;\n  t.Uhookabove = 0x1ee6;\n  t.Uhorn = 0x01af;\n  t.Uhornacute = 0x1ee8;\n  t.Uhorndotbelow = 0x1ef0;\n  t.Uhorngrave = 0x1eea;\n  t.Uhornhookabove = 0x1eec;\n  t.Uhorntilde = 0x1eee;\n  t.Uhungarumlaut = 0x0170;\n  t.Uhungarumlautcyrillic = 0x04f2;\n  t.Uinvertedbreve = 0x0216;\n  t.Ukcyrillic = 0x0478;\n  t.Umacron = 0x016a;\n  t.Umacroncyrillic = 0x04ee;\n  t.Umacrondieresis = 0x1e7a;\n  t.Umonospace = 0xff35;\n  t.Uogonek = 0x0172;\n  t.Upsilon = 0x03a5;\n  t.Upsilon1 = 0x03d2;\n  t.Upsilonacutehooksymbolgreek = 0x03d3;\n  t.Upsilonafrican = 0x01b1;\n  t.Upsilondieresis = 0x03ab;\n  t.Upsilondieresishooksymbolgreek = 0x03d4;\n  t.Upsilonhooksymbol = 0x03d2;\n  t.Upsilontonos = 0x038e;\n  t.Uring = 0x016e;\n  t.Ushortcyrillic = 0x040e;\n  t.Usmall = 0xf775;\n  t.Ustraightcyrillic = 0x04ae;\n  t.Ustraightstrokecyrillic = 0x04b0;\n  t.Utilde = 0x0168;\n  t.Utildeacute = 0x1e78;\n  t.Utildebelow = 0x1e74;\n  t.V = 0x0056;\n  t.Vcircle = 0x24cb;\n  t.Vdotbelow = 0x1e7e;\n  t.Vecyrillic = 0x0412;\n  t.Vewarmenian = 0x054e;\n  t.Vhook = 0x01b2;\n  t.Vmonospace = 0xff36;\n  t.Voarmenian = 0x0548;\n  t.Vsmall = 0xf776;\n  t.Vtilde = 0x1e7c;\n  t.W = 0x0057;\n  t.Wacute = 0x1e82;\n  t.Wcircle = 0x24cc;\n  t.Wcircumflex = 0x0174;\n  t.Wdieresis = 0x1e84;\n  t.Wdotaccent = 0x1e86;\n  t.Wdotbelow = 0x1e88;\n  t.Wgrave = 0x1e80;\n  t.Wmonospace = 0xff37;\n  t.Wsmall = 0xf777;\n  t.X = 0x0058;\n  t.Xcircle = 0x24cd;\n  t.Xdieresis = 0x1e8c;\n  t.Xdotaccent = 0x1e8a;\n  t.Xeharmenian = 0x053d;\n  t.Xi = 0x039e;\n  t.Xmonospace = 0xff38;\n  t.Xsmall = 0xf778;\n  t.Y = 0x0059;\n  t.Yacute = 0x00dd;\n  t.Yacutesmall = 0xf7fd;\n  t.Yatcyrillic = 0x0462;\n  t.Ycircle = 0x24ce;\n  t.Ycircumflex = 0x0176;\n  t.Ydieresis = 0x0178;\n  t.Ydieresissmall = 0xf7ff;\n  t.Ydotaccent = 0x1e8e;\n  t.Ydotbelow = 0x1ef4;\n  t.Yericyrillic = 0x042b;\n  t.Yerudieresiscyrillic = 0x04f8;\n  t.Ygrave = 0x1ef2;\n  t.Yhook = 0x01b3;\n  t.Yhookabove = 0x1ef6;\n  t.Yiarmenian = 0x0545;\n  t.Yicyrillic = 0x0407;\n  t.Yiwnarmenian = 0x0552;\n  t.Ymonospace = 0xff39;\n  t.Ysmall = 0xf779;\n  t.Ytilde = 0x1ef8;\n  t.Yusbigcyrillic = 0x046a;\n  t.Yusbigiotifiedcyrillic = 0x046c;\n  t.Yuslittlecyrillic = 0x0466;\n  t.Yuslittleiotifiedcyrillic = 0x0468;\n  t.Z = 0x005a;\n  t.Zaarmenian = 0x0536;\n  t.Zacute = 0x0179;\n  t.Zcaron = 0x017d;\n  t.Zcaronsmall = 0xf6ff;\n  t.Zcircle = 0x24cf;\n  t.Zcircumflex = 0x1e90;\n  t.Zdot = 0x017b;\n  t.Zdotaccent = 0x017b;\n  t.Zdotbelow = 0x1e92;\n  t.Zecyrillic = 0x0417;\n  t.Zedescendercyrillic = 0x0498;\n  t.Zedieresiscyrillic = 0x04de;\n  t.Zeta = 0x0396;\n  t.Zhearmenian = 0x053a;\n  t.Zhebrevecyrillic = 0x04c1;\n  t.Zhecyrillic = 0x0416;\n  t.Zhedescendercyrillic = 0x0496;\n  t.Zhedieresiscyrillic = 0x04dc;\n  t.Zlinebelow = 0x1e94;\n  t.Zmonospace = 0xff3a;\n  t.Zsmall = 0xf77a;\n  t.Zstroke = 0x01b5;\n  t.a = 0x0061;\n  t.aabengali = 0x0986;\n  t.aacute = 0x00e1;\n  t.aadeva = 0x0906;\n  t.aagujarati = 0x0a86;\n  t.aagurmukhi = 0x0a06;\n  t.aamatragurmukhi = 0x0a3e;\n  t.aarusquare = 0x3303;\n  t.aavowelsignbengali = 0x09be;\n  t.aavowelsigndeva = 0x093e;\n  t.aavowelsigngujarati = 0x0abe;\n  t.abbreviationmarkarmenian = 0x055f;\n  t.abbreviationsigndeva = 0x0970;\n  t.abengali = 0x0985;\n  t.abopomofo = 0x311a;\n  t.abreve = 0x0103;\n  t.abreveacute = 0x1eaf;\n  t.abrevecyrillic = 0x04d1;\n  t.abrevedotbelow = 0x1eb7;\n  t.abrevegrave = 0x1eb1;\n  t.abrevehookabove = 0x1eb3;\n  t.abrevetilde = 0x1eb5;\n  t.acaron = 0x01ce;\n  t.acircle = 0x24d0;\n  t.acircumflex = 0x00e2;\n  t.acircumflexacute = 0x1ea5;\n  t.acircumflexdotbelow = 0x1ead;\n  t.acircumflexgrave = 0x1ea7;\n  t.acircumflexhookabove = 0x1ea9;\n  t.acircumflextilde = 0x1eab;\n  t.acute = 0x00b4;\n  t.acutebelowcmb = 0x0317;\n  t.acutecmb = 0x0301;\n  t.acutecomb = 0x0301;\n  t.acutedeva = 0x0954;\n  t.acutelowmod = 0x02cf;\n  t.acutetonecmb = 0x0341;\n  t.acyrillic = 0x0430;\n  t.adblgrave = 0x0201;\n  t.addakgurmukhi = 0x0a71;\n  t.adeva = 0x0905;\n  t.adieresis = 0x00e4;\n  t.adieresiscyrillic = 0x04d3;\n  t.adieresismacron = 0x01df;\n  t.adotbelow = 0x1ea1;\n  t.adotmacron = 0x01e1;\n  t.ae = 0x00e6;\n  t.aeacute = 0x01fd;\n  t.aekorean = 0x3150;\n  t.aemacron = 0x01e3;\n  t.afii00208 = 0x2015;\n  t.afii08941 = 0x20a4;\n  t.afii10017 = 0x0410;\n  t.afii10018 = 0x0411;\n  t.afii10019 = 0x0412;\n  t.afii10020 = 0x0413;\n  t.afii10021 = 0x0414;\n  t.afii10022 = 0x0415;\n  t.afii10023 = 0x0401;\n  t.afii10024 = 0x0416;\n  t.afii10025 = 0x0417;\n  t.afii10026 = 0x0418;\n  t.afii10027 = 0x0419;\n  t.afii10028 = 0x041a;\n  t.afii10029 = 0x041b;\n  t.afii10030 = 0x041c;\n  t.afii10031 = 0x041d;\n  t.afii10032 = 0x041e;\n  t.afii10033 = 0x041f;\n  t.afii10034 = 0x0420;\n  t.afii10035 = 0x0421;\n  t.afii10036 = 0x0422;\n  t.afii10037 = 0x0423;\n  t.afii10038 = 0x0424;\n  t.afii10039 = 0x0425;\n  t.afii10040 = 0x0426;\n  t.afii10041 = 0x0427;\n  t.afii10042 = 0x0428;\n  t.afii10043 = 0x0429;\n  t.afii10044 = 0x042a;\n  t.afii10045 = 0x042b;\n  t.afii10046 = 0x042c;\n  t.afii10047 = 0x042d;\n  t.afii10048 = 0x042e;\n  t.afii10049 = 0x042f;\n  t.afii10050 = 0x0490;\n  t.afii10051 = 0x0402;\n  t.afii10052 = 0x0403;\n  t.afii10053 = 0x0404;\n  t.afii10054 = 0x0405;\n  t.afii10055 = 0x0406;\n  t.afii10056 = 0x0407;\n  t.afii10057 = 0x0408;\n  t.afii10058 = 0x0409;\n  t.afii10059 = 0x040a;\n  t.afii10060 = 0x040b;\n  t.afii10061 = 0x040c;\n  t.afii10062 = 0x040e;\n  t.afii10063 = 0xf6c4;\n  t.afii10064 = 0xf6c5;\n  t.afii10065 = 0x0430;\n  t.afii10066 = 0x0431;\n  t.afii10067 = 0x0432;\n  t.afii10068 = 0x0433;\n  t.afii10069 = 0x0434;\n  t.afii10070 = 0x0435;\n  t.afii10071 = 0x0451;\n  t.afii10072 = 0x0436;\n  t.afii10073 = 0x0437;\n  t.afii10074 = 0x0438;\n  t.afii10075 = 0x0439;\n  t.afii10076 = 0x043a;\n  t.afii10077 = 0x043b;\n  t.afii10078 = 0x043c;\n  t.afii10079 = 0x043d;\n  t.afii10080 = 0x043e;\n  t.afii10081 = 0x043f;\n  t.afii10082 = 0x0440;\n  t.afii10083 = 0x0441;\n  t.afii10084 = 0x0442;\n  t.afii10085 = 0x0443;\n  t.afii10086 = 0x0444;\n  t.afii10087 = 0x0445;\n  t.afii10088 = 0x0446;\n  t.afii10089 = 0x0447;\n  t.afii10090 = 0x0448;\n  t.afii10091 = 0x0449;\n  t.afii10092 = 0x044a;\n  t.afii10093 = 0x044b;\n  t.afii10094 = 0x044c;\n  t.afii10095 = 0x044d;\n  t.afii10096 = 0x044e;\n  t.afii10097 = 0x044f;\n  t.afii10098 = 0x0491;\n  t.afii10099 = 0x0452;\n  t.afii10100 = 0x0453;\n  t.afii10101 = 0x0454;\n  t.afii10102 = 0x0455;\n  t.afii10103 = 0x0456;\n  t.afii10104 = 0x0457;\n  t.afii10105 = 0x0458;\n  t.afii10106 = 0x0459;\n  t.afii10107 = 0x045a;\n  t.afii10108 = 0x045b;\n  t.afii10109 = 0x045c;\n  t.afii10110 = 0x045e;\n  t.afii10145 = 0x040f;\n  t.afii10146 = 0x0462;\n  t.afii10147 = 0x0472;\n  t.afii10148 = 0x0474;\n  t.afii10192 = 0xf6c6;\n  t.afii10193 = 0x045f;\n  t.afii10194 = 0x0463;\n  t.afii10195 = 0x0473;\n  t.afii10196 = 0x0475;\n  t.afii10831 = 0xf6c7;\n  t.afii10832 = 0xf6c8;\n  t.afii10846 = 0x04d9;\n  t.afii299 = 0x200e;\n  t.afii300 = 0x200f;\n  t.afii301 = 0x200d;\n  t.afii57381 = 0x066a;\n  t.afii57388 = 0x060c;\n  t.afii57392 = 0x0660;\n  t.afii57393 = 0x0661;\n  t.afii57394 = 0x0662;\n  t.afii57395 = 0x0663;\n  t.afii57396 = 0x0664;\n  t.afii57397 = 0x0665;\n  t.afii57398 = 0x0666;\n  t.afii57399 = 0x0667;\n  t.afii57400 = 0x0668;\n  t.afii57401 = 0x0669;\n  t.afii57403 = 0x061b;\n  t.afii57407 = 0x061f;\n  t.afii57409 = 0x0621;\n  t.afii57410 = 0x0622;\n  t.afii57411 = 0x0623;\n  t.afii57412 = 0x0624;\n  t.afii57413 = 0x0625;\n  t.afii57414 = 0x0626;\n  t.afii57415 = 0x0627;\n  t.afii57416 = 0x0628;\n  t.afii57417 = 0x0629;\n  t.afii57418 = 0x062a;\n  t.afii57419 = 0x062b;\n  t.afii57420 = 0x062c;\n  t.afii57421 = 0x062d;\n  t.afii57422 = 0x062e;\n  t.afii57423 = 0x062f;\n  t.afii57424 = 0x0630;\n  t.afii57425 = 0x0631;\n  t.afii57426 = 0x0632;\n  t.afii57427 = 0x0633;\n  t.afii57428 = 0x0634;\n  t.afii57429 = 0x0635;\n  t.afii57430 = 0x0636;\n  t.afii57431 = 0x0637;\n  t.afii57432 = 0x0638;\n  t.afii57433 = 0x0639;\n  t.afii57434 = 0x063a;\n  t.afii57440 = 0x0640;\n  t.afii57441 = 0x0641;\n  t.afii57442 = 0x0642;\n  t.afii57443 = 0x0643;\n  t.afii57444 = 0x0644;\n  t.afii57445 = 0x0645;\n  t.afii57446 = 0x0646;\n  t.afii57448 = 0x0648;\n  t.afii57449 = 0x0649;\n  t.afii57450 = 0x064a;\n  t.afii57451 = 0x064b;\n  t.afii57452 = 0x064c;\n  t.afii57453 = 0x064d;\n  t.afii57454 = 0x064e;\n  t.afii57455 = 0x064f;\n  t.afii57456 = 0x0650;\n  t.afii57457 = 0x0651;\n  t.afii57458 = 0x0652;\n  t.afii57470 = 0x0647;\n  t.afii57505 = 0x06a4;\n  t.afii57506 = 0x067e;\n  t.afii57507 = 0x0686;\n  t.afii57508 = 0x0698;\n  t.afii57509 = 0x06af;\n  t.afii57511 = 0x0679;\n  t.afii57512 = 0x0688;\n  t.afii57513 = 0x0691;\n  t.afii57514 = 0x06ba;\n  t.afii57519 = 0x06d2;\n  t.afii57534 = 0x06d5;\n  t.afii57636 = 0x20aa;\n  t.afii57645 = 0x05be;\n  t.afii57658 = 0x05c3;\n  t.afii57664 = 0x05d0;\n  t.afii57665 = 0x05d1;\n  t.afii57666 = 0x05d2;\n  t.afii57667 = 0x05d3;\n  t.afii57668 = 0x05d4;\n  t.afii57669 = 0x05d5;\n  t.afii57670 = 0x05d6;\n  t.afii57671 = 0x05d7;\n  t.afii57672 = 0x05d8;\n  t.afii57673 = 0x05d9;\n  t.afii57674 = 0x05da;\n  t.afii57675 = 0x05db;\n  t.afii57676 = 0x05dc;\n  t.afii57677 = 0x05dd;\n  t.afii57678 = 0x05de;\n  t.afii57679 = 0x05df;\n  t.afii57680 = 0x05e0;\n  t.afii57681 = 0x05e1;\n  t.afii57682 = 0x05e2;\n  t.afii57683 = 0x05e3;\n  t.afii57684 = 0x05e4;\n  t.afii57685 = 0x05e5;\n  t.afii57686 = 0x05e6;\n  t.afii57687 = 0x05e7;\n  t.afii57688 = 0x05e8;\n  t.afii57689 = 0x05e9;\n  t.afii57690 = 0x05ea;\n  t.afii57694 = 0xfb2a;\n  t.afii57695 = 0xfb2b;\n  t.afii57700 = 0xfb4b;\n  t.afii57705 = 0xfb1f;\n  t.afii57716 = 0x05f0;\n  t.afii57717 = 0x05f1;\n  t.afii57718 = 0x05f2;\n  t.afii57723 = 0xfb35;\n  t.afii57793 = 0x05b4;\n  t.afii57794 = 0x05b5;\n  t.afii57795 = 0x05b6;\n  t.afii57796 = 0x05bb;\n  t.afii57797 = 0x05b8;\n  t.afii57798 = 0x05b7;\n  t.afii57799 = 0x05b0;\n  t.afii57800 = 0x05b2;\n  t.afii57801 = 0x05b1;\n  t.afii57802 = 0x05b3;\n  t.afii57803 = 0x05c2;\n  t.afii57804 = 0x05c1;\n  t.afii57806 = 0x05b9;\n  t.afii57807 = 0x05bc;\n  t.afii57839 = 0x05bd;\n  t.afii57841 = 0x05bf;\n  t.afii57842 = 0x05c0;\n  t.afii57929 = 0x02bc;\n  t.afii61248 = 0x2105;\n  t.afii61289 = 0x2113;\n  t.afii61352 = 0x2116;\n  t.afii61573 = 0x202c;\n  t.afii61574 = 0x202d;\n  t.afii61575 = 0x202e;\n  t.afii61664 = 0x200c;\n  t.afii63167 = 0x066d;\n  t.afii64937 = 0x02bd;\n  t.agrave = 0x00e0;\n  t.agujarati = 0x0a85;\n  t.agurmukhi = 0x0a05;\n  t.ahiragana = 0x3042;\n  t.ahookabove = 0x1ea3;\n  t.aibengali = 0x0990;\n  t.aibopomofo = 0x311e;\n  t.aideva = 0x0910;\n  t.aiecyrillic = 0x04d5;\n  t.aigujarati = 0x0a90;\n  t.aigurmukhi = 0x0a10;\n  t.aimatragurmukhi = 0x0a48;\n  t.ainarabic = 0x0639;\n  t.ainfinalarabic = 0xfeca;\n  t.aininitialarabic = 0xfecb;\n  t.ainmedialarabic = 0xfecc;\n  t.ainvertedbreve = 0x0203;\n  t.aivowelsignbengali = 0x09c8;\n  t.aivowelsigndeva = 0x0948;\n  t.aivowelsigngujarati = 0x0ac8;\n  t.akatakana = 0x30a2;\n  t.akatakanahalfwidth = 0xff71;\n  t.akorean = 0x314f;\n  t.alef = 0x05d0;\n  t.alefarabic = 0x0627;\n  t.alefdageshhebrew = 0xfb30;\n  t.aleffinalarabic = 0xfe8e;\n  t.alefhamzaabovearabic = 0x0623;\n  t.alefhamzaabovefinalarabic = 0xfe84;\n  t.alefhamzabelowarabic = 0x0625;\n  t.alefhamzabelowfinalarabic = 0xfe88;\n  t.alefhebrew = 0x05d0;\n  t.aleflamedhebrew = 0xfb4f;\n  t.alefmaddaabovearabic = 0x0622;\n  t.alefmaddaabovefinalarabic = 0xfe82;\n  t.alefmaksuraarabic = 0x0649;\n  t.alefmaksurafinalarabic = 0xfef0;\n  t.alefmaksurainitialarabic = 0xfef3;\n  t.alefmaksuramedialarabic = 0xfef4;\n  t.alefpatahhebrew = 0xfb2e;\n  t.alefqamatshebrew = 0xfb2f;\n  t.aleph = 0x2135;\n  t.allequal = 0x224c;\n  t.alpha = 0x03b1;\n  t.alphatonos = 0x03ac;\n  t.amacron = 0x0101;\n  t.amonospace = 0xff41;\n  t.ampersand = 0x0026;\n  t.ampersandmonospace = 0xff06;\n  t.ampersandsmall = 0xf726;\n  t.amsquare = 0x33c2;\n  t.anbopomofo = 0x3122;\n  t.angbopomofo = 0x3124;\n  t.angbracketleft = 0x3008; // Glyph is missing from Adobe's original list.\n  t.angbracketright = 0x3009; // Glyph is missing from Adobe's original list.\n  t.angkhankhuthai = 0x0e5a;\n  t.angle = 0x2220;\n  t.anglebracketleft = 0x3008;\n  t.anglebracketleftvertical = 0xfe3f;\n  t.anglebracketright = 0x3009;\n  t.anglebracketrightvertical = 0xfe40;\n  t.angleleft = 0x2329;\n  t.angleright = 0x232a;\n  t.angstrom = 0x212b;\n  t.anoteleia = 0x0387;\n  t.anudattadeva = 0x0952;\n  t.anusvarabengali = 0x0982;\n  t.anusvaradeva = 0x0902;\n  t.anusvaragujarati = 0x0a82;\n  t.aogonek = 0x0105;\n  t.apaatosquare = 0x3300;\n  t.aparen = 0x249c;\n  t.apostrophearmenian = 0x055a;\n  t.apostrophemod = 0x02bc;\n  t.apple = 0xf8ff;\n  t.approaches = 0x2250;\n  t.approxequal = 0x2248;\n  t.approxequalorimage = 0x2252;\n  t.approximatelyequal = 0x2245;\n  t.araeaekorean = 0x318e;\n  t.araeakorean = 0x318d;\n  t.arc = 0x2312;\n  t.arighthalfring = 0x1e9a;\n  t.aring = 0x00e5;\n  t.aringacute = 0x01fb;\n  t.aringbelow = 0x1e01;\n  t.arrowboth = 0x2194;\n  t.arrowdashdown = 0x21e3;\n  t.arrowdashleft = 0x21e0;\n  t.arrowdashright = 0x21e2;\n  t.arrowdashup = 0x21e1;\n  t.arrowdblboth = 0x21d4;\n  t.arrowdbldown = 0x21d3;\n  t.arrowdblleft = 0x21d0;\n  t.arrowdblright = 0x21d2;\n  t.arrowdblup = 0x21d1;\n  t.arrowdown = 0x2193;\n  t.arrowdownleft = 0x2199;\n  t.arrowdownright = 0x2198;\n  t.arrowdownwhite = 0x21e9;\n  t.arrowheaddownmod = 0x02c5;\n  t.arrowheadleftmod = 0x02c2;\n  t.arrowheadrightmod = 0x02c3;\n  t.arrowheadupmod = 0x02c4;\n  t.arrowhorizex = 0xf8e7;\n  t.arrowleft = 0x2190;\n  t.arrowleftdbl = 0x21d0;\n  t.arrowleftdblstroke = 0x21cd;\n  t.arrowleftoverright = 0x21c6;\n  t.arrowleftwhite = 0x21e6;\n  t.arrowright = 0x2192;\n  t.arrowrightdblstroke = 0x21cf;\n  t.arrowrightheavy = 0x279e;\n  t.arrowrightoverleft = 0x21c4;\n  t.arrowrightwhite = 0x21e8;\n  t.arrowtableft = 0x21e4;\n  t.arrowtabright = 0x21e5;\n  t.arrowup = 0x2191;\n  t.arrowupdn = 0x2195;\n  t.arrowupdnbse = 0x21a8;\n  t.arrowupdownbase = 0x21a8;\n  t.arrowupleft = 0x2196;\n  t.arrowupleftofdown = 0x21c5;\n  t.arrowupright = 0x2197;\n  t.arrowupwhite = 0x21e7;\n  t.arrowvertex = 0xf8e6;\n  t.asciicircum = 0x005e;\n  t.asciicircummonospace = 0xff3e;\n  t.asciitilde = 0x007e;\n  t.asciitildemonospace = 0xff5e;\n  t.ascript = 0x0251;\n  t.ascriptturned = 0x0252;\n  t.asmallhiragana = 0x3041;\n  t.asmallkatakana = 0x30a1;\n  t.asmallkatakanahalfwidth = 0xff67;\n  t.asterisk = 0x002a;\n  t.asteriskaltonearabic = 0x066d;\n  t.asteriskarabic = 0x066d;\n  t.asteriskmath = 0x2217;\n  t.asteriskmonospace = 0xff0a;\n  t.asterisksmall = 0xfe61;\n  t.asterism = 0x2042;\n  t.asuperior = 0xf6e9;\n  t.asymptoticallyequal = 0x2243;\n  t.at = 0x0040;\n  t.atilde = 0x00e3;\n  t.atmonospace = 0xff20;\n  t.atsmall = 0xfe6b;\n  t.aturned = 0x0250;\n  t.aubengali = 0x0994;\n  t.aubopomofo = 0x3120;\n  t.audeva = 0x0914;\n  t.augujarati = 0x0a94;\n  t.augurmukhi = 0x0a14;\n  t.aulengthmarkbengali = 0x09d7;\n  t.aumatragurmukhi = 0x0a4c;\n  t.auvowelsignbengali = 0x09cc;\n  t.auvowelsigndeva = 0x094c;\n  t.auvowelsigngujarati = 0x0acc;\n  t.avagrahadeva = 0x093d;\n  t.aybarmenian = 0x0561;\n  t.ayin = 0x05e2;\n  t.ayinaltonehebrew = 0xfb20;\n  t.ayinhebrew = 0x05e2;\n  t.b = 0x0062;\n  t.babengali = 0x09ac;\n  t.backslash = 0x005c;\n  t.backslashmonospace = 0xff3c;\n  t.badeva = 0x092c;\n  t.bagujarati = 0x0aac;\n  t.bagurmukhi = 0x0a2c;\n  t.bahiragana = 0x3070;\n  t.bahtthai = 0x0e3f;\n  t.bakatakana = 0x30d0;\n  t.bar = 0x007c;\n  t.barmonospace = 0xff5c;\n  t.bbopomofo = 0x3105;\n  t.bcircle = 0x24d1;\n  t.bdotaccent = 0x1e03;\n  t.bdotbelow = 0x1e05;\n  t.beamedsixteenthnotes = 0x266c;\n  t.because = 0x2235;\n  t.becyrillic = 0x0431;\n  t.beharabic = 0x0628;\n  t.behfinalarabic = 0xfe90;\n  t.behinitialarabic = 0xfe91;\n  t.behiragana = 0x3079;\n  t.behmedialarabic = 0xfe92;\n  t.behmeeminitialarabic = 0xfc9f;\n  t.behmeemisolatedarabic = 0xfc08;\n  t.behnoonfinalarabic = 0xfc6d;\n  t.bekatakana = 0x30d9;\n  t.benarmenian = 0x0562;\n  t.bet = 0x05d1;\n  t.beta = 0x03b2;\n  t.betasymbolgreek = 0x03d0;\n  t.betdagesh = 0xfb31;\n  t.betdageshhebrew = 0xfb31;\n  t.bethebrew = 0x05d1;\n  t.betrafehebrew = 0xfb4c;\n  t.bhabengali = 0x09ad;\n  t.bhadeva = 0x092d;\n  t.bhagujarati = 0x0aad;\n  t.bhagurmukhi = 0x0a2d;\n  t.bhook = 0x0253;\n  t.bihiragana = 0x3073;\n  t.bikatakana = 0x30d3;\n  t.bilabialclick = 0x0298;\n  t.bindigurmukhi = 0x0a02;\n  t.birusquare = 0x3331;\n  t.blackcircle = 0x25cf;\n  t.blackdiamond = 0x25c6;\n  t.blackdownpointingtriangle = 0x25bc;\n  t.blackleftpointingpointer = 0x25c4;\n  t.blackleftpointingtriangle = 0x25c0;\n  t.blacklenticularbracketleft = 0x3010;\n  t.blacklenticularbracketleftvertical = 0xfe3b;\n  t.blacklenticularbracketright = 0x3011;\n  t.blacklenticularbracketrightvertical = 0xfe3c;\n  t.blacklowerlefttriangle = 0x25e3;\n  t.blacklowerrighttriangle = 0x25e2;\n  t.blackrectangle = 0x25ac;\n  t.blackrightpointingpointer = 0x25ba;\n  t.blackrightpointingtriangle = 0x25b6;\n  t.blacksmallsquare = 0x25aa;\n  t.blacksmilingface = 0x263b;\n  t.blacksquare = 0x25a0;\n  t.blackstar = 0x2605;\n  t.blackupperlefttriangle = 0x25e4;\n  t.blackupperrighttriangle = 0x25e5;\n  t.blackuppointingsmalltriangle = 0x25b4;\n  t.blackuppointingtriangle = 0x25b2;\n  t.blank = 0x2423;\n  t.blinebelow = 0x1e07;\n  t.block = 0x2588;\n  t.bmonospace = 0xff42;\n  t.bobaimaithai = 0x0e1a;\n  t.bohiragana = 0x307c;\n  t.bokatakana = 0x30dc;\n  t.bparen = 0x249d;\n  t.bqsquare = 0x33c3;\n  t.braceex = 0xf8f4;\n  t.braceleft = 0x007b;\n  t.braceleftbt = 0xf8f3;\n  t.braceleftmid = 0xf8f2;\n  t.braceleftmonospace = 0xff5b;\n  t.braceleftsmall = 0xfe5b;\n  t.bracelefttp = 0xf8f1;\n  t.braceleftvertical = 0xfe37;\n  t.braceright = 0x007d;\n  t.bracerightbt = 0xf8fe;\n  t.bracerightmid = 0xf8fd;\n  t.bracerightmonospace = 0xff5d;\n  t.bracerightsmall = 0xfe5c;\n  t.bracerighttp = 0xf8fc;\n  t.bracerightvertical = 0xfe38;\n  t.bracketleft = 0x005b;\n  t.bracketleftbt = 0xf8f0;\n  t.bracketleftex = 0xf8ef;\n  t.bracketleftmonospace = 0xff3b;\n  t.bracketlefttp = 0xf8ee;\n  t.bracketright = 0x005d;\n  t.bracketrightbt = 0xf8fb;\n  t.bracketrightex = 0xf8fa;\n  t.bracketrightmonospace = 0xff3d;\n  t.bracketrighttp = 0xf8f9;\n  t.breve = 0x02d8;\n  t.brevebelowcmb = 0x032e;\n  t.brevecmb = 0x0306;\n  t.breveinvertedbelowcmb = 0x032f;\n  t.breveinvertedcmb = 0x0311;\n  t.breveinverteddoublecmb = 0x0361;\n  t.bridgebelowcmb = 0x032a;\n  t.bridgeinvertedbelowcmb = 0x033a;\n  t.brokenbar = 0x00a6;\n  t.bstroke = 0x0180;\n  t.bsuperior = 0xf6ea;\n  t.btopbar = 0x0183;\n  t.buhiragana = 0x3076;\n  t.bukatakana = 0x30d6;\n  t.bullet = 0x2022;\n  t.bulletinverse = 0x25d8;\n  t.bulletoperator = 0x2219;\n  t.bullseye = 0x25ce;\n  t.c = 0x0063;\n  t.caarmenian = 0x056e;\n  t.cabengali = 0x099a;\n  t.cacute = 0x0107;\n  t.cadeva = 0x091a;\n  t.cagujarati = 0x0a9a;\n  t.cagurmukhi = 0x0a1a;\n  t.calsquare = 0x3388;\n  t.candrabindubengali = 0x0981;\n  t.candrabinducmb = 0x0310;\n  t.candrabindudeva = 0x0901;\n  t.candrabindugujarati = 0x0a81;\n  t.capslock = 0x21ea;\n  t.careof = 0x2105;\n  t.caron = 0x02c7;\n  t.caronbelowcmb = 0x032c;\n  t.caroncmb = 0x030c;\n  t.carriagereturn = 0x21b5;\n  t.cbopomofo = 0x3118;\n  t.ccaron = 0x010d;\n  t.ccedilla = 0x00e7;\n  t.ccedillaacute = 0x1e09;\n  t.ccircle = 0x24d2;\n  t.ccircumflex = 0x0109;\n  t.ccurl = 0x0255;\n  t.cdot = 0x010b;\n  t.cdotaccent = 0x010b;\n  t.cdsquare = 0x33c5;\n  t.cedilla = 0x00b8;\n  t.cedillacmb = 0x0327;\n  t.cent = 0x00a2;\n  t.centigrade = 0x2103;\n  t.centinferior = 0xf6df;\n  t.centmonospace = 0xffe0;\n  t.centoldstyle = 0xf7a2;\n  t.centsuperior = 0xf6e0;\n  t.chaarmenian = 0x0579;\n  t.chabengali = 0x099b;\n  t.chadeva = 0x091b;\n  t.chagujarati = 0x0a9b;\n  t.chagurmukhi = 0x0a1b;\n  t.chbopomofo = 0x3114;\n  t.cheabkhasiancyrillic = 0x04bd;\n  t.checkmark = 0x2713;\n  t.checyrillic = 0x0447;\n  t.chedescenderabkhasiancyrillic = 0x04bf;\n  t.chedescendercyrillic = 0x04b7;\n  t.chedieresiscyrillic = 0x04f5;\n  t.cheharmenian = 0x0573;\n  t.chekhakassiancyrillic = 0x04cc;\n  t.cheverticalstrokecyrillic = 0x04b9;\n  t.chi = 0x03c7;\n  t.chieuchacirclekorean = 0x3277;\n  t.chieuchaparenkorean = 0x3217;\n  t.chieuchcirclekorean = 0x3269;\n  t.chieuchkorean = 0x314a;\n  t.chieuchparenkorean = 0x3209;\n  t.chochangthai = 0x0e0a;\n  t.chochanthai = 0x0e08;\n  t.chochingthai = 0x0e09;\n  t.chochoethai = 0x0e0c;\n  t.chook = 0x0188;\n  t.cieucacirclekorean = 0x3276;\n  t.cieucaparenkorean = 0x3216;\n  t.cieuccirclekorean = 0x3268;\n  t.cieuckorean = 0x3148;\n  t.cieucparenkorean = 0x3208;\n  t.cieucuparenkorean = 0x321c;\n  t.circle = 0x25cb;\n  t.circlecopyrt = 0x00a9; // Glyph is missing from Adobe's original list.\n  t.circlemultiply = 0x2297;\n  t.circleot = 0x2299;\n  t.circleplus = 0x2295;\n  t.circlepostalmark = 0x3036;\n  t.circlewithlefthalfblack = 0x25d0;\n  t.circlewithrighthalfblack = 0x25d1;\n  t.circumflex = 0x02c6;\n  t.circumflexbelowcmb = 0x032d;\n  t.circumflexcmb = 0x0302;\n  t.clear = 0x2327;\n  t.clickalveolar = 0x01c2;\n  t.clickdental = 0x01c0;\n  t.clicklateral = 0x01c1;\n  t.clickretroflex = 0x01c3;\n  t.club = 0x2663;\n  t.clubsuitblack = 0x2663;\n  t.clubsuitwhite = 0x2667;\n  t.cmcubedsquare = 0x33a4;\n  t.cmonospace = 0xff43;\n  t.cmsquaredsquare = 0x33a0;\n  t.coarmenian = 0x0581;\n  t.colon = 0x003a;\n  t.colonmonetary = 0x20a1;\n  t.colonmonospace = 0xff1a;\n  t.colonsign = 0x20a1;\n  t.colonsmall = 0xfe55;\n  t.colontriangularhalfmod = 0x02d1;\n  t.colontriangularmod = 0x02d0;\n  t.comma = 0x002c;\n  t.commaabovecmb = 0x0313;\n  t.commaaboverightcmb = 0x0315;\n  t.commaaccent = 0xf6c3;\n  t.commaarabic = 0x060c;\n  t.commaarmenian = 0x055d;\n  t.commainferior = 0xf6e1;\n  t.commamonospace = 0xff0c;\n  t.commareversedabovecmb = 0x0314;\n  t.commareversedmod = 0x02bd;\n  t.commasmall = 0xfe50;\n  t.commasuperior = 0xf6e2;\n  t.commaturnedabovecmb = 0x0312;\n  t.commaturnedmod = 0x02bb;\n  t.compass = 0x263c;\n  t.congruent = 0x2245;\n  t.contourintegral = 0x222e;\n  t.control = 0x2303;\n  t.controlACK = 0x0006;\n  t.controlBEL = 0x0007;\n  t.controlBS = 0x0008;\n  t.controlCAN = 0x0018;\n  t.controlCR = 0x000d;\n  t.controlDC1 = 0x0011;\n  t.controlDC2 = 0x0012;\n  t.controlDC3 = 0x0013;\n  t.controlDC4 = 0x0014;\n  t.controlDEL = 0x007f;\n  t.controlDLE = 0x0010;\n  t.controlEM = 0x0019;\n  t.controlENQ = 0x0005;\n  t.controlEOT = 0x0004;\n  t.controlESC = 0x001b;\n  t.controlETB = 0x0017;\n  t.controlETX = 0x0003;\n  t.controlFF = 0x000c;\n  t.controlFS = 0x001c;\n  t.controlGS = 0x001d;\n  t.controlHT = 0x0009;\n  t.controlLF = 0x000a;\n  t.controlNAK = 0x0015;\n  t.controlNULL = 0x0000; // Glyph is missing from Adobe's original list.\n  t.controlRS = 0x001e;\n  t.controlSI = 0x000f;\n  t.controlSO = 0x000e;\n  t.controlSOT = 0x0002;\n  t.controlSTX = 0x0001;\n  t.controlSUB = 0x001a;\n  t.controlSYN = 0x0016;\n  t.controlUS = 0x001f;\n  t.controlVT = 0x000b;\n  t.copyright = 0x00a9;\n  t.copyrightsans = 0xf8e9;\n  t.copyrightserif = 0xf6d9;\n  t.cornerbracketleft = 0x300c;\n  t.cornerbracketlefthalfwidth = 0xff62;\n  t.cornerbracketleftvertical = 0xfe41;\n  t.cornerbracketright = 0x300d;\n  t.cornerbracketrighthalfwidth = 0xff63;\n  t.cornerbracketrightvertical = 0xfe42;\n  t.corporationsquare = 0x337f;\n  t.cosquare = 0x33c7;\n  t.coverkgsquare = 0x33c6;\n  t.cparen = 0x249e;\n  t.cruzeiro = 0x20a2;\n  t.cstretched = 0x0297;\n  t.curlyand = 0x22cf;\n  t.curlyor = 0x22ce;\n  t.currency = 0x00a4;\n  t.cyrBreve = 0xf6d1;\n  t.cyrFlex = 0xf6d2;\n  t.cyrbreve = 0xf6d4;\n  t.cyrflex = 0xf6d5;\n  t.d = 0x0064;\n  t.daarmenian = 0x0564;\n  t.dabengali = 0x09a6;\n  t.dadarabic = 0x0636;\n  t.dadeva = 0x0926;\n  t.dadfinalarabic = 0xfebe;\n  t.dadinitialarabic = 0xfebf;\n  t.dadmedialarabic = 0xfec0;\n  t.dagesh = 0x05bc;\n  t.dageshhebrew = 0x05bc;\n  t.dagger = 0x2020;\n  t.daggerdbl = 0x2021;\n  t.dagujarati = 0x0aa6;\n  t.dagurmukhi = 0x0a26;\n  t.dahiragana = 0x3060;\n  t.dakatakana = 0x30c0;\n  t.dalarabic = 0x062f;\n  t.dalet = 0x05d3;\n  t.daletdagesh = 0xfb33;\n  t.daletdageshhebrew = 0xfb33;\n  t.dalethebrew = 0x05d3;\n  t.dalfinalarabic = 0xfeaa;\n  t.dammaarabic = 0x064f;\n  t.dammalowarabic = 0x064f;\n  t.dammatanaltonearabic = 0x064c;\n  t.dammatanarabic = 0x064c;\n  t.danda = 0x0964;\n  t.dargahebrew = 0x05a7;\n  t.dargalefthebrew = 0x05a7;\n  t.dasiapneumatacyrilliccmb = 0x0485;\n  t.dblGrave = 0xf6d3;\n  t.dblanglebracketleft = 0x300a;\n  t.dblanglebracketleftvertical = 0xfe3d;\n  t.dblanglebracketright = 0x300b;\n  t.dblanglebracketrightvertical = 0xfe3e;\n  t.dblarchinvertedbelowcmb = 0x032b;\n  t.dblarrowleft = 0x21d4;\n  t.dblarrowright = 0x21d2;\n  t.dbldanda = 0x0965;\n  t.dblgrave = 0xf6d6;\n  t.dblgravecmb = 0x030f;\n  t.dblintegral = 0x222c;\n  t.dbllowline = 0x2017;\n  t.dbllowlinecmb = 0x0333;\n  t.dbloverlinecmb = 0x033f;\n  t.dblprimemod = 0x02ba;\n  t.dblverticalbar = 0x2016;\n  t.dblverticallineabovecmb = 0x030e;\n  t.dbopomofo = 0x3109;\n  t.dbsquare = 0x33c8;\n  t.dcaron = 0x010f;\n  t.dcedilla = 0x1e11;\n  t.dcircle = 0x24d3;\n  t.dcircumflexbelow = 0x1e13;\n  t.dcroat = 0x0111;\n  t.ddabengali = 0x09a1;\n  t.ddadeva = 0x0921;\n  t.ddagujarati = 0x0aa1;\n  t.ddagurmukhi = 0x0a21;\n  t.ddalarabic = 0x0688;\n  t.ddalfinalarabic = 0xfb89;\n  t.dddhadeva = 0x095c;\n  t.ddhabengali = 0x09a2;\n  t.ddhadeva = 0x0922;\n  t.ddhagujarati = 0x0aa2;\n  t.ddhagurmukhi = 0x0a22;\n  t.ddotaccent = 0x1e0b;\n  t.ddotbelow = 0x1e0d;\n  t.decimalseparatorarabic = 0x066b;\n  t.decimalseparatorpersian = 0x066b;\n  t.decyrillic = 0x0434;\n  t.degree = 0x00b0;\n  t.dehihebrew = 0x05ad;\n  t.dehiragana = 0x3067;\n  t.deicoptic = 0x03ef;\n  t.dekatakana = 0x30c7;\n  t.deleteleft = 0x232b;\n  t.deleteright = 0x2326;\n  t.delta = 0x03b4;\n  t.deltaturned = 0x018d;\n  t.denominatorminusonenumeratorbengali = 0x09f8;\n  t.dezh = 0x02a4;\n  t.dhabengali = 0x09a7;\n  t.dhadeva = 0x0927;\n  t.dhagujarati = 0x0aa7;\n  t.dhagurmukhi = 0x0a27;\n  t.dhook = 0x0257;\n  t.dialytikatonos = 0x0385;\n  t.dialytikatonoscmb = 0x0344;\n  t.diamond = 0x2666;\n  t.diamondsuitwhite = 0x2662;\n  t.dieresis = 0x00a8;\n  t.dieresisacute = 0xf6d7;\n  t.dieresisbelowcmb = 0x0324;\n  t.dieresiscmb = 0x0308;\n  t.dieresisgrave = 0xf6d8;\n  t.dieresistonos = 0x0385;\n  t.dihiragana = 0x3062;\n  t.dikatakana = 0x30c2;\n  t.dittomark = 0x3003;\n  t.divide = 0x00f7;\n  t.divides = 0x2223;\n  t.divisionslash = 0x2215;\n  t.djecyrillic = 0x0452;\n  t.dkshade = 0x2593;\n  t.dlinebelow = 0x1e0f;\n  t.dlsquare = 0x3397;\n  t.dmacron = 0x0111;\n  t.dmonospace = 0xff44;\n  t.dnblock = 0x2584;\n  t.dochadathai = 0x0e0e;\n  t.dodekthai = 0x0e14;\n  t.dohiragana = 0x3069;\n  t.dokatakana = 0x30c9;\n  t.dollar = 0x0024;\n  t.dollarinferior = 0xf6e3;\n  t.dollarmonospace = 0xff04;\n  t.dollaroldstyle = 0xf724;\n  t.dollarsmall = 0xfe69;\n  t.dollarsuperior = 0xf6e4;\n  t.dong = 0x20ab;\n  t.dorusquare = 0x3326;\n  t.dotaccent = 0x02d9;\n  t.dotaccentcmb = 0x0307;\n  t.dotbelowcmb = 0x0323;\n  t.dotbelowcomb = 0x0323;\n  t.dotkatakana = 0x30fb;\n  t.dotlessi = 0x0131;\n  t.dotlessj = 0xf6be;\n  t.dotlessjstrokehook = 0x0284;\n  t.dotmath = 0x22c5;\n  t.dottedcircle = 0x25cc;\n  t.doubleyodpatah = 0xfb1f;\n  t.doubleyodpatahhebrew = 0xfb1f;\n  t.downtackbelowcmb = 0x031e;\n  t.downtackmod = 0x02d5;\n  t.dparen = 0x249f;\n  t.dsuperior = 0xf6eb;\n  t.dtail = 0x0256;\n  t.dtopbar = 0x018c;\n  t.duhiragana = 0x3065;\n  t.dukatakana = 0x30c5;\n  t.dz = 0x01f3;\n  t.dzaltone = 0x02a3;\n  t.dzcaron = 0x01c6;\n  t.dzcurl = 0x02a5;\n  t.dzeabkhasiancyrillic = 0x04e1;\n  t.dzecyrillic = 0x0455;\n  t.dzhecyrillic = 0x045f;\n  t.e = 0x0065;\n  t.eacute = 0x00e9;\n  t.earth = 0x2641;\n  t.ebengali = 0x098f;\n  t.ebopomofo = 0x311c;\n  t.ebreve = 0x0115;\n  t.ecandradeva = 0x090d;\n  t.ecandragujarati = 0x0a8d;\n  t.ecandravowelsigndeva = 0x0945;\n  t.ecandravowelsigngujarati = 0x0ac5;\n  t.ecaron = 0x011b;\n  t.ecedillabreve = 0x1e1d;\n  t.echarmenian = 0x0565;\n  t.echyiwnarmenian = 0x0587;\n  t.ecircle = 0x24d4;\n  t.ecircumflex = 0x00ea;\n  t.ecircumflexacute = 0x1ebf;\n  t.ecircumflexbelow = 0x1e19;\n  t.ecircumflexdotbelow = 0x1ec7;\n  t.ecircumflexgrave = 0x1ec1;\n  t.ecircumflexhookabove = 0x1ec3;\n  t.ecircumflextilde = 0x1ec5;\n  t.ecyrillic = 0x0454;\n  t.edblgrave = 0x0205;\n  t.edeva = 0x090f;\n  t.edieresis = 0x00eb;\n  t.edot = 0x0117;\n  t.edotaccent = 0x0117;\n  t.edotbelow = 0x1eb9;\n  t.eegurmukhi = 0x0a0f;\n  t.eematragurmukhi = 0x0a47;\n  t.efcyrillic = 0x0444;\n  t.egrave = 0x00e8;\n  t.egujarati = 0x0a8f;\n  t.eharmenian = 0x0567;\n  t.ehbopomofo = 0x311d;\n  t.ehiragana = 0x3048;\n  t.ehookabove = 0x1ebb;\n  t.eibopomofo = 0x311f;\n  t.eight = 0x0038;\n  t.eightarabic = 0x0668;\n  t.eightbengali = 0x09ee;\n  t.eightcircle = 0x2467;\n  t.eightcircleinversesansserif = 0x2791;\n  t.eightdeva = 0x096e;\n  t.eighteencircle = 0x2471;\n  t.eighteenparen = 0x2485;\n  t.eighteenperiod = 0x2499;\n  t.eightgujarati = 0x0aee;\n  t.eightgurmukhi = 0x0a6e;\n  t.eighthackarabic = 0x0668;\n  t.eighthangzhou = 0x3028;\n  t.eighthnotebeamed = 0x266b;\n  t.eightideographicparen = 0x3227;\n  t.eightinferior = 0x2088;\n  t.eightmonospace = 0xff18;\n  t.eightoldstyle = 0xf738;\n  t.eightparen = 0x247b;\n  t.eightperiod = 0x248f;\n  t.eightpersian = 0x06f8;\n  t.eightroman = 0x2177;\n  t.eightsuperior = 0x2078;\n  t.eightthai = 0x0e58;\n  t.einvertedbreve = 0x0207;\n  t.eiotifiedcyrillic = 0x0465;\n  t.ekatakana = 0x30a8;\n  t.ekatakanahalfwidth = 0xff74;\n  t.ekonkargurmukhi = 0x0a74;\n  t.ekorean = 0x3154;\n  t.elcyrillic = 0x043b;\n  t.element = 0x2208;\n  t.elevencircle = 0x246a;\n  t.elevenparen = 0x247e;\n  t.elevenperiod = 0x2492;\n  t.elevenroman = 0x217a;\n  t.ellipsis = 0x2026;\n  t.ellipsisvertical = 0x22ee;\n  t.emacron = 0x0113;\n  t.emacronacute = 0x1e17;\n  t.emacrongrave = 0x1e15;\n  t.emcyrillic = 0x043c;\n  t.emdash = 0x2014;\n  t.emdashvertical = 0xfe31;\n  t.emonospace = 0xff45;\n  t.emphasismarkarmenian = 0x055b;\n  t.emptyset = 0x2205;\n  t.enbopomofo = 0x3123;\n  t.encyrillic = 0x043d;\n  t.endash = 0x2013;\n  t.endashvertical = 0xfe32;\n  t.endescendercyrillic = 0x04a3;\n  t.eng = 0x014b;\n  t.engbopomofo = 0x3125;\n  t.enghecyrillic = 0x04a5;\n  t.enhookcyrillic = 0x04c8;\n  t.enspace = 0x2002;\n  t.eogonek = 0x0119;\n  t.eokorean = 0x3153;\n  t.eopen = 0x025b;\n  t.eopenclosed = 0x029a;\n  t.eopenreversed = 0x025c;\n  t.eopenreversedclosed = 0x025e;\n  t.eopenreversedhook = 0x025d;\n  t.eparen = 0x24a0;\n  t.epsilon = 0x03b5;\n  t.epsilontonos = 0x03ad;\n  t.equal = 0x003d;\n  t.equalmonospace = 0xff1d;\n  t.equalsmall = 0xfe66;\n  t.equalsuperior = 0x207c;\n  t.equivalence = 0x2261;\n  t.erbopomofo = 0x3126;\n  t.ercyrillic = 0x0440;\n  t.ereversed = 0x0258;\n  t.ereversedcyrillic = 0x044d;\n  t.escyrillic = 0x0441;\n  t.esdescendercyrillic = 0x04ab;\n  t.esh = 0x0283;\n  t.eshcurl = 0x0286;\n  t.eshortdeva = 0x090e;\n  t.eshortvowelsigndeva = 0x0946;\n  t.eshreversedloop = 0x01aa;\n  t.eshsquatreversed = 0x0285;\n  t.esmallhiragana = 0x3047;\n  t.esmallkatakana = 0x30a7;\n  t.esmallkatakanahalfwidth = 0xff6a;\n  t.estimated = 0x212e;\n  t.esuperior = 0xf6ec;\n  t.eta = 0x03b7;\n  t.etarmenian = 0x0568;\n  t.etatonos = 0x03ae;\n  t.eth = 0x00f0;\n  t.etilde = 0x1ebd;\n  t.etildebelow = 0x1e1b;\n  t.etnahtafoukhhebrew = 0x0591;\n  t.etnahtafoukhlefthebrew = 0x0591;\n  t.etnahtahebrew = 0x0591;\n  t.etnahtalefthebrew = 0x0591;\n  t.eturned = 0x01dd;\n  t.eukorean = 0x3161;\n  t.euro = 0x20ac;\n  t.evowelsignbengali = 0x09c7;\n  t.evowelsigndeva = 0x0947;\n  t.evowelsigngujarati = 0x0ac7;\n  t.exclam = 0x0021;\n  t.exclamarmenian = 0x055c;\n  t.exclamdbl = 0x203c;\n  t.exclamdown = 0x00a1;\n  t.exclamdownsmall = 0xf7a1;\n  t.exclammonospace = 0xff01;\n  t.exclamsmall = 0xf721;\n  t.existential = 0x2203;\n  t.ezh = 0x0292;\n  t.ezhcaron = 0x01ef;\n  t.ezhcurl = 0x0293;\n  t.ezhreversed = 0x01b9;\n  t.ezhtail = 0x01ba;\n  t.f = 0x0066;\n  t.fadeva = 0x095e;\n  t.fagurmukhi = 0x0a5e;\n  t.fahrenheit = 0x2109;\n  t.fathaarabic = 0x064e;\n  t.fathalowarabic = 0x064e;\n  t.fathatanarabic = 0x064b;\n  t.fbopomofo = 0x3108;\n  t.fcircle = 0x24d5;\n  t.fdotaccent = 0x1e1f;\n  t.feharabic = 0x0641;\n  t.feharmenian = 0x0586;\n  t.fehfinalarabic = 0xfed2;\n  t.fehinitialarabic = 0xfed3;\n  t.fehmedialarabic = 0xfed4;\n  t.feicoptic = 0x03e5;\n  t.female = 0x2640;\n  t.ff = 0xfb00;\n  t.f_f = 0xfb00; // Fixes issue 11016.\n  t.ffi = 0xfb03;\n  t.ffl = 0xfb04;\n  t.fi = 0xfb01;\n  t.fifteencircle = 0x246e;\n  t.fifteenparen = 0x2482;\n  t.fifteenperiod = 0x2496;\n  t.figuredash = 0x2012;\n  t.filledbox = 0x25a0;\n  t.filledrect = 0x25ac;\n  t.finalkaf = 0x05da;\n  t.finalkafdagesh = 0xfb3a;\n  t.finalkafdageshhebrew = 0xfb3a;\n  t.finalkafhebrew = 0x05da;\n  t.finalmem = 0x05dd;\n  t.finalmemhebrew = 0x05dd;\n  t.finalnun = 0x05df;\n  t.finalnunhebrew = 0x05df;\n  t.finalpe = 0x05e3;\n  t.finalpehebrew = 0x05e3;\n  t.finaltsadi = 0x05e5;\n  t.finaltsadihebrew = 0x05e5;\n  t.firsttonechinese = 0x02c9;\n  t.fisheye = 0x25c9;\n  t.fitacyrillic = 0x0473;\n  t.five = 0x0035;\n  t.fivearabic = 0x0665;\n  t.fivebengali = 0x09eb;\n  t.fivecircle = 0x2464;\n  t.fivecircleinversesansserif = 0x278e;\n  t.fivedeva = 0x096b;\n  t.fiveeighths = 0x215d;\n  t.fivegujarati = 0x0aeb;\n  t.fivegurmukhi = 0x0a6b;\n  t.fivehackarabic = 0x0665;\n  t.fivehangzhou = 0x3025;\n  t.fiveideographicparen = 0x3224;\n  t.fiveinferior = 0x2085;\n  t.fivemonospace = 0xff15;\n  t.fiveoldstyle = 0xf735;\n  t.fiveparen = 0x2478;\n  t.fiveperiod = 0x248c;\n  t.fivepersian = 0x06f5;\n  t.fiveroman = 0x2174;\n  t.fivesuperior = 0x2075;\n  t.fivethai = 0x0e55;\n  t.fl = 0xfb02;\n  t.florin = 0x0192;\n  t.fmonospace = 0xff46;\n  t.fmsquare = 0x3399;\n  t.fofanthai = 0x0e1f;\n  t.fofathai = 0x0e1d;\n  t.fongmanthai = 0x0e4f;\n  t.forall = 0x2200;\n  t.four = 0x0034;\n  t.fourarabic = 0x0664;\n  t.fourbengali = 0x09ea;\n  t.fourcircle = 0x2463;\n  t.fourcircleinversesansserif = 0x278d;\n  t.fourdeva = 0x096a;\n  t.fourgujarati = 0x0aea;\n  t.fourgurmukhi = 0x0a6a;\n  t.fourhackarabic = 0x0664;\n  t.fourhangzhou = 0x3024;\n  t.fourideographicparen = 0x3223;\n  t.fourinferior = 0x2084;\n  t.fourmonospace = 0xff14;\n  t.fournumeratorbengali = 0x09f7;\n  t.fouroldstyle = 0xf734;\n  t.fourparen = 0x2477;\n  t.fourperiod = 0x248b;\n  t.fourpersian = 0x06f4;\n  t.fourroman = 0x2173;\n  t.foursuperior = 0x2074;\n  t.fourteencircle = 0x246d;\n  t.fourteenparen = 0x2481;\n  t.fourteenperiod = 0x2495;\n  t.fourthai = 0x0e54;\n  t.fourthtonechinese = 0x02cb;\n  t.fparen = 0x24a1;\n  t.fraction = 0x2044;\n  t.franc = 0x20a3;\n  t.g = 0x0067;\n  t.gabengali = 0x0997;\n  t.gacute = 0x01f5;\n  t.gadeva = 0x0917;\n  t.gafarabic = 0x06af;\n  t.gaffinalarabic = 0xfb93;\n  t.gafinitialarabic = 0xfb94;\n  t.gafmedialarabic = 0xfb95;\n  t.gagujarati = 0x0a97;\n  t.gagurmukhi = 0x0a17;\n  t.gahiragana = 0x304c;\n  t.gakatakana = 0x30ac;\n  t.gamma = 0x03b3;\n  t.gammalatinsmall = 0x0263;\n  t.gammasuperior = 0x02e0;\n  t.gangiacoptic = 0x03eb;\n  t.gbopomofo = 0x310d;\n  t.gbreve = 0x011f;\n  t.gcaron = 0x01e7;\n  t.gcedilla = 0x0123;\n  t.gcircle = 0x24d6;\n  t.gcircumflex = 0x011d;\n  t.gcommaaccent = 0x0123;\n  t.gdot = 0x0121;\n  t.gdotaccent = 0x0121;\n  t.gecyrillic = 0x0433;\n  t.gehiragana = 0x3052;\n  t.gekatakana = 0x30b2;\n  t.geometricallyequal = 0x2251;\n  t.gereshaccenthebrew = 0x059c;\n  t.gereshhebrew = 0x05f3;\n  t.gereshmuqdamhebrew = 0x059d;\n  t.germandbls = 0x00df;\n  t.gershayimaccenthebrew = 0x059e;\n  t.gershayimhebrew = 0x05f4;\n  t.getamark = 0x3013;\n  t.ghabengali = 0x0998;\n  t.ghadarmenian = 0x0572;\n  t.ghadeva = 0x0918;\n  t.ghagujarati = 0x0a98;\n  t.ghagurmukhi = 0x0a18;\n  t.ghainarabic = 0x063a;\n  t.ghainfinalarabic = 0xfece;\n  t.ghaininitialarabic = 0xfecf;\n  t.ghainmedialarabic = 0xfed0;\n  t.ghemiddlehookcyrillic = 0x0495;\n  t.ghestrokecyrillic = 0x0493;\n  t.gheupturncyrillic = 0x0491;\n  t.ghhadeva = 0x095a;\n  t.ghhagurmukhi = 0x0a5a;\n  t.ghook = 0x0260;\n  t.ghzsquare = 0x3393;\n  t.gihiragana = 0x304e;\n  t.gikatakana = 0x30ae;\n  t.gimarmenian = 0x0563;\n  t.gimel = 0x05d2;\n  t.gimeldagesh = 0xfb32;\n  t.gimeldageshhebrew = 0xfb32;\n  t.gimelhebrew = 0x05d2;\n  t.gjecyrillic = 0x0453;\n  t.glottalinvertedstroke = 0x01be;\n  t.glottalstop = 0x0294;\n  t.glottalstopinverted = 0x0296;\n  t.glottalstopmod = 0x02c0;\n  t.glottalstopreversed = 0x0295;\n  t.glottalstopreversedmod = 0x02c1;\n  t.glottalstopreversedsuperior = 0x02e4;\n  t.glottalstopstroke = 0x02a1;\n  t.glottalstopstrokereversed = 0x02a2;\n  t.gmacron = 0x1e21;\n  t.gmonospace = 0xff47;\n  t.gohiragana = 0x3054;\n  t.gokatakana = 0x30b4;\n  t.gparen = 0x24a2;\n  t.gpasquare = 0x33ac;\n  t.gradient = 0x2207;\n  t.grave = 0x0060;\n  t.gravebelowcmb = 0x0316;\n  t.gravecmb = 0x0300;\n  t.gravecomb = 0x0300;\n  t.gravedeva = 0x0953;\n  t.gravelowmod = 0x02ce;\n  t.gravemonospace = 0xff40;\n  t.gravetonecmb = 0x0340;\n  t.greater = 0x003e;\n  t.greaterequal = 0x2265;\n  t.greaterequalorless = 0x22db;\n  t.greatermonospace = 0xff1e;\n  t.greaterorequivalent = 0x2273;\n  t.greaterorless = 0x2277;\n  t.greateroverequal = 0x2267;\n  t.greatersmall = 0xfe65;\n  t.gscript = 0x0261;\n  t.gstroke = 0x01e5;\n  t.guhiragana = 0x3050;\n  t.guillemotleft = 0x00ab;\n  t.guillemotright = 0x00bb;\n  t.guilsinglleft = 0x2039;\n  t.guilsinglright = 0x203a;\n  t.gukatakana = 0x30b0;\n  t.guramusquare = 0x3318;\n  t.gysquare = 0x33c9;\n  t.h = 0x0068;\n  t.haabkhasiancyrillic = 0x04a9;\n  t.haaltonearabic = 0x06c1;\n  t.habengali = 0x09b9;\n  t.hadescendercyrillic = 0x04b3;\n  t.hadeva = 0x0939;\n  t.hagujarati = 0x0ab9;\n  t.hagurmukhi = 0x0a39;\n  t.haharabic = 0x062d;\n  t.hahfinalarabic = 0xfea2;\n  t.hahinitialarabic = 0xfea3;\n  t.hahiragana = 0x306f;\n  t.hahmedialarabic = 0xfea4;\n  t.haitusquare = 0x332a;\n  t.hakatakana = 0x30cf;\n  t.hakatakanahalfwidth = 0xff8a;\n  t.halantgurmukhi = 0x0a4d;\n  t.hamzaarabic = 0x0621;\n  t.hamzalowarabic = 0x0621;\n  t.hangulfiller = 0x3164;\n  t.hardsigncyrillic = 0x044a;\n  t.harpoonleftbarbup = 0x21bc;\n  t.harpoonrightbarbup = 0x21c0;\n  t.hasquare = 0x33ca;\n  t.hatafpatah = 0x05b2;\n  t.hatafpatah16 = 0x05b2;\n  t.hatafpatah23 = 0x05b2;\n  t.hatafpatah2f = 0x05b2;\n  t.hatafpatahhebrew = 0x05b2;\n  t.hatafpatahnarrowhebrew = 0x05b2;\n  t.hatafpatahquarterhebrew = 0x05b2;\n  t.hatafpatahwidehebrew = 0x05b2;\n  t.hatafqamats = 0x05b3;\n  t.hatafqamats1b = 0x05b3;\n  t.hatafqamats28 = 0x05b3;\n  t.hatafqamats34 = 0x05b3;\n  t.hatafqamatshebrew = 0x05b3;\n  t.hatafqamatsnarrowhebrew = 0x05b3;\n  t.hatafqamatsquarterhebrew = 0x05b3;\n  t.hatafqamatswidehebrew = 0x05b3;\n  t.hatafsegol = 0x05b1;\n  t.hatafsegol17 = 0x05b1;\n  t.hatafsegol24 = 0x05b1;\n  t.hatafsegol30 = 0x05b1;\n  t.hatafsegolhebrew = 0x05b1;\n  t.hatafsegolnarrowhebrew = 0x05b1;\n  t.hatafsegolquarterhebrew = 0x05b1;\n  t.hatafsegolwidehebrew = 0x05b1;\n  t.hbar = 0x0127;\n  t.hbopomofo = 0x310f;\n  t.hbrevebelow = 0x1e2b;\n  t.hcedilla = 0x1e29;\n  t.hcircle = 0x24d7;\n  t.hcircumflex = 0x0125;\n  t.hdieresis = 0x1e27;\n  t.hdotaccent = 0x1e23;\n  t.hdotbelow = 0x1e25;\n  t.he = 0x05d4;\n  t.heart = 0x2665;\n  t.heartsuitblack = 0x2665;\n  t.heartsuitwhite = 0x2661;\n  t.hedagesh = 0xfb34;\n  t.hedageshhebrew = 0xfb34;\n  t.hehaltonearabic = 0x06c1;\n  t.heharabic = 0x0647;\n  t.hehebrew = 0x05d4;\n  t.hehfinalaltonearabic = 0xfba7;\n  t.hehfinalalttwoarabic = 0xfeea;\n  t.hehfinalarabic = 0xfeea;\n  t.hehhamzaabovefinalarabic = 0xfba5;\n  t.hehhamzaaboveisolatedarabic = 0xfba4;\n  t.hehinitialaltonearabic = 0xfba8;\n  t.hehinitialarabic = 0xfeeb;\n  t.hehiragana = 0x3078;\n  t.hehmedialaltonearabic = 0xfba9;\n  t.hehmedialarabic = 0xfeec;\n  t.heiseierasquare = 0x337b;\n  t.hekatakana = 0x30d8;\n  t.hekatakanahalfwidth = 0xff8d;\n  t.hekutaarusquare = 0x3336;\n  t.henghook = 0x0267;\n  t.herutusquare = 0x3339;\n  t.het = 0x05d7;\n  t.hethebrew = 0x05d7;\n  t.hhook = 0x0266;\n  t.hhooksuperior = 0x02b1;\n  t.hieuhacirclekorean = 0x327b;\n  t.hieuhaparenkorean = 0x321b;\n  t.hieuhcirclekorean = 0x326d;\n  t.hieuhkorean = 0x314e;\n  t.hieuhparenkorean = 0x320d;\n  t.hihiragana = 0x3072;\n  t.hikatakana = 0x30d2;\n  t.hikatakanahalfwidth = 0xff8b;\n  t.hiriq = 0x05b4;\n  t.hiriq14 = 0x05b4;\n  t.hiriq21 = 0x05b4;\n  t.hiriq2d = 0x05b4;\n  t.hiriqhebrew = 0x05b4;\n  t.hiriqnarrowhebrew = 0x05b4;\n  t.hiriqquarterhebrew = 0x05b4;\n  t.hiriqwidehebrew = 0x05b4;\n  t.hlinebelow = 0x1e96;\n  t.hmonospace = 0xff48;\n  t.hoarmenian = 0x0570;\n  t.hohipthai = 0x0e2b;\n  t.hohiragana = 0x307b;\n  t.hokatakana = 0x30db;\n  t.hokatakanahalfwidth = 0xff8e;\n  t.holam = 0x05b9;\n  t.holam19 = 0x05b9;\n  t.holam26 = 0x05b9;\n  t.holam32 = 0x05b9;\n  t.holamhebrew = 0x05b9;\n  t.holamnarrowhebrew = 0x05b9;\n  t.holamquarterhebrew = 0x05b9;\n  t.holamwidehebrew = 0x05b9;\n  t.honokhukthai = 0x0e2e;\n  t.hookabovecomb = 0x0309;\n  t.hookcmb = 0x0309;\n  t.hookpalatalizedbelowcmb = 0x0321;\n  t.hookretroflexbelowcmb = 0x0322;\n  t.hoonsquare = 0x3342;\n  t.horicoptic = 0x03e9;\n  t.horizontalbar = 0x2015;\n  t.horncmb = 0x031b;\n  t.hotsprings = 0x2668;\n  t.house = 0x2302;\n  t.hparen = 0x24a3;\n  t.hsuperior = 0x02b0;\n  t.hturned = 0x0265;\n  t.huhiragana = 0x3075;\n  t.huiitosquare = 0x3333;\n  t.hukatakana = 0x30d5;\n  t.hukatakanahalfwidth = 0xff8c;\n  t.hungarumlaut = 0x02dd;\n  t.hungarumlautcmb = 0x030b;\n  t.hv = 0x0195;\n  t.hyphen = 0x002d;\n  t.hypheninferior = 0xf6e5;\n  t.hyphenmonospace = 0xff0d;\n  t.hyphensmall = 0xfe63;\n  t.hyphensuperior = 0xf6e6;\n  t.hyphentwo = 0x2010;\n  t.i = 0x0069;\n  t.iacute = 0x00ed;\n  t.iacyrillic = 0x044f;\n  t.ibengali = 0x0987;\n  t.ibopomofo = 0x3127;\n  t.ibreve = 0x012d;\n  t.icaron = 0x01d0;\n  t.icircle = 0x24d8;\n  t.icircumflex = 0x00ee;\n  t.icyrillic = 0x0456;\n  t.idblgrave = 0x0209;\n  t.ideographearthcircle = 0x328f;\n  t.ideographfirecircle = 0x328b;\n  t.ideographicallianceparen = 0x323f;\n  t.ideographiccallparen = 0x323a;\n  t.ideographiccentrecircle = 0x32a5;\n  t.ideographicclose = 0x3006;\n  t.ideographiccomma = 0x3001;\n  t.ideographiccommaleft = 0xff64;\n  t.ideographiccongratulationparen = 0x3237;\n  t.ideographiccorrectcircle = 0x32a3;\n  t.ideographicearthparen = 0x322f;\n  t.ideographicenterpriseparen = 0x323d;\n  t.ideographicexcellentcircle = 0x329d;\n  t.ideographicfestivalparen = 0x3240;\n  t.ideographicfinancialcircle = 0x3296;\n  t.ideographicfinancialparen = 0x3236;\n  t.ideographicfireparen = 0x322b;\n  t.ideographichaveparen = 0x3232;\n  t.ideographichighcircle = 0x32a4;\n  t.ideographiciterationmark = 0x3005;\n  t.ideographiclaborcircle = 0x3298;\n  t.ideographiclaborparen = 0x3238;\n  t.ideographicleftcircle = 0x32a7;\n  t.ideographiclowcircle = 0x32a6;\n  t.ideographicmedicinecircle = 0x32a9;\n  t.ideographicmetalparen = 0x322e;\n  t.ideographicmoonparen = 0x322a;\n  t.ideographicnameparen = 0x3234;\n  t.ideographicperiod = 0x3002;\n  t.ideographicprintcircle = 0x329e;\n  t.ideographicreachparen = 0x3243;\n  t.ideographicrepresentparen = 0x3239;\n  t.ideographicresourceparen = 0x323e;\n  t.ideographicrightcircle = 0x32a8;\n  t.ideographicsecretcircle = 0x3299;\n  t.ideographicselfparen = 0x3242;\n  t.ideographicsocietyparen = 0x3233;\n  t.ideographicspace = 0x3000;\n  t.ideographicspecialparen = 0x3235;\n  t.ideographicstockparen = 0x3231;\n  t.ideographicstudyparen = 0x323b;\n  t.ideographicsunparen = 0x3230;\n  t.ideographicsuperviseparen = 0x323c;\n  t.ideographicwaterparen = 0x322c;\n  t.ideographicwoodparen = 0x322d;\n  t.ideographiczero = 0x3007;\n  t.ideographmetalcircle = 0x328e;\n  t.ideographmooncircle = 0x328a;\n  t.ideographnamecircle = 0x3294;\n  t.ideographsuncircle = 0x3290;\n  t.ideographwatercircle = 0x328c;\n  t.ideographwoodcircle = 0x328d;\n  t.ideva = 0x0907;\n  t.idieresis = 0x00ef;\n  t.idieresisacute = 0x1e2f;\n  t.idieresiscyrillic = 0x04e5;\n  t.idotbelow = 0x1ecb;\n  t.iebrevecyrillic = 0x04d7;\n  t.iecyrillic = 0x0435;\n  t.ieungacirclekorean = 0x3275;\n  t.ieungaparenkorean = 0x3215;\n  t.ieungcirclekorean = 0x3267;\n  t.ieungkorean = 0x3147;\n  t.ieungparenkorean = 0x3207;\n  t.igrave = 0x00ec;\n  t.igujarati = 0x0a87;\n  t.igurmukhi = 0x0a07;\n  t.ihiragana = 0x3044;\n  t.ihookabove = 0x1ec9;\n  t.iibengali = 0x0988;\n  t.iicyrillic = 0x0438;\n  t.iideva = 0x0908;\n  t.iigujarati = 0x0a88;\n  t.iigurmukhi = 0x0a08;\n  t.iimatragurmukhi = 0x0a40;\n  t.iinvertedbreve = 0x020b;\n  t.iishortcyrillic = 0x0439;\n  t.iivowelsignbengali = 0x09c0;\n  t.iivowelsigndeva = 0x0940;\n  t.iivowelsigngujarati = 0x0ac0;\n  t.ij = 0x0133;\n  t.ikatakana = 0x30a4;\n  t.ikatakanahalfwidth = 0xff72;\n  t.ikorean = 0x3163;\n  t.ilde = 0x02dc;\n  t.iluyhebrew = 0x05ac;\n  t.imacron = 0x012b;\n  t.imacroncyrillic = 0x04e3;\n  t.imageorapproximatelyequal = 0x2253;\n  t.imatragurmukhi = 0x0a3f;\n  t.imonospace = 0xff49;\n  t.increment = 0x2206;\n  t.infinity = 0x221e;\n  t.iniarmenian = 0x056b;\n  t.integral = 0x222b;\n  t.integralbottom = 0x2321;\n  t.integralbt = 0x2321;\n  t.integralex = 0xf8f5;\n  t.integraltop = 0x2320;\n  t.integraltp = 0x2320;\n  t.intersection = 0x2229;\n  t.intisquare = 0x3305;\n  t.invbullet = 0x25d8;\n  t.invcircle = 0x25d9;\n  t.invsmileface = 0x263b;\n  t.iocyrillic = 0x0451;\n  t.iogonek = 0x012f;\n  t.iota = 0x03b9;\n  t.iotadieresis = 0x03ca;\n  t.iotadieresistonos = 0x0390;\n  t.iotalatin = 0x0269;\n  t.iotatonos = 0x03af;\n  t.iparen = 0x24a4;\n  t.irigurmukhi = 0x0a72;\n  t.ismallhiragana = 0x3043;\n  t.ismallkatakana = 0x30a3;\n  t.ismallkatakanahalfwidth = 0xff68;\n  t.issharbengali = 0x09fa;\n  t.istroke = 0x0268;\n  t.isuperior = 0xf6ed;\n  t.iterationhiragana = 0x309d;\n  t.iterationkatakana = 0x30fd;\n  t.itilde = 0x0129;\n  t.itildebelow = 0x1e2d;\n  t.iubopomofo = 0x3129;\n  t.iucyrillic = 0x044e;\n  t.ivowelsignbengali = 0x09bf;\n  t.ivowelsigndeva = 0x093f;\n  t.ivowelsigngujarati = 0x0abf;\n  t.izhitsacyrillic = 0x0475;\n  t.izhitsadblgravecyrillic = 0x0477;\n  t.j = 0x006a;\n  t.jaarmenian = 0x0571;\n  t.jabengali = 0x099c;\n  t.jadeva = 0x091c;\n  t.jagujarati = 0x0a9c;\n  t.jagurmukhi = 0x0a1c;\n  t.jbopomofo = 0x3110;\n  t.jcaron = 0x01f0;\n  t.jcircle = 0x24d9;\n  t.jcircumflex = 0x0135;\n  t.jcrossedtail = 0x029d;\n  t.jdotlessstroke = 0x025f;\n  t.jecyrillic = 0x0458;\n  t.jeemarabic = 0x062c;\n  t.jeemfinalarabic = 0xfe9e;\n  t.jeeminitialarabic = 0xfe9f;\n  t.jeemmedialarabic = 0xfea0;\n  t.jeharabic = 0x0698;\n  t.jehfinalarabic = 0xfb8b;\n  t.jhabengali = 0x099d;\n  t.jhadeva = 0x091d;\n  t.jhagujarati = 0x0a9d;\n  t.jhagurmukhi = 0x0a1d;\n  t.jheharmenian = 0x057b;\n  t.jis = 0x3004;\n  t.jmonospace = 0xff4a;\n  t.jparen = 0x24a5;\n  t.jsuperior = 0x02b2;\n  t.k = 0x006b;\n  t.kabashkircyrillic = 0x04a1;\n  t.kabengali = 0x0995;\n  t.kacute = 0x1e31;\n  t.kacyrillic = 0x043a;\n  t.kadescendercyrillic = 0x049b;\n  t.kadeva = 0x0915;\n  t.kaf = 0x05db;\n  t.kafarabic = 0x0643;\n  t.kafdagesh = 0xfb3b;\n  t.kafdageshhebrew = 0xfb3b;\n  t.kaffinalarabic = 0xfeda;\n  t.kafhebrew = 0x05db;\n  t.kafinitialarabic = 0xfedb;\n  t.kafmedialarabic = 0xfedc;\n  t.kafrafehebrew = 0xfb4d;\n  t.kagujarati = 0x0a95;\n  t.kagurmukhi = 0x0a15;\n  t.kahiragana = 0x304b;\n  t.kahookcyrillic = 0x04c4;\n  t.kakatakana = 0x30ab;\n  t.kakatakanahalfwidth = 0xff76;\n  t.kappa = 0x03ba;\n  t.kappasymbolgreek = 0x03f0;\n  t.kapyeounmieumkorean = 0x3171;\n  t.kapyeounphieuphkorean = 0x3184;\n  t.kapyeounpieupkorean = 0x3178;\n  t.kapyeounssangpieupkorean = 0x3179;\n  t.karoriisquare = 0x330d;\n  t.kashidaautoarabic = 0x0640;\n  t.kashidaautonosidebearingarabic = 0x0640;\n  t.kasmallkatakana = 0x30f5;\n  t.kasquare = 0x3384;\n  t.kasraarabic = 0x0650;\n  t.kasratanarabic = 0x064d;\n  t.kastrokecyrillic = 0x049f;\n  t.katahiraprolongmarkhalfwidth = 0xff70;\n  t.kaverticalstrokecyrillic = 0x049d;\n  t.kbopomofo = 0x310e;\n  t.kcalsquare = 0x3389;\n  t.kcaron = 0x01e9;\n  t.kcedilla = 0x0137;\n  t.kcircle = 0x24da;\n  t.kcommaaccent = 0x0137;\n  t.kdotbelow = 0x1e33;\n  t.keharmenian = 0x0584;\n  t.kehiragana = 0x3051;\n  t.kekatakana = 0x30b1;\n  t.kekatakanahalfwidth = 0xff79;\n  t.kenarmenian = 0x056f;\n  t.kesmallkatakana = 0x30f6;\n  t.kgreenlandic = 0x0138;\n  t.khabengali = 0x0996;\n  t.khacyrillic = 0x0445;\n  t.khadeva = 0x0916;\n  t.khagujarati = 0x0a96;\n  t.khagurmukhi = 0x0a16;\n  t.khaharabic = 0x062e;\n  t.khahfinalarabic = 0xfea6;\n  t.khahinitialarabic = 0xfea7;\n  t.khahmedialarabic = 0xfea8;\n  t.kheicoptic = 0x03e7;\n  t.khhadeva = 0x0959;\n  t.khhagurmukhi = 0x0a59;\n  t.khieukhacirclekorean = 0x3278;\n  t.khieukhaparenkorean = 0x3218;\n  t.khieukhcirclekorean = 0x326a;\n  t.khieukhkorean = 0x314b;\n  t.khieukhparenkorean = 0x320a;\n  t.khokhaithai = 0x0e02;\n  t.khokhonthai = 0x0e05;\n  t.khokhuatthai = 0x0e03;\n  t.khokhwaithai = 0x0e04;\n  t.khomutthai = 0x0e5b;\n  t.khook = 0x0199;\n  t.khorakhangthai = 0x0e06;\n  t.khzsquare = 0x3391;\n  t.kihiragana = 0x304d;\n  t.kikatakana = 0x30ad;\n  t.kikatakanahalfwidth = 0xff77;\n  t.kiroguramusquare = 0x3315;\n  t.kiromeetorusquare = 0x3316;\n  t.kirosquare = 0x3314;\n  t.kiyeokacirclekorean = 0x326e;\n  t.kiyeokaparenkorean = 0x320e;\n  t.kiyeokcirclekorean = 0x3260;\n  t.kiyeokkorean = 0x3131;\n  t.kiyeokparenkorean = 0x3200;\n  t.kiyeoksioskorean = 0x3133;\n  t.kjecyrillic = 0x045c;\n  t.klinebelow = 0x1e35;\n  t.klsquare = 0x3398;\n  t.kmcubedsquare = 0x33a6;\n  t.kmonospace = 0xff4b;\n  t.kmsquaredsquare = 0x33a2;\n  t.kohiragana = 0x3053;\n  t.kohmsquare = 0x33c0;\n  t.kokaithai = 0x0e01;\n  t.kokatakana = 0x30b3;\n  t.kokatakanahalfwidth = 0xff7a;\n  t.kooposquare = 0x331e;\n  t.koppacyrillic = 0x0481;\n  t.koreanstandardsymbol = 0x327f;\n  t.koroniscmb = 0x0343;\n  t.kparen = 0x24a6;\n  t.kpasquare = 0x33aa;\n  t.ksicyrillic = 0x046f;\n  t.ktsquare = 0x33cf;\n  t.kturned = 0x029e;\n  t.kuhiragana = 0x304f;\n  t.kukatakana = 0x30af;\n  t.kukatakanahalfwidth = 0xff78;\n  t.kvsquare = 0x33b8;\n  t.kwsquare = 0x33be;\n  t.l = 0x006c;\n  t.labengali = 0x09b2;\n  t.lacute = 0x013a;\n  t.ladeva = 0x0932;\n  t.lagujarati = 0x0ab2;\n  t.lagurmukhi = 0x0a32;\n  t.lakkhangyaothai = 0x0e45;\n  t.lamaleffinalarabic = 0xfefc;\n  t.lamalefhamzaabovefinalarabic = 0xfef8;\n  t.lamalefhamzaaboveisolatedarabic = 0xfef7;\n  t.lamalefhamzabelowfinalarabic = 0xfefa;\n  t.lamalefhamzabelowisolatedarabic = 0xfef9;\n  t.lamalefisolatedarabic = 0xfefb;\n  t.lamalefmaddaabovefinalarabic = 0xfef6;\n  t.lamalefmaddaaboveisolatedarabic = 0xfef5;\n  t.lamarabic = 0x0644;\n  t.lambda = 0x03bb;\n  t.lambdastroke = 0x019b;\n  t.lamed = 0x05dc;\n  t.lameddagesh = 0xfb3c;\n  t.lameddageshhebrew = 0xfb3c;\n  t.lamedhebrew = 0x05dc;\n  t.lamfinalarabic = 0xfede;\n  t.lamhahinitialarabic = 0xfcca;\n  t.laminitialarabic = 0xfedf;\n  t.lamjeeminitialarabic = 0xfcc9;\n  t.lamkhahinitialarabic = 0xfccb;\n  t.lamlamhehisolatedarabic = 0xfdf2;\n  t.lammedialarabic = 0xfee0;\n  t.lammeemhahinitialarabic = 0xfd88;\n  t.lammeeminitialarabic = 0xfccc;\n  t.largecircle = 0x25ef;\n  t.lbar = 0x019a;\n  t.lbelt = 0x026c;\n  t.lbopomofo = 0x310c;\n  t.lcaron = 0x013e;\n  t.lcedilla = 0x013c;\n  t.lcircle = 0x24db;\n  t.lcircumflexbelow = 0x1e3d;\n  t.lcommaaccent = 0x013c;\n  t.ldot = 0x0140;\n  t.ldotaccent = 0x0140;\n  t.ldotbelow = 0x1e37;\n  t.ldotbelowmacron = 0x1e39;\n  t.leftangleabovecmb = 0x031a;\n  t.lefttackbelowcmb = 0x0318;\n  t.less = 0x003c;\n  t.lessequal = 0x2264;\n  t.lessequalorgreater = 0x22da;\n  t.lessmonospace = 0xff1c;\n  t.lessorequivalent = 0x2272;\n  t.lessorgreater = 0x2276;\n  t.lessoverequal = 0x2266;\n  t.lesssmall = 0xfe64;\n  t.lezh = 0x026e;\n  t.lfblock = 0x258c;\n  t.lhookretroflex = 0x026d;\n  t.lira = 0x20a4;\n  t.liwnarmenian = 0x056c;\n  t.lj = 0x01c9;\n  t.ljecyrillic = 0x0459;\n  t.ll = 0xf6c0;\n  t.lladeva = 0x0933;\n  t.llagujarati = 0x0ab3;\n  t.llinebelow = 0x1e3b;\n  t.llladeva = 0x0934;\n  t.llvocalicbengali = 0x09e1;\n  t.llvocalicdeva = 0x0961;\n  t.llvocalicvowelsignbengali = 0x09e3;\n  t.llvocalicvowelsigndeva = 0x0963;\n  t.lmiddletilde = 0x026b;\n  t.lmonospace = 0xff4c;\n  t.lmsquare = 0x33d0;\n  t.lochulathai = 0x0e2c;\n  t.logicaland = 0x2227;\n  t.logicalnot = 0x00ac;\n  t.logicalnotreversed = 0x2310;\n  t.logicalor = 0x2228;\n  t.lolingthai = 0x0e25;\n  t.longs = 0x017f;\n  t.lowlinecenterline = 0xfe4e;\n  t.lowlinecmb = 0x0332;\n  t.lowlinedashed = 0xfe4d;\n  t.lozenge = 0x25ca;\n  t.lparen = 0x24a7;\n  t.lslash = 0x0142;\n  t.lsquare = 0x2113;\n  t.lsuperior = 0xf6ee;\n  t.ltshade = 0x2591;\n  t.luthai = 0x0e26;\n  t.lvocalicbengali = 0x098c;\n  t.lvocalicdeva = 0x090c;\n  t.lvocalicvowelsignbengali = 0x09e2;\n  t.lvocalicvowelsigndeva = 0x0962;\n  t.lxsquare = 0x33d3;\n  t.m = 0x006d;\n  t.mabengali = 0x09ae;\n  t.macron = 0x00af;\n  t.macronbelowcmb = 0x0331;\n  t.macroncmb = 0x0304;\n  t.macronlowmod = 0x02cd;\n  t.macronmonospace = 0xffe3;\n  t.macute = 0x1e3f;\n  t.madeva = 0x092e;\n  t.magujarati = 0x0aae;\n  t.magurmukhi = 0x0a2e;\n  t.mahapakhhebrew = 0x05a4;\n  t.mahapakhlefthebrew = 0x05a4;\n  t.mahiragana = 0x307e;\n  t.maichattawalowleftthai = 0xf895;\n  t.maichattawalowrightthai = 0xf894;\n  t.maichattawathai = 0x0e4b;\n  t.maichattawaupperleftthai = 0xf893;\n  t.maieklowleftthai = 0xf88c;\n  t.maieklowrightthai = 0xf88b;\n  t.maiekthai = 0x0e48;\n  t.maiekupperleftthai = 0xf88a;\n  t.maihanakatleftthai = 0xf884;\n  t.maihanakatthai = 0x0e31;\n  t.maitaikhuleftthai = 0xf889;\n  t.maitaikhuthai = 0x0e47;\n  t.maitholowleftthai = 0xf88f;\n  t.maitholowrightthai = 0xf88e;\n  t.maithothai = 0x0e49;\n  t.maithoupperleftthai = 0xf88d;\n  t.maitrilowleftthai = 0xf892;\n  t.maitrilowrightthai = 0xf891;\n  t.maitrithai = 0x0e4a;\n  t.maitriupperleftthai = 0xf890;\n  t.maiyamokthai = 0x0e46;\n  t.makatakana = 0x30de;\n  t.makatakanahalfwidth = 0xff8f;\n  t.male = 0x2642;\n  t.mansyonsquare = 0x3347;\n  t.maqafhebrew = 0x05be;\n  t.mars = 0x2642;\n  t.masoracirclehebrew = 0x05af;\n  t.masquare = 0x3383;\n  t.mbopomofo = 0x3107;\n  t.mbsquare = 0x33d4;\n  t.mcircle = 0x24dc;\n  t.mcubedsquare = 0x33a5;\n  t.mdotaccent = 0x1e41;\n  t.mdotbelow = 0x1e43;\n  t.meemarabic = 0x0645;\n  t.meemfinalarabic = 0xfee2;\n  t.meeminitialarabic = 0xfee3;\n  t.meemmedialarabic = 0xfee4;\n  t.meemmeeminitialarabic = 0xfcd1;\n  t.meemmeemisolatedarabic = 0xfc48;\n  t.meetorusquare = 0x334d;\n  t.mehiragana = 0x3081;\n  t.meizierasquare = 0x337e;\n  t.mekatakana = 0x30e1;\n  t.mekatakanahalfwidth = 0xff92;\n  t.mem = 0x05de;\n  t.memdagesh = 0xfb3e;\n  t.memdageshhebrew = 0xfb3e;\n  t.memhebrew = 0x05de;\n  t.menarmenian = 0x0574;\n  t.merkhahebrew = 0x05a5;\n  t.merkhakefulahebrew = 0x05a6;\n  t.merkhakefulalefthebrew = 0x05a6;\n  t.merkhalefthebrew = 0x05a5;\n  t.mhook = 0x0271;\n  t.mhzsquare = 0x3392;\n  t.middledotkatakanahalfwidth = 0xff65;\n  t.middot = 0x00b7;\n  t.mieumacirclekorean = 0x3272;\n  t.mieumaparenkorean = 0x3212;\n  t.mieumcirclekorean = 0x3264;\n  t.mieumkorean = 0x3141;\n  t.mieumpansioskorean = 0x3170;\n  t.mieumparenkorean = 0x3204;\n  t.mieumpieupkorean = 0x316e;\n  t.mieumsioskorean = 0x316f;\n  t.mihiragana = 0x307f;\n  t.mikatakana = 0x30df;\n  t.mikatakanahalfwidth = 0xff90;\n  t.minus = 0x2212;\n  t.minusbelowcmb = 0x0320;\n  t.minuscircle = 0x2296;\n  t.minusmod = 0x02d7;\n  t.minusplus = 0x2213;\n  t.minute = 0x2032;\n  t.miribaarusquare = 0x334a;\n  t.mirisquare = 0x3349;\n  t.mlonglegturned = 0x0270;\n  t.mlsquare = 0x3396;\n  t.mmcubedsquare = 0x33a3;\n  t.mmonospace = 0xff4d;\n  t.mmsquaredsquare = 0x339f;\n  t.mohiragana = 0x3082;\n  t.mohmsquare = 0x33c1;\n  t.mokatakana = 0x30e2;\n  t.mokatakanahalfwidth = 0xff93;\n  t.molsquare = 0x33d6;\n  t.momathai = 0x0e21;\n  t.moverssquare = 0x33a7;\n  t.moverssquaredsquare = 0x33a8;\n  t.mparen = 0x24a8;\n  t.mpasquare = 0x33ab;\n  t.mssquare = 0x33b3;\n  t.msuperior = 0xf6ef;\n  t.mturned = 0x026f;\n  t.mu = 0x00b5;\n  t.mu1 = 0x00b5;\n  t.muasquare = 0x3382;\n  t.muchgreater = 0x226b;\n  t.muchless = 0x226a;\n  t.mufsquare = 0x338c;\n  t.mugreek = 0x03bc;\n  t.mugsquare = 0x338d;\n  t.muhiragana = 0x3080;\n  t.mukatakana = 0x30e0;\n  t.mukatakanahalfwidth = 0xff91;\n  t.mulsquare = 0x3395;\n  t.multiply = 0x00d7;\n  t.mumsquare = 0x339b;\n  t.munahhebrew = 0x05a3;\n  t.munahlefthebrew = 0x05a3;\n  t.musicalnote = 0x266a;\n  t.musicalnotedbl = 0x266b;\n  t.musicflatsign = 0x266d;\n  t.musicsharpsign = 0x266f;\n  t.mussquare = 0x33b2;\n  t.muvsquare = 0x33b6;\n  t.muwsquare = 0x33bc;\n  t.mvmegasquare = 0x33b9;\n  t.mvsquare = 0x33b7;\n  t.mwmegasquare = 0x33bf;\n  t.mwsquare = 0x33bd;\n  t.n = 0x006e;\n  t.nabengali = 0x09a8;\n  t.nabla = 0x2207;\n  t.nacute = 0x0144;\n  t.nadeva = 0x0928;\n  t.nagujarati = 0x0aa8;\n  t.nagurmukhi = 0x0a28;\n  t.nahiragana = 0x306a;\n  t.nakatakana = 0x30ca;\n  t.nakatakanahalfwidth = 0xff85;\n  t.napostrophe = 0x0149;\n  t.nasquare = 0x3381;\n  t.nbopomofo = 0x310b;\n  t.nbspace = 0x00a0;\n  t.ncaron = 0x0148;\n  t.ncedilla = 0x0146;\n  t.ncircle = 0x24dd;\n  t.ncircumflexbelow = 0x1e4b;\n  t.ncommaaccent = 0x0146;\n  t.ndotaccent = 0x1e45;\n  t.ndotbelow = 0x1e47;\n  t.nehiragana = 0x306d;\n  t.nekatakana = 0x30cd;\n  t.nekatakanahalfwidth = 0xff88;\n  t.newsheqelsign = 0x20aa;\n  t.nfsquare = 0x338b;\n  t.ngabengali = 0x0999;\n  t.ngadeva = 0x0919;\n  t.ngagujarati = 0x0a99;\n  t.ngagurmukhi = 0x0a19;\n  t.ngonguthai = 0x0e07;\n  t.nhiragana = 0x3093;\n  t.nhookleft = 0x0272;\n  t.nhookretroflex = 0x0273;\n  t.nieunacirclekorean = 0x326f;\n  t.nieunaparenkorean = 0x320f;\n  t.nieuncieuckorean = 0x3135;\n  t.nieuncirclekorean = 0x3261;\n  t.nieunhieuhkorean = 0x3136;\n  t.nieunkorean = 0x3134;\n  t.nieunpansioskorean = 0x3168;\n  t.nieunparenkorean = 0x3201;\n  t.nieunsioskorean = 0x3167;\n  t.nieuntikeutkorean = 0x3166;\n  t.nihiragana = 0x306b;\n  t.nikatakana = 0x30cb;\n  t.nikatakanahalfwidth = 0xff86;\n  t.nikhahitleftthai = 0xf899;\n  t.nikhahitthai = 0x0e4d;\n  t.nine = 0x0039;\n  t.ninearabic = 0x0669;\n  t.ninebengali = 0x09ef;\n  t.ninecircle = 0x2468;\n  t.ninecircleinversesansserif = 0x2792;\n  t.ninedeva = 0x096f;\n  t.ninegujarati = 0x0aef;\n  t.ninegurmukhi = 0x0a6f;\n  t.ninehackarabic = 0x0669;\n  t.ninehangzhou = 0x3029;\n  t.nineideographicparen = 0x3228;\n  t.nineinferior = 0x2089;\n  t.ninemonospace = 0xff19;\n  t.nineoldstyle = 0xf739;\n  t.nineparen = 0x247c;\n  t.nineperiod = 0x2490;\n  t.ninepersian = 0x06f9;\n  t.nineroman = 0x2178;\n  t.ninesuperior = 0x2079;\n  t.nineteencircle = 0x2472;\n  t.nineteenparen = 0x2486;\n  t.nineteenperiod = 0x249a;\n  t.ninethai = 0x0e59;\n  t.nj = 0x01cc;\n  t.njecyrillic = 0x045a;\n  t.nkatakana = 0x30f3;\n  t.nkatakanahalfwidth = 0xff9d;\n  t.nlegrightlong = 0x019e;\n  t.nlinebelow = 0x1e49;\n  t.nmonospace = 0xff4e;\n  t.nmsquare = 0x339a;\n  t.nnabengali = 0x09a3;\n  t.nnadeva = 0x0923;\n  t.nnagujarati = 0x0aa3;\n  t.nnagurmukhi = 0x0a23;\n  t.nnnadeva = 0x0929;\n  t.nohiragana = 0x306e;\n  t.nokatakana = 0x30ce;\n  t.nokatakanahalfwidth = 0xff89;\n  t.nonbreakingspace = 0x00a0;\n  t.nonenthai = 0x0e13;\n  t.nonuthai = 0x0e19;\n  t.noonarabic = 0x0646;\n  t.noonfinalarabic = 0xfee6;\n  t.noonghunnaarabic = 0x06ba;\n  t.noonghunnafinalarabic = 0xfb9f;\n  t.nooninitialarabic = 0xfee7;\n  t.noonjeeminitialarabic = 0xfcd2;\n  t.noonjeemisolatedarabic = 0xfc4b;\n  t.noonmedialarabic = 0xfee8;\n  t.noonmeeminitialarabic = 0xfcd5;\n  t.noonmeemisolatedarabic = 0xfc4e;\n  t.noonnoonfinalarabic = 0xfc8d;\n  t.notcontains = 0x220c;\n  t.notelement = 0x2209;\n  t.notelementof = 0x2209;\n  t.notequal = 0x2260;\n  t.notgreater = 0x226f;\n  t.notgreaternorequal = 0x2271;\n  t.notgreaternorless = 0x2279;\n  t.notidentical = 0x2262;\n  t.notless = 0x226e;\n  t.notlessnorequal = 0x2270;\n  t.notparallel = 0x2226;\n  t.notprecedes = 0x2280;\n  t.notsubset = 0x2284;\n  t.notsucceeds = 0x2281;\n  t.notsuperset = 0x2285;\n  t.nowarmenian = 0x0576;\n  t.nparen = 0x24a9;\n  t.nssquare = 0x33b1;\n  t.nsuperior = 0x207f;\n  t.ntilde = 0x00f1;\n  t.nu = 0x03bd;\n  t.nuhiragana = 0x306c;\n  t.nukatakana = 0x30cc;\n  t.nukatakanahalfwidth = 0xff87;\n  t.nuktabengali = 0x09bc;\n  t.nuktadeva = 0x093c;\n  t.nuktagujarati = 0x0abc;\n  t.nuktagurmukhi = 0x0a3c;\n  t.numbersign = 0x0023;\n  t.numbersignmonospace = 0xff03;\n  t.numbersignsmall = 0xfe5f;\n  t.numeralsigngreek = 0x0374;\n  t.numeralsignlowergreek = 0x0375;\n  t.numero = 0x2116;\n  t.nun = 0x05e0;\n  t.nundagesh = 0xfb40;\n  t.nundageshhebrew = 0xfb40;\n  t.nunhebrew = 0x05e0;\n  t.nvsquare = 0x33b5;\n  t.nwsquare = 0x33bb;\n  t.nyabengali = 0x099e;\n  t.nyadeva = 0x091e;\n  t.nyagujarati = 0x0a9e;\n  t.nyagurmukhi = 0x0a1e;\n  t.o = 0x006f;\n  t.oacute = 0x00f3;\n  t.oangthai = 0x0e2d;\n  t.obarred = 0x0275;\n  t.obarredcyrillic = 0x04e9;\n  t.obarreddieresiscyrillic = 0x04eb;\n  t.obengali = 0x0993;\n  t.obopomofo = 0x311b;\n  t.obreve = 0x014f;\n  t.ocandradeva = 0x0911;\n  t.ocandragujarati = 0x0a91;\n  t.ocandravowelsigndeva = 0x0949;\n  t.ocandravowelsigngujarati = 0x0ac9;\n  t.ocaron = 0x01d2;\n  t.ocircle = 0x24de;\n  t.ocircumflex = 0x00f4;\n  t.ocircumflexacute = 0x1ed1;\n  t.ocircumflexdotbelow = 0x1ed9;\n  t.ocircumflexgrave = 0x1ed3;\n  t.ocircumflexhookabove = 0x1ed5;\n  t.ocircumflextilde = 0x1ed7;\n  t.ocyrillic = 0x043e;\n  t.odblacute = 0x0151;\n  t.odblgrave = 0x020d;\n  t.odeva = 0x0913;\n  t.odieresis = 0x00f6;\n  t.odieresiscyrillic = 0x04e7;\n  t.odotbelow = 0x1ecd;\n  t.oe = 0x0153;\n  t.oekorean = 0x315a;\n  t.ogonek = 0x02db;\n  t.ogonekcmb = 0x0328;\n  t.ograve = 0x00f2;\n  t.ogujarati = 0x0a93;\n  t.oharmenian = 0x0585;\n  t.ohiragana = 0x304a;\n  t.ohookabove = 0x1ecf;\n  t.ohorn = 0x01a1;\n  t.ohornacute = 0x1edb;\n  t.ohorndotbelow = 0x1ee3;\n  t.ohorngrave = 0x1edd;\n  t.ohornhookabove = 0x1edf;\n  t.ohorntilde = 0x1ee1;\n  t.ohungarumlaut = 0x0151;\n  t.oi = 0x01a3;\n  t.oinvertedbreve = 0x020f;\n  t.okatakana = 0x30aa;\n  t.okatakanahalfwidth = 0xff75;\n  t.okorean = 0x3157;\n  t.olehebrew = 0x05ab;\n  t.omacron = 0x014d;\n  t.omacronacute = 0x1e53;\n  t.omacrongrave = 0x1e51;\n  t.omdeva = 0x0950;\n  t.omega = 0x03c9;\n  t.omega1 = 0x03d6;\n  t.omegacyrillic = 0x0461;\n  t.omegalatinclosed = 0x0277;\n  t.omegaroundcyrillic = 0x047b;\n  t.omegatitlocyrillic = 0x047d;\n  t.omegatonos = 0x03ce;\n  t.omgujarati = 0x0ad0;\n  t.omicron = 0x03bf;\n  t.omicrontonos = 0x03cc;\n  t.omonospace = 0xff4f;\n  t.one = 0x0031;\n  t.onearabic = 0x0661;\n  t.onebengali = 0x09e7;\n  t.onecircle = 0x2460;\n  t.onecircleinversesansserif = 0x278a;\n  t.onedeva = 0x0967;\n  t.onedotenleader = 0x2024;\n  t.oneeighth = 0x215b;\n  t.onefitted = 0xf6dc;\n  t.onegujarati = 0x0ae7;\n  t.onegurmukhi = 0x0a67;\n  t.onehackarabic = 0x0661;\n  t.onehalf = 0x00bd;\n  t.onehangzhou = 0x3021;\n  t.oneideographicparen = 0x3220;\n  t.oneinferior = 0x2081;\n  t.onemonospace = 0xff11;\n  t.onenumeratorbengali = 0x09f4;\n  t.oneoldstyle = 0xf731;\n  t.oneparen = 0x2474;\n  t.oneperiod = 0x2488;\n  t.onepersian = 0x06f1;\n  t.onequarter = 0x00bc;\n  t.oneroman = 0x2170;\n  t.onesuperior = 0x00b9;\n  t.onethai = 0x0e51;\n  t.onethird = 0x2153;\n  t.oogonek = 0x01eb;\n  t.oogonekmacron = 0x01ed;\n  t.oogurmukhi = 0x0a13;\n  t.oomatragurmukhi = 0x0a4b;\n  t.oopen = 0x0254;\n  t.oparen = 0x24aa;\n  t.openbullet = 0x25e6;\n  t.option = 0x2325;\n  t.ordfeminine = 0x00aa;\n  t.ordmasculine = 0x00ba;\n  t.orthogonal = 0x221f;\n  t.oshortdeva = 0x0912;\n  t.oshortvowelsigndeva = 0x094a;\n  t.oslash = 0x00f8;\n  t.oslashacute = 0x01ff;\n  t.osmallhiragana = 0x3049;\n  t.osmallkatakana = 0x30a9;\n  t.osmallkatakanahalfwidth = 0xff6b;\n  t.ostrokeacute = 0x01ff;\n  t.osuperior = 0xf6f0;\n  t.otcyrillic = 0x047f;\n  t.otilde = 0x00f5;\n  t.otildeacute = 0x1e4d;\n  t.otildedieresis = 0x1e4f;\n  t.oubopomofo = 0x3121;\n  t.overline = 0x203e;\n  t.overlinecenterline = 0xfe4a;\n  t.overlinecmb = 0x0305;\n  t.overlinedashed = 0xfe49;\n  t.overlinedblwavy = 0xfe4c;\n  t.overlinewavy = 0xfe4b;\n  t.overscore = 0x00af;\n  t.ovowelsignbengali = 0x09cb;\n  t.ovowelsigndeva = 0x094b;\n  t.ovowelsigngujarati = 0x0acb;\n  t.p = 0x0070;\n  t.paampssquare = 0x3380;\n  t.paasentosquare = 0x332b;\n  t.pabengali = 0x09aa;\n  t.pacute = 0x1e55;\n  t.padeva = 0x092a;\n  t.pagedown = 0x21df;\n  t.pageup = 0x21de;\n  t.pagujarati = 0x0aaa;\n  t.pagurmukhi = 0x0a2a;\n  t.pahiragana = 0x3071;\n  t.paiyannoithai = 0x0e2f;\n  t.pakatakana = 0x30d1;\n  t.palatalizationcyrilliccmb = 0x0484;\n  t.palochkacyrillic = 0x04c0;\n  t.pansioskorean = 0x317f;\n  t.paragraph = 0x00b6;\n  t.parallel = 0x2225;\n  t.parenleft = 0x0028;\n  t.parenleftaltonearabic = 0xfd3e;\n  t.parenleftbt = 0xf8ed;\n  t.parenleftex = 0xf8ec;\n  t.parenleftinferior = 0x208d;\n  t.parenleftmonospace = 0xff08;\n  t.parenleftsmall = 0xfe59;\n  t.parenleftsuperior = 0x207d;\n  t.parenlefttp = 0xf8eb;\n  t.parenleftvertical = 0xfe35;\n  t.parenright = 0x0029;\n  t.parenrightaltonearabic = 0xfd3f;\n  t.parenrightbt = 0xf8f8;\n  t.parenrightex = 0xf8f7;\n  t.parenrightinferior = 0x208e;\n  t.parenrightmonospace = 0xff09;\n  t.parenrightsmall = 0xfe5a;\n  t.parenrightsuperior = 0x207e;\n  t.parenrighttp = 0xf8f6;\n  t.parenrightvertical = 0xfe36;\n  t.partialdiff = 0x2202;\n  t.paseqhebrew = 0x05c0;\n  t.pashtahebrew = 0x0599;\n  t.pasquare = 0x33a9;\n  t.patah = 0x05b7;\n  t.patah11 = 0x05b7;\n  t.patah1d = 0x05b7;\n  t.patah2a = 0x05b7;\n  t.patahhebrew = 0x05b7;\n  t.patahnarrowhebrew = 0x05b7;\n  t.patahquarterhebrew = 0x05b7;\n  t.patahwidehebrew = 0x05b7;\n  t.pazerhebrew = 0x05a1;\n  t.pbopomofo = 0x3106;\n  t.pcircle = 0x24df;\n  t.pdotaccent = 0x1e57;\n  t.pe = 0x05e4;\n  t.pecyrillic = 0x043f;\n  t.pedagesh = 0xfb44;\n  t.pedageshhebrew = 0xfb44;\n  t.peezisquare = 0x333b;\n  t.pefinaldageshhebrew = 0xfb43;\n  t.peharabic = 0x067e;\n  t.peharmenian = 0x057a;\n  t.pehebrew = 0x05e4;\n  t.pehfinalarabic = 0xfb57;\n  t.pehinitialarabic = 0xfb58;\n  t.pehiragana = 0x307a;\n  t.pehmedialarabic = 0xfb59;\n  t.pekatakana = 0x30da;\n  t.pemiddlehookcyrillic = 0x04a7;\n  t.perafehebrew = 0xfb4e;\n  t.percent = 0x0025;\n  t.percentarabic = 0x066a;\n  t.percentmonospace = 0xff05;\n  t.percentsmall = 0xfe6a;\n  t.period = 0x002e;\n  t.periodarmenian = 0x0589;\n  t.periodcentered = 0x00b7;\n  t.periodhalfwidth = 0xff61;\n  t.periodinferior = 0xf6e7;\n  t.periodmonospace = 0xff0e;\n  t.periodsmall = 0xfe52;\n  t.periodsuperior = 0xf6e8;\n  t.perispomenigreekcmb = 0x0342;\n  t.perpendicular = 0x22a5;\n  t.perthousand = 0x2030;\n  t.peseta = 0x20a7;\n  t.pfsquare = 0x338a;\n  t.phabengali = 0x09ab;\n  t.phadeva = 0x092b;\n  t.phagujarati = 0x0aab;\n  t.phagurmukhi = 0x0a2b;\n  t.phi = 0x03c6;\n  t.phi1 = 0x03d5;\n  t.phieuphacirclekorean = 0x327a;\n  t.phieuphaparenkorean = 0x321a;\n  t.phieuphcirclekorean = 0x326c;\n  t.phieuphkorean = 0x314d;\n  t.phieuphparenkorean = 0x320c;\n  t.philatin = 0x0278;\n  t.phinthuthai = 0x0e3a;\n  t.phisymbolgreek = 0x03d5;\n  t.phook = 0x01a5;\n  t.phophanthai = 0x0e1e;\n  t.phophungthai = 0x0e1c;\n  t.phosamphaothai = 0x0e20;\n  t.pi = 0x03c0;\n  t.pieupacirclekorean = 0x3273;\n  t.pieupaparenkorean = 0x3213;\n  t.pieupcieuckorean = 0x3176;\n  t.pieupcirclekorean = 0x3265;\n  t.pieupkiyeokkorean = 0x3172;\n  t.pieupkorean = 0x3142;\n  t.pieupparenkorean = 0x3205;\n  t.pieupsioskiyeokkorean = 0x3174;\n  t.pieupsioskorean = 0x3144;\n  t.pieupsiostikeutkorean = 0x3175;\n  t.pieupthieuthkorean = 0x3177;\n  t.pieuptikeutkorean = 0x3173;\n  t.pihiragana = 0x3074;\n  t.pikatakana = 0x30d4;\n  t.pisymbolgreek = 0x03d6;\n  t.piwrarmenian = 0x0583;\n  t.plus = 0x002b;\n  t.plusbelowcmb = 0x031f;\n  t.pluscircle = 0x2295;\n  t.plusminus = 0x00b1;\n  t.plusmod = 0x02d6;\n  t.plusmonospace = 0xff0b;\n  t.plussmall = 0xfe62;\n  t.plussuperior = 0x207a;\n  t.pmonospace = 0xff50;\n  t.pmsquare = 0x33d8;\n  t.pohiragana = 0x307d;\n  t.pointingindexdownwhite = 0x261f;\n  t.pointingindexleftwhite = 0x261c;\n  t.pointingindexrightwhite = 0x261e;\n  t.pointingindexupwhite = 0x261d;\n  t.pokatakana = 0x30dd;\n  t.poplathai = 0x0e1b;\n  t.postalmark = 0x3012;\n  t.postalmarkface = 0x3020;\n  t.pparen = 0x24ab;\n  t.precedes = 0x227a;\n  t.prescription = 0x211e;\n  t.primemod = 0x02b9;\n  t.primereversed = 0x2035;\n  t.product = 0x220f;\n  t.projective = 0x2305;\n  t.prolongedkana = 0x30fc;\n  t.propellor = 0x2318;\n  t.propersubset = 0x2282;\n  t.propersuperset = 0x2283;\n  t.proportion = 0x2237;\n  t.proportional = 0x221d;\n  t.psi = 0x03c8;\n  t.psicyrillic = 0x0471;\n  t.psilipneumatacyrilliccmb = 0x0486;\n  t.pssquare = 0x33b0;\n  t.puhiragana = 0x3077;\n  t.pukatakana = 0x30d7;\n  t.pvsquare = 0x33b4;\n  t.pwsquare = 0x33ba;\n  t.q = 0x0071;\n  t.qadeva = 0x0958;\n  t.qadmahebrew = 0x05a8;\n  t.qafarabic = 0x0642;\n  t.qaffinalarabic = 0xfed6;\n  t.qafinitialarabic = 0xfed7;\n  t.qafmedialarabic = 0xfed8;\n  t.qamats = 0x05b8;\n  t.qamats10 = 0x05b8;\n  t.qamats1a = 0x05b8;\n  t.qamats1c = 0x05b8;\n  t.qamats27 = 0x05b8;\n  t.qamats29 = 0x05b8;\n  t.qamats33 = 0x05b8;\n  t.qamatsde = 0x05b8;\n  t.qamatshebrew = 0x05b8;\n  t.qamatsnarrowhebrew = 0x05b8;\n  t.qamatsqatanhebrew = 0x05b8;\n  t.qamatsqatannarrowhebrew = 0x05b8;\n  t.qamatsqatanquarterhebrew = 0x05b8;\n  t.qamatsqatanwidehebrew = 0x05b8;\n  t.qamatsquarterhebrew = 0x05b8;\n  t.qamatswidehebrew = 0x05b8;\n  t.qarneyparahebrew = 0x059f;\n  t.qbopomofo = 0x3111;\n  t.qcircle = 0x24e0;\n  t.qhook = 0x02a0;\n  t.qmonospace = 0xff51;\n  t.qof = 0x05e7;\n  t.qofdagesh = 0xfb47;\n  t.qofdageshhebrew = 0xfb47;\n  t.qofhebrew = 0x05e7;\n  t.qparen = 0x24ac;\n  t.quarternote = 0x2669;\n  t.qubuts = 0x05bb;\n  t.qubuts18 = 0x05bb;\n  t.qubuts25 = 0x05bb;\n  t.qubuts31 = 0x05bb;\n  t.qubutshebrew = 0x05bb;\n  t.qubutsnarrowhebrew = 0x05bb;\n  t.qubutsquarterhebrew = 0x05bb;\n  t.qubutswidehebrew = 0x05bb;\n  t.question = 0x003f;\n  t.questionarabic = 0x061f;\n  t.questionarmenian = 0x055e;\n  t.questiondown = 0x00bf;\n  t.questiondownsmall = 0xf7bf;\n  t.questiongreek = 0x037e;\n  t.questionmonospace = 0xff1f;\n  t.questionsmall = 0xf73f;\n  t.quotedbl = 0x0022;\n  t.quotedblbase = 0x201e;\n  t.quotedblleft = 0x201c;\n  t.quotedblmonospace = 0xff02;\n  t.quotedblprime = 0x301e;\n  t.quotedblprimereversed = 0x301d;\n  t.quotedblright = 0x201d;\n  t.quoteleft = 0x2018;\n  t.quoteleftreversed = 0x201b;\n  t.quotereversed = 0x201b;\n  t.quoteright = 0x2019;\n  t.quoterightn = 0x0149;\n  t.quotesinglbase = 0x201a;\n  t.quotesingle = 0x0027;\n  t.quotesinglemonospace = 0xff07;\n  t.r = 0x0072;\n  t.raarmenian = 0x057c;\n  t.rabengali = 0x09b0;\n  t.racute = 0x0155;\n  t.radeva = 0x0930;\n  t.radical = 0x221a;\n  t.radicalex = 0xf8e5;\n  t.radoverssquare = 0x33ae;\n  t.radoverssquaredsquare = 0x33af;\n  t.radsquare = 0x33ad;\n  t.rafe = 0x05bf;\n  t.rafehebrew = 0x05bf;\n  t.ragujarati = 0x0ab0;\n  t.ragurmukhi = 0x0a30;\n  t.rahiragana = 0x3089;\n  t.rakatakana = 0x30e9;\n  t.rakatakanahalfwidth = 0xff97;\n  t.ralowerdiagonalbengali = 0x09f1;\n  t.ramiddlediagonalbengali = 0x09f0;\n  t.ramshorn = 0x0264;\n  t.ratio = 0x2236;\n  t.rbopomofo = 0x3116;\n  t.rcaron = 0x0159;\n  t.rcedilla = 0x0157;\n  t.rcircle = 0x24e1;\n  t.rcommaaccent = 0x0157;\n  t.rdblgrave = 0x0211;\n  t.rdotaccent = 0x1e59;\n  t.rdotbelow = 0x1e5b;\n  t.rdotbelowmacron = 0x1e5d;\n  t.referencemark = 0x203b;\n  t.reflexsubset = 0x2286;\n  t.reflexsuperset = 0x2287;\n  t.registered = 0x00ae;\n  t.registersans = 0xf8e8;\n  t.registerserif = 0xf6da;\n  t.reharabic = 0x0631;\n  t.reharmenian = 0x0580;\n  t.rehfinalarabic = 0xfeae;\n  t.rehiragana = 0x308c;\n  t.rekatakana = 0x30ec;\n  t.rekatakanahalfwidth = 0xff9a;\n  t.resh = 0x05e8;\n  t.reshdageshhebrew = 0xfb48;\n  t.reshhebrew = 0x05e8;\n  t.reversedtilde = 0x223d;\n  t.reviahebrew = 0x0597;\n  t.reviamugrashhebrew = 0x0597;\n  t.revlogicalnot = 0x2310;\n  t.rfishhook = 0x027e;\n  t.rfishhookreversed = 0x027f;\n  t.rhabengali = 0x09dd;\n  t.rhadeva = 0x095d;\n  t.rho = 0x03c1;\n  t.rhook = 0x027d;\n  t.rhookturned = 0x027b;\n  t.rhookturnedsuperior = 0x02b5;\n  t.rhosymbolgreek = 0x03f1;\n  t.rhotichookmod = 0x02de;\n  t.rieulacirclekorean = 0x3271;\n  t.rieulaparenkorean = 0x3211;\n  t.rieulcirclekorean = 0x3263;\n  t.rieulhieuhkorean = 0x3140;\n  t.rieulkiyeokkorean = 0x313a;\n  t.rieulkiyeoksioskorean = 0x3169;\n  t.rieulkorean = 0x3139;\n  t.rieulmieumkorean = 0x313b;\n  t.rieulpansioskorean = 0x316c;\n  t.rieulparenkorean = 0x3203;\n  t.rieulphieuphkorean = 0x313f;\n  t.rieulpieupkorean = 0x313c;\n  t.rieulpieupsioskorean = 0x316b;\n  t.rieulsioskorean = 0x313d;\n  t.rieulthieuthkorean = 0x313e;\n  t.rieultikeutkorean = 0x316a;\n  t.rieulyeorinhieuhkorean = 0x316d;\n  t.rightangle = 0x221f;\n  t.righttackbelowcmb = 0x0319;\n  t.righttriangle = 0x22bf;\n  t.rihiragana = 0x308a;\n  t.rikatakana = 0x30ea;\n  t.rikatakanahalfwidth = 0xff98;\n  t.ring = 0x02da;\n  t.ringbelowcmb = 0x0325;\n  t.ringcmb = 0x030a;\n  t.ringhalfleft = 0x02bf;\n  t.ringhalfleftarmenian = 0x0559;\n  t.ringhalfleftbelowcmb = 0x031c;\n  t.ringhalfleftcentered = 0x02d3;\n  t.ringhalfright = 0x02be;\n  t.ringhalfrightbelowcmb = 0x0339;\n  t.ringhalfrightcentered = 0x02d2;\n  t.rinvertedbreve = 0x0213;\n  t.rittorusquare = 0x3351;\n  t.rlinebelow = 0x1e5f;\n  t.rlongleg = 0x027c;\n  t.rlonglegturned = 0x027a;\n  t.rmonospace = 0xff52;\n  t.rohiragana = 0x308d;\n  t.rokatakana = 0x30ed;\n  t.rokatakanahalfwidth = 0xff9b;\n  t.roruathai = 0x0e23;\n  t.rparen = 0x24ad;\n  t.rrabengali = 0x09dc;\n  t.rradeva = 0x0931;\n  t.rragurmukhi = 0x0a5c;\n  t.rreharabic = 0x0691;\n  t.rrehfinalarabic = 0xfb8d;\n  t.rrvocalicbengali = 0x09e0;\n  t.rrvocalicdeva = 0x0960;\n  t.rrvocalicgujarati = 0x0ae0;\n  t.rrvocalicvowelsignbengali = 0x09c4;\n  t.rrvocalicvowelsigndeva = 0x0944;\n  t.rrvocalicvowelsigngujarati = 0x0ac4;\n  t.rsuperior = 0xf6f1;\n  t.rtblock = 0x2590;\n  t.rturned = 0x0279;\n  t.rturnedsuperior = 0x02b4;\n  t.ruhiragana = 0x308b;\n  t.rukatakana = 0x30eb;\n  t.rukatakanahalfwidth = 0xff99;\n  t.rupeemarkbengali = 0x09f2;\n  t.rupeesignbengali = 0x09f3;\n  t.rupiah = 0xf6dd;\n  t.ruthai = 0x0e24;\n  t.rvocalicbengali = 0x098b;\n  t.rvocalicdeva = 0x090b;\n  t.rvocalicgujarati = 0x0a8b;\n  t.rvocalicvowelsignbengali = 0x09c3;\n  t.rvocalicvowelsigndeva = 0x0943;\n  t.rvocalicvowelsigngujarati = 0x0ac3;\n  t.s = 0x0073;\n  t.sabengali = 0x09b8;\n  t.sacute = 0x015b;\n  t.sacutedotaccent = 0x1e65;\n  t.sadarabic = 0x0635;\n  t.sadeva = 0x0938;\n  t.sadfinalarabic = 0xfeba;\n  t.sadinitialarabic = 0xfebb;\n  t.sadmedialarabic = 0xfebc;\n  t.sagujarati = 0x0ab8;\n  t.sagurmukhi = 0x0a38;\n  t.sahiragana = 0x3055;\n  t.sakatakana = 0x30b5;\n  t.sakatakanahalfwidth = 0xff7b;\n  t.sallallahoualayhewasallamarabic = 0xfdfa;\n  t.samekh = 0x05e1;\n  t.samekhdagesh = 0xfb41;\n  t.samekhdageshhebrew = 0xfb41;\n  t.samekhhebrew = 0x05e1;\n  t.saraaathai = 0x0e32;\n  t.saraaethai = 0x0e41;\n  t.saraaimaimalaithai = 0x0e44;\n  t.saraaimaimuanthai = 0x0e43;\n  t.saraamthai = 0x0e33;\n  t.saraathai = 0x0e30;\n  t.saraethai = 0x0e40;\n  t.saraiileftthai = 0xf886;\n  t.saraiithai = 0x0e35;\n  t.saraileftthai = 0xf885;\n  t.saraithai = 0x0e34;\n  t.saraothai = 0x0e42;\n  t.saraueeleftthai = 0xf888;\n  t.saraueethai = 0x0e37;\n  t.saraueleftthai = 0xf887;\n  t.sarauethai = 0x0e36;\n  t.sarauthai = 0x0e38;\n  t.sarauuthai = 0x0e39;\n  t.sbopomofo = 0x3119;\n  t.scaron = 0x0161;\n  t.scarondotaccent = 0x1e67;\n  t.scedilla = 0x015f;\n  t.schwa = 0x0259;\n  t.schwacyrillic = 0x04d9;\n  t.schwadieresiscyrillic = 0x04db;\n  t.schwahook = 0x025a;\n  t.scircle = 0x24e2;\n  t.scircumflex = 0x015d;\n  t.scommaaccent = 0x0219;\n  t.sdotaccent = 0x1e61;\n  t.sdotbelow = 0x1e63;\n  t.sdotbelowdotaccent = 0x1e69;\n  t.seagullbelowcmb = 0x033c;\n  t.second = 0x2033;\n  t.secondtonechinese = 0x02ca;\n  t.section = 0x00a7;\n  t.seenarabic = 0x0633;\n  t.seenfinalarabic = 0xfeb2;\n  t.seeninitialarabic = 0xfeb3;\n  t.seenmedialarabic = 0xfeb4;\n  t.segol = 0x05b6;\n  t.segol13 = 0x05b6;\n  t.segol1f = 0x05b6;\n  t.segol2c = 0x05b6;\n  t.segolhebrew = 0x05b6;\n  t.segolnarrowhebrew = 0x05b6;\n  t.segolquarterhebrew = 0x05b6;\n  t.segoltahebrew = 0x0592;\n  t.segolwidehebrew = 0x05b6;\n  t.seharmenian = 0x057d;\n  t.sehiragana = 0x305b;\n  t.sekatakana = 0x30bb;\n  t.sekatakanahalfwidth = 0xff7e;\n  t.semicolon = 0x003b;\n  t.semicolonarabic = 0x061b;\n  t.semicolonmonospace = 0xff1b;\n  t.semicolonsmall = 0xfe54;\n  t.semivoicedmarkkana = 0x309c;\n  t.semivoicedmarkkanahalfwidth = 0xff9f;\n  t.sentisquare = 0x3322;\n  t.sentosquare = 0x3323;\n  t.seven = 0x0037;\n  t.sevenarabic = 0x0667;\n  t.sevenbengali = 0x09ed;\n  t.sevencircle = 0x2466;\n  t.sevencircleinversesansserif = 0x2790;\n  t.sevendeva = 0x096d;\n  t.seveneighths = 0x215e;\n  t.sevengujarati = 0x0aed;\n  t.sevengurmukhi = 0x0a6d;\n  t.sevenhackarabic = 0x0667;\n  t.sevenhangzhou = 0x3027;\n  t.sevenideographicparen = 0x3226;\n  t.seveninferior = 0x2087;\n  t.sevenmonospace = 0xff17;\n  t.sevenoldstyle = 0xf737;\n  t.sevenparen = 0x247a;\n  t.sevenperiod = 0x248e;\n  t.sevenpersian = 0x06f7;\n  t.sevenroman = 0x2176;\n  t.sevensuperior = 0x2077;\n  t.seventeencircle = 0x2470;\n  t.seventeenparen = 0x2484;\n  t.seventeenperiod = 0x2498;\n  t.seventhai = 0x0e57;\n  t.sfthyphen = 0x00ad;\n  t.shaarmenian = 0x0577;\n  t.shabengali = 0x09b6;\n  t.shacyrillic = 0x0448;\n  t.shaddaarabic = 0x0651;\n  t.shaddadammaarabic = 0xfc61;\n  t.shaddadammatanarabic = 0xfc5e;\n  t.shaddafathaarabic = 0xfc60;\n  t.shaddakasraarabic = 0xfc62;\n  t.shaddakasratanarabic = 0xfc5f;\n  t.shade = 0x2592;\n  t.shadedark = 0x2593;\n  t.shadelight = 0x2591;\n  t.shademedium = 0x2592;\n  t.shadeva = 0x0936;\n  t.shagujarati = 0x0ab6;\n  t.shagurmukhi = 0x0a36;\n  t.shalshelethebrew = 0x0593;\n  t.shbopomofo = 0x3115;\n  t.shchacyrillic = 0x0449;\n  t.sheenarabic = 0x0634;\n  t.sheenfinalarabic = 0xfeb6;\n  t.sheeninitialarabic = 0xfeb7;\n  t.sheenmedialarabic = 0xfeb8;\n  t.sheicoptic = 0x03e3;\n  t.sheqel = 0x20aa;\n  t.sheqelhebrew = 0x20aa;\n  t.sheva = 0x05b0;\n  t.sheva115 = 0x05b0;\n  t.sheva15 = 0x05b0;\n  t.sheva22 = 0x05b0;\n  t.sheva2e = 0x05b0;\n  t.shevahebrew = 0x05b0;\n  t.shevanarrowhebrew = 0x05b0;\n  t.shevaquarterhebrew = 0x05b0;\n  t.shevawidehebrew = 0x05b0;\n  t.shhacyrillic = 0x04bb;\n  t.shimacoptic = 0x03ed;\n  t.shin = 0x05e9;\n  t.shindagesh = 0xfb49;\n  t.shindageshhebrew = 0xfb49;\n  t.shindageshshindot = 0xfb2c;\n  t.shindageshshindothebrew = 0xfb2c;\n  t.shindageshsindot = 0xfb2d;\n  t.shindageshsindothebrew = 0xfb2d;\n  t.shindothebrew = 0x05c1;\n  t.shinhebrew = 0x05e9;\n  t.shinshindot = 0xfb2a;\n  t.shinshindothebrew = 0xfb2a;\n  t.shinsindot = 0xfb2b;\n  t.shinsindothebrew = 0xfb2b;\n  t.shook = 0x0282;\n  t.sigma = 0x03c3;\n  t.sigma1 = 0x03c2;\n  t.sigmafinal = 0x03c2;\n  t.sigmalunatesymbolgreek = 0x03f2;\n  t.sihiragana = 0x3057;\n  t.sikatakana = 0x30b7;\n  t.sikatakanahalfwidth = 0xff7c;\n  t.siluqhebrew = 0x05bd;\n  t.siluqlefthebrew = 0x05bd;\n  t.similar = 0x223c;\n  t.sindothebrew = 0x05c2;\n  t.siosacirclekorean = 0x3274;\n  t.siosaparenkorean = 0x3214;\n  t.sioscieuckorean = 0x317e;\n  t.sioscirclekorean = 0x3266;\n  t.sioskiyeokkorean = 0x317a;\n  t.sioskorean = 0x3145;\n  t.siosnieunkorean = 0x317b;\n  t.siosparenkorean = 0x3206;\n  t.siospieupkorean = 0x317d;\n  t.siostikeutkorean = 0x317c;\n  t.six = 0x0036;\n  t.sixarabic = 0x0666;\n  t.sixbengali = 0x09ec;\n  t.sixcircle = 0x2465;\n  t.sixcircleinversesansserif = 0x278f;\n  t.sixdeva = 0x096c;\n  t.sixgujarati = 0x0aec;\n  t.sixgurmukhi = 0x0a6c;\n  t.sixhackarabic = 0x0666;\n  t.sixhangzhou = 0x3026;\n  t.sixideographicparen = 0x3225;\n  t.sixinferior = 0x2086;\n  t.sixmonospace = 0xff16;\n  t.sixoldstyle = 0xf736;\n  t.sixparen = 0x2479;\n  t.sixperiod = 0x248d;\n  t.sixpersian = 0x06f6;\n  t.sixroman = 0x2175;\n  t.sixsuperior = 0x2076;\n  t.sixteencircle = 0x246f;\n  t.sixteencurrencydenominatorbengali = 0x09f9;\n  t.sixteenparen = 0x2483;\n  t.sixteenperiod = 0x2497;\n  t.sixthai = 0x0e56;\n  t.slash = 0x002f;\n  t.slashmonospace = 0xff0f;\n  t.slong = 0x017f;\n  t.slongdotaccent = 0x1e9b;\n  t.smileface = 0x263a;\n  t.smonospace = 0xff53;\n  t.sofpasuqhebrew = 0x05c3;\n  t.softhyphen = 0x00ad;\n  t.softsigncyrillic = 0x044c;\n  t.sohiragana = 0x305d;\n  t.sokatakana = 0x30bd;\n  t.sokatakanahalfwidth = 0xff7f;\n  t.soliduslongoverlaycmb = 0x0338;\n  t.solidusshortoverlaycmb = 0x0337;\n  t.sorusithai = 0x0e29;\n  t.sosalathai = 0x0e28;\n  t.sosothai = 0x0e0b;\n  t.sosuathai = 0x0e2a;\n  t.space = 0x0020;\n  t.spacehackarabic = 0x0020;\n  t.spade = 0x2660;\n  t.spadesuitblack = 0x2660;\n  t.spadesuitwhite = 0x2664;\n  t.sparen = 0x24ae;\n  t.squarebelowcmb = 0x033b;\n  t.squarecc = 0x33c4;\n  t.squarecm = 0x339d;\n  t.squarediagonalcrosshatchfill = 0x25a9;\n  t.squarehorizontalfill = 0x25a4;\n  t.squarekg = 0x338f;\n  t.squarekm = 0x339e;\n  t.squarekmcapital = 0x33ce;\n  t.squareln = 0x33d1;\n  t.squarelog = 0x33d2;\n  t.squaremg = 0x338e;\n  t.squaremil = 0x33d5;\n  t.squaremm = 0x339c;\n  t.squaremsquared = 0x33a1;\n  t.squareorthogonalcrosshatchfill = 0x25a6;\n  t.squareupperlefttolowerrightfill = 0x25a7;\n  t.squareupperrighttolowerleftfill = 0x25a8;\n  t.squareverticalfill = 0x25a5;\n  t.squarewhitewithsmallblack = 0x25a3;\n  t.srsquare = 0x33db;\n  t.ssabengali = 0x09b7;\n  t.ssadeva = 0x0937;\n  t.ssagujarati = 0x0ab7;\n  t.ssangcieuckorean = 0x3149;\n  t.ssanghieuhkorean = 0x3185;\n  t.ssangieungkorean = 0x3180;\n  t.ssangkiyeokkorean = 0x3132;\n  t.ssangnieunkorean = 0x3165;\n  t.ssangpieupkorean = 0x3143;\n  t.ssangsioskorean = 0x3146;\n  t.ssangtikeutkorean = 0x3138;\n  t.ssuperior = 0xf6f2;\n  t.sterling = 0x00a3;\n  t.sterlingmonospace = 0xffe1;\n  t.strokelongoverlaycmb = 0x0336;\n  t.strokeshortoverlaycmb = 0x0335;\n  t.subset = 0x2282;\n  t.subsetnotequal = 0x228a;\n  t.subsetorequal = 0x2286;\n  t.succeeds = 0x227b;\n  t.suchthat = 0x220b;\n  t.suhiragana = 0x3059;\n  t.sukatakana = 0x30b9;\n  t.sukatakanahalfwidth = 0xff7d;\n  t.sukunarabic = 0x0652;\n  t.summation = 0x2211;\n  t.sun = 0x263c;\n  t.superset = 0x2283;\n  t.supersetnotequal = 0x228b;\n  t.supersetorequal = 0x2287;\n  t.svsquare = 0x33dc;\n  t.syouwaerasquare = 0x337c;\n  t.t = 0x0074;\n  t.tabengali = 0x09a4;\n  t.tackdown = 0x22a4;\n  t.tackleft = 0x22a3;\n  t.tadeva = 0x0924;\n  t.tagujarati = 0x0aa4;\n  t.tagurmukhi = 0x0a24;\n  t.taharabic = 0x0637;\n  t.tahfinalarabic = 0xfec2;\n  t.tahinitialarabic = 0xfec3;\n  t.tahiragana = 0x305f;\n  t.tahmedialarabic = 0xfec4;\n  t.taisyouerasquare = 0x337d;\n  t.takatakana = 0x30bf;\n  t.takatakanahalfwidth = 0xff80;\n  t.tatweelarabic = 0x0640;\n  t.tau = 0x03c4;\n  t.tav = 0x05ea;\n  t.tavdages = 0xfb4a;\n  t.tavdagesh = 0xfb4a;\n  t.tavdageshhebrew = 0xfb4a;\n  t.tavhebrew = 0x05ea;\n  t.tbar = 0x0167;\n  t.tbopomofo = 0x310a;\n  t.tcaron = 0x0165;\n  t.tccurl = 0x02a8;\n  t.tcedilla = 0x0163;\n  t.tcheharabic = 0x0686;\n  t.tchehfinalarabic = 0xfb7b;\n  t.tchehinitialarabic = 0xfb7c;\n  t.tchehmedialarabic = 0xfb7d;\n  t.tcircle = 0x24e3;\n  t.tcircumflexbelow = 0x1e71;\n  t.tcommaaccent = 0x0163;\n  t.tdieresis = 0x1e97;\n  t.tdotaccent = 0x1e6b;\n  t.tdotbelow = 0x1e6d;\n  t.tecyrillic = 0x0442;\n  t.tedescendercyrillic = 0x04ad;\n  t.teharabic = 0x062a;\n  t.tehfinalarabic = 0xfe96;\n  t.tehhahinitialarabic = 0xfca2;\n  t.tehhahisolatedarabic = 0xfc0c;\n  t.tehinitialarabic = 0xfe97;\n  t.tehiragana = 0x3066;\n  t.tehjeeminitialarabic = 0xfca1;\n  t.tehjeemisolatedarabic = 0xfc0b;\n  t.tehmarbutaarabic = 0x0629;\n  t.tehmarbutafinalarabic = 0xfe94;\n  t.tehmedialarabic = 0xfe98;\n  t.tehmeeminitialarabic = 0xfca4;\n  t.tehmeemisolatedarabic = 0xfc0e;\n  t.tehnoonfinalarabic = 0xfc73;\n  t.tekatakana = 0x30c6;\n  t.tekatakanahalfwidth = 0xff83;\n  t.telephone = 0x2121;\n  t.telephoneblack = 0x260e;\n  t.telishagedolahebrew = 0x05a0;\n  t.telishaqetanahebrew = 0x05a9;\n  t.tencircle = 0x2469;\n  t.tenideographicparen = 0x3229;\n  t.tenparen = 0x247d;\n  t.tenperiod = 0x2491;\n  t.tenroman = 0x2179;\n  t.tesh = 0x02a7;\n  t.tet = 0x05d8;\n  t.tetdagesh = 0xfb38;\n  t.tetdageshhebrew = 0xfb38;\n  t.tethebrew = 0x05d8;\n  t.tetsecyrillic = 0x04b5;\n  t.tevirhebrew = 0x059b;\n  t.tevirlefthebrew = 0x059b;\n  t.thabengali = 0x09a5;\n  t.thadeva = 0x0925;\n  t.thagujarati = 0x0aa5;\n  t.thagurmukhi = 0x0a25;\n  t.thalarabic = 0x0630;\n  t.thalfinalarabic = 0xfeac;\n  t.thanthakhatlowleftthai = 0xf898;\n  t.thanthakhatlowrightthai = 0xf897;\n  t.thanthakhatthai = 0x0e4c;\n  t.thanthakhatupperleftthai = 0xf896;\n  t.theharabic = 0x062b;\n  t.thehfinalarabic = 0xfe9a;\n  t.thehinitialarabic = 0xfe9b;\n  t.thehmedialarabic = 0xfe9c;\n  t.thereexists = 0x2203;\n  t.therefore = 0x2234;\n  t.theta = 0x03b8;\n  t.theta1 = 0x03d1;\n  t.thetasymbolgreek = 0x03d1;\n  t.thieuthacirclekorean = 0x3279;\n  t.thieuthaparenkorean = 0x3219;\n  t.thieuthcirclekorean = 0x326b;\n  t.thieuthkorean = 0x314c;\n  t.thieuthparenkorean = 0x320b;\n  t.thirteencircle = 0x246c;\n  t.thirteenparen = 0x2480;\n  t.thirteenperiod = 0x2494;\n  t.thonangmonthothai = 0x0e11;\n  t.thook = 0x01ad;\n  t.thophuthaothai = 0x0e12;\n  t.thorn = 0x00fe;\n  t.thothahanthai = 0x0e17;\n  t.thothanthai = 0x0e10;\n  t.thothongthai = 0x0e18;\n  t.thothungthai = 0x0e16;\n  t.thousandcyrillic = 0x0482;\n  t.thousandsseparatorarabic = 0x066c;\n  t.thousandsseparatorpersian = 0x066c;\n  t.three = 0x0033;\n  t.threearabic = 0x0663;\n  t.threebengali = 0x09e9;\n  t.threecircle = 0x2462;\n  t.threecircleinversesansserif = 0x278c;\n  t.threedeva = 0x0969;\n  t.threeeighths = 0x215c;\n  t.threegujarati = 0x0ae9;\n  t.threegurmukhi = 0x0a69;\n  t.threehackarabic = 0x0663;\n  t.threehangzhou = 0x3023;\n  t.threeideographicparen = 0x3222;\n  t.threeinferior = 0x2083;\n  t.threemonospace = 0xff13;\n  t.threenumeratorbengali = 0x09f6;\n  t.threeoldstyle = 0xf733;\n  t.threeparen = 0x2476;\n  t.threeperiod = 0x248a;\n  t.threepersian = 0x06f3;\n  t.threequarters = 0x00be;\n  t.threequartersemdash = 0xf6de;\n  t.threeroman = 0x2172;\n  t.threesuperior = 0x00b3;\n  t.threethai = 0x0e53;\n  t.thzsquare = 0x3394;\n  t.tihiragana = 0x3061;\n  t.tikatakana = 0x30c1;\n  t.tikatakanahalfwidth = 0xff81;\n  t.tikeutacirclekorean = 0x3270;\n  t.tikeutaparenkorean = 0x3210;\n  t.tikeutcirclekorean = 0x3262;\n  t.tikeutkorean = 0x3137;\n  t.tikeutparenkorean = 0x3202;\n  t.tilde = 0x02dc;\n  t.tildebelowcmb = 0x0330;\n  t.tildecmb = 0x0303;\n  t.tildecomb = 0x0303;\n  t.tildedoublecmb = 0x0360;\n  t.tildeoperator = 0x223c;\n  t.tildeoverlaycmb = 0x0334;\n  t.tildeverticalcmb = 0x033e;\n  t.timescircle = 0x2297;\n  t.tipehahebrew = 0x0596;\n  t.tipehalefthebrew = 0x0596;\n  t.tippigurmukhi = 0x0a70;\n  t.titlocyrilliccmb = 0x0483;\n  t.tiwnarmenian = 0x057f;\n  t.tlinebelow = 0x1e6f;\n  t.tmonospace = 0xff54;\n  t.toarmenian = 0x0569;\n  t.tohiragana = 0x3068;\n  t.tokatakana = 0x30c8;\n  t.tokatakanahalfwidth = 0xff84;\n  t.tonebarextrahighmod = 0x02e5;\n  t.tonebarextralowmod = 0x02e9;\n  t.tonebarhighmod = 0x02e6;\n  t.tonebarlowmod = 0x02e8;\n  t.tonebarmidmod = 0x02e7;\n  t.tonefive = 0x01bd;\n  t.tonesix = 0x0185;\n  t.tonetwo = 0x01a8;\n  t.tonos = 0x0384;\n  t.tonsquare = 0x3327;\n  t.topatakthai = 0x0e0f;\n  t.tortoiseshellbracketleft = 0x3014;\n  t.tortoiseshellbracketleftsmall = 0xfe5d;\n  t.tortoiseshellbracketleftvertical = 0xfe39;\n  t.tortoiseshellbracketright = 0x3015;\n  t.tortoiseshellbracketrightsmall = 0xfe5e;\n  t.tortoiseshellbracketrightvertical = 0xfe3a;\n  t.totaothai = 0x0e15;\n  t.tpalatalhook = 0x01ab;\n  t.tparen = 0x24af;\n  t.trademark = 0x2122;\n  t.trademarksans = 0xf8ea;\n  t.trademarkserif = 0xf6db;\n  t.tretroflexhook = 0x0288;\n  t.triagdn = 0x25bc;\n  t.triaglf = 0x25c4;\n  t.triagrt = 0x25ba;\n  t.triagup = 0x25b2;\n  t.ts = 0x02a6;\n  t.tsadi = 0x05e6;\n  t.tsadidagesh = 0xfb46;\n  t.tsadidageshhebrew = 0xfb46;\n  t.tsadihebrew = 0x05e6;\n  t.tsecyrillic = 0x0446;\n  t.tsere = 0x05b5;\n  t.tsere12 = 0x05b5;\n  t.tsere1e = 0x05b5;\n  t.tsere2b = 0x05b5;\n  t.tserehebrew = 0x05b5;\n  t.tserenarrowhebrew = 0x05b5;\n  t.tserequarterhebrew = 0x05b5;\n  t.tserewidehebrew = 0x05b5;\n  t.tshecyrillic = 0x045b;\n  t.tsuperior = 0xf6f3;\n  t.ttabengali = 0x099f;\n  t.ttadeva = 0x091f;\n  t.ttagujarati = 0x0a9f;\n  t.ttagurmukhi = 0x0a1f;\n  t.tteharabic = 0x0679;\n  t.ttehfinalarabic = 0xfb67;\n  t.ttehinitialarabic = 0xfb68;\n  t.ttehmedialarabic = 0xfb69;\n  t.tthabengali = 0x09a0;\n  t.tthadeva = 0x0920;\n  t.tthagujarati = 0x0aa0;\n  t.tthagurmukhi = 0x0a20;\n  t.tturned = 0x0287;\n  t.tuhiragana = 0x3064;\n  t.tukatakana = 0x30c4;\n  t.tukatakanahalfwidth = 0xff82;\n  t.tusmallhiragana = 0x3063;\n  t.tusmallkatakana = 0x30c3;\n  t.tusmallkatakanahalfwidth = 0xff6f;\n  t.twelvecircle = 0x246b;\n  t.twelveparen = 0x247f;\n  t.twelveperiod = 0x2493;\n  t.twelveroman = 0x217b;\n  t.twentycircle = 0x2473;\n  t.twentyhangzhou = 0x5344;\n  t.twentyparen = 0x2487;\n  t.twentyperiod = 0x249b;\n  t.two = 0x0032;\n  t.twoarabic = 0x0662;\n  t.twobengali = 0x09e8;\n  t.twocircle = 0x2461;\n  t.twocircleinversesansserif = 0x278b;\n  t.twodeva = 0x0968;\n  t.twodotenleader = 0x2025;\n  t.twodotleader = 0x2025;\n  t.twodotleadervertical = 0xfe30;\n  t.twogujarati = 0x0ae8;\n  t.twogurmukhi = 0x0a68;\n  t.twohackarabic = 0x0662;\n  t.twohangzhou = 0x3022;\n  t.twoideographicparen = 0x3221;\n  t.twoinferior = 0x2082;\n  t.twomonospace = 0xff12;\n  t.twonumeratorbengali = 0x09f5;\n  t.twooldstyle = 0xf732;\n  t.twoparen = 0x2475;\n  t.twoperiod = 0x2489;\n  t.twopersian = 0x06f2;\n  t.tworoman = 0x2171;\n  t.twostroke = 0x01bb;\n  t.twosuperior = 0x00b2;\n  t.twothai = 0x0e52;\n  t.twothirds = 0x2154;\n  t.u = 0x0075;\n  t.uacute = 0x00fa;\n  t.ubar = 0x0289;\n  t.ubengali = 0x0989;\n  t.ubopomofo = 0x3128;\n  t.ubreve = 0x016d;\n  t.ucaron = 0x01d4;\n  t.ucircle = 0x24e4;\n  t.ucircumflex = 0x00fb;\n  t.ucircumflexbelow = 0x1e77;\n  t.ucyrillic = 0x0443;\n  t.udattadeva = 0x0951;\n  t.udblacute = 0x0171;\n  t.udblgrave = 0x0215;\n  t.udeva = 0x0909;\n  t.udieresis = 0x00fc;\n  t.udieresisacute = 0x01d8;\n  t.udieresisbelow = 0x1e73;\n  t.udieresiscaron = 0x01da;\n  t.udieresiscyrillic = 0x04f1;\n  t.udieresisgrave = 0x01dc;\n  t.udieresismacron = 0x01d6;\n  t.udotbelow = 0x1ee5;\n  t.ugrave = 0x00f9;\n  t.ugujarati = 0x0a89;\n  t.ugurmukhi = 0x0a09;\n  t.uhiragana = 0x3046;\n  t.uhookabove = 0x1ee7;\n  t.uhorn = 0x01b0;\n  t.uhornacute = 0x1ee9;\n  t.uhorndotbelow = 0x1ef1;\n  t.uhorngrave = 0x1eeb;\n  t.uhornhookabove = 0x1eed;\n  t.uhorntilde = 0x1eef;\n  t.uhungarumlaut = 0x0171;\n  t.uhungarumlautcyrillic = 0x04f3;\n  t.uinvertedbreve = 0x0217;\n  t.ukatakana = 0x30a6;\n  t.ukatakanahalfwidth = 0xff73;\n  t.ukcyrillic = 0x0479;\n  t.ukorean = 0x315c;\n  t.umacron = 0x016b;\n  t.umacroncyrillic = 0x04ef;\n  t.umacrondieresis = 0x1e7b;\n  t.umatragurmukhi = 0x0a41;\n  t.umonospace = 0xff55;\n  t.underscore = 0x005f;\n  t.underscoredbl = 0x2017;\n  t.underscoremonospace = 0xff3f;\n  t.underscorevertical = 0xfe33;\n  t.underscorewavy = 0xfe4f;\n  t.union = 0x222a;\n  t.universal = 0x2200;\n  t.uogonek = 0x0173;\n  t.uparen = 0x24b0;\n  t.upblock = 0x2580;\n  t.upperdothebrew = 0x05c4;\n  t.upsilon = 0x03c5;\n  t.upsilondieresis = 0x03cb;\n  t.upsilondieresistonos = 0x03b0;\n  t.upsilonlatin = 0x028a;\n  t.upsilontonos = 0x03cd;\n  t.uptackbelowcmb = 0x031d;\n  t.uptackmod = 0x02d4;\n  t.uragurmukhi = 0x0a73;\n  t.uring = 0x016f;\n  t.ushortcyrillic = 0x045e;\n  t.usmallhiragana = 0x3045;\n  t.usmallkatakana = 0x30a5;\n  t.usmallkatakanahalfwidth = 0xff69;\n  t.ustraightcyrillic = 0x04af;\n  t.ustraightstrokecyrillic = 0x04b1;\n  t.utilde = 0x0169;\n  t.utildeacute = 0x1e79;\n  t.utildebelow = 0x1e75;\n  t.uubengali = 0x098a;\n  t.uudeva = 0x090a;\n  t.uugujarati = 0x0a8a;\n  t.uugurmukhi = 0x0a0a;\n  t.uumatragurmukhi = 0x0a42;\n  t.uuvowelsignbengali = 0x09c2;\n  t.uuvowelsigndeva = 0x0942;\n  t.uuvowelsigngujarati = 0x0ac2;\n  t.uvowelsignbengali = 0x09c1;\n  t.uvowelsigndeva = 0x0941;\n  t.uvowelsigngujarati = 0x0ac1;\n  t.v = 0x0076;\n  t.vadeva = 0x0935;\n  t.vagujarati = 0x0ab5;\n  t.vagurmukhi = 0x0a35;\n  t.vakatakana = 0x30f7;\n  t.vav = 0x05d5;\n  t.vavdagesh = 0xfb35;\n  t.vavdagesh65 = 0xfb35;\n  t.vavdageshhebrew = 0xfb35;\n  t.vavhebrew = 0x05d5;\n  t.vavholam = 0xfb4b;\n  t.vavholamhebrew = 0xfb4b;\n  t.vavvavhebrew = 0x05f0;\n  t.vavyodhebrew = 0x05f1;\n  t.vcircle = 0x24e5;\n  t.vdotbelow = 0x1e7f;\n  t.vecyrillic = 0x0432;\n  t.veharabic = 0x06a4;\n  t.vehfinalarabic = 0xfb6b;\n  t.vehinitialarabic = 0xfb6c;\n  t.vehmedialarabic = 0xfb6d;\n  t.vekatakana = 0x30f9;\n  t.venus = 0x2640;\n  t.verticalbar = 0x007c;\n  t.verticallineabovecmb = 0x030d;\n  t.verticallinebelowcmb = 0x0329;\n  t.verticallinelowmod = 0x02cc;\n  t.verticallinemod = 0x02c8;\n  t.vewarmenian = 0x057e;\n  t.vhook = 0x028b;\n  t.vikatakana = 0x30f8;\n  t.viramabengali = 0x09cd;\n  t.viramadeva = 0x094d;\n  t.viramagujarati = 0x0acd;\n  t.visargabengali = 0x0983;\n  t.visargadeva = 0x0903;\n  t.visargagujarati = 0x0a83;\n  t.vmonospace = 0xff56;\n  t.voarmenian = 0x0578;\n  t.voicediterationhiragana = 0x309e;\n  t.voicediterationkatakana = 0x30fe;\n  t.voicedmarkkana = 0x309b;\n  t.voicedmarkkanahalfwidth = 0xff9e;\n  t.vokatakana = 0x30fa;\n  t.vparen = 0x24b1;\n  t.vtilde = 0x1e7d;\n  t.vturned = 0x028c;\n  t.vuhiragana = 0x3094;\n  t.vukatakana = 0x30f4;\n  t.w = 0x0077;\n  t.wacute = 0x1e83;\n  t.waekorean = 0x3159;\n  t.wahiragana = 0x308f;\n  t.wakatakana = 0x30ef;\n  t.wakatakanahalfwidth = 0xff9c;\n  t.wakorean = 0x3158;\n  t.wasmallhiragana = 0x308e;\n  t.wasmallkatakana = 0x30ee;\n  t.wattosquare = 0x3357;\n  t.wavedash = 0x301c;\n  t.wavyunderscorevertical = 0xfe34;\n  t.wawarabic = 0x0648;\n  t.wawfinalarabic = 0xfeee;\n  t.wawhamzaabovearabic = 0x0624;\n  t.wawhamzaabovefinalarabic = 0xfe86;\n  t.wbsquare = 0x33dd;\n  t.wcircle = 0x24e6;\n  t.wcircumflex = 0x0175;\n  t.wdieresis = 0x1e85;\n  t.wdotaccent = 0x1e87;\n  t.wdotbelow = 0x1e89;\n  t.wehiragana = 0x3091;\n  t.weierstrass = 0x2118;\n  t.wekatakana = 0x30f1;\n  t.wekorean = 0x315e;\n  t.weokorean = 0x315d;\n  t.wgrave = 0x1e81;\n  t.whitebullet = 0x25e6;\n  t.whitecircle = 0x25cb;\n  t.whitecircleinverse = 0x25d9;\n  t.whitecornerbracketleft = 0x300e;\n  t.whitecornerbracketleftvertical = 0xfe43;\n  t.whitecornerbracketright = 0x300f;\n  t.whitecornerbracketrightvertical = 0xfe44;\n  t.whitediamond = 0x25c7;\n  t.whitediamondcontainingblacksmalldiamond = 0x25c8;\n  t.whitedownpointingsmalltriangle = 0x25bf;\n  t.whitedownpointingtriangle = 0x25bd;\n  t.whiteleftpointingsmalltriangle = 0x25c3;\n  t.whiteleftpointingtriangle = 0x25c1;\n  t.whitelenticularbracketleft = 0x3016;\n  t.whitelenticularbracketright = 0x3017;\n  t.whiterightpointingsmalltriangle = 0x25b9;\n  t.whiterightpointingtriangle = 0x25b7;\n  t.whitesmallsquare = 0x25ab;\n  t.whitesmilingface = 0x263a;\n  t.whitesquare = 0x25a1;\n  t.whitestar = 0x2606;\n  t.whitetelephone = 0x260f;\n  t.whitetortoiseshellbracketleft = 0x3018;\n  t.whitetortoiseshellbracketright = 0x3019;\n  t.whiteuppointingsmalltriangle = 0x25b5;\n  t.whiteuppointingtriangle = 0x25b3;\n  t.wihiragana = 0x3090;\n  t.wikatakana = 0x30f0;\n  t.wikorean = 0x315f;\n  t.wmonospace = 0xff57;\n  t.wohiragana = 0x3092;\n  t.wokatakana = 0x30f2;\n  t.wokatakanahalfwidth = 0xff66;\n  t.won = 0x20a9;\n  t.wonmonospace = 0xffe6;\n  t.wowaenthai = 0x0e27;\n  t.wparen = 0x24b2;\n  t.wring = 0x1e98;\n  t.wsuperior = 0x02b7;\n  t.wturned = 0x028d;\n  t.wynn = 0x01bf;\n  t.x = 0x0078;\n  t.xabovecmb = 0x033d;\n  t.xbopomofo = 0x3112;\n  t.xcircle = 0x24e7;\n  t.xdieresis = 0x1e8d;\n  t.xdotaccent = 0x1e8b;\n  t.xeharmenian = 0x056d;\n  t.xi = 0x03be;\n  t.xmonospace = 0xff58;\n  t.xparen = 0x24b3;\n  t.xsuperior = 0x02e3;\n  t.y = 0x0079;\n  t.yaadosquare = 0x334e;\n  t.yabengali = 0x09af;\n  t.yacute = 0x00fd;\n  t.yadeva = 0x092f;\n  t.yaekorean = 0x3152;\n  t.yagujarati = 0x0aaf;\n  t.yagurmukhi = 0x0a2f;\n  t.yahiragana = 0x3084;\n  t.yakatakana = 0x30e4;\n  t.yakatakanahalfwidth = 0xff94;\n  t.yakorean = 0x3151;\n  t.yamakkanthai = 0x0e4e;\n  t.yasmallhiragana = 0x3083;\n  t.yasmallkatakana = 0x30e3;\n  t.yasmallkatakanahalfwidth = 0xff6c;\n  t.yatcyrillic = 0x0463;\n  t.ycircle = 0x24e8;\n  t.ycircumflex = 0x0177;\n  t.ydieresis = 0x00ff;\n  t.ydotaccent = 0x1e8f;\n  t.ydotbelow = 0x1ef5;\n  t.yeharabic = 0x064a;\n  t.yehbarreearabic = 0x06d2;\n  t.yehbarreefinalarabic = 0xfbaf;\n  t.yehfinalarabic = 0xfef2;\n  t.yehhamzaabovearabic = 0x0626;\n  t.yehhamzaabovefinalarabic = 0xfe8a;\n  t.yehhamzaaboveinitialarabic = 0xfe8b;\n  t.yehhamzaabovemedialarabic = 0xfe8c;\n  t.yehinitialarabic = 0xfef3;\n  t.yehmedialarabic = 0xfef4;\n  t.yehmeeminitialarabic = 0xfcdd;\n  t.yehmeemisolatedarabic = 0xfc58;\n  t.yehnoonfinalarabic = 0xfc94;\n  t.yehthreedotsbelowarabic = 0x06d1;\n  t.yekorean = 0x3156;\n  t.yen = 0x00a5;\n  t.yenmonospace = 0xffe5;\n  t.yeokorean = 0x3155;\n  t.yeorinhieuhkorean = 0x3186;\n  t.yerahbenyomohebrew = 0x05aa;\n  t.yerahbenyomolefthebrew = 0x05aa;\n  t.yericyrillic = 0x044b;\n  t.yerudieresiscyrillic = 0x04f9;\n  t.yesieungkorean = 0x3181;\n  t.yesieungpansioskorean = 0x3183;\n  t.yesieungsioskorean = 0x3182;\n  t.yetivhebrew = 0x059a;\n  t.ygrave = 0x1ef3;\n  t.yhook = 0x01b4;\n  t.yhookabove = 0x1ef7;\n  t.yiarmenian = 0x0575;\n  t.yicyrillic = 0x0457;\n  t.yikorean = 0x3162;\n  t.yinyang = 0x262f;\n  t.yiwnarmenian = 0x0582;\n  t.ymonospace = 0xff59;\n  t.yod = 0x05d9;\n  t.yoddagesh = 0xfb39;\n  t.yoddageshhebrew = 0xfb39;\n  t.yodhebrew = 0x05d9;\n  t.yodyodhebrew = 0x05f2;\n  t.yodyodpatahhebrew = 0xfb1f;\n  t.yohiragana = 0x3088;\n  t.yoikorean = 0x3189;\n  t.yokatakana = 0x30e8;\n  t.yokatakanahalfwidth = 0xff96;\n  t.yokorean = 0x315b;\n  t.yosmallhiragana = 0x3087;\n  t.yosmallkatakana = 0x30e7;\n  t.yosmallkatakanahalfwidth = 0xff6e;\n  t.yotgreek = 0x03f3;\n  t.yoyaekorean = 0x3188;\n  t.yoyakorean = 0x3187;\n  t.yoyakthai = 0x0e22;\n  t.yoyingthai = 0x0e0d;\n  t.yparen = 0x24b4;\n  t.ypogegrammeni = 0x037a;\n  t.ypogegrammenigreekcmb = 0x0345;\n  t.yr = 0x01a6;\n  t.yring = 0x1e99;\n  t.ysuperior = 0x02b8;\n  t.ytilde = 0x1ef9;\n  t.yturned = 0x028e;\n  t.yuhiragana = 0x3086;\n  t.yuikorean = 0x318c;\n  t.yukatakana = 0x30e6;\n  t.yukatakanahalfwidth = 0xff95;\n  t.yukorean = 0x3160;\n  t.yusbigcyrillic = 0x046b;\n  t.yusbigiotifiedcyrillic = 0x046d;\n  t.yuslittlecyrillic = 0x0467;\n  t.yuslittleiotifiedcyrillic = 0x0469;\n  t.yusmallhiragana = 0x3085;\n  t.yusmallkatakana = 0x30e5;\n  t.yusmallkatakanahalfwidth = 0xff6d;\n  t.yuyekorean = 0x318b;\n  t.yuyeokorean = 0x318a;\n  t.yyabengali = 0x09df;\n  t.yyadeva = 0x095f;\n  t.z = 0x007a;\n  t.zaarmenian = 0x0566;\n  t.zacute = 0x017a;\n  t.zadeva = 0x095b;\n  t.zagurmukhi = 0x0a5b;\n  t.zaharabic = 0x0638;\n  t.zahfinalarabic = 0xfec6;\n  t.zahinitialarabic = 0xfec7;\n  t.zahiragana = 0x3056;\n  t.zahmedialarabic = 0xfec8;\n  t.zainarabic = 0x0632;\n  t.zainfinalarabic = 0xfeb0;\n  t.zakatakana = 0x30b6;\n  t.zaqefgadolhebrew = 0x0595;\n  t.zaqefqatanhebrew = 0x0594;\n  t.zarqahebrew = 0x0598;\n  t.zayin = 0x05d6;\n  t.zayindagesh = 0xfb36;\n  t.zayindageshhebrew = 0xfb36;\n  t.zayinhebrew = 0x05d6;\n  t.zbopomofo = 0x3117;\n  t.zcaron = 0x017e;\n  t.zcircle = 0x24e9;\n  t.zcircumflex = 0x1e91;\n  t.zcurl = 0x0291;\n  t.zdot = 0x017c;\n  t.zdotaccent = 0x017c;\n  t.zdotbelow = 0x1e93;\n  t.zecyrillic = 0x0437;\n  t.zedescendercyrillic = 0x0499;\n  t.zedieresiscyrillic = 0x04df;\n  t.zehiragana = 0x305c;\n  t.zekatakana = 0x30bc;\n  t.zero = 0x0030;\n  t.zeroarabic = 0x0660;\n  t.zerobengali = 0x09e6;\n  t.zerodeva = 0x0966;\n  t.zerogujarati = 0x0ae6;\n  t.zerogurmukhi = 0x0a66;\n  t.zerohackarabic = 0x0660;\n  t.zeroinferior = 0x2080;\n  t.zeromonospace = 0xff10;\n  t.zerooldstyle = 0xf730;\n  t.zeropersian = 0x06f0;\n  t.zerosuperior = 0x2070;\n  t.zerothai = 0x0e50;\n  t.zerowidthjoiner = 0xfeff;\n  t.zerowidthnonjoiner = 0x200c;\n  t.zerowidthspace = 0x200b;\n  t.zeta = 0x03b6;\n  t.zhbopomofo = 0x3113;\n  t.zhearmenian = 0x056a;\n  t.zhebrevecyrillic = 0x04c2;\n  t.zhecyrillic = 0x0436;\n  t.zhedescendercyrillic = 0x0497;\n  t.zhedieresiscyrillic = 0x04dd;\n  t.zihiragana = 0x3058;\n  t.zikatakana = 0x30b8;\n  t.zinorhebrew = 0x05ae;\n  t.zlinebelow = 0x1e95;\n  t.zmonospace = 0xff5a;\n  t.zohiragana = 0x305e;\n  t.zokatakana = 0x30be;\n  t.zparen = 0x24b5;\n  t.zretroflexhook = 0x0290;\n  t.zstroke = 0x01b6;\n  t.zuhiragana = 0x305a;\n  t.zukatakana = 0x30ba;\n  t[\".notdef\"] = 0x0000;\n\n  // TeX-specific glyph names.\n  t.angbracketleftbig = 0x2329;\n  t.angbracketleftBig = 0x2329;\n  t.angbracketleftbigg = 0x2329;\n  t.angbracketleftBigg = 0x2329;\n  t.angbracketrightBig = 0x232a;\n  t.angbracketrightbig = 0x232a;\n  t.angbracketrightBigg = 0x232a;\n  t.angbracketrightbigg = 0x232a;\n  t.arrowhookleft = 0x21aa;\n  t.arrowhookright = 0x21a9;\n  t.arrowlefttophalf = 0x21bc;\n  t.arrowleftbothalf = 0x21bd;\n  t.arrownortheast = 0x2197;\n  t.arrownorthwest = 0x2196;\n  t.arrowrighttophalf = 0x21c0;\n  t.arrowrightbothalf = 0x21c1;\n  t.arrowsoutheast = 0x2198;\n  t.arrowsouthwest = 0x2199;\n  t.backslashbig = 0x2216;\n  t.backslashBig = 0x2216;\n  t.backslashBigg = 0x2216;\n  t.backslashbigg = 0x2216;\n  t.bardbl = 0x2016;\n  t.bracehtipdownleft = 0xfe37;\n  t.bracehtipdownright = 0xfe37;\n  t.bracehtipupleft = 0xfe38;\n  t.bracehtipupright = 0xfe38;\n  t.braceleftBig = 0x007b;\n  t.braceleftbig = 0x007b;\n  t.braceleftbigg = 0x007b;\n  t.braceleftBigg = 0x007b;\n  t.bracerightBig = 0x007d;\n  t.bracerightbig = 0x007d;\n  t.bracerightbigg = 0x007d;\n  t.bracerightBigg = 0x007d;\n  t.bracketleftbig = 0x005b;\n  t.bracketleftBig = 0x005b;\n  t.bracketleftbigg = 0x005b;\n  t.bracketleftBigg = 0x005b;\n  t.bracketrightBig = 0x005d;\n  t.bracketrightbig = 0x005d;\n  t.bracketrightbigg = 0x005d;\n  t.bracketrightBigg = 0x005d;\n  t.ceilingleftbig = 0x2308;\n  t.ceilingleftBig = 0x2308;\n  t.ceilingleftBigg = 0x2308;\n  t.ceilingleftbigg = 0x2308;\n  t.ceilingrightbig = 0x2309;\n  t.ceilingrightBig = 0x2309;\n  t.ceilingrightbigg = 0x2309;\n  t.ceilingrightBigg = 0x2309;\n  t.circledotdisplay = 0x2299;\n  t.circledottext = 0x2299;\n  t.circlemultiplydisplay = 0x2297;\n  t.circlemultiplytext = 0x2297;\n  t.circleplusdisplay = 0x2295;\n  t.circleplustext = 0x2295;\n  t.contintegraldisplay = 0x222e;\n  t.contintegraltext = 0x222e;\n  t.coproductdisplay = 0x2210;\n  t.coproducttext = 0x2210;\n  t.floorleftBig = 0x230a;\n  t.floorleftbig = 0x230a;\n  t.floorleftbigg = 0x230a;\n  t.floorleftBigg = 0x230a;\n  t.floorrightbig = 0x230b;\n  t.floorrightBig = 0x230b;\n  t.floorrightBigg = 0x230b;\n  t.floorrightbigg = 0x230b;\n  t.hatwide = 0x0302;\n  t.hatwider = 0x0302;\n  t.hatwidest = 0x0302;\n  t.intercal = 0x1d40;\n  t.integraldisplay = 0x222b;\n  t.integraltext = 0x222b;\n  t.intersectiondisplay = 0x22c2;\n  t.intersectiontext = 0x22c2;\n  t.logicalanddisplay = 0x2227;\n  t.logicalandtext = 0x2227;\n  t.logicalordisplay = 0x2228;\n  t.logicalortext = 0x2228;\n  t.parenleftBig = 0x0028;\n  t.parenleftbig = 0x0028;\n  t.parenleftBigg = 0x0028;\n  t.parenleftbigg = 0x0028;\n  t.parenrightBig = 0x0029;\n  t.parenrightbig = 0x0029;\n  t.parenrightBigg = 0x0029;\n  t.parenrightbigg = 0x0029;\n  t.prime = 0x2032;\n  t.productdisplay = 0x220f;\n  t.producttext = 0x220f;\n  t.radicalbig = 0x221a;\n  t.radicalBig = 0x221a;\n  t.radicalBigg = 0x221a;\n  t.radicalbigg = 0x221a;\n  t.radicalbt = 0x221a;\n  t.radicaltp = 0x221a;\n  t.radicalvertex = 0x221a;\n  t.slashbig = 0x002f;\n  t.slashBig = 0x002f;\n  t.slashBigg = 0x002f;\n  t.slashbigg = 0x002f;\n  t.summationdisplay = 0x2211;\n  t.summationtext = 0x2211;\n  t.tildewide = 0x02dc;\n  t.tildewider = 0x02dc;\n  t.tildewidest = 0x02dc;\n  t.uniondisplay = 0x22c3;\n  t.unionmultidisplay = 0x228e;\n  t.unionmultitext = 0x228e;\n  t.unionsqdisplay = 0x2294;\n  t.unionsqtext = 0x2294;\n  t.uniontext = 0x22c3;\n  t.vextenddouble = 0x2225;\n  t.vextendsingle = 0x2223;\n});\n\nvar getDingbatsGlyphsUnicode = getLookupTableFactory(function (t) {\n  t.space = 0x0020;\n  t.a1 = 0x2701;\n  t.a2 = 0x2702;\n  t.a202 = 0x2703;\n  t.a3 = 0x2704;\n  t.a4 = 0x260e;\n  t.a5 = 0x2706;\n  t.a119 = 0x2707;\n  t.a118 = 0x2708;\n  t.a117 = 0x2709;\n  t.a11 = 0x261b;\n  t.a12 = 0x261e;\n  t.a13 = 0x270c;\n  t.a14 = 0x270d;\n  t.a15 = 0x270e;\n  t.a16 = 0x270f;\n  t.a105 = 0x2710;\n  t.a17 = 0x2711;\n  t.a18 = 0x2712;\n  t.a19 = 0x2713;\n  t.a20 = 0x2714;\n  t.a21 = 0x2715;\n  t.a22 = 0x2716;\n  t.a23 = 0x2717;\n  t.a24 = 0x2718;\n  t.a25 = 0x2719;\n  t.a26 = 0x271a;\n  t.a27 = 0x271b;\n  t.a28 = 0x271c;\n  t.a6 = 0x271d;\n  t.a7 = 0x271e;\n  t.a8 = 0x271f;\n  t.a9 = 0x2720;\n  t.a10 = 0x2721;\n  t.a29 = 0x2722;\n  t.a30 = 0x2723;\n  t.a31 = 0x2724;\n  t.a32 = 0x2725;\n  t.a33 = 0x2726;\n  t.a34 = 0x2727;\n  t.a35 = 0x2605;\n  t.a36 = 0x2729;\n  t.a37 = 0x272a;\n  t.a38 = 0x272b;\n  t.a39 = 0x272c;\n  t.a40 = 0x272d;\n  t.a41 = 0x272e;\n  t.a42 = 0x272f;\n  t.a43 = 0x2730;\n  t.a44 = 0x2731;\n  t.a45 = 0x2732;\n  t.a46 = 0x2733;\n  t.a47 = 0x2734;\n  t.a48 = 0x2735;\n  t.a49 = 0x2736;\n  t.a50 = 0x2737;\n  t.a51 = 0x2738;\n  t.a52 = 0x2739;\n  t.a53 = 0x273a;\n  t.a54 = 0x273b;\n  t.a55 = 0x273c;\n  t.a56 = 0x273d;\n  t.a57 = 0x273e;\n  t.a58 = 0x273f;\n  t.a59 = 0x2740;\n  t.a60 = 0x2741;\n  t.a61 = 0x2742;\n  t.a62 = 0x2743;\n  t.a63 = 0x2744;\n  t.a64 = 0x2745;\n  t.a65 = 0x2746;\n  t.a66 = 0x2747;\n  t.a67 = 0x2748;\n  t.a68 = 0x2749;\n  t.a69 = 0x274a;\n  t.a70 = 0x274b;\n  t.a71 = 0x25cf;\n  t.a72 = 0x274d;\n  t.a73 = 0x25a0;\n  t.a74 = 0x274f;\n  t.a203 = 0x2750;\n  t.a75 = 0x2751;\n  t.a204 = 0x2752;\n  t.a76 = 0x25b2;\n  t.a77 = 0x25bc;\n  t.a78 = 0x25c6;\n  t.a79 = 0x2756;\n  t.a81 = 0x25d7;\n  t.a82 = 0x2758;\n  t.a83 = 0x2759;\n  t.a84 = 0x275a;\n  t.a97 = 0x275b;\n  t.a98 = 0x275c;\n  t.a99 = 0x275d;\n  t.a100 = 0x275e;\n  t.a101 = 0x2761;\n  t.a102 = 0x2762;\n  t.a103 = 0x2763;\n  t.a104 = 0x2764;\n  t.a106 = 0x2765;\n  t.a107 = 0x2766;\n  t.a108 = 0x2767;\n  t.a112 = 0x2663;\n  t.a111 = 0x2666;\n  t.a110 = 0x2665;\n  t.a109 = 0x2660;\n  t.a120 = 0x2460;\n  t.a121 = 0x2461;\n  t.a122 = 0x2462;\n  t.a123 = 0x2463;\n  t.a124 = 0x2464;\n  t.a125 = 0x2465;\n  t.a126 = 0x2466;\n  t.a127 = 0x2467;\n  t.a128 = 0x2468;\n  t.a129 = 0x2469;\n  t.a130 = 0x2776;\n  t.a131 = 0x2777;\n  t.a132 = 0x2778;\n  t.a133 = 0x2779;\n  t.a134 = 0x277a;\n  t.a135 = 0x277b;\n  t.a136 = 0x277c;\n  t.a137 = 0x277d;\n  t.a138 = 0x277e;\n  t.a139 = 0x277f;\n  t.a140 = 0x2780;\n  t.a141 = 0x2781;\n  t.a142 = 0x2782;\n  t.a143 = 0x2783;\n  t.a144 = 0x2784;\n  t.a145 = 0x2785;\n  t.a146 = 0x2786;\n  t.a147 = 0x2787;\n  t.a148 = 0x2788;\n  t.a149 = 0x2789;\n  t.a150 = 0x278a;\n  t.a151 = 0x278b;\n  t.a152 = 0x278c;\n  t.a153 = 0x278d;\n  t.a154 = 0x278e;\n  t.a155 = 0x278f;\n  t.a156 = 0x2790;\n  t.a157 = 0x2791;\n  t.a158 = 0x2792;\n  t.a159 = 0x2793;\n  t.a160 = 0x2794;\n  t.a161 = 0x2192;\n  t.a163 = 0x2194;\n  t.a164 = 0x2195;\n  t.a196 = 0x2798;\n  t.a165 = 0x2799;\n  t.a192 = 0x279a;\n  t.a166 = 0x279b;\n  t.a167 = 0x279c;\n  t.a168 = 0x279d;\n  t.a169 = 0x279e;\n  t.a170 = 0x279f;\n  t.a171 = 0x27a0;\n  t.a172 = 0x27a1;\n  t.a173 = 0x27a2;\n  t.a162 = 0x27a3;\n  t.a174 = 0x27a4;\n  t.a175 = 0x27a5;\n  t.a176 = 0x27a6;\n  t.a177 = 0x27a7;\n  t.a178 = 0x27a8;\n  t.a179 = 0x27a9;\n  t.a193 = 0x27aa;\n  t.a180 = 0x27ab;\n  t.a199 = 0x27ac;\n  t.a181 = 0x27ad;\n  t.a200 = 0x27ae;\n  t.a182 = 0x27af;\n  t.a201 = 0x27b1;\n  t.a183 = 0x27b2;\n  t.a184 = 0x27b3;\n  t.a197 = 0x27b4;\n  t.a185 = 0x27b5;\n  t.a194 = 0x27b6;\n  t.a198 = 0x27b7;\n  t.a186 = 0x27b8;\n  t.a195 = 0x27b9;\n  t.a187 = 0x27ba;\n  t.a188 = 0x27bb;\n  t.a189 = 0x27bc;\n  t.a190 = 0x27bd;\n  t.a191 = 0x27be;\n  t.a89 = 0x2768; // 0xF8D7\n  t.a90 = 0x2769; // 0xF8D8\n  t.a93 = 0x276a; // 0xF8D9\n  t.a94 = 0x276b; // 0xF8DA\n  t.a91 = 0x276c; // 0xF8DB\n  t.a92 = 0x276d; // 0xF8DC\n  t.a205 = 0x276e; // 0xF8DD\n  t.a85 = 0x276f; // 0xF8DE\n  t.a206 = 0x2770; // 0xF8DF\n  t.a86 = 0x2771; // 0xF8E0\n  t.a87 = 0x2772; // 0xF8E1\n  t.a88 = 0x2773; // 0xF8E2\n  t.a95 = 0x2774; // 0xF8E3\n  t.a96 = 0x2775; // 0xF8E4\n  t[\".notdef\"] = 0x0000;\n});\n\nexports.getGlyphsUnicode = getGlyphsUnicode;\nexports.getDingbatsGlyphsUnicode = getDingbatsGlyphsUnicode;\n", "/* Copyright 2015 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint no-var: error */\n\nimport { getLookupTableFactory } from \"./core_utils.js\";\n\n/**\n * Hold a map of decoded fonts and of the standard fourteen Type1\n * fonts and their acronyms.\n */\nconst getStdFontMap = getLookupTableFactory(function (t) {\n  t.ArialNarrow = \"Helvetica\";\n  t[\"ArialNarrow-Bold\"] = \"Helvetica-Bold\";\n  t[\"ArialNarrow-BoldItalic\"] = \"Helvetica-BoldOblique\";\n  t[\"ArialNarrow-Italic\"] = \"Helvetica-Oblique\";\n  t.ArialBlack = \"Helvetica\";\n  t[\"ArialBlack-Bold\"] = \"Helvetica-Bold\";\n  t[\"ArialBlack-BoldItalic\"] = \"Helvetica-BoldOblique\";\n  t[\"ArialBlack-Italic\"] = \"Helvetica-Oblique\";\n  t[\"Arial-Black\"] = \"Helvetica\";\n  t[\"Arial-Black-Bold\"] = \"Helvetica-Bold\";\n  t[\"Arial-Black-BoldItalic\"] = \"Helvetica-BoldOblique\";\n  t[\"Arial-Black-Italic\"] = \"Helvetica-Oblique\";\n  t.Arial = \"Helvetica\";\n  t[\"Arial-Bold\"] = \"Helvetica-Bold\";\n  t[\"Arial-BoldItalic\"] = \"Helvetica-BoldOblique\";\n  t[\"Arial-Italic\"] = \"Helvetica-Oblique\";\n  t[\"Arial-BoldItalicMT\"] = \"Helvetica-BoldOblique\";\n  t[\"Arial-BoldMT\"] = \"Helvetica-Bold\";\n  t[\"Arial-ItalicMT\"] = \"Helvetica-Oblique\";\n  t.ArialMT = \"Helvetica\";\n  t[\"Courier-Bold\"] = \"Courier-Bold\";\n  t[\"Courier-BoldItalic\"] = \"Courier-BoldOblique\";\n  t[\"Courier-Italic\"] = \"Courier-Oblique\";\n  t.CourierNew = \"Courier\";\n  t[\"CourierNew-Bold\"] = \"Courier-Bold\";\n  t[\"CourierNew-BoldItalic\"] = \"Courier-BoldOblique\";\n  t[\"CourierNew-Italic\"] = \"Courier-Oblique\";\n  t[\"CourierNewPS-BoldItalicMT\"] = \"Courier-BoldOblique\";\n  t[\"CourierNewPS-BoldMT\"] = \"Courier-Bold\";\n  t[\"CourierNewPS-ItalicMT\"] = \"Courier-Oblique\";\n  t.CourierNewPSMT = \"Courier\";\n  t.Helvetica = \"Helvetica\";\n  t[\"Helvetica-Bold\"] = \"Helvetica-Bold\";\n  t[\"Helvetica-BoldItalic\"] = \"Helvetica-BoldOblique\";\n  t[\"Helvetica-BoldOblique\"] = \"Helvetica-BoldOblique\";\n  t[\"Helvetica-Italic\"] = \"Helvetica-Oblique\";\n  t[\"Helvetica-Oblique\"] = \"Helvetica-Oblique\";\n  t[\"Symbol-Bold\"] = \"Symbol\";\n  t[\"Symbol-BoldItalic\"] = \"Symbol\";\n  t[\"Symbol-Italic\"] = \"Symbol\";\n  t.TimesNewRoman = \"Times-Roman\";\n  t[\"TimesNewRoman-Bold\"] = \"Times-Bold\";\n  t[\"TimesNewRoman-BoldItalic\"] = \"Times-BoldItalic\";\n  t[\"TimesNewRoman-Italic\"] = \"Times-Italic\";\n  t.TimesNewRomanPS = \"Times-Roman\";\n  t[\"TimesNewRomanPS-Bold\"] = \"Times-Bold\";\n  t[\"TimesNewRomanPS-BoldItalic\"] = \"Times-BoldItalic\";\n  t[\"TimesNewRomanPS-BoldItalicMT\"] = \"Times-BoldItalic\";\n  t[\"TimesNewRomanPS-BoldMT\"] = \"Times-Bold\";\n  t[\"TimesNewRomanPS-Italic\"] = \"Times-Italic\";\n  t[\"TimesNewRomanPS-ItalicMT\"] = \"Times-Italic\";\n  t.TimesNewRomanPSMT = \"Times-Roman\";\n  t[\"TimesNewRomanPSMT-Bold\"] = \"Times-Bold\";\n  t[\"TimesNewRomanPSMT-BoldItalic\"] = \"Times-BoldItalic\";\n  t[\"TimesNewRomanPSMT-Italic\"] = \"Times-Italic\";\n});\n\n/**\n * Holds the map of the non-standard fonts that might be included as\n * a standard fonts without glyph data.\n */\nconst getNonStdFontMap = getLookupTableFactory(function (t) {\n  t.Calibri = \"Helvetica\";\n  t[\"Calibri-Bold\"] = \"Helvetica-Bold\";\n  t[\"Calibri-BoldItalic\"] = \"Helvetica-BoldOblique\";\n  t[\"Calibri-Italic\"] = \"Helvetica-Oblique\";\n  t.CenturyGothic = \"Helvetica\";\n  t[\"CenturyGothic-Bold\"] = \"Helvetica-Bold\";\n  t[\"CenturyGothic-BoldItalic\"] = \"Helvetica-BoldOblique\";\n  t[\"CenturyGothic-Italic\"] = \"Helvetica-Oblique\";\n  t.ComicSansMS = \"Comic Sans MS\";\n  t[\"ComicSansMS-Bold\"] = \"Comic Sans MS-Bold\";\n  t[\"ComicSansMS-BoldItalic\"] = \"Comic Sans MS-BoldItalic\";\n  t[\"ComicSansMS-Italic\"] = \"Comic Sans MS-Italic\";\n  t.LucidaConsole = \"Courier\";\n  t[\"LucidaConsole-Bold\"] = \"Courier-Bold\";\n  t[\"LucidaConsole-BoldItalic\"] = \"Courier-BoldOblique\";\n  t[\"LucidaConsole-Italic\"] = \"Courier-Oblique\";\n  t[\"LucidaSans-Demi\"] = \"Helvetica-Bold\";\n  t[\"MS-Gothic\"] = \"MS Gothic\";\n  t[\"MS-Gothic-Bold\"] = \"MS Gothic-Bold\";\n  t[\"MS-Gothic-BoldItalic\"] = \"MS Gothic-BoldItalic\";\n  t[\"MS-Gothic-Italic\"] = \"MS Gothic-Italic\";\n  t[\"MS-Mincho\"] = \"MS Mincho\";\n  t[\"MS-Mincho-Bold\"] = \"MS Mincho-Bold\";\n  t[\"MS-Mincho-BoldItalic\"] = \"MS Mincho-BoldItalic\";\n  t[\"MS-Mincho-Italic\"] = \"MS Mincho-Italic\";\n  t[\"MS-PGothic\"] = \"MS PGothic\";\n  t[\"MS-PGothic-Bold\"] = \"MS PGothic-Bold\";\n  t[\"MS-PGothic-BoldItalic\"] = \"MS PGothic-BoldItalic\";\n  t[\"MS-PGothic-Italic\"] = \"MS PGothic-Italic\";\n  t[\"MS-PMincho\"] = \"MS PMincho\";\n  t[\"MS-PMincho-Bold\"] = \"MS PMincho-Bold\";\n  t[\"MS-PMincho-BoldItalic\"] = \"MS PMincho-BoldItalic\";\n  t[\"MS-PMincho-Italic\"] = \"MS PMincho-Italic\";\n  t.NuptialScript = \"Times-Italic\";\n  t.SegoeUISymbol = \"Helvetica\";\n  t.Wingdings = \"ZapfDingbats\";\n  t[\"Wingdings-Regular\"] = \"ZapfDingbats\";\n});\n\nconst getSerifFonts = getLookupTableFactory(function (t) {\n  t[\"Adobe Jenson\"] = true;\n  t[\"Adobe Text\"] = true;\n  t.Albertus = true;\n  t.Aldus = true;\n  t.Alexandria = true;\n  t.Algerian = true;\n  t[\"American Typewriter\"] = true;\n  t.Antiqua = true;\n  t.Apex = true;\n  t.Arno = true;\n  t.Aster = true;\n  t.Aurora = true;\n  t.Baskerville = true;\n  t.Bell = true;\n  t.Bembo = true;\n  t[\"Bembo Schoolbook\"] = true;\n  t.Benguiat = true;\n  t[\"Berkeley Old Style\"] = true;\n  t[\"Bernhard Modern\"] = true;\n  t[\"Berthold City\"] = true;\n  t.Bodoni = true;\n  t[\"Bauer Bodoni\"] = true;\n  t[\"Book Antiqua\"] = true;\n  t.Bookman = true;\n  t[\"Bordeaux Roman\"] = true;\n  t[\"Californian FB\"] = true;\n  t.Calisto = true;\n  t.Calvert = true;\n  t.Capitals = true;\n  t.Cambria = true;\n  t.Cartier = true;\n  t.Caslon = true;\n  t.Catull = true;\n  t.Centaur = true;\n  t[\"Century Old Style\"] = true;\n  t[\"Century Schoolbook\"] = true;\n  t.Chaparral = true;\n  t[\"Charis SIL\"] = true;\n  t.Cheltenham = true;\n  t[\"Cholla Slab\"] = true;\n  t.Clarendon = true;\n  t.Clearface = true;\n  t.Cochin = true;\n  t.Colonna = true;\n  t[\"Computer Modern\"] = true;\n  t[\"Concrete Roman\"] = true;\n  t.Constantia = true;\n  t[\"Cooper Black\"] = true;\n  t.Corona = true;\n  t.Ecotype = true;\n  t.Egyptienne = true;\n  t.Elephant = true;\n  t.Excelsior = true;\n  t.Fairfield = true;\n  t[\"FF Scala\"] = true;\n  t.Folkard = true;\n  t.Footlight = true;\n  t.FreeSerif = true;\n  t[\"Friz Quadrata\"] = true;\n  t.Garamond = true;\n  t.Gentium = true;\n  t.Georgia = true;\n  t.Gloucester = true;\n  t[\"Goudy Old Style\"] = true;\n  t[\"Goudy Schoolbook\"] = true;\n  t[\"Goudy Pro Font\"] = true;\n  t.Granjon = true;\n  t[\"Guardian Egyptian\"] = true;\n  t.Heather = true;\n  t.Hercules = true;\n  t[\"High Tower Text\"] = true;\n  t.Hiroshige = true;\n  t[\"Hoefler Text\"] = true;\n  t[\"Humana Serif\"] = true;\n  t.Imprint = true;\n  t[\"Ionic No. 5\"] = true;\n  t.Janson = true;\n  t.Joanna = true;\n  t.Korinna = true;\n  t.Lexicon = true;\n  t[\"Liberation Serif\"] = true;\n  t[\"Linux Libertine\"] = true;\n  t.Literaturnaya = true;\n  t.Lucida = true;\n  t[\"Lucida Bright\"] = true;\n  t.Melior = true;\n  t.Memphis = true;\n  t.Miller = true;\n  t.Minion = true;\n  t.Modern = true;\n  t[\"Mona Lisa\"] = true;\n  t[\"Mrs Eaves\"] = true;\n  t[\"MS Serif\"] = true;\n  t[\"Museo Slab\"] = true;\n  t[\"New York\"] = true;\n  t[\"Nimbus Roman\"] = true;\n  t[\"NPS Rawlinson Roadway\"] = true;\n  t.NuptialScript = true;\n  t.Palatino = true;\n  t.Perpetua = true;\n  t.Plantin = true;\n  t[\"Plantin Schoolbook\"] = true;\n  t.Playbill = true;\n  t[\"Poor Richard\"] = true;\n  t[\"Rawlinson Roadway\"] = true;\n  t.Renault = true;\n  t.Requiem = true;\n  t.Rockwell = true;\n  t.Roman = true;\n  t[\"Rotis Serif\"] = true;\n  t.Sabon = true;\n  t.Scala = true;\n  t.Seagull = true;\n  t.Sistina = true;\n  t.Souvenir = true;\n  t.STIX = true;\n  t[\"Stone Informal\"] = true;\n  t[\"Stone Serif\"] = true;\n  t.Sylfaen = true;\n  t.Times = true;\n  t.Trajan = true;\n  t[\"Trinité\"] = true;\n  t[\"Trump Mediaeval\"] = true;\n  t.Utopia = true;\n  t[\"Vale Type\"] = true;\n  t[\"Bitstream Vera\"] = true;\n  t[\"Vera Serif\"] = true;\n  t.Versailles = true;\n  t.Wanted = true;\n  t.Weiss = true;\n  t[\"Wide Latin\"] = true;\n  t.Windsor = true;\n  t.XITS = true;\n});\n\nconst getSymbolsFonts = getLookupTableFactory(function (t) {\n  t.Dingbats = true;\n  t.Symbol = true;\n  t.ZapfDingbats = true;\n});\n\n// Glyph map for well-known standard fonts. Sometimes Ghostscript uses CID\n// fonts, but does not embed the CID to GID mapping. The mapping is incomplete\n// for all glyphs, but common for some set of the standard fonts.\nconst getGlyphMapForStandardFonts = getLookupTableFactory(function (t) {\n  t[2] = 10;\n  t[3] = 32;\n  t[4] = 33;\n  t[5] = 34;\n  t[6] = 35;\n  t[7] = 36;\n  t[8] = 37;\n  t[9] = 38;\n  t[10] = 39;\n  t[11] = 40;\n  t[12] = 41;\n  t[13] = 42;\n  t[14] = 43;\n  t[15] = 44;\n  t[16] = 45;\n  t[17] = 46;\n  t[18] = 47;\n  t[19] = 48;\n  t[20] = 49;\n  t[21] = 50;\n  t[22] = 51;\n  t[23] = 52;\n  t[24] = 53;\n  t[25] = 54;\n  t[26] = 55;\n  t[27] = 56;\n  t[28] = 57;\n  t[29] = 58;\n  t[30] = 894;\n  t[31] = 60;\n  t[32] = 61;\n  t[33] = 62;\n  t[34] = 63;\n  t[35] = 64;\n  t[36] = 65;\n  t[37] = 66;\n  t[38] = 67;\n  t[39] = 68;\n  t[40] = 69;\n  t[41] = 70;\n  t[42] = 71;\n  t[43] = 72;\n  t[44] = 73;\n  t[45] = 74;\n  t[46] = 75;\n  t[47] = 76;\n  t[48] = 77;\n  t[49] = 78;\n  t[50] = 79;\n  t[51] = 80;\n  t[52] = 81;\n  t[53] = 82;\n  t[54] = 83;\n  t[55] = 84;\n  t[56] = 85;\n  t[57] = 86;\n  t[58] = 87;\n  t[59] = 88;\n  t[60] = 89;\n  t[61] = 90;\n  t[62] = 91;\n  t[63] = 92;\n  t[64] = 93;\n  t[65] = 94;\n  t[66] = 95;\n  t[67] = 96;\n  t[68] = 97;\n  t[69] = 98;\n  t[70] = 99;\n  t[71] = 100;\n  t[72] = 101;\n  t[73] = 102;\n  t[74] = 103;\n  t[75] = 104;\n  t[76] = 105;\n  t[77] = 106;\n  t[78] = 107;\n  t[79] = 108;\n  t[80] = 109;\n  t[81] = 110;\n  t[82] = 111;\n  t[83] = 112;\n  t[84] = 113;\n  t[85] = 114;\n  t[86] = 115;\n  t[87] = 116;\n  t[88] = 117;\n  t[89] = 118;\n  t[90] = 119;\n  t[91] = 120;\n  t[92] = 121;\n  t[93] = 122;\n  t[94] = 123;\n  t[95] = 124;\n  t[96] = 125;\n  t[97] = 126;\n  t[98] = 196;\n  t[99] = 197;\n  t[100] = 199;\n  t[101] = 201;\n  t[102] = 209;\n  t[103] = 214;\n  t[104] = 220;\n  t[105] = 225;\n  t[106] = 224;\n  t[107] = 226;\n  t[108] = 228;\n  t[109] = 227;\n  t[110] = 229;\n  t[111] = 231;\n  t[112] = 233;\n  t[113] = 232;\n  t[114] = 234;\n  t[115] = 235;\n  t[116] = 237;\n  t[117] = 236;\n  t[118] = 238;\n  t[119] = 239;\n  t[120] = 241;\n  t[121] = 243;\n  t[122] = 242;\n  t[123] = 244;\n  t[124] = 246;\n  t[125] = 245;\n  t[126] = 250;\n  t[127] = 249;\n  t[128] = 251;\n  t[129] = 252;\n  t[130] = 8224;\n  t[131] = 176;\n  t[132] = 162;\n  t[133] = 163;\n  t[134] = 167;\n  t[135] = 8226;\n  t[136] = 182;\n  t[137] = 223;\n  t[138] = 174;\n  t[139] = 169;\n  t[140] = 8482;\n  t[141] = 180;\n  t[142] = 168;\n  t[143] = 8800;\n  t[144] = 198;\n  t[145] = 216;\n  t[146] = 8734;\n  t[147] = 177;\n  t[148] = 8804;\n  t[149] = 8805;\n  t[150] = 165;\n  t[151] = 181;\n  t[152] = 8706;\n  t[153] = 8721;\n  t[154] = 8719;\n  t[156] = 8747;\n  t[157] = 170;\n  t[158] = 186;\n  t[159] = 8486;\n  t[160] = 230;\n  t[161] = 248;\n  t[162] = 191;\n  t[163] = 161;\n  t[164] = 172;\n  t[165] = 8730;\n  t[166] = 402;\n  t[167] = 8776;\n  t[168] = 8710;\n  t[169] = 171;\n  t[170] = 187;\n  t[171] = 8230;\n  t[210] = 218;\n  t[223] = 711;\n  t[224] = 321;\n  t[225] = 322;\n  t[227] = 353;\n  t[229] = 382;\n  t[234] = 253;\n  t[252] = 263;\n  t[253] = 268;\n  t[254] = 269;\n  t[258] = 258;\n  t[260] = 260;\n  t[261] = 261;\n  t[265] = 280;\n  t[266] = 281;\n  t[268] = 283;\n  t[269] = 313;\n  t[275] = 323;\n  t[276] = 324;\n  t[278] = 328;\n  t[284] = 345;\n  t[285] = 346;\n  t[286] = 347;\n  t[292] = 367;\n  t[295] = 377;\n  t[296] = 378;\n  t[298] = 380;\n  t[305] = 963;\n  t[306] = 964;\n  t[307] = 966;\n  t[308] = 8215;\n  t[309] = 8252;\n  t[310] = 8319;\n  t[311] = 8359;\n  t[312] = 8592;\n  t[313] = 8593;\n  t[337] = 9552;\n  t[493] = 1039;\n  t[494] = 1040;\n  t[705] = 1524;\n  t[706] = 8362;\n  t[710] = 64288;\n  t[711] = 64298;\n  t[759] = 1617;\n  t[761] = 1776;\n  t[763] = 1778;\n  t[775] = 1652;\n  t[777] = 1764;\n  t[778] = 1780;\n  t[779] = 1781;\n  t[780] = 1782;\n  t[782] = 771;\n  t[783] = 64726;\n  t[786] = 8363;\n  t[788] = 8532;\n  t[790] = 768;\n  t[791] = 769;\n  t[792] = 768;\n  t[795] = 803;\n  t[797] = 64336;\n  t[798] = 64337;\n  t[799] = 64342;\n  t[800] = 64343;\n  t[801] = 64344;\n  t[802] = 64345;\n  t[803] = 64362;\n  t[804] = 64363;\n  t[805] = 64364;\n  t[2424] = 7821;\n  t[2425] = 7822;\n  t[2426] = 7823;\n  t[2427] = 7824;\n  t[2428] = 7825;\n  t[2429] = 7826;\n  t[2430] = 7827;\n  t[2433] = 7682;\n  t[2678] = 8045;\n  t[2679] = 8046;\n  t[2830] = 1552;\n  t[2838] = 686;\n  t[2840] = 751;\n  t[2842] = 753;\n  t[2843] = 754;\n  t[2844] = 755;\n  t[2846] = 757;\n  t[2856] = 767;\n  t[2857] = 848;\n  t[2858] = 849;\n  t[2862] = 853;\n  t[2863] = 854;\n  t[2864] = 855;\n  t[2865] = 861;\n  t[2866] = 862;\n  t[2906] = 7460;\n  t[2908] = 7462;\n  t[2909] = 7463;\n  t[2910] = 7464;\n  t[2912] = 7466;\n  t[2913] = 7467;\n  t[2914] = 7468;\n  t[2916] = 7470;\n  t[2917] = 7471;\n  t[2918] = 7472;\n  t[2920] = 7474;\n  t[2921] = 7475;\n  t[2922] = 7476;\n  t[2924] = 7478;\n  t[2925] = 7479;\n  t[2926] = 7480;\n  t[2928] = 7482;\n  t[2929] = 7483;\n  t[2930] = 7484;\n  t[2932] = 7486;\n  t[2933] = 7487;\n  t[2934] = 7488;\n  t[2936] = 7490;\n  t[2937] = 7491;\n  t[2938] = 7492;\n  t[2940] = 7494;\n  t[2941] = 7495;\n  t[2942] = 7496;\n  t[2944] = 7498;\n  t[2946] = 7500;\n  t[2948] = 7502;\n  t[2950] = 7504;\n  t[2951] = 7505;\n  t[2952] = 7506;\n  t[2954] = 7508;\n  t[2955] = 7509;\n  t[2956] = 7510;\n  t[2958] = 7512;\n  t[2959] = 7513;\n  t[2960] = 7514;\n  t[2962] = 7516;\n  t[2963] = 7517;\n  t[2964] = 7518;\n  t[2966] = 7520;\n  t[2967] = 7521;\n  t[2968] = 7522;\n  t[2970] = 7524;\n  t[2971] = 7525;\n  t[2972] = 7526;\n  t[2974] = 7528;\n  t[2975] = 7529;\n  t[2976] = 7530;\n  t[2978] = 1537;\n  t[2979] = 1538;\n  t[2980] = 1539;\n  t[2982] = 1549;\n  t[2983] = 1551;\n  t[2984] = 1552;\n  t[2986] = 1554;\n  t[2987] = 1555;\n  t[2988] = 1556;\n  t[2990] = 1623;\n  t[2991] = 1624;\n  t[2995] = 1775;\n  t[2999] = 1791;\n  t[3002] = 64290;\n  t[3003] = 64291;\n  t[3004] = 64292;\n  t[3006] = 64294;\n  t[3007] = 64295;\n  t[3008] = 64296;\n  t[3011] = 1900;\n  t[3014] = 8223;\n  t[3015] = 8244;\n  t[3017] = 7532;\n  t[3018] = 7533;\n  t[3019] = 7534;\n  t[3075] = 7590;\n  t[3076] = 7591;\n  t[3079] = 7594;\n  t[3080] = 7595;\n  t[3083] = 7598;\n  t[3084] = 7599;\n  t[3087] = 7602;\n  t[3088] = 7603;\n  t[3091] = 7606;\n  t[3092] = 7607;\n  t[3095] = 7610;\n  t[3096] = 7611;\n  t[3099] = 7614;\n  t[3100] = 7615;\n  t[3103] = 7618;\n  t[3104] = 7619;\n  t[3107] = 8337;\n  t[3108] = 8338;\n  t[3116] = 1884;\n  t[3119] = 1885;\n  t[3120] = 1885;\n  t[3123] = 1886;\n  t[3124] = 1886;\n  t[3127] = 1887;\n  t[3128] = 1887;\n  t[3131] = 1888;\n  t[3132] = 1888;\n  t[3135] = 1889;\n  t[3136] = 1889;\n  t[3139] = 1890;\n  t[3140] = 1890;\n  t[3143] = 1891;\n  t[3144] = 1891;\n  t[3147] = 1892;\n  t[3148] = 1892;\n  t[3153] = 580;\n  t[3154] = 581;\n  t[3157] = 584;\n  t[3158] = 585;\n  t[3161] = 588;\n  t[3162] = 589;\n  t[3165] = 891;\n  t[3166] = 892;\n  t[3169] = 1274;\n  t[3170] = 1275;\n  t[3173] = 1278;\n  t[3174] = 1279;\n  t[3181] = 7622;\n  t[3182] = 7623;\n  t[3282] = 11799;\n  t[3316] = 578;\n  t[3379] = 42785;\n  t[3393] = 1159;\n  t[3416] = 8377;\n});\n\n// The glyph map for ArialBlack differs slightly from the glyph map used for\n// other well-known standard fonts. Hence we use this (incomplete) CID to GID\n// mapping to adjust the glyph map for non-embedded ArialBlack fonts.\nconst getSupplementalGlyphMapForArialBlack = getLookupTableFactory(function (\n  t\n) {\n  t[227] = 322;\n  t[264] = 261;\n  t[291] = 346;\n});\n\n// The glyph map for Calibri (a Windows font) differs from the glyph map used\n// in the standard fonts. Hence we use this (incomplete) CID to GID mapping to\n// adjust the glyph map for non-embedded Calibri fonts.\nconst getSupplementalGlyphMapForCalibri = getLookupTableFactory(function (t) {\n  t[1] = 32;\n  t[4] = 65;\n  t[17] = 66;\n  t[18] = 67;\n  t[24] = 68;\n  t[28] = 69;\n  t[38] = 70;\n  t[39] = 71;\n  t[44] = 72;\n  t[47] = 73;\n  t[58] = 74;\n  t[60] = 75;\n  t[62] = 76;\n  t[68] = 77;\n  t[69] = 78;\n  t[75] = 79;\n  t[87] = 80;\n  t[89] = 81;\n  t[90] = 82;\n  t[94] = 83;\n  t[100] = 84;\n  t[104] = 85;\n  t[115] = 86;\n  t[116] = 87;\n  t[121] = 88;\n  t[122] = 89;\n  t[127] = 90;\n  t[258] = 97;\n  t[268] = 261;\n  t[271] = 98;\n  t[272] = 99;\n  t[273] = 263;\n  t[282] = 100;\n  t[286] = 101;\n  t[295] = 281;\n  t[296] = 102;\n  t[336] = 103;\n  t[346] = 104;\n  t[349] = 105;\n  t[361] = 106;\n  t[364] = 107;\n  t[367] = 108;\n  t[371] = 322;\n  t[373] = 109;\n  t[374] = 110;\n  t[381] = 111;\n  t[383] = 243;\n  t[393] = 112;\n  t[395] = 113;\n  t[396] = 114;\n  t[400] = 115;\n  t[401] = 347;\n  t[410] = 116;\n  t[437] = 117;\n  t[448] = 118;\n  t[449] = 119;\n  t[454] = 120;\n  t[455] = 121;\n  t[460] = 122;\n  t[463] = 380;\n  t[853] = 44;\n  t[855] = 58;\n  t[856] = 46;\n  t[876] = 47;\n  t[878] = 45;\n  t[882] = 45;\n  t[894] = 40;\n  t[895] = 41;\n  t[896] = 91;\n  t[897] = 93;\n  t[923] = 64;\n  t[1004] = 48;\n  t[1005] = 49;\n  t[1006] = 50;\n  t[1007] = 51;\n  t[1008] = 52;\n  t[1009] = 53;\n  t[1010] = 54;\n  t[1011] = 55;\n  t[1012] = 56;\n  t[1013] = 57;\n  t[1081] = 37;\n  t[1085] = 43;\n  t[1086] = 45;\n});\n\nexport {\n  getStdFontMap,\n  getNonStdFontMap,\n  getSerifFonts,\n  getSymbolsFonts,\n  getGlyphMapForStandardFonts,\n  getSupplementalGlyphMapForArialBlack,\n  getSupplementalGlyphMapForCalibri,\n};\n", "/* Copyright 2016 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* no-babel-preset */\n\nvar getLookupTableFactory = require(\"./core_utils.js\").getLookupTableFactory;\n\n// Some characters, e.g. copyrightserif, are mapped to the private use area\n// and might not be displayed using standard fonts. Mapping/hacking well-known\n// chars to the similar equivalents in the normal characters range.\nvar getSpecialPUASymbols = getLookupTableFactory(function (t) {\n  t[63721] = 0x00a9; // copyrightsans (0xF8E9) => copyright\n  t[63193] = 0x00a9; // copyrightserif (0xF6D9) => copyright\n  t[63720] = 0x00ae; // registersans (0xF8E8) => registered\n  t[63194] = 0x00ae; // registerserif (0xF6DA) => registered\n  t[63722] = 0x2122; // trademarksans (0xF8EA) => trademark\n  t[63195] = 0x2122; // trademarkserif (0xF6DB) => trademark\n  t[63729] = 0x23a7; // bracelefttp (0xF8F1)\n  t[63730] = 0x23a8; // braceleftmid (0xF8F2)\n  t[63731] = 0x23a9; // braceleftbt (0xF8F3)\n  t[63740] = 0x23ab; // bracerighttp (0xF8FC)\n  t[63741] = 0x23ac; // bracerightmid (0xF8FD)\n  t[63742] = 0x23ad; // bracerightbt (0xF8FE)\n  t[63726] = 0x23a1; // bracketlefttp (0xF8EE)\n  t[63727] = 0x23a2; // bracketleftex (0xF8EF)\n  t[63728] = 0x23a3; // bracketleftbt (0xF8F0)\n  t[63737] = 0x23a4; // bracketrighttp (0xF8F9)\n  t[63738] = 0x23a5; // bracketrightex (0xF8FA)\n  t[63739] = 0x23a6; // bracketrightbt (0xF8FB)\n  t[63723] = 0x239b; // parenlefttp (0xF8EB)\n  t[63724] = 0x239c; // parenleftex (0xF8EC)\n  t[63725] = 0x239d; // parenleftbt (0xF8ED)\n  t[63734] = 0x239e; // parenrighttp (0xF8F6)\n  t[63735] = 0x239f; // parenrightex (0xF8F7)\n  t[63736] = 0x23a0; // parenrightbt (0xF8F8)\n});\n\nfunction mapSpecialUnicodeValues(code) {\n  if (code >= 0xfff0 && code <= 0xffff) {\n    // Specials unicode block.\n    return 0;\n  } else if (code >= 0xf600 && code <= 0xf8ff) {\n    return getSpecialPUASymbols()[code] || code;\n  } else if (code === /* softhyphen = */ 0x00ad) {\n    return 0x002d; // hyphen\n  }\n  return code;\n}\n\nfunction getUnicodeForGlyph(name, glyphsUnicodeMap) {\n  var unicode = glyphsUnicodeMap[name];\n  if (unicode !== undefined) {\n    return unicode;\n  }\n  if (!name) {\n    return -1;\n  }\n  // Try to recover valid Unicode values from 'uniXXXX'/'uXXXX{XX}' glyphs.\n  if (name[0] === \"u\") {\n    var nameLen = name.length,\n      hexStr;\n\n    if (nameLen === 7 && name[1] === \"n\" && name[2] === \"i\") {\n      // 'uniXXXX'\n      hexStr = name.substring(3);\n    } else if (nameLen >= 5 && nameLen <= 7) {\n      // 'uXXXX{XX}'\n      hexStr = name.substring(1);\n    } else {\n      return -1;\n    }\n    // Check for upper-case hexadecimal characters, to avoid false positives.\n    if (hexStr === hexStr.toUpperCase()) {\n      unicode = parseInt(hexStr, 16);\n      if (unicode >= 0) {\n        return unicode;\n      }\n    }\n  }\n  return -1;\n}\n\nvar UnicodeRanges = [\n  { begin: 0x0000, end: 0x007f }, // Basic Latin\n  { begin: 0x0080, end: 0x00ff }, // Latin-1 Supplement\n  { begin: 0x0100, end: 0x017f }, // Latin Extended-A\n  { begin: 0x0180, end: 0x024f }, // Latin Extended-B\n  { begin: 0x0250, end: 0x02af }, // IPA Extensions\n  { begin: 0x02b0, end: 0x02ff }, // Spacing Modifier Letters\n  { begin: 0x0300, end: 0x036f }, // Combining Diacritical Marks\n  { begin: 0x0370, end: 0x03ff }, // Greek and Coptic\n  { begin: 0x2c80, end: 0x2cff }, // Coptic\n  { begin: 0x0400, end: 0x04ff }, // Cyrillic\n  { begin: 0x0530, end: 0x058f }, // Armenian\n  { begin: 0x0590, end: 0x05ff }, // Hebrew\n  { begin: 0xa500, end: 0xa63f }, // Vai\n  { begin: 0x0600, end: 0x06ff }, // Arabic\n  { begin: 0x07c0, end: 0x07ff }, // NKo\n  { begin: 0x0900, end: 0x097f }, // Devanagari\n  { begin: 0x0980, end: 0x09ff }, // Bengali\n  { begin: 0x0a00, end: 0x0a7f }, // Gurmukhi\n  { begin: 0x0a80, end: 0x0aff }, // Gujarati\n  { begin: 0x0b00, end: 0x0b7f }, // Oriya\n  { begin: 0x0b80, end: 0x0bff }, // Tamil\n  { begin: 0x0c00, end: 0x0c7f }, // Telugu\n  { begin: 0x0c80, end: 0x0cff }, // Kannada\n  { begin: 0x0d00, end: 0x0d7f }, // Malayalam\n  { begin: 0x0e00, end: 0x0e7f }, // Thai\n  { begin: 0x0e80, end: 0x0eff }, // Lao\n  { begin: 0x10a0, end: 0x10ff }, // Georgian\n  { begin: 0x1b00, end: 0x1b7f }, // Balinese\n  { begin: 0x1100, end: 0x11ff }, // Hangul Jamo\n  { begin: 0x1e00, end: 0x1eff }, // Latin Extended Additional\n  { begin: 0x1f00, end: 0x1fff }, // Greek Extended\n  { begin: 0x2000, end: 0x206f }, // General Punctuation\n  { begin: 0x2070, end: 0x209f }, // Superscripts And Subscripts\n  { begin: 0x20a0, end: 0x20cf }, // Currency Symbol\n  { begin: 0x20d0, end: 0x20ff }, // Combining Diacritical Marks\n  { begin: 0x2100, end: 0x214f }, // Letterlike Symbols\n  { begin: 0x2150, end: 0x218f }, // Number Forms\n  { begin: 0x2190, end: 0x21ff }, // Arrows\n  { begin: 0x2200, end: 0x22ff }, // Mathematical Operators\n  { begin: 0x2300, end: 0x23ff }, // Miscellaneous Technical\n  { begin: 0x2400, end: 0x243f }, // Control Pictures\n  { begin: 0x2440, end: 0x245f }, // Optical Character Recognition\n  { begin: 0x2460, end: 0x24ff }, // Enclosed Alphanumerics\n  { begin: 0x2500, end: 0x257f }, // Box Drawing\n  { begin: 0x2580, end: 0x259f }, // Block Elements\n  { begin: 0x25a0, end: 0x25ff }, // Geometric Shapes\n  { begin: 0x2600, end: 0x26ff }, // Miscellaneous Symbols\n  { begin: 0x2700, end: 0x27bf }, // Dingbats\n  { begin: 0x3000, end: 0x303f }, // CJK Symbols And Punctuation\n  { begin: 0x3040, end: 0x309f }, // Hiragana\n  { begin: 0x30a0, end: 0x30ff }, // Katakana\n  { begin: 0x3100, end: 0x312f }, // Bopomofo\n  { begin: 0x3130, end: 0x318f }, // Hangul Compatibility Jamo\n  { begin: 0xa840, end: 0xa87f }, // Phags-pa\n  { begin: 0x3200, end: 0x32ff }, // Enclosed CJK Letters And Months\n  { begin: 0x3300, end: 0x33ff }, // CJK Compatibility\n  { begin: 0xac00, end: 0xd7af }, // Hangul Syllables\n  { begin: 0xd800, end: 0xdfff }, // Non-Plane 0 *\n  { begin: 0x10900, end: 0x1091f }, // Phoenicia\n  { begin: 0x4e00, end: 0x9fff }, // CJK Unified Ideographs\n  { begin: 0xe000, end: 0xf8ff }, // Private Use Area (plane 0)\n  { begin: 0x31c0, end: 0x31ef }, // CJK Strokes\n  { begin: 0xfb00, end: 0xfb4f }, // Alphabetic Presentation Forms\n  { begin: 0xfb50, end: 0xfdff }, // Arabic Presentation Forms-A\n  { begin: 0xfe20, end: 0xfe2f }, // Combining Half Marks\n  { begin: 0xfe10, end: 0xfe1f }, // Vertical Forms\n  { begin: 0xfe50, end: 0xfe6f }, // Small Form Variants\n  { begin: 0xfe70, end: 0xfeff }, // Arabic Presentation Forms-B\n  { begin: 0xff00, end: 0xffef }, // Halfwidth And Fullwidth Forms\n  { begin: 0xfff0, end: 0xffff }, // Specials\n  { begin: 0x0f00, end: 0x0fff }, // Tibetan\n  { begin: 0x0700, end: 0x074f }, // Syriac\n  { begin: 0x0780, end: 0x07bf }, // Thaana\n  { begin: 0x0d80, end: 0x0dff }, // Sinhala\n  { begin: 0x1000, end: 0x109f }, // Myanmar\n  { begin: 0x1200, end: 0x137f }, // Ethiopic\n  { begin: 0x13a0, end: 0x13ff }, // Cherokee\n  { begin: 0x1400, end: 0x167f }, // Unified Canadian Aboriginal Syllabics\n  { begin: 0x1680, end: 0x169f }, // Ogham\n  { begin: 0x16a0, end: 0x16ff }, // Runic\n  { begin: 0x1780, end: 0x17ff }, // Khmer\n  { begin: 0x1800, end: 0x18af }, // Mongolian\n  { begin: 0x2800, end: 0x28ff }, // Braille Patterns\n  { begin: 0xa000, end: 0xa48f }, // Yi Syllables\n  { begin: 0x1700, end: 0x171f }, // Tagalog\n  { begin: 0x10300, end: 0x1032f }, // Old Italic\n  { begin: 0x10330, end: 0x1034f }, // Gothic\n  { begin: 0x10400, end: 0x1044f }, // Deseret\n  { begin: 0x1d000, end: 0x1d0ff }, // Byzantine Musical Symbols\n  { begin: 0x1d400, end: 0x1d7ff }, // Mathematical Alphanumeric Symbols\n  { begin: 0xff000, end: 0xffffd }, // Private Use (plane 15)\n  { begin: 0xfe00, end: 0xfe0f }, // Variation Selectors\n  { begin: 0xe0000, end: 0xe007f }, // Tags\n  { begin: 0x1900, end: 0x194f }, // Limbu\n  { begin: 0x1950, end: 0x197f }, // Tai Le\n  { begin: 0x1980, end: 0x19df }, // New Tai Lue\n  { begin: 0x1a00, end: 0x1a1f }, // Buginese\n  { begin: 0x2c00, end: 0x2c5f }, // Glagolitic\n  { begin: 0x2d30, end: 0x2d7f }, // Tifinagh\n  { begin: 0x4dc0, end: 0x4dff }, // Yijing Hexagram Symbols\n  { begin: 0xa800, end: 0xa82f }, // Syloti Nagri\n  { begin: 0x10000, end: 0x1007f }, // Linear B Syllabary\n  { begin: 0x10140, end: 0x1018f }, // Ancient Greek Numbers\n  { begin: 0x10380, end: 0x1039f }, // Ugaritic\n  { begin: 0x103a0, end: 0x103df }, // Old Persian\n  { begin: 0x10450, end: 0x1047f }, // Shavian\n  { begin: 0x10480, end: 0x104af }, // Osmanya\n  { begin: 0x10800, end: 0x1083f }, // Cypriot Syllabary\n  { begin: 0x10a00, end: 0x10a5f }, // Kharoshthi\n  { begin: 0x1d300, end: 0x1d35f }, // Tai Xuan Jing Symbols\n  { begin: 0x12000, end: 0x123ff }, // Cuneiform\n  { begin: 0x1d360, end: 0x1d37f }, // Counting Rod Numerals\n  { begin: 0x1b80, end: 0x1bbf }, // Sundanese\n  { begin: 0x1c00, end: 0x1c4f }, // Lepcha\n  { begin: 0x1c50, end: 0x1c7f }, // Ol Chiki\n  { begin: 0xa880, end: 0xa8df }, // Saurashtra\n  { begin: 0xa900, end: 0xa92f }, // Kayah Li\n  { begin: 0xa930, end: 0xa95f }, // Rejang\n  { begin: 0xaa00, end: 0xaa5f }, // Cham\n  { begin: 0x10190, end: 0x101cf }, // Ancient Symbols\n  { begin: 0x101d0, end: 0x101ff }, // Phaistos Disc\n  { begin: 0x102a0, end: 0x102df }, // Carian\n  { begin: 0x1f030, end: 0x1f09f }, // Domino Tiles\n];\n\nfunction getUnicodeRangeFor(value) {\n  for (var i = 0, ii = UnicodeRanges.length; i < ii; i++) {\n    var range = UnicodeRanges[i];\n    if (value >= range.begin && value < range.end) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nfunction isRTLRangeFor(value) {\n  var range = UnicodeRanges[13];\n  if (value >= range.begin && value < range.end) {\n    return true;\n  }\n  range = UnicodeRanges[11];\n  if (value >= range.begin && value < range.end) {\n    return true;\n  }\n  return false;\n}\n\n// The normalization table is obtained by filtering the Unicode characters\n// database with <compat> entries.\nvar getNormalizedUnicodes = getLookupTableFactory(function (t) {\n  t[\"\\u00A8\"] = \"\\u0020\\u0308\";\n  t[\"\\u00AF\"] = \"\\u0020\\u0304\";\n  t[\"\\u00B4\"] = \"\\u0020\\u0301\";\n  t[\"\\u00B5\"] = \"\\u03BC\";\n  t[\"\\u00B8\"] = \"\\u0020\\u0327\";\n  t[\"\\u0132\"] = \"\\u0049\\u004A\";\n  t[\"\\u0133\"] = \"\\u0069\\u006A\";\n  t[\"\\u013F\"] = \"\\u004C\\u00B7\";\n  t[\"\\u0140\"] = \"\\u006C\\u00B7\";\n  t[\"\\u0149\"] = \"\\u02BC\\u006E\";\n  t[\"\\u017F\"] = \"\\u0073\";\n  t[\"\\u01C4\"] = \"\\u0044\\u017D\";\n  t[\"\\u01C5\"] = \"\\u0044\\u017E\";\n  t[\"\\u01C6\"] = \"\\u0064\\u017E\";\n  t[\"\\u01C7\"] = \"\\u004C\\u004A\";\n  t[\"\\u01C8\"] = \"\\u004C\\u006A\";\n  t[\"\\u01C9\"] = \"\\u006C\\u006A\";\n  t[\"\\u01CA\"] = \"\\u004E\\u004A\";\n  t[\"\\u01CB\"] = \"\\u004E\\u006A\";\n  t[\"\\u01CC\"] = \"\\u006E\\u006A\";\n  t[\"\\u01F1\"] = \"\\u0044\\u005A\";\n  t[\"\\u01F2\"] = \"\\u0044\\u007A\";\n  t[\"\\u01F3\"] = \"\\u0064\\u007A\";\n  t[\"\\u02D8\"] = \"\\u0020\\u0306\";\n  t[\"\\u02D9\"] = \"\\u0020\\u0307\";\n  t[\"\\u02DA\"] = \"\\u0020\\u030A\";\n  t[\"\\u02DB\"] = \"\\u0020\\u0328\";\n  t[\"\\u02DC\"] = \"\\u0020\\u0303\";\n  t[\"\\u02DD\"] = \"\\u0020\\u030B\";\n  t[\"\\u037A\"] = \"\\u0020\\u0345\";\n  t[\"\\u0384\"] = \"\\u0020\\u0301\";\n  t[\"\\u03D0\"] = \"\\u03B2\";\n  t[\"\\u03D1\"] = \"\\u03B8\";\n  t[\"\\u03D2\"] = \"\\u03A5\";\n  t[\"\\u03D5\"] = \"\\u03C6\";\n  t[\"\\u03D6\"] = \"\\u03C0\";\n  t[\"\\u03F0\"] = \"\\u03BA\";\n  t[\"\\u03F1\"] = \"\\u03C1\";\n  t[\"\\u03F2\"] = \"\\u03C2\";\n  t[\"\\u03F4\"] = \"\\u0398\";\n  t[\"\\u03F5\"] = \"\\u03B5\";\n  t[\"\\u03F9\"] = \"\\u03A3\";\n  t[\"\\u0587\"] = \"\\u0565\\u0582\";\n  t[\"\\u0675\"] = \"\\u0627\\u0674\";\n  t[\"\\u0676\"] = \"\\u0648\\u0674\";\n  t[\"\\u0677\"] = \"\\u06C7\\u0674\";\n  t[\"\\u0678\"] = \"\\u064A\\u0674\";\n  t[\"\\u0E33\"] = \"\\u0E4D\\u0E32\";\n  t[\"\\u0EB3\"] = \"\\u0ECD\\u0EB2\";\n  t[\"\\u0EDC\"] = \"\\u0EAB\\u0E99\";\n  t[\"\\u0EDD\"] = \"\\u0EAB\\u0EA1\";\n  t[\"\\u0F77\"] = \"\\u0FB2\\u0F81\";\n  t[\"\\u0F79\"] = \"\\u0FB3\\u0F81\";\n  t[\"\\u1E9A\"] = \"\\u0061\\u02BE\";\n  t[\"\\u1FBD\"] = \"\\u0020\\u0313\";\n  t[\"\\u1FBF\"] = \"\\u0020\\u0313\";\n  t[\"\\u1FC0\"] = \"\\u0020\\u0342\";\n  t[\"\\u1FFE\"] = \"\\u0020\\u0314\";\n  t[\"\\u2002\"] = \"\\u0020\";\n  t[\"\\u2003\"] = \"\\u0020\";\n  t[\"\\u2004\"] = \"\\u0020\";\n  t[\"\\u2005\"] = \"\\u0020\";\n  t[\"\\u2006\"] = \"\\u0020\";\n  t[\"\\u2008\"] = \"\\u0020\";\n  t[\"\\u2009\"] = \"\\u0020\";\n  t[\"\\u200A\"] = \"\\u0020\";\n  t[\"\\u2017\"] = \"\\u0020\\u0333\";\n  t[\"\\u2024\"] = \"\\u002E\";\n  t[\"\\u2025\"] = \"\\u002E\\u002E\";\n  t[\"\\u2026\"] = \"\\u002E\\u002E\\u002E\";\n  t[\"\\u2033\"] = \"\\u2032\\u2032\";\n  t[\"\\u2034\"] = \"\\u2032\\u2032\\u2032\";\n  t[\"\\u2036\"] = \"\\u2035\\u2035\";\n  t[\"\\u2037\"] = \"\\u2035\\u2035\\u2035\";\n  t[\"\\u203C\"] = \"\\u0021\\u0021\";\n  t[\"\\u203E\"] = \"\\u0020\\u0305\";\n  t[\"\\u2047\"] = \"\\u003F\\u003F\";\n  t[\"\\u2048\"] = \"\\u003F\\u0021\";\n  t[\"\\u2049\"] = \"\\u0021\\u003F\";\n  t[\"\\u2057\"] = \"\\u2032\\u2032\\u2032\\u2032\";\n  t[\"\\u205F\"] = \"\\u0020\";\n  t[\"\\u20A8\"] = \"\\u0052\\u0073\";\n  t[\"\\u2100\"] = \"\\u0061\\u002F\\u0063\";\n  t[\"\\u2101\"] = \"\\u0061\\u002F\\u0073\";\n  t[\"\\u2103\"] = \"\\u00B0\\u0043\";\n  t[\"\\u2105\"] = \"\\u0063\\u002F\\u006F\";\n  t[\"\\u2106\"] = \"\\u0063\\u002F\\u0075\";\n  t[\"\\u2107\"] = \"\\u0190\";\n  t[\"\\u2109\"] = \"\\u00B0\\u0046\";\n  t[\"\\u2116\"] = \"\\u004E\\u006F\";\n  t[\"\\u2121\"] = \"\\u0054\\u0045\\u004C\";\n  t[\"\\u2135\"] = \"\\u05D0\";\n  t[\"\\u2136\"] = \"\\u05D1\";\n  t[\"\\u2137\"] = \"\\u05D2\";\n  t[\"\\u2138\"] = \"\\u05D3\";\n  t[\"\\u213B\"] = \"\\u0046\\u0041\\u0058\";\n  t[\"\\u2160\"] = \"\\u0049\";\n  t[\"\\u2161\"] = \"\\u0049\\u0049\";\n  t[\"\\u2162\"] = \"\\u0049\\u0049\\u0049\";\n  t[\"\\u2163\"] = \"\\u0049\\u0056\";\n  t[\"\\u2164\"] = \"\\u0056\";\n  t[\"\\u2165\"] = \"\\u0056\\u0049\";\n  t[\"\\u2166\"] = \"\\u0056\\u0049\\u0049\";\n  t[\"\\u2167\"] = \"\\u0056\\u0049\\u0049\\u0049\";\n  t[\"\\u2168\"] = \"\\u0049\\u0058\";\n  t[\"\\u2169\"] = \"\\u0058\";\n  t[\"\\u216A\"] = \"\\u0058\\u0049\";\n  t[\"\\u216B\"] = \"\\u0058\\u0049\\u0049\";\n  t[\"\\u216C\"] = \"\\u004C\";\n  t[\"\\u216D\"] = \"\\u0043\";\n  t[\"\\u216E\"] = \"\\u0044\";\n  t[\"\\u216F\"] = \"\\u004D\";\n  t[\"\\u2170\"] = \"\\u0069\";\n  t[\"\\u2171\"] = \"\\u0069\\u0069\";\n  t[\"\\u2172\"] = \"\\u0069\\u0069\\u0069\";\n  t[\"\\u2173\"] = \"\\u0069\\u0076\";\n  t[\"\\u2174\"] = \"\\u0076\";\n  t[\"\\u2175\"] = \"\\u0076\\u0069\";\n  t[\"\\u2176\"] = \"\\u0076\\u0069\\u0069\";\n  t[\"\\u2177\"] = \"\\u0076\\u0069\\u0069\\u0069\";\n  t[\"\\u2178\"] = \"\\u0069\\u0078\";\n  t[\"\\u2179\"] = \"\\u0078\";\n  t[\"\\u217A\"] = \"\\u0078\\u0069\";\n  t[\"\\u217B\"] = \"\\u0078\\u0069\\u0069\";\n  t[\"\\u217C\"] = \"\\u006C\";\n  t[\"\\u217D\"] = \"\\u0063\";\n  t[\"\\u217E\"] = \"\\u0064\";\n  t[\"\\u217F\"] = \"\\u006D\";\n  t[\"\\u222C\"] = \"\\u222B\\u222B\";\n  t[\"\\u222D\"] = \"\\u222B\\u222B\\u222B\";\n  t[\"\\u222F\"] = \"\\u222E\\u222E\";\n  t[\"\\u2230\"] = \"\\u222E\\u222E\\u222E\";\n  t[\"\\u2474\"] = \"\\u0028\\u0031\\u0029\";\n  t[\"\\u2475\"] = \"\\u0028\\u0032\\u0029\";\n  t[\"\\u2476\"] = \"\\u0028\\u0033\\u0029\";\n  t[\"\\u2477\"] = \"\\u0028\\u0034\\u0029\";\n  t[\"\\u2478\"] = \"\\u0028\\u0035\\u0029\";\n  t[\"\\u2479\"] = \"\\u0028\\u0036\\u0029\";\n  t[\"\\u247A\"] = \"\\u0028\\u0037\\u0029\";\n  t[\"\\u247B\"] = \"\\u0028\\u0038\\u0029\";\n  t[\"\\u247C\"] = \"\\u0028\\u0039\\u0029\";\n  t[\"\\u247D\"] = \"\\u0028\\u0031\\u0030\\u0029\";\n  t[\"\\u247E\"] = \"\\u0028\\u0031\\u0031\\u0029\";\n  t[\"\\u247F\"] = \"\\u0028\\u0031\\u0032\\u0029\";\n  t[\"\\u2480\"] = \"\\u0028\\u0031\\u0033\\u0029\";\n  t[\"\\u2481\"] = \"\\u0028\\u0031\\u0034\\u0029\";\n  t[\"\\u2482\"] = \"\\u0028\\u0031\\u0035\\u0029\";\n  t[\"\\u2483\"] = \"\\u0028\\u0031\\u0036\\u0029\";\n  t[\"\\u2484\"] = \"\\u0028\\u0031\\u0037\\u0029\";\n  t[\"\\u2485\"] = \"\\u0028\\u0031\\u0038\\u0029\";\n  t[\"\\u2486\"] = \"\\u0028\\u0031\\u0039\\u0029\";\n  t[\"\\u2487\"] = \"\\u0028\\u0032\\u0030\\u0029\";\n  t[\"\\u2488\"] = \"\\u0031\\u002E\";\n  t[\"\\u2489\"] = \"\\u0032\\u002E\";\n  t[\"\\u248A\"] = \"\\u0033\\u002E\";\n  t[\"\\u248B\"] = \"\\u0034\\u002E\";\n  t[\"\\u248C\"] = \"\\u0035\\u002E\";\n  t[\"\\u248D\"] = \"\\u0036\\u002E\";\n  t[\"\\u248E\"] = \"\\u0037\\u002E\";\n  t[\"\\u248F\"] = \"\\u0038\\u002E\";\n  t[\"\\u2490\"] = \"\\u0039\\u002E\";\n  t[\"\\u2491\"] = \"\\u0031\\u0030\\u002E\";\n  t[\"\\u2492\"] = \"\\u0031\\u0031\\u002E\";\n  t[\"\\u2493\"] = \"\\u0031\\u0032\\u002E\";\n  t[\"\\u2494\"] = \"\\u0031\\u0033\\u002E\";\n  t[\"\\u2495\"] = \"\\u0031\\u0034\\u002E\";\n  t[\"\\u2496\"] = \"\\u0031\\u0035\\u002E\";\n  t[\"\\u2497\"] = \"\\u0031\\u0036\\u002E\";\n  t[\"\\u2498\"] = \"\\u0031\\u0037\\u002E\";\n  t[\"\\u2499\"] = \"\\u0031\\u0038\\u002E\";\n  t[\"\\u249A\"] = \"\\u0031\\u0039\\u002E\";\n  t[\"\\u249B\"] = \"\\u0032\\u0030\\u002E\";\n  t[\"\\u249C\"] = \"\\u0028\\u0061\\u0029\";\n  t[\"\\u249D\"] = \"\\u0028\\u0062\\u0029\";\n  t[\"\\u249E\"] = \"\\u0028\\u0063\\u0029\";\n  t[\"\\u249F\"] = \"\\u0028\\u0064\\u0029\";\n  t[\"\\u24A0\"] = \"\\u0028\\u0065\\u0029\";\n  t[\"\\u24A1\"] = \"\\u0028\\u0066\\u0029\";\n  t[\"\\u24A2\"] = \"\\u0028\\u0067\\u0029\";\n  t[\"\\u24A3\"] = \"\\u0028\\u0068\\u0029\";\n  t[\"\\u24A4\"] = \"\\u0028\\u0069\\u0029\";\n  t[\"\\u24A5\"] = \"\\u0028\\u006A\\u0029\";\n  t[\"\\u24A6\"] = \"\\u0028\\u006B\\u0029\";\n  t[\"\\u24A7\"] = \"\\u0028\\u006C\\u0029\";\n  t[\"\\u24A8\"] = \"\\u0028\\u006D\\u0029\";\n  t[\"\\u24A9\"] = \"\\u0028\\u006E\\u0029\";\n  t[\"\\u24AA\"] = \"\\u0028\\u006F\\u0029\";\n  t[\"\\u24AB\"] = \"\\u0028\\u0070\\u0029\";\n  t[\"\\u24AC\"] = \"\\u0028\\u0071\\u0029\";\n  t[\"\\u24AD\"] = \"\\u0028\\u0072\\u0029\";\n  t[\"\\u24AE\"] = \"\\u0028\\u0073\\u0029\";\n  t[\"\\u24AF\"] = \"\\u0028\\u0074\\u0029\";\n  t[\"\\u24B0\"] = \"\\u0028\\u0075\\u0029\";\n  t[\"\\u24B1\"] = \"\\u0028\\u0076\\u0029\";\n  t[\"\\u24B2\"] = \"\\u0028\\u0077\\u0029\";\n  t[\"\\u24B3\"] = \"\\u0028\\u0078\\u0029\";\n  t[\"\\u24B4\"] = \"\\u0028\\u0079\\u0029\";\n  t[\"\\u24B5\"] = \"\\u0028\\u007A\\u0029\";\n  t[\"\\u2A0C\"] = \"\\u222B\\u222B\\u222B\\u222B\";\n  t[\"\\u2A74\"] = \"\\u003A\\u003A\\u003D\";\n  t[\"\\u2A75\"] = \"\\u003D\\u003D\";\n  t[\"\\u2A76\"] = \"\\u003D\\u003D\\u003D\";\n  t[\"\\u2E9F\"] = \"\\u6BCD\";\n  t[\"\\u2EF3\"] = \"\\u9F9F\";\n  t[\"\\u2F00\"] = \"\\u4E00\";\n  t[\"\\u2F01\"] = \"\\u4E28\";\n  t[\"\\u2F02\"] = \"\\u4E36\";\n  t[\"\\u2F03\"] = \"\\u4E3F\";\n  t[\"\\u2F04\"] = \"\\u4E59\";\n  t[\"\\u2F05\"] = \"\\u4E85\";\n  t[\"\\u2F06\"] = \"\\u4E8C\";\n  t[\"\\u2F07\"] = \"\\u4EA0\";\n  t[\"\\u2F08\"] = \"\\u4EBA\";\n  t[\"\\u2F09\"] = \"\\u513F\";\n  t[\"\\u2F0A\"] = \"\\u5165\";\n  t[\"\\u2F0B\"] = \"\\u516B\";\n  t[\"\\u2F0C\"] = \"\\u5182\";\n  t[\"\\u2F0D\"] = \"\\u5196\";\n  t[\"\\u2F0E\"] = \"\\u51AB\";\n  t[\"\\u2F0F\"] = \"\\u51E0\";\n  t[\"\\u2F10\"] = \"\\u51F5\";\n  t[\"\\u2F11\"] = \"\\u5200\";\n  t[\"\\u2F12\"] = \"\\u529B\";\n  t[\"\\u2F13\"] = \"\\u52F9\";\n  t[\"\\u2F14\"] = \"\\u5315\";\n  t[\"\\u2F15\"] = \"\\u531A\";\n  t[\"\\u2F16\"] = \"\\u5338\";\n  t[\"\\u2F17\"] = \"\\u5341\";\n  t[\"\\u2F18\"] = \"\\u535C\";\n  t[\"\\u2F19\"] = \"\\u5369\";\n  t[\"\\u2F1A\"] = \"\\u5382\";\n  t[\"\\u2F1B\"] = \"\\u53B6\";\n  t[\"\\u2F1C\"] = \"\\u53C8\";\n  t[\"\\u2F1D\"] = \"\\u53E3\";\n  t[\"\\u2F1E\"] = \"\\u56D7\";\n  t[\"\\u2F1F\"] = \"\\u571F\";\n  t[\"\\u2F20\"] = \"\\u58EB\";\n  t[\"\\u2F21\"] = \"\\u5902\";\n  t[\"\\u2F22\"] = \"\\u590A\";\n  t[\"\\u2F23\"] = \"\\u5915\";\n  t[\"\\u2F24\"] = \"\\u5927\";\n  t[\"\\u2F25\"] = \"\\u5973\";\n  t[\"\\u2F26\"] = \"\\u5B50\";\n  t[\"\\u2F27\"] = \"\\u5B80\";\n  t[\"\\u2F28\"] = \"\\u5BF8\";\n  t[\"\\u2F29\"] = \"\\u5C0F\";\n  t[\"\\u2F2A\"] = \"\\u5C22\";\n  t[\"\\u2F2B\"] = \"\\u5C38\";\n  t[\"\\u2F2C\"] = \"\\u5C6E\";\n  t[\"\\u2F2D\"] = \"\\u5C71\";\n  t[\"\\u2F2E\"] = \"\\u5DDB\";\n  t[\"\\u2F2F\"] = \"\\u5DE5\";\n  t[\"\\u2F30\"] = \"\\u5DF1\";\n  t[\"\\u2F31\"] = \"\\u5DFE\";\n  t[\"\\u2F32\"] = \"\\u5E72\";\n  t[\"\\u2F33\"] = \"\\u5E7A\";\n  t[\"\\u2F34\"] = \"\\u5E7F\";\n  t[\"\\u2F35\"] = \"\\u5EF4\";\n  t[\"\\u2F36\"] = \"\\u5EFE\";\n  t[\"\\u2F37\"] = \"\\u5F0B\";\n  t[\"\\u2F38\"] = \"\\u5F13\";\n  t[\"\\u2F39\"] = \"\\u5F50\";\n  t[\"\\u2F3A\"] = \"\\u5F61\";\n  t[\"\\u2F3B\"] = \"\\u5F73\";\n  t[\"\\u2F3C\"] = \"\\u5FC3\";\n  t[\"\\u2F3D\"] = \"\\u6208\";\n  t[\"\\u2F3E\"] = \"\\u6236\";\n  t[\"\\u2F3F\"] = \"\\u624B\";\n  t[\"\\u2F40\"] = \"\\u652F\";\n  t[\"\\u2F41\"] = \"\\u6534\";\n  t[\"\\u2F42\"] = \"\\u6587\";\n  t[\"\\u2F43\"] = \"\\u6597\";\n  t[\"\\u2F44\"] = \"\\u65A4\";\n  t[\"\\u2F45\"] = \"\\u65B9\";\n  t[\"\\u2F46\"] = \"\\u65E0\";\n  t[\"\\u2F47\"] = \"\\u65E5\";\n  t[\"\\u2F48\"] = \"\\u66F0\";\n  t[\"\\u2F49\"] = \"\\u6708\";\n  t[\"\\u2F4A\"] = \"\\u6728\";\n  t[\"\\u2F4B\"] = \"\\u6B20\";\n  t[\"\\u2F4C\"] = \"\\u6B62\";\n  t[\"\\u2F4D\"] = \"\\u6B79\";\n  t[\"\\u2F4E\"] = \"\\u6BB3\";\n  t[\"\\u2F4F\"] = \"\\u6BCB\";\n  t[\"\\u2F50\"] = \"\\u6BD4\";\n  t[\"\\u2F51\"] = \"\\u6BDB\";\n  t[\"\\u2F52\"] = \"\\u6C0F\";\n  t[\"\\u2F53\"] = \"\\u6C14\";\n  t[\"\\u2F54\"] = \"\\u6C34\";\n  t[\"\\u2F55\"] = \"\\u706B\";\n  t[\"\\u2F56\"] = \"\\u722A\";\n  t[\"\\u2F57\"] = \"\\u7236\";\n  t[\"\\u2F58\"] = \"\\u723B\";\n  t[\"\\u2F59\"] = \"\\u723F\";\n  t[\"\\u2F5A\"] = \"\\u7247\";\n  t[\"\\u2F5B\"] = \"\\u7259\";\n  t[\"\\u2F5C\"] = \"\\u725B\";\n  t[\"\\u2F5D\"] = \"\\u72AC\";\n  t[\"\\u2F5E\"] = \"\\u7384\";\n  t[\"\\u2F5F\"] = \"\\u7389\";\n  t[\"\\u2F60\"] = \"\\u74DC\";\n  t[\"\\u2F61\"] = \"\\u74E6\";\n  t[\"\\u2F62\"] = \"\\u7518\";\n  t[\"\\u2F63\"] = \"\\u751F\";\n  t[\"\\u2F64\"] = \"\\u7528\";\n  t[\"\\u2F65\"] = \"\\u7530\";\n  t[\"\\u2F66\"] = \"\\u758B\";\n  t[\"\\u2F67\"] = \"\\u7592\";\n  t[\"\\u2F68\"] = \"\\u7676\";\n  t[\"\\u2F69\"] = \"\\u767D\";\n  t[\"\\u2F6A\"] = \"\\u76AE\";\n  t[\"\\u2F6B\"] = \"\\u76BF\";\n  t[\"\\u2F6C\"] = \"\\u76EE\";\n  t[\"\\u2F6D\"] = \"\\u77DB\";\n  t[\"\\u2F6E\"] = \"\\u77E2\";\n  t[\"\\u2F6F\"] = \"\\u77F3\";\n  t[\"\\u2F70\"] = \"\\u793A\";\n  t[\"\\u2F71\"] = \"\\u79B8\";\n  t[\"\\u2F72\"] = \"\\u79BE\";\n  t[\"\\u2F73\"] = \"\\u7A74\";\n  t[\"\\u2F74\"] = \"\\u7ACB\";\n  t[\"\\u2F75\"] = \"\\u7AF9\";\n  t[\"\\u2F76\"] = \"\\u7C73\";\n  t[\"\\u2F77\"] = \"\\u7CF8\";\n  t[\"\\u2F78\"] = \"\\u7F36\";\n  t[\"\\u2F79\"] = \"\\u7F51\";\n  t[\"\\u2F7A\"] = \"\\u7F8A\";\n  t[\"\\u2F7B\"] = \"\\u7FBD\";\n  t[\"\\u2F7C\"] = \"\\u8001\";\n  t[\"\\u2F7D\"] = \"\\u800C\";\n  t[\"\\u2F7E\"] = \"\\u8012\";\n  t[\"\\u2F7F\"] = \"\\u8033\";\n  t[\"\\u2F80\"] = \"\\u807F\";\n  t[\"\\u2F81\"] = \"\\u8089\";\n  t[\"\\u2F82\"] = \"\\u81E3\";\n  t[\"\\u2F83\"] = \"\\u81EA\";\n  t[\"\\u2F84\"] = \"\\u81F3\";\n  t[\"\\u2F85\"] = \"\\u81FC\";\n  t[\"\\u2F86\"] = \"\\u820C\";\n  t[\"\\u2F87\"] = \"\\u821B\";\n  t[\"\\u2F88\"] = \"\\u821F\";\n  t[\"\\u2F89\"] = \"\\u826E\";\n  t[\"\\u2F8A\"] = \"\\u8272\";\n  t[\"\\u2F8B\"] = \"\\u8278\";\n  t[\"\\u2F8C\"] = \"\\u864D\";\n  t[\"\\u2F8D\"] = \"\\u866B\";\n  t[\"\\u2F8E\"] = \"\\u8840\";\n  t[\"\\u2F8F\"] = \"\\u884C\";\n  t[\"\\u2F90\"] = \"\\u8863\";\n  t[\"\\u2F91\"] = \"\\u897E\";\n  t[\"\\u2F92\"] = \"\\u898B\";\n  t[\"\\u2F93\"] = \"\\u89D2\";\n  t[\"\\u2F94\"] = \"\\u8A00\";\n  t[\"\\u2F95\"] = \"\\u8C37\";\n  t[\"\\u2F96\"] = \"\\u8C46\";\n  t[\"\\u2F97\"] = \"\\u8C55\";\n  t[\"\\u2F98\"] = \"\\u8C78\";\n  t[\"\\u2F99\"] = \"\\u8C9D\";\n  t[\"\\u2F9A\"] = \"\\u8D64\";\n  t[\"\\u2F9B\"] = \"\\u8D70\";\n  t[\"\\u2F9C\"] = \"\\u8DB3\";\n  t[\"\\u2F9D\"] = \"\\u8EAB\";\n  t[\"\\u2F9E\"] = \"\\u8ECA\";\n  t[\"\\u2F9F\"] = \"\\u8F9B\";\n  t[\"\\u2FA0\"] = \"\\u8FB0\";\n  t[\"\\u2FA1\"] = \"\\u8FB5\";\n  t[\"\\u2FA2\"] = \"\\u9091\";\n  t[\"\\u2FA3\"] = \"\\u9149\";\n  t[\"\\u2FA4\"] = \"\\u91C6\";\n  t[\"\\u2FA5\"] = \"\\u91CC\";\n  t[\"\\u2FA6\"] = \"\\u91D1\";\n  t[\"\\u2FA7\"] = \"\\u9577\";\n  t[\"\\u2FA8\"] = \"\\u9580\";\n  t[\"\\u2FA9\"] = \"\\u961C\";\n  t[\"\\u2FAA\"] = \"\\u96B6\";\n  t[\"\\u2FAB\"] = \"\\u96B9\";\n  t[\"\\u2FAC\"] = \"\\u96E8\";\n  t[\"\\u2FAD\"] = \"\\u9751\";\n  t[\"\\u2FAE\"] = \"\\u975E\";\n  t[\"\\u2FAF\"] = \"\\u9762\";\n  t[\"\\u2FB0\"] = \"\\u9769\";\n  t[\"\\u2FB1\"] = \"\\u97CB\";\n  t[\"\\u2FB2\"] = \"\\u97ED\";\n  t[\"\\u2FB3\"] = \"\\u97F3\";\n  t[\"\\u2FB4\"] = \"\\u9801\";\n  t[\"\\u2FB5\"] = \"\\u98A8\";\n  t[\"\\u2FB6\"] = \"\\u98DB\";\n  t[\"\\u2FB7\"] = \"\\u98DF\";\n  t[\"\\u2FB8\"] = \"\\u9996\";\n  t[\"\\u2FB9\"] = \"\\u9999\";\n  t[\"\\u2FBA\"] = \"\\u99AC\";\n  t[\"\\u2FBB\"] = \"\\u9AA8\";\n  t[\"\\u2FBC\"] = \"\\u9AD8\";\n  t[\"\\u2FBD\"] = \"\\u9ADF\";\n  t[\"\\u2FBE\"] = \"\\u9B25\";\n  t[\"\\u2FBF\"] = \"\\u9B2F\";\n  t[\"\\u2FC0\"] = \"\\u9B32\";\n  t[\"\\u2FC1\"] = \"\\u9B3C\";\n  t[\"\\u2FC2\"] = \"\\u9B5A\";\n  t[\"\\u2FC3\"] = \"\\u9CE5\";\n  t[\"\\u2FC4\"] = \"\\u9E75\";\n  t[\"\\u2FC5\"] = \"\\u9E7F\";\n  t[\"\\u2FC6\"] = \"\\u9EA5\";\n  t[\"\\u2FC7\"] = \"\\u9EBB\";\n  t[\"\\u2FC8\"] = \"\\u9EC3\";\n  t[\"\\u2FC9\"] = \"\\u9ECD\";\n  t[\"\\u2FCA\"] = \"\\u9ED1\";\n  t[\"\\u2FCB\"] = \"\\u9EF9\";\n  t[\"\\u2FCC\"] = \"\\u9EFD\";\n  t[\"\\u2FCD\"] = \"\\u9F0E\";\n  t[\"\\u2FCE\"] = \"\\u9F13\";\n  t[\"\\u2FCF\"] = \"\\u9F20\";\n  t[\"\\u2FD0\"] = \"\\u9F3B\";\n  t[\"\\u2FD1\"] = \"\\u9F4A\";\n  t[\"\\u2FD2\"] = \"\\u9F52\";\n  t[\"\\u2FD3\"] = \"\\u9F8D\";\n  t[\"\\u2FD4\"] = \"\\u9F9C\";\n  t[\"\\u2FD5\"] = \"\\u9FA0\";\n  t[\"\\u3036\"] = \"\\u3012\";\n  t[\"\\u3038\"] = \"\\u5341\";\n  t[\"\\u3039\"] = \"\\u5344\";\n  t[\"\\u303A\"] = \"\\u5345\";\n  t[\"\\u309B\"] = \"\\u0020\\u3099\";\n  t[\"\\u309C\"] = \"\\u0020\\u309A\";\n  t[\"\\u3131\"] = \"\\u1100\";\n  t[\"\\u3132\"] = \"\\u1101\";\n  t[\"\\u3133\"] = \"\\u11AA\";\n  t[\"\\u3134\"] = \"\\u1102\";\n  t[\"\\u3135\"] = \"\\u11AC\";\n  t[\"\\u3136\"] = \"\\u11AD\";\n  t[\"\\u3137\"] = \"\\u1103\";\n  t[\"\\u3138\"] = \"\\u1104\";\n  t[\"\\u3139\"] = \"\\u1105\";\n  t[\"\\u313A\"] = \"\\u11B0\";\n  t[\"\\u313B\"] = \"\\u11B1\";\n  t[\"\\u313C\"] = \"\\u11B2\";\n  t[\"\\u313D\"] = \"\\u11B3\";\n  t[\"\\u313E\"] = \"\\u11B4\";\n  t[\"\\u313F\"] = \"\\u11B5\";\n  t[\"\\u3140\"] = \"\\u111A\";\n  t[\"\\u3141\"] = \"\\u1106\";\n  t[\"\\u3142\"] = \"\\u1107\";\n  t[\"\\u3143\"] = \"\\u1108\";\n  t[\"\\u3144\"] = \"\\u1121\";\n  t[\"\\u3145\"] = \"\\u1109\";\n  t[\"\\u3146\"] = \"\\u110A\";\n  t[\"\\u3147\"] = \"\\u110B\";\n  t[\"\\u3148\"] = \"\\u110C\";\n  t[\"\\u3149\"] = \"\\u110D\";\n  t[\"\\u314A\"] = \"\\u110E\";\n  t[\"\\u314B\"] = \"\\u110F\";\n  t[\"\\u314C\"] = \"\\u1110\";\n  t[\"\\u314D\"] = \"\\u1111\";\n  t[\"\\u314E\"] = \"\\u1112\";\n  t[\"\\u314F\"] = \"\\u1161\";\n  t[\"\\u3150\"] = \"\\u1162\";\n  t[\"\\u3151\"] = \"\\u1163\";\n  t[\"\\u3152\"] = \"\\u1164\";\n  t[\"\\u3153\"] = \"\\u1165\";\n  t[\"\\u3154\"] = \"\\u1166\";\n  t[\"\\u3155\"] = \"\\u1167\";\n  t[\"\\u3156\"] = \"\\u1168\";\n  t[\"\\u3157\"] = \"\\u1169\";\n  t[\"\\u3158\"] = \"\\u116A\";\n  t[\"\\u3159\"] = \"\\u116B\";\n  t[\"\\u315A\"] = \"\\u116C\";\n  t[\"\\u315B\"] = \"\\u116D\";\n  t[\"\\u315C\"] = \"\\u116E\";\n  t[\"\\u315D\"] = \"\\u116F\";\n  t[\"\\u315E\"] = \"\\u1170\";\n  t[\"\\u315F\"] = \"\\u1171\";\n  t[\"\\u3160\"] = \"\\u1172\";\n  t[\"\\u3161\"] = \"\\u1173\";\n  t[\"\\u3162\"] = \"\\u1174\";\n  t[\"\\u3163\"] = \"\\u1175\";\n  t[\"\\u3164\"] = \"\\u1160\";\n  t[\"\\u3165\"] = \"\\u1114\";\n  t[\"\\u3166\"] = \"\\u1115\";\n  t[\"\\u3167\"] = \"\\u11C7\";\n  t[\"\\u3168\"] = \"\\u11C8\";\n  t[\"\\u3169\"] = \"\\u11CC\";\n  t[\"\\u316A\"] = \"\\u11CE\";\n  t[\"\\u316B\"] = \"\\u11D3\";\n  t[\"\\u316C\"] = \"\\u11D7\";\n  t[\"\\u316D\"] = \"\\u11D9\";\n  t[\"\\u316E\"] = \"\\u111C\";\n  t[\"\\u316F\"] = \"\\u11DD\";\n  t[\"\\u3170\"] = \"\\u11DF\";\n  t[\"\\u3171\"] = \"\\u111D\";\n  t[\"\\u3172\"] = \"\\u111E\";\n  t[\"\\u3173\"] = \"\\u1120\";\n  t[\"\\u3174\"] = \"\\u1122\";\n  t[\"\\u3175\"] = \"\\u1123\";\n  t[\"\\u3176\"] = \"\\u1127\";\n  t[\"\\u3177\"] = \"\\u1129\";\n  t[\"\\u3178\"] = \"\\u112B\";\n  t[\"\\u3179\"] = \"\\u112C\";\n  t[\"\\u317A\"] = \"\\u112D\";\n  t[\"\\u317B\"] = \"\\u112E\";\n  t[\"\\u317C\"] = \"\\u112F\";\n  t[\"\\u317D\"] = \"\\u1132\";\n  t[\"\\u317E\"] = \"\\u1136\";\n  t[\"\\u317F\"] = \"\\u1140\";\n  t[\"\\u3180\"] = \"\\u1147\";\n  t[\"\\u3181\"] = \"\\u114C\";\n  t[\"\\u3182\"] = \"\\u11F1\";\n  t[\"\\u3183\"] = \"\\u11F2\";\n  t[\"\\u3184\"] = \"\\u1157\";\n  t[\"\\u3185\"] = \"\\u1158\";\n  t[\"\\u3186\"] = \"\\u1159\";\n  t[\"\\u3187\"] = \"\\u1184\";\n  t[\"\\u3188\"] = \"\\u1185\";\n  t[\"\\u3189\"] = \"\\u1188\";\n  t[\"\\u318A\"] = \"\\u1191\";\n  t[\"\\u318B\"] = \"\\u1192\";\n  t[\"\\u318C\"] = \"\\u1194\";\n  t[\"\\u318D\"] = \"\\u119E\";\n  t[\"\\u318E\"] = \"\\u11A1\";\n  t[\"\\u3200\"] = \"\\u0028\\u1100\\u0029\";\n  t[\"\\u3201\"] = \"\\u0028\\u1102\\u0029\";\n  t[\"\\u3202\"] = \"\\u0028\\u1103\\u0029\";\n  t[\"\\u3203\"] = \"\\u0028\\u1105\\u0029\";\n  t[\"\\u3204\"] = \"\\u0028\\u1106\\u0029\";\n  t[\"\\u3205\"] = \"\\u0028\\u1107\\u0029\";\n  t[\"\\u3206\"] = \"\\u0028\\u1109\\u0029\";\n  t[\"\\u3207\"] = \"\\u0028\\u110B\\u0029\";\n  t[\"\\u3208\"] = \"\\u0028\\u110C\\u0029\";\n  t[\"\\u3209\"] = \"\\u0028\\u110E\\u0029\";\n  t[\"\\u320A\"] = \"\\u0028\\u110F\\u0029\";\n  t[\"\\u320B\"] = \"\\u0028\\u1110\\u0029\";\n  t[\"\\u320C\"] = \"\\u0028\\u1111\\u0029\";\n  t[\"\\u320D\"] = \"\\u0028\\u1112\\u0029\";\n  t[\"\\u320E\"] = \"\\u0028\\u1100\\u1161\\u0029\";\n  t[\"\\u320F\"] = \"\\u0028\\u1102\\u1161\\u0029\";\n  t[\"\\u3210\"] = \"\\u0028\\u1103\\u1161\\u0029\";\n  t[\"\\u3211\"] = \"\\u0028\\u1105\\u1161\\u0029\";\n  t[\"\\u3212\"] = \"\\u0028\\u1106\\u1161\\u0029\";\n  t[\"\\u3213\"] = \"\\u0028\\u1107\\u1161\\u0029\";\n  t[\"\\u3214\"] = \"\\u0028\\u1109\\u1161\\u0029\";\n  t[\"\\u3215\"] = \"\\u0028\\u110B\\u1161\\u0029\";\n  t[\"\\u3216\"] = \"\\u0028\\u110C\\u1161\\u0029\";\n  t[\"\\u3217\"] = \"\\u0028\\u110E\\u1161\\u0029\";\n  t[\"\\u3218\"] = \"\\u0028\\u110F\\u1161\\u0029\";\n  t[\"\\u3219\"] = \"\\u0028\\u1110\\u1161\\u0029\";\n  t[\"\\u321A\"] = \"\\u0028\\u1111\\u1161\\u0029\";\n  t[\"\\u321B\"] = \"\\u0028\\u1112\\u1161\\u0029\";\n  t[\"\\u321C\"] = \"\\u0028\\u110C\\u116E\\u0029\";\n  t[\"\\u321D\"] = \"\\u0028\\u110B\\u1169\\u110C\\u1165\\u11AB\\u0029\";\n  t[\"\\u321E\"] = \"\\u0028\\u110B\\u1169\\u1112\\u116E\\u0029\";\n  t[\"\\u3220\"] = \"\\u0028\\u4E00\\u0029\";\n  t[\"\\u3221\"] = \"\\u0028\\u4E8C\\u0029\";\n  t[\"\\u3222\"] = \"\\u0028\\u4E09\\u0029\";\n  t[\"\\u3223\"] = \"\\u0028\\u56DB\\u0029\";\n  t[\"\\u3224\"] = \"\\u0028\\u4E94\\u0029\";\n  t[\"\\u3225\"] = \"\\u0028\\u516D\\u0029\";\n  t[\"\\u3226\"] = \"\\u0028\\u4E03\\u0029\";\n  t[\"\\u3227\"] = \"\\u0028\\u516B\\u0029\";\n  t[\"\\u3228\"] = \"\\u0028\\u4E5D\\u0029\";\n  t[\"\\u3229\"] = \"\\u0028\\u5341\\u0029\";\n  t[\"\\u322A\"] = \"\\u0028\\u6708\\u0029\";\n  t[\"\\u322B\"] = \"\\u0028\\u706B\\u0029\";\n  t[\"\\u322C\"] = \"\\u0028\\u6C34\\u0029\";\n  t[\"\\u322D\"] = \"\\u0028\\u6728\\u0029\";\n  t[\"\\u322E\"] = \"\\u0028\\u91D1\\u0029\";\n  t[\"\\u322F\"] = \"\\u0028\\u571F\\u0029\";\n  t[\"\\u3230\"] = \"\\u0028\\u65E5\\u0029\";\n  t[\"\\u3231\"] = \"\\u0028\\u682A\\u0029\";\n  t[\"\\u3232\"] = \"\\u0028\\u6709\\u0029\";\n  t[\"\\u3233\"] = \"\\u0028\\u793E\\u0029\";\n  t[\"\\u3234\"] = \"\\u0028\\u540D\\u0029\";\n  t[\"\\u3235\"] = \"\\u0028\\u7279\\u0029\";\n  t[\"\\u3236\"] = \"\\u0028\\u8CA1\\u0029\";\n  t[\"\\u3237\"] = \"\\u0028\\u795D\\u0029\";\n  t[\"\\u3238\"] = \"\\u0028\\u52B4\\u0029\";\n  t[\"\\u3239\"] = \"\\u0028\\u4EE3\\u0029\";\n  t[\"\\u323A\"] = \"\\u0028\\u547C\\u0029\";\n  t[\"\\u323B\"] = \"\\u0028\\u5B66\\u0029\";\n  t[\"\\u323C\"] = \"\\u0028\\u76E3\\u0029\";\n  t[\"\\u323D\"] = \"\\u0028\\u4F01\\u0029\";\n  t[\"\\u323E\"] = \"\\u0028\\u8CC7\\u0029\";\n  t[\"\\u323F\"] = \"\\u0028\\u5354\\u0029\";\n  t[\"\\u3240\"] = \"\\u0028\\u796D\\u0029\";\n  t[\"\\u3241\"] = \"\\u0028\\u4F11\\u0029\";\n  t[\"\\u3242\"] = \"\\u0028\\u81EA\\u0029\";\n  t[\"\\u3243\"] = \"\\u0028\\u81F3\\u0029\";\n  t[\"\\u32C0\"] = \"\\u0031\\u6708\";\n  t[\"\\u32C1\"] = \"\\u0032\\u6708\";\n  t[\"\\u32C2\"] = \"\\u0033\\u6708\";\n  t[\"\\u32C3\"] = \"\\u0034\\u6708\";\n  t[\"\\u32C4\"] = \"\\u0035\\u6708\";\n  t[\"\\u32C5\"] = \"\\u0036\\u6708\";\n  t[\"\\u32C6\"] = \"\\u0037\\u6708\";\n  t[\"\\u32C7\"] = \"\\u0038\\u6708\";\n  t[\"\\u32C8\"] = \"\\u0039\\u6708\";\n  t[\"\\u32C9\"] = \"\\u0031\\u0030\\u6708\";\n  t[\"\\u32CA\"] = \"\\u0031\\u0031\\u6708\";\n  t[\"\\u32CB\"] = \"\\u0031\\u0032\\u6708\";\n  t[\"\\u3358\"] = \"\\u0030\\u70B9\";\n  t[\"\\u3359\"] = \"\\u0031\\u70B9\";\n  t[\"\\u335A\"] = \"\\u0032\\u70B9\";\n  t[\"\\u335B\"] = \"\\u0033\\u70B9\";\n  t[\"\\u335C\"] = \"\\u0034\\u70B9\";\n  t[\"\\u335D\"] = \"\\u0035\\u70B9\";\n  t[\"\\u335E\"] = \"\\u0036\\u70B9\";\n  t[\"\\u335F\"] = \"\\u0037\\u70B9\";\n  t[\"\\u3360\"] = \"\\u0038\\u70B9\";\n  t[\"\\u3361\"] = \"\\u0039\\u70B9\";\n  t[\"\\u3362\"] = \"\\u0031\\u0030\\u70B9\";\n  t[\"\\u3363\"] = \"\\u0031\\u0031\\u70B9\";\n  t[\"\\u3364\"] = \"\\u0031\\u0032\\u70B9\";\n  t[\"\\u3365\"] = \"\\u0031\\u0033\\u70B9\";\n  t[\"\\u3366\"] = \"\\u0031\\u0034\\u70B9\";\n  t[\"\\u3367\"] = \"\\u0031\\u0035\\u70B9\";\n  t[\"\\u3368\"] = \"\\u0031\\u0036\\u70B9\";\n  t[\"\\u3369\"] = \"\\u0031\\u0037\\u70B9\";\n  t[\"\\u336A\"] = \"\\u0031\\u0038\\u70B9\";\n  t[\"\\u336B\"] = \"\\u0031\\u0039\\u70B9\";\n  t[\"\\u336C\"] = \"\\u0032\\u0030\\u70B9\";\n  t[\"\\u336D\"] = \"\\u0032\\u0031\\u70B9\";\n  t[\"\\u336E\"] = \"\\u0032\\u0032\\u70B9\";\n  t[\"\\u336F\"] = \"\\u0032\\u0033\\u70B9\";\n  t[\"\\u3370\"] = \"\\u0032\\u0034\\u70B9\";\n  t[\"\\u33E0\"] = \"\\u0031\\u65E5\";\n  t[\"\\u33E1\"] = \"\\u0032\\u65E5\";\n  t[\"\\u33E2\"] = \"\\u0033\\u65E5\";\n  t[\"\\u33E3\"] = \"\\u0034\\u65E5\";\n  t[\"\\u33E4\"] = \"\\u0035\\u65E5\";\n  t[\"\\u33E5\"] = \"\\u0036\\u65E5\";\n  t[\"\\u33E6\"] = \"\\u0037\\u65E5\";\n  t[\"\\u33E7\"] = \"\\u0038\\u65E5\";\n  t[\"\\u33E8\"] = \"\\u0039\\u65E5\";\n  t[\"\\u33E9\"] = \"\\u0031\\u0030\\u65E5\";\n  t[\"\\u33EA\"] = \"\\u0031\\u0031\\u65E5\";\n  t[\"\\u33EB\"] = \"\\u0031\\u0032\\u65E5\";\n  t[\"\\u33EC\"] = \"\\u0031\\u0033\\u65E5\";\n  t[\"\\u33ED\"] = \"\\u0031\\u0034\\u65E5\";\n  t[\"\\u33EE\"] = \"\\u0031\\u0035\\u65E5\";\n  t[\"\\u33EF\"] = \"\\u0031\\u0036\\u65E5\";\n  t[\"\\u33F0\"] = \"\\u0031\\u0037\\u65E5\";\n  t[\"\\u33F1\"] = \"\\u0031\\u0038\\u65E5\";\n  t[\"\\u33F2\"] = \"\\u0031\\u0039\\u65E5\";\n  t[\"\\u33F3\"] = \"\\u0032\\u0030\\u65E5\";\n  t[\"\\u33F4\"] = \"\\u0032\\u0031\\u65E5\";\n  t[\"\\u33F5\"] = \"\\u0032\\u0032\\u65E5\";\n  t[\"\\u33F6\"] = \"\\u0032\\u0033\\u65E5\";\n  t[\"\\u33F7\"] = \"\\u0032\\u0034\\u65E5\";\n  t[\"\\u33F8\"] = \"\\u0032\\u0035\\u65E5\";\n  t[\"\\u33F9\"] = \"\\u0032\\u0036\\u65E5\";\n  t[\"\\u33FA\"] = \"\\u0032\\u0037\\u65E5\";\n  t[\"\\u33FB\"] = \"\\u0032\\u0038\\u65E5\";\n  t[\"\\u33FC\"] = \"\\u0032\\u0039\\u65E5\";\n  t[\"\\u33FD\"] = \"\\u0033\\u0030\\u65E5\";\n  t[\"\\u33FE\"] = \"\\u0033\\u0031\\u65E5\";\n  t[\"\\uFB00\"] = \"\\u0066\\u0066\";\n  t[\"\\uFB01\"] = \"\\u0066\\u0069\";\n  t[\"\\uFB02\"] = \"\\u0066\\u006C\";\n  t[\"\\uFB03\"] = \"\\u0066\\u0066\\u0069\";\n  t[\"\\uFB04\"] = \"\\u0066\\u0066\\u006C\";\n  t[\"\\uFB05\"] = \"\\u017F\\u0074\";\n  t[\"\\uFB06\"] = \"\\u0073\\u0074\";\n  t[\"\\uFB13\"] = \"\\u0574\\u0576\";\n  t[\"\\uFB14\"] = \"\\u0574\\u0565\";\n  t[\"\\uFB15\"] = \"\\u0574\\u056B\";\n  t[\"\\uFB16\"] = \"\\u057E\\u0576\";\n  t[\"\\uFB17\"] = \"\\u0574\\u056D\";\n  t[\"\\uFB4F\"] = \"\\u05D0\\u05DC\";\n  t[\"\\uFB50\"] = \"\\u0671\";\n  t[\"\\uFB51\"] = \"\\u0671\";\n  t[\"\\uFB52\"] = \"\\u067B\";\n  t[\"\\uFB53\"] = \"\\u067B\";\n  t[\"\\uFB54\"] = \"\\u067B\";\n  t[\"\\uFB55\"] = \"\\u067B\";\n  t[\"\\uFB56\"] = \"\\u067E\";\n  t[\"\\uFB57\"] = \"\\u067E\";\n  t[\"\\uFB58\"] = \"\\u067E\";\n  t[\"\\uFB59\"] = \"\\u067E\";\n  t[\"\\uFB5A\"] = \"\\u0680\";\n  t[\"\\uFB5B\"] = \"\\u0680\";\n  t[\"\\uFB5C\"] = \"\\u0680\";\n  t[\"\\uFB5D\"] = \"\\u0680\";\n  t[\"\\uFB5E\"] = \"\\u067A\";\n  t[\"\\uFB5F\"] = \"\\u067A\";\n  t[\"\\uFB60\"] = \"\\u067A\";\n  t[\"\\uFB61\"] = \"\\u067A\";\n  t[\"\\uFB62\"] = \"\\u067F\";\n  t[\"\\uFB63\"] = \"\\u067F\";\n  t[\"\\uFB64\"] = \"\\u067F\";\n  t[\"\\uFB65\"] = \"\\u067F\";\n  t[\"\\uFB66\"] = \"\\u0679\";\n  t[\"\\uFB67\"] = \"\\u0679\";\n  t[\"\\uFB68\"] = \"\\u0679\";\n  t[\"\\uFB69\"] = \"\\u0679\";\n  t[\"\\uFB6A\"] = \"\\u06A4\";\n  t[\"\\uFB6B\"] = \"\\u06A4\";\n  t[\"\\uFB6C\"] = \"\\u06A4\";\n  t[\"\\uFB6D\"] = \"\\u06A4\";\n  t[\"\\uFB6E\"] = \"\\u06A6\";\n  t[\"\\uFB6F\"] = \"\\u06A6\";\n  t[\"\\uFB70\"] = \"\\u06A6\";\n  t[\"\\uFB71\"] = \"\\u06A6\";\n  t[\"\\uFB72\"] = \"\\u0684\";\n  t[\"\\uFB73\"] = \"\\u0684\";\n  t[\"\\uFB74\"] = \"\\u0684\";\n  t[\"\\uFB75\"] = \"\\u0684\";\n  t[\"\\uFB76\"] = \"\\u0683\";\n  t[\"\\uFB77\"] = \"\\u0683\";\n  t[\"\\uFB78\"] = \"\\u0683\";\n  t[\"\\uFB79\"] = \"\\u0683\";\n  t[\"\\uFB7A\"] = \"\\u0686\";\n  t[\"\\uFB7B\"] = \"\\u0686\";\n  t[\"\\uFB7C\"] = \"\\u0686\";\n  t[\"\\uFB7D\"] = \"\\u0686\";\n  t[\"\\uFB7E\"] = \"\\u0687\";\n  t[\"\\uFB7F\"] = \"\\u0687\";\n  t[\"\\uFB80\"] = \"\\u0687\";\n  t[\"\\uFB81\"] = \"\\u0687\";\n  t[\"\\uFB82\"] = \"\\u068D\";\n  t[\"\\uFB83\"] = \"\\u068D\";\n  t[\"\\uFB84\"] = \"\\u068C\";\n  t[\"\\uFB85\"] = \"\\u068C\";\n  t[\"\\uFB86\"] = \"\\u068E\";\n  t[\"\\uFB87\"] = \"\\u068E\";\n  t[\"\\uFB88\"] = \"\\u0688\";\n  t[\"\\uFB89\"] = \"\\u0688\";\n  t[\"\\uFB8A\"] = \"\\u0698\";\n  t[\"\\uFB8B\"] = \"\\u0698\";\n  t[\"\\uFB8C\"] = \"\\u0691\";\n  t[\"\\uFB8D\"] = \"\\u0691\";\n  t[\"\\uFB8E\"] = \"\\u06A9\";\n  t[\"\\uFB8F\"] = \"\\u06A9\";\n  t[\"\\uFB90\"] = \"\\u06A9\";\n  t[\"\\uFB91\"] = \"\\u06A9\";\n  t[\"\\uFB92\"] = \"\\u06AF\";\n  t[\"\\uFB93\"] = \"\\u06AF\";\n  t[\"\\uFB94\"] = \"\\u06AF\";\n  t[\"\\uFB95\"] = \"\\u06AF\";\n  t[\"\\uFB96\"] = \"\\u06B3\";\n  t[\"\\uFB97\"] = \"\\u06B3\";\n  t[\"\\uFB98\"] = \"\\u06B3\";\n  t[\"\\uFB99\"] = \"\\u06B3\";\n  t[\"\\uFB9A\"] = \"\\u06B1\";\n  t[\"\\uFB9B\"] = \"\\u06B1\";\n  t[\"\\uFB9C\"] = \"\\u06B1\";\n  t[\"\\uFB9D\"] = \"\\u06B1\";\n  t[\"\\uFB9E\"] = \"\\u06BA\";\n  t[\"\\uFB9F\"] = \"\\u06BA\";\n  t[\"\\uFBA0\"] = \"\\u06BB\";\n  t[\"\\uFBA1\"] = \"\\u06BB\";\n  t[\"\\uFBA2\"] = \"\\u06BB\";\n  t[\"\\uFBA3\"] = \"\\u06BB\";\n  t[\"\\uFBA4\"] = \"\\u06C0\";\n  t[\"\\uFBA5\"] = \"\\u06C0\";\n  t[\"\\uFBA6\"] = \"\\u06C1\";\n  t[\"\\uFBA7\"] = \"\\u06C1\";\n  t[\"\\uFBA8\"] = \"\\u06C1\";\n  t[\"\\uFBA9\"] = \"\\u06C1\";\n  t[\"\\uFBAA\"] = \"\\u06BE\";\n  t[\"\\uFBAB\"] = \"\\u06BE\";\n  t[\"\\uFBAC\"] = \"\\u06BE\";\n  t[\"\\uFBAD\"] = \"\\u06BE\";\n  t[\"\\uFBAE\"] = \"\\u06D2\";\n  t[\"\\uFBAF\"] = \"\\u06D2\";\n  t[\"\\uFBB0\"] = \"\\u06D3\";\n  t[\"\\uFBB1\"] = \"\\u06D3\";\n  t[\"\\uFBD3\"] = \"\\u06AD\";\n  t[\"\\uFBD4\"] = \"\\u06AD\";\n  t[\"\\uFBD5\"] = \"\\u06AD\";\n  t[\"\\uFBD6\"] = \"\\u06AD\";\n  t[\"\\uFBD7\"] = \"\\u06C7\";\n  t[\"\\uFBD8\"] = \"\\u06C7\";\n  t[\"\\uFBD9\"] = \"\\u06C6\";\n  t[\"\\uFBDA\"] = \"\\u06C6\";\n  t[\"\\uFBDB\"] = \"\\u06C8\";\n  t[\"\\uFBDC\"] = \"\\u06C8\";\n  t[\"\\uFBDD\"] = \"\\u0677\";\n  t[\"\\uFBDE\"] = \"\\u06CB\";\n  t[\"\\uFBDF\"] = \"\\u06CB\";\n  t[\"\\uFBE0\"] = \"\\u06C5\";\n  t[\"\\uFBE1\"] = \"\\u06C5\";\n  t[\"\\uFBE2\"] = \"\\u06C9\";\n  t[\"\\uFBE3\"] = \"\\u06C9\";\n  t[\"\\uFBE4\"] = \"\\u06D0\";\n  t[\"\\uFBE5\"] = \"\\u06D0\";\n  t[\"\\uFBE6\"] = \"\\u06D0\";\n  t[\"\\uFBE7\"] = \"\\u06D0\";\n  t[\"\\uFBE8\"] = \"\\u0649\";\n  t[\"\\uFBE9\"] = \"\\u0649\";\n  t[\"\\uFBEA\"] = \"\\u0626\\u0627\";\n  t[\"\\uFBEB\"] = \"\\u0626\\u0627\";\n  t[\"\\uFBEC\"] = \"\\u0626\\u06D5\";\n  t[\"\\uFBED\"] = \"\\u0626\\u06D5\";\n  t[\"\\uFBEE\"] = \"\\u0626\\u0648\";\n  t[\"\\uFBEF\"] = \"\\u0626\\u0648\";\n  t[\"\\uFBF0\"] = \"\\u0626\\u06C7\";\n  t[\"\\uFBF1\"] = \"\\u0626\\u06C7\";\n  t[\"\\uFBF2\"] = \"\\u0626\\u06C6\";\n  t[\"\\uFBF3\"] = \"\\u0626\\u06C6\";\n  t[\"\\uFBF4\"] = \"\\u0626\\u06C8\";\n  t[\"\\uFBF5\"] = \"\\u0626\\u06C8\";\n  t[\"\\uFBF6\"] = \"\\u0626\\u06D0\";\n  t[\"\\uFBF7\"] = \"\\u0626\\u06D0\";\n  t[\"\\uFBF8\"] = \"\\u0626\\u06D0\";\n  t[\"\\uFBF9\"] = \"\\u0626\\u0649\";\n  t[\"\\uFBFA\"] = \"\\u0626\\u0649\";\n  t[\"\\uFBFB\"] = \"\\u0626\\u0649\";\n  t[\"\\uFBFC\"] = \"\\u06CC\";\n  t[\"\\uFBFD\"] = \"\\u06CC\";\n  t[\"\\uFBFE\"] = \"\\u06CC\";\n  t[\"\\uFBFF\"] = \"\\u06CC\";\n  t[\"\\uFC00\"] = \"\\u0626\\u062C\";\n  t[\"\\uFC01\"] = \"\\u0626\\u062D\";\n  t[\"\\uFC02\"] = \"\\u0626\\u0645\";\n  t[\"\\uFC03\"] = \"\\u0626\\u0649\";\n  t[\"\\uFC04\"] = \"\\u0626\\u064A\";\n  t[\"\\uFC05\"] = \"\\u0628\\u062C\";\n  t[\"\\uFC06\"] = \"\\u0628\\u062D\";\n  t[\"\\uFC07\"] = \"\\u0628\\u062E\";\n  t[\"\\uFC08\"] = \"\\u0628\\u0645\";\n  t[\"\\uFC09\"] = \"\\u0628\\u0649\";\n  t[\"\\uFC0A\"] = \"\\u0628\\u064A\";\n  t[\"\\uFC0B\"] = \"\\u062A\\u062C\";\n  t[\"\\uFC0C\"] = \"\\u062A\\u062D\";\n  t[\"\\uFC0D\"] = \"\\u062A\\u062E\";\n  t[\"\\uFC0E\"] = \"\\u062A\\u0645\";\n  t[\"\\uFC0F\"] = \"\\u062A\\u0649\";\n  t[\"\\uFC10\"] = \"\\u062A\\u064A\";\n  t[\"\\uFC11\"] = \"\\u062B\\u062C\";\n  t[\"\\uFC12\"] = \"\\u062B\\u0645\";\n  t[\"\\uFC13\"] = \"\\u062B\\u0649\";\n  t[\"\\uFC14\"] = \"\\u062B\\u064A\";\n  t[\"\\uFC15\"] = \"\\u062C\\u062D\";\n  t[\"\\uFC16\"] = \"\\u062C\\u0645\";\n  t[\"\\uFC17\"] = \"\\u062D\\u062C\";\n  t[\"\\uFC18\"] = \"\\u062D\\u0645\";\n  t[\"\\uFC19\"] = \"\\u062E\\u062C\";\n  t[\"\\uFC1A\"] = \"\\u062E\\u062D\";\n  t[\"\\uFC1B\"] = \"\\u062E\\u0645\";\n  t[\"\\uFC1C\"] = \"\\u0633\\u062C\";\n  t[\"\\uFC1D\"] = \"\\u0633\\u062D\";\n  t[\"\\uFC1E\"] = \"\\u0633\\u062E\";\n  t[\"\\uFC1F\"] = \"\\u0633\\u0645\";\n  t[\"\\uFC20\"] = \"\\u0635\\u062D\";\n  t[\"\\uFC21\"] = \"\\u0635\\u0645\";\n  t[\"\\uFC22\"] = \"\\u0636\\u062C\";\n  t[\"\\uFC23\"] = \"\\u0636\\u062D\";\n  t[\"\\uFC24\"] = \"\\u0636\\u062E\";\n  t[\"\\uFC25\"] = \"\\u0636\\u0645\";\n  t[\"\\uFC26\"] = \"\\u0637\\u062D\";\n  t[\"\\uFC27\"] = \"\\u0637\\u0645\";\n  t[\"\\uFC28\"] = \"\\u0638\\u0645\";\n  t[\"\\uFC29\"] = \"\\u0639\\u062C\";\n  t[\"\\uFC2A\"] = \"\\u0639\\u0645\";\n  t[\"\\uFC2B\"] = \"\\u063A\\u062C\";\n  t[\"\\uFC2C\"] = \"\\u063A\\u0645\";\n  t[\"\\uFC2D\"] = \"\\u0641\\u062C\";\n  t[\"\\uFC2E\"] = \"\\u0641\\u062D\";\n  t[\"\\uFC2F\"] = \"\\u0641\\u062E\";\n  t[\"\\uFC30\"] = \"\\u0641\\u0645\";\n  t[\"\\uFC31\"] = \"\\u0641\\u0649\";\n  t[\"\\uFC32\"] = \"\\u0641\\u064A\";\n  t[\"\\uFC33\"] = \"\\u0642\\u062D\";\n  t[\"\\uFC34\"] = \"\\u0642\\u0645\";\n  t[\"\\uFC35\"] = \"\\u0642\\u0649\";\n  t[\"\\uFC36\"] = \"\\u0642\\u064A\";\n  t[\"\\uFC37\"] = \"\\u0643\\u0627\";\n  t[\"\\uFC38\"] = \"\\u0643\\u062C\";\n  t[\"\\uFC39\"] = \"\\u0643\\u062D\";\n  t[\"\\uFC3A\"] = \"\\u0643\\u062E\";\n  t[\"\\uFC3B\"] = \"\\u0643\\u0644\";\n  t[\"\\uFC3C\"] = \"\\u0643\\u0645\";\n  t[\"\\uFC3D\"] = \"\\u0643\\u0649\";\n  t[\"\\uFC3E\"] = \"\\u0643\\u064A\";\n  t[\"\\uFC3F\"] = \"\\u0644\\u062C\";\n  t[\"\\uFC40\"] = \"\\u0644\\u062D\";\n  t[\"\\uFC41\"] = \"\\u0644\\u062E\";\n  t[\"\\uFC42\"] = \"\\u0644\\u0645\";\n  t[\"\\uFC43\"] = \"\\u0644\\u0649\";\n  t[\"\\uFC44\"] = \"\\u0644\\u064A\";\n  t[\"\\uFC45\"] = \"\\u0645\\u062C\";\n  t[\"\\uFC46\"] = \"\\u0645\\u062D\";\n  t[\"\\uFC47\"] = \"\\u0645\\u062E\";\n  t[\"\\uFC48\"] = \"\\u0645\\u0645\";\n  t[\"\\uFC49\"] = \"\\u0645\\u0649\";\n  t[\"\\uFC4A\"] = \"\\u0645\\u064A\";\n  t[\"\\uFC4B\"] = \"\\u0646\\u062C\";\n  t[\"\\uFC4C\"] = \"\\u0646\\u062D\";\n  t[\"\\uFC4D\"] = \"\\u0646\\u062E\";\n  t[\"\\uFC4E\"] = \"\\u0646\\u0645\";\n  t[\"\\uFC4F\"] = \"\\u0646\\u0649\";\n  t[\"\\uFC50\"] = \"\\u0646\\u064A\";\n  t[\"\\uFC51\"] = \"\\u0647\\u062C\";\n  t[\"\\uFC52\"] = \"\\u0647\\u0645\";\n  t[\"\\uFC53\"] = \"\\u0647\\u0649\";\n  t[\"\\uFC54\"] = \"\\u0647\\u064A\";\n  t[\"\\uFC55\"] = \"\\u064A\\u062C\";\n  t[\"\\uFC56\"] = \"\\u064A\\u062D\";\n  t[\"\\uFC57\"] = \"\\u064A\\u062E\";\n  t[\"\\uFC58\"] = \"\\u064A\\u0645\";\n  t[\"\\uFC59\"] = \"\\u064A\\u0649\";\n  t[\"\\uFC5A\"] = \"\\u064A\\u064A\";\n  t[\"\\uFC5B\"] = \"\\u0630\\u0670\";\n  t[\"\\uFC5C\"] = \"\\u0631\\u0670\";\n  t[\"\\uFC5D\"] = \"\\u0649\\u0670\";\n  t[\"\\uFC5E\"] = \"\\u0020\\u064C\\u0651\";\n  t[\"\\uFC5F\"] = \"\\u0020\\u064D\\u0651\";\n  t[\"\\uFC60\"] = \"\\u0020\\u064E\\u0651\";\n  t[\"\\uFC61\"] = \"\\u0020\\u064F\\u0651\";\n  t[\"\\uFC62\"] = \"\\u0020\\u0650\\u0651\";\n  t[\"\\uFC63\"] = \"\\u0020\\u0651\\u0670\";\n  t[\"\\uFC64\"] = \"\\u0626\\u0631\";\n  t[\"\\uFC65\"] = \"\\u0626\\u0632\";\n  t[\"\\uFC66\"] = \"\\u0626\\u0645\";\n  t[\"\\uFC67\"] = \"\\u0626\\u0646\";\n  t[\"\\uFC68\"] = \"\\u0626\\u0649\";\n  t[\"\\uFC69\"] = \"\\u0626\\u064A\";\n  t[\"\\uFC6A\"] = \"\\u0628\\u0631\";\n  t[\"\\uFC6B\"] = \"\\u0628\\u0632\";\n  t[\"\\uFC6C\"] = \"\\u0628\\u0645\";\n  t[\"\\uFC6D\"] = \"\\u0628\\u0646\";\n  t[\"\\uFC6E\"] = \"\\u0628\\u0649\";\n  t[\"\\uFC6F\"] = \"\\u0628\\u064A\";\n  t[\"\\uFC70\"] = \"\\u062A\\u0631\";\n  t[\"\\uFC71\"] = \"\\u062A\\u0632\";\n  t[\"\\uFC72\"] = \"\\u062A\\u0645\";\n  t[\"\\uFC73\"] = \"\\u062A\\u0646\";\n  t[\"\\uFC74\"] = \"\\u062A\\u0649\";\n  t[\"\\uFC75\"] = \"\\u062A\\u064A\";\n  t[\"\\uFC76\"] = \"\\u062B\\u0631\";\n  t[\"\\uFC77\"] = \"\\u062B\\u0632\";\n  t[\"\\uFC78\"] = \"\\u062B\\u0645\";\n  t[\"\\uFC79\"] = \"\\u062B\\u0646\";\n  t[\"\\uFC7A\"] = \"\\u062B\\u0649\";\n  t[\"\\uFC7B\"] = \"\\u062B\\u064A\";\n  t[\"\\uFC7C\"] = \"\\u0641\\u0649\";\n  t[\"\\uFC7D\"] = \"\\u0641\\u064A\";\n  t[\"\\uFC7E\"] = \"\\u0642\\u0649\";\n  t[\"\\uFC7F\"] = \"\\u0642\\u064A\";\n  t[\"\\uFC80\"] = \"\\u0643\\u0627\";\n  t[\"\\uFC81\"] = \"\\u0643\\u0644\";\n  t[\"\\uFC82\"] = \"\\u0643\\u0645\";\n  t[\"\\uFC83\"] = \"\\u0643\\u0649\";\n  t[\"\\uFC84\"] = \"\\u0643\\u064A\";\n  t[\"\\uFC85\"] = \"\\u0644\\u0645\";\n  t[\"\\uFC86\"] = \"\\u0644\\u0649\";\n  t[\"\\uFC87\"] = \"\\u0644\\u064A\";\n  t[\"\\uFC88\"] = \"\\u0645\\u0627\";\n  t[\"\\uFC89\"] = \"\\u0645\\u0645\";\n  t[\"\\uFC8A\"] = \"\\u0646\\u0631\";\n  t[\"\\uFC8B\"] = \"\\u0646\\u0632\";\n  t[\"\\uFC8C\"] = \"\\u0646\\u0645\";\n  t[\"\\uFC8D\"] = \"\\u0646\\u0646\";\n  t[\"\\uFC8E\"] = \"\\u0646\\u0649\";\n  t[\"\\uFC8F\"] = \"\\u0646\\u064A\";\n  t[\"\\uFC90\"] = \"\\u0649\\u0670\";\n  t[\"\\uFC91\"] = \"\\u064A\\u0631\";\n  t[\"\\uFC92\"] = \"\\u064A\\u0632\";\n  t[\"\\uFC93\"] = \"\\u064A\\u0645\";\n  t[\"\\uFC94\"] = \"\\u064A\\u0646\";\n  t[\"\\uFC95\"] = \"\\u064A\\u0649\";\n  t[\"\\uFC96\"] = \"\\u064A\\u064A\";\n  t[\"\\uFC97\"] = \"\\u0626\\u062C\";\n  t[\"\\uFC98\"] = \"\\u0626\\u062D\";\n  t[\"\\uFC99\"] = \"\\u0626\\u062E\";\n  t[\"\\uFC9A\"] = \"\\u0626\\u0645\";\n  t[\"\\uFC9B\"] = \"\\u0626\\u0647\";\n  t[\"\\uFC9C\"] = \"\\u0628\\u062C\";\n  t[\"\\uFC9D\"] = \"\\u0628\\u062D\";\n  t[\"\\uFC9E\"] = \"\\u0628\\u062E\";\n  t[\"\\uFC9F\"] = \"\\u0628\\u0645\";\n  t[\"\\uFCA0\"] = \"\\u0628\\u0647\";\n  t[\"\\uFCA1\"] = \"\\u062A\\u062C\";\n  t[\"\\uFCA2\"] = \"\\u062A\\u062D\";\n  t[\"\\uFCA3\"] = \"\\u062A\\u062E\";\n  t[\"\\uFCA4\"] = \"\\u062A\\u0645\";\n  t[\"\\uFCA5\"] = \"\\u062A\\u0647\";\n  t[\"\\uFCA6\"] = \"\\u062B\\u0645\";\n  t[\"\\uFCA7\"] = \"\\u062C\\u062D\";\n  t[\"\\uFCA8\"] = \"\\u062C\\u0645\";\n  t[\"\\uFCA9\"] = \"\\u062D\\u062C\";\n  t[\"\\uFCAA\"] = \"\\u062D\\u0645\";\n  t[\"\\uFCAB\"] = \"\\u062E\\u062C\";\n  t[\"\\uFCAC\"] = \"\\u062E\\u0645\";\n  t[\"\\uFCAD\"] = \"\\u0633\\u062C\";\n  t[\"\\uFCAE\"] = \"\\u0633\\u062D\";\n  t[\"\\uFCAF\"] = \"\\u0633\\u062E\";\n  t[\"\\uFCB0\"] = \"\\u0633\\u0645\";\n  t[\"\\uFCB1\"] = \"\\u0635\\u062D\";\n  t[\"\\uFCB2\"] = \"\\u0635\\u062E\";\n  t[\"\\uFCB3\"] = \"\\u0635\\u0645\";\n  t[\"\\uFCB4\"] = \"\\u0636\\u062C\";\n  t[\"\\uFCB5\"] = \"\\u0636\\u062D\";\n  t[\"\\uFCB6\"] = \"\\u0636\\u062E\";\n  t[\"\\uFCB7\"] = \"\\u0636\\u0645\";\n  t[\"\\uFCB8\"] = \"\\u0637\\u062D\";\n  t[\"\\uFCB9\"] = \"\\u0638\\u0645\";\n  t[\"\\uFCBA\"] = \"\\u0639\\u062C\";\n  t[\"\\uFCBB\"] = \"\\u0639\\u0645\";\n  t[\"\\uFCBC\"] = \"\\u063A\\u062C\";\n  t[\"\\uFCBD\"] = \"\\u063A\\u0645\";\n  t[\"\\uFCBE\"] = \"\\u0641\\u062C\";\n  t[\"\\uFCBF\"] = \"\\u0641\\u062D\";\n  t[\"\\uFCC0\"] = \"\\u0641\\u062E\";\n  t[\"\\uFCC1\"] = \"\\u0641\\u0645\";\n  t[\"\\uFCC2\"] = \"\\u0642\\u062D\";\n  t[\"\\uFCC3\"] = \"\\u0642\\u0645\";\n  t[\"\\uFCC4\"] = \"\\u0643\\u062C\";\n  t[\"\\uFCC5\"] = \"\\u0643\\u062D\";\n  t[\"\\uFCC6\"] = \"\\u0643\\u062E\";\n  t[\"\\uFCC7\"] = \"\\u0643\\u0644\";\n  t[\"\\uFCC8\"] = \"\\u0643\\u0645\";\n  t[\"\\uFCC9\"] = \"\\u0644\\u062C\";\n  t[\"\\uFCCA\"] = \"\\u0644\\u062D\";\n  t[\"\\uFCCB\"] = \"\\u0644\\u062E\";\n  t[\"\\uFCCC\"] = \"\\u0644\\u0645\";\n  t[\"\\uFCCD\"] = \"\\u0644\\u0647\";\n  t[\"\\uFCCE\"] = \"\\u0645\\u062C\";\n  t[\"\\uFCCF\"] = \"\\u0645\\u062D\";\n  t[\"\\uFCD0\"] = \"\\u0645\\u062E\";\n  t[\"\\uFCD1\"] = \"\\u0645\\u0645\";\n  t[\"\\uFCD2\"] = \"\\u0646\\u062C\";\n  t[\"\\uFCD3\"] = \"\\u0646\\u062D\";\n  t[\"\\uFCD4\"] = \"\\u0646\\u062E\";\n  t[\"\\uFCD5\"] = \"\\u0646\\u0645\";\n  t[\"\\uFCD6\"] = \"\\u0646\\u0647\";\n  t[\"\\uFCD7\"] = \"\\u0647\\u062C\";\n  t[\"\\uFCD8\"] = \"\\u0647\\u0645\";\n  t[\"\\uFCD9\"] = \"\\u0647\\u0670\";\n  t[\"\\uFCDA\"] = \"\\u064A\\u062C\";\n  t[\"\\uFCDB\"] = \"\\u064A\\u062D\";\n  t[\"\\uFCDC\"] = \"\\u064A\\u062E\";\n  t[\"\\uFCDD\"] = \"\\u064A\\u0645\";\n  t[\"\\uFCDE\"] = \"\\u064A\\u0647\";\n  t[\"\\uFCDF\"] = \"\\u0626\\u0645\";\n  t[\"\\uFCE0\"] = \"\\u0626\\u0647\";\n  t[\"\\uFCE1\"] = \"\\u0628\\u0645\";\n  t[\"\\uFCE2\"] = \"\\u0628\\u0647\";\n  t[\"\\uFCE3\"] = \"\\u062A\\u0645\";\n  t[\"\\uFCE4\"] = \"\\u062A\\u0647\";\n  t[\"\\uFCE5\"] = \"\\u062B\\u0645\";\n  t[\"\\uFCE6\"] = \"\\u062B\\u0647\";\n  t[\"\\uFCE7\"] = \"\\u0633\\u0645\";\n  t[\"\\uFCE8\"] = \"\\u0633\\u0647\";\n  t[\"\\uFCE9\"] = \"\\u0634\\u0645\";\n  t[\"\\uFCEA\"] = \"\\u0634\\u0647\";\n  t[\"\\uFCEB\"] = \"\\u0643\\u0644\";\n  t[\"\\uFCEC\"] = \"\\u0643\\u0645\";\n  t[\"\\uFCED\"] = \"\\u0644\\u0645\";\n  t[\"\\uFCEE\"] = \"\\u0646\\u0645\";\n  t[\"\\uFCEF\"] = \"\\u0646\\u0647\";\n  t[\"\\uFCF0\"] = \"\\u064A\\u0645\";\n  t[\"\\uFCF1\"] = \"\\u064A\\u0647\";\n  t[\"\\uFCF2\"] = \"\\u0640\\u064E\\u0651\";\n  t[\"\\uFCF3\"] = \"\\u0640\\u064F\\u0651\";\n  t[\"\\uFCF4\"] = \"\\u0640\\u0650\\u0651\";\n  t[\"\\uFCF5\"] = \"\\u0637\\u0649\";\n  t[\"\\uFCF6\"] = \"\\u0637\\u064A\";\n  t[\"\\uFCF7\"] = \"\\u0639\\u0649\";\n  t[\"\\uFCF8\"] = \"\\u0639\\u064A\";\n  t[\"\\uFCF9\"] = \"\\u063A\\u0649\";\n  t[\"\\uFCFA\"] = \"\\u063A\\u064A\";\n  t[\"\\uFCFB\"] = \"\\u0633\\u0649\";\n  t[\"\\uFCFC\"] = \"\\u0633\\u064A\";\n  t[\"\\uFCFD\"] = \"\\u0634\\u0649\";\n  t[\"\\uFCFE\"] = \"\\u0634\\u064A\";\n  t[\"\\uFCFF\"] = \"\\u062D\\u0649\";\n  t[\"\\uFD00\"] = \"\\u062D\\u064A\";\n  t[\"\\uFD01\"] = \"\\u062C\\u0649\";\n  t[\"\\uFD02\"] = \"\\u062C\\u064A\";\n  t[\"\\uFD03\"] = \"\\u062E\\u0649\";\n  t[\"\\uFD04\"] = \"\\u062E\\u064A\";\n  t[\"\\uFD05\"] = \"\\u0635\\u0649\";\n  t[\"\\uFD06\"] = \"\\u0635\\u064A\";\n  t[\"\\uFD07\"] = \"\\u0636\\u0649\";\n  t[\"\\uFD08\"] = \"\\u0636\\u064A\";\n  t[\"\\uFD09\"] = \"\\u0634\\u062C\";\n  t[\"\\uFD0A\"] = \"\\u0634\\u062D\";\n  t[\"\\uFD0B\"] = \"\\u0634\\u062E\";\n  t[\"\\uFD0C\"] = \"\\u0634\\u0645\";\n  t[\"\\uFD0D\"] = \"\\u0634\\u0631\";\n  t[\"\\uFD0E\"] = \"\\u0633\\u0631\";\n  t[\"\\uFD0F\"] = \"\\u0635\\u0631\";\n  t[\"\\uFD10\"] = \"\\u0636\\u0631\";\n  t[\"\\uFD11\"] = \"\\u0637\\u0649\";\n  t[\"\\uFD12\"] = \"\\u0637\\u064A\";\n  t[\"\\uFD13\"] = \"\\u0639\\u0649\";\n  t[\"\\uFD14\"] = \"\\u0639\\u064A\";\n  t[\"\\uFD15\"] = \"\\u063A\\u0649\";\n  t[\"\\uFD16\"] = \"\\u063A\\u064A\";\n  t[\"\\uFD17\"] = \"\\u0633\\u0649\";\n  t[\"\\uFD18\"] = \"\\u0633\\u064A\";\n  t[\"\\uFD19\"] = \"\\u0634\\u0649\";\n  t[\"\\uFD1A\"] = \"\\u0634\\u064A\";\n  t[\"\\uFD1B\"] = \"\\u062D\\u0649\";\n  t[\"\\uFD1C\"] = \"\\u062D\\u064A\";\n  t[\"\\uFD1D\"] = \"\\u062C\\u0649\";\n  t[\"\\uFD1E\"] = \"\\u062C\\u064A\";\n  t[\"\\uFD1F\"] = \"\\u062E\\u0649\";\n  t[\"\\uFD20\"] = \"\\u062E\\u064A\";\n  t[\"\\uFD21\"] = \"\\u0635\\u0649\";\n  t[\"\\uFD22\"] = \"\\u0635\\u064A\";\n  t[\"\\uFD23\"] = \"\\u0636\\u0649\";\n  t[\"\\uFD24\"] = \"\\u0636\\u064A\";\n  t[\"\\uFD25\"] = \"\\u0634\\u062C\";\n  t[\"\\uFD26\"] = \"\\u0634\\u062D\";\n  t[\"\\uFD27\"] = \"\\u0634\\u062E\";\n  t[\"\\uFD28\"] = \"\\u0634\\u0645\";\n  t[\"\\uFD29\"] = \"\\u0634\\u0631\";\n  t[\"\\uFD2A\"] = \"\\u0633\\u0631\";\n  t[\"\\uFD2B\"] = \"\\u0635\\u0631\";\n  t[\"\\uFD2C\"] = \"\\u0636\\u0631\";\n  t[\"\\uFD2D\"] = \"\\u0634\\u062C\";\n  t[\"\\uFD2E\"] = \"\\u0634\\u062D\";\n  t[\"\\uFD2F\"] = \"\\u0634\\u062E\";\n  t[\"\\uFD30\"] = \"\\u0634\\u0645\";\n  t[\"\\uFD31\"] = \"\\u0633\\u0647\";\n  t[\"\\uFD32\"] = \"\\u0634\\u0647\";\n  t[\"\\uFD33\"] = \"\\u0637\\u0645\";\n  t[\"\\uFD34\"] = \"\\u0633\\u062C\";\n  t[\"\\uFD35\"] = \"\\u0633\\u062D\";\n  t[\"\\uFD36\"] = \"\\u0633\\u062E\";\n  t[\"\\uFD37\"] = \"\\u0634\\u062C\";\n  t[\"\\uFD38\"] = \"\\u0634\\u062D\";\n  t[\"\\uFD39\"] = \"\\u0634\\u062E\";\n  t[\"\\uFD3A\"] = \"\\u0637\\u0645\";\n  t[\"\\uFD3B\"] = \"\\u0638\\u0645\";\n  t[\"\\uFD3C\"] = \"\\u0627\\u064B\";\n  t[\"\\uFD3D\"] = \"\\u0627\\u064B\";\n  t[\"\\uFD50\"] = \"\\u062A\\u062C\\u0645\";\n  t[\"\\uFD51\"] = \"\\u062A\\u062D\\u062C\";\n  t[\"\\uFD52\"] = \"\\u062A\\u062D\\u062C\";\n  t[\"\\uFD53\"] = \"\\u062A\\u062D\\u0645\";\n  t[\"\\uFD54\"] = \"\\u062A\\u062E\\u0645\";\n  t[\"\\uFD55\"] = \"\\u062A\\u0645\\u062C\";\n  t[\"\\uFD56\"] = \"\\u062A\\u0645\\u062D\";\n  t[\"\\uFD57\"] = \"\\u062A\\u0645\\u062E\";\n  t[\"\\uFD58\"] = \"\\u062C\\u0645\\u062D\";\n  t[\"\\uFD59\"] = \"\\u062C\\u0645\\u062D\";\n  t[\"\\uFD5A\"] = \"\\u062D\\u0645\\u064A\";\n  t[\"\\uFD5B\"] = \"\\u062D\\u0645\\u0649\";\n  t[\"\\uFD5C\"] = \"\\u0633\\u062D\\u062C\";\n  t[\"\\uFD5D\"] = \"\\u0633\\u062C\\u062D\";\n  t[\"\\uFD5E\"] = \"\\u0633\\u062C\\u0649\";\n  t[\"\\uFD5F\"] = \"\\u0633\\u0645\\u062D\";\n  t[\"\\uFD60\"] = \"\\u0633\\u0645\\u062D\";\n  t[\"\\uFD61\"] = \"\\u0633\\u0645\\u062C\";\n  t[\"\\uFD62\"] = \"\\u0633\\u0645\\u0645\";\n  t[\"\\uFD63\"] = \"\\u0633\\u0645\\u0645\";\n  t[\"\\uFD64\"] = \"\\u0635\\u062D\\u062D\";\n  t[\"\\uFD65\"] = \"\\u0635\\u062D\\u062D\";\n  t[\"\\uFD66\"] = \"\\u0635\\u0645\\u0645\";\n  t[\"\\uFD67\"] = \"\\u0634\\u062D\\u0645\";\n  t[\"\\uFD68\"] = \"\\u0634\\u062D\\u0645\";\n  t[\"\\uFD69\"] = \"\\u0634\\u062C\\u064A\";\n  t[\"\\uFD6A\"] = \"\\u0634\\u0645\\u062E\";\n  t[\"\\uFD6B\"] = \"\\u0634\\u0645\\u062E\";\n  t[\"\\uFD6C\"] = \"\\u0634\\u0645\\u0645\";\n  t[\"\\uFD6D\"] = \"\\u0634\\u0645\\u0645\";\n  t[\"\\uFD6E\"] = \"\\u0636\\u062D\\u0649\";\n  t[\"\\uFD6F\"] = \"\\u0636\\u062E\\u0645\";\n  t[\"\\uFD70\"] = \"\\u0636\\u062E\\u0645\";\n  t[\"\\uFD71\"] = \"\\u0637\\u0645\\u062D\";\n  t[\"\\uFD72\"] = \"\\u0637\\u0645\\u062D\";\n  t[\"\\uFD73\"] = \"\\u0637\\u0645\\u0645\";\n  t[\"\\uFD74\"] = \"\\u0637\\u0645\\u064A\";\n  t[\"\\uFD75\"] = \"\\u0639\\u062C\\u0645\";\n  t[\"\\uFD76\"] = \"\\u0639\\u0645\\u0645\";\n  t[\"\\uFD77\"] = \"\\u0639\\u0645\\u0645\";\n  t[\"\\uFD78\"] = \"\\u0639\\u0645\\u0649\";\n  t[\"\\uFD79\"] = \"\\u063A\\u0645\\u0645\";\n  t[\"\\uFD7A\"] = \"\\u063A\\u0645\\u064A\";\n  t[\"\\uFD7B\"] = \"\\u063A\\u0645\\u0649\";\n  t[\"\\uFD7C\"] = \"\\u0641\\u062E\\u0645\";\n  t[\"\\uFD7D\"] = \"\\u0641\\u062E\\u0645\";\n  t[\"\\uFD7E\"] = \"\\u0642\\u0645\\u062D\";\n  t[\"\\uFD7F\"] = \"\\u0642\\u0645\\u0645\";\n  t[\"\\uFD80\"] = \"\\u0644\\u062D\\u0645\";\n  t[\"\\uFD81\"] = \"\\u0644\\u062D\\u064A\";\n  t[\"\\uFD82\"] = \"\\u0644\\u062D\\u0649\";\n  t[\"\\uFD83\"] = \"\\u0644\\u062C\\u062C\";\n  t[\"\\uFD84\"] = \"\\u0644\\u062C\\u062C\";\n  t[\"\\uFD85\"] = \"\\u0644\\u062E\\u0645\";\n  t[\"\\uFD86\"] = \"\\u0644\\u062E\\u0645\";\n  t[\"\\uFD87\"] = \"\\u0644\\u0645\\u062D\";\n  t[\"\\uFD88\"] = \"\\u0644\\u0645\\u062D\";\n  t[\"\\uFD89\"] = \"\\u0645\\u062D\\u062C\";\n  t[\"\\uFD8A\"] = \"\\u0645\\u062D\\u0645\";\n  t[\"\\uFD8B\"] = \"\\u0645\\u062D\\u064A\";\n  t[\"\\uFD8C\"] = \"\\u0645\\u062C\\u062D\";\n  t[\"\\uFD8D\"] = \"\\u0645\\u062C\\u0645\";\n  t[\"\\uFD8E\"] = \"\\u0645\\u062E\\u062C\";\n  t[\"\\uFD8F\"] = \"\\u0645\\u062E\\u0645\";\n  t[\"\\uFD92\"] = \"\\u0645\\u062C\\u062E\";\n  t[\"\\uFD93\"] = \"\\u0647\\u0645\\u062C\";\n  t[\"\\uFD94\"] = \"\\u0647\\u0645\\u0645\";\n  t[\"\\uFD95\"] = \"\\u0646\\u062D\\u0645\";\n  t[\"\\uFD96\"] = \"\\u0646\\u062D\\u0649\";\n  t[\"\\uFD97\"] = \"\\u0646\\u062C\\u0645\";\n  t[\"\\uFD98\"] = \"\\u0646\\u062C\\u0645\";\n  t[\"\\uFD99\"] = \"\\u0646\\u062C\\u0649\";\n  t[\"\\uFD9A\"] = \"\\u0646\\u0645\\u064A\";\n  t[\"\\uFD9B\"] = \"\\u0646\\u0645\\u0649\";\n  t[\"\\uFD9C\"] = \"\\u064A\\u0645\\u0645\";\n  t[\"\\uFD9D\"] = \"\\u064A\\u0645\\u0645\";\n  t[\"\\uFD9E\"] = \"\\u0628\\u062E\\u064A\";\n  t[\"\\uFD9F\"] = \"\\u062A\\u062C\\u064A\";\n  t[\"\\uFDA0\"] = \"\\u062A\\u062C\\u0649\";\n  t[\"\\uFDA1\"] = \"\\u062A\\u062E\\u064A\";\n  t[\"\\uFDA2\"] = \"\\u062A\\u062E\\u0649\";\n  t[\"\\uFDA3\"] = \"\\u062A\\u0645\\u064A\";\n  t[\"\\uFDA4\"] = \"\\u062A\\u0645\\u0649\";\n  t[\"\\uFDA5\"] = \"\\u062C\\u0645\\u064A\";\n  t[\"\\uFDA6\"] = \"\\u062C\\u062D\\u0649\";\n  t[\"\\uFDA7\"] = \"\\u062C\\u0645\\u0649\";\n  t[\"\\uFDA8\"] = \"\\u0633\\u062E\\u0649\";\n  t[\"\\uFDA9\"] = \"\\u0635\\u062D\\u064A\";\n  t[\"\\uFDAA\"] = \"\\u0634\\u062D\\u064A\";\n  t[\"\\uFDAB\"] = \"\\u0636\\u062D\\u064A\";\n  t[\"\\uFDAC\"] = \"\\u0644\\u062C\\u064A\";\n  t[\"\\uFDAD\"] = \"\\u0644\\u0645\\u064A\";\n  t[\"\\uFDAE\"] = \"\\u064A\\u062D\\u064A\";\n  t[\"\\uFDAF\"] = \"\\u064A\\u062C\\u064A\";\n  t[\"\\uFDB0\"] = \"\\u064A\\u0645\\u064A\";\n  t[\"\\uFDB1\"] = \"\\u0645\\u0645\\u064A\";\n  t[\"\\uFDB2\"] = \"\\u0642\\u0645\\u064A\";\n  t[\"\\uFDB3\"] = \"\\u0646\\u062D\\u064A\";\n  t[\"\\uFDB4\"] = \"\\u0642\\u0645\\u062D\";\n  t[\"\\uFDB5\"] = \"\\u0644\\u062D\\u0645\";\n  t[\"\\uFDB6\"] = \"\\u0639\\u0645\\u064A\";\n  t[\"\\uFDB7\"] = \"\\u0643\\u0645\\u064A\";\n  t[\"\\uFDB8\"] = \"\\u0646\\u062C\\u062D\";\n  t[\"\\uFDB9\"] = \"\\u0645\\u062E\\u064A\";\n  t[\"\\uFDBA\"] = \"\\u0644\\u062C\\u0645\";\n  t[\"\\uFDBB\"] = \"\\u0643\\u0645\\u0645\";\n  t[\"\\uFDBC\"] = \"\\u0644\\u062C\\u0645\";\n  t[\"\\uFDBD\"] = \"\\u0646\\u062C\\u062D\";\n  t[\"\\uFDBE\"] = \"\\u062C\\u062D\\u064A\";\n  t[\"\\uFDBF\"] = \"\\u062D\\u062C\\u064A\";\n  t[\"\\uFDC0\"] = \"\\u0645\\u062C\\u064A\";\n  t[\"\\uFDC1\"] = \"\\u0641\\u0645\\u064A\";\n  t[\"\\uFDC2\"] = \"\\u0628\\u062D\\u064A\";\n  t[\"\\uFDC3\"] = \"\\u0643\\u0645\\u0645\";\n  t[\"\\uFDC4\"] = \"\\u0639\\u062C\\u0645\";\n  t[\"\\uFDC5\"] = \"\\u0635\\u0645\\u0645\";\n  t[\"\\uFDC6\"] = \"\\u0633\\u062E\\u064A\";\n  t[\"\\uFDC7\"] = \"\\u0646\\u062C\\u064A\";\n  t[\"\\uFE49\"] = \"\\u203E\";\n  t[\"\\uFE4A\"] = \"\\u203E\";\n  t[\"\\uFE4B\"] = \"\\u203E\";\n  t[\"\\uFE4C\"] = \"\\u203E\";\n  t[\"\\uFE4D\"] = \"\\u005F\";\n  t[\"\\uFE4E\"] = \"\\u005F\";\n  t[\"\\uFE4F\"] = \"\\u005F\";\n  t[\"\\uFE80\"] = \"\\u0621\";\n  t[\"\\uFE81\"] = \"\\u0622\";\n  t[\"\\uFE82\"] = \"\\u0622\";\n  t[\"\\uFE83\"] = \"\\u0623\";\n  t[\"\\uFE84\"] = \"\\u0623\";\n  t[\"\\uFE85\"] = \"\\u0624\";\n  t[\"\\uFE86\"] = \"\\u0624\";\n  t[\"\\uFE87\"] = \"\\u0625\";\n  t[\"\\uFE88\"] = \"\\u0625\";\n  t[\"\\uFE89\"] = \"\\u0626\";\n  t[\"\\uFE8A\"] = \"\\u0626\";\n  t[\"\\uFE8B\"] = \"\\u0626\";\n  t[\"\\uFE8C\"] = \"\\u0626\";\n  t[\"\\uFE8D\"] = \"\\u0627\";\n  t[\"\\uFE8E\"] = \"\\u0627\";\n  t[\"\\uFE8F\"] = \"\\u0628\";\n  t[\"\\uFE90\"] = \"\\u0628\";\n  t[\"\\uFE91\"] = \"\\u0628\";\n  t[\"\\uFE92\"] = \"\\u0628\";\n  t[\"\\uFE93\"] = \"\\u0629\";\n  t[\"\\uFE94\"] = \"\\u0629\";\n  t[\"\\uFE95\"] = \"\\u062A\";\n  t[\"\\uFE96\"] = \"\\u062A\";\n  t[\"\\uFE97\"] = \"\\u062A\";\n  t[\"\\uFE98\"] = \"\\u062A\";\n  t[\"\\uFE99\"] = \"\\u062B\";\n  t[\"\\uFE9A\"] = \"\\u062B\";\n  t[\"\\uFE9B\"] = \"\\u062B\";\n  t[\"\\uFE9C\"] = \"\\u062B\";\n  t[\"\\uFE9D\"] = \"\\u062C\";\n  t[\"\\uFE9E\"] = \"\\u062C\";\n  t[\"\\uFE9F\"] = \"\\u062C\";\n  t[\"\\uFEA0\"] = \"\\u062C\";\n  t[\"\\uFEA1\"] = \"\\u062D\";\n  t[\"\\uFEA2\"] = \"\\u062D\";\n  t[\"\\uFEA3\"] = \"\\u062D\";\n  t[\"\\uFEA4\"] = \"\\u062D\";\n  t[\"\\uFEA5\"] = \"\\u062E\";\n  t[\"\\uFEA6\"] = \"\\u062E\";\n  t[\"\\uFEA7\"] = \"\\u062E\";\n  t[\"\\uFEA8\"] = \"\\u062E\";\n  t[\"\\uFEA9\"] = \"\\u062F\";\n  t[\"\\uFEAA\"] = \"\\u062F\";\n  t[\"\\uFEAB\"] = \"\\u0630\";\n  t[\"\\uFEAC\"] = \"\\u0630\";\n  t[\"\\uFEAD\"] = \"\\u0631\";\n  t[\"\\uFEAE\"] = \"\\u0631\";\n  t[\"\\uFEAF\"] = \"\\u0632\";\n  t[\"\\uFEB0\"] = \"\\u0632\";\n  t[\"\\uFEB1\"] = \"\\u0633\";\n  t[\"\\uFEB2\"] = \"\\u0633\";\n  t[\"\\uFEB3\"] = \"\\u0633\";\n  t[\"\\uFEB4\"] = \"\\u0633\";\n  t[\"\\uFEB5\"] = \"\\u0634\";\n  t[\"\\uFEB6\"] = \"\\u0634\";\n  t[\"\\uFEB7\"] = \"\\u0634\";\n  t[\"\\uFEB8\"] = \"\\u0634\";\n  t[\"\\uFEB9\"] = \"\\u0635\";\n  t[\"\\uFEBA\"] = \"\\u0635\";\n  t[\"\\uFEBB\"] = \"\\u0635\";\n  t[\"\\uFEBC\"] = \"\\u0635\";\n  t[\"\\uFEBD\"] = \"\\u0636\";\n  t[\"\\uFEBE\"] = \"\\u0636\";\n  t[\"\\uFEBF\"] = \"\\u0636\";\n  t[\"\\uFEC0\"] = \"\\u0636\";\n  t[\"\\uFEC1\"] = \"\\u0637\";\n  t[\"\\uFEC2\"] = \"\\u0637\";\n  t[\"\\uFEC3\"] = \"\\u0637\";\n  t[\"\\uFEC4\"] = \"\\u0637\";\n  t[\"\\uFEC5\"] = \"\\u0638\";\n  t[\"\\uFEC6\"] = \"\\u0638\";\n  t[\"\\uFEC7\"] = \"\\u0638\";\n  t[\"\\uFEC8\"] = \"\\u0638\";\n  t[\"\\uFEC9\"] = \"\\u0639\";\n  t[\"\\uFECA\"] = \"\\u0639\";\n  t[\"\\uFECB\"] = \"\\u0639\";\n  t[\"\\uFECC\"] = \"\\u0639\";\n  t[\"\\uFECD\"] = \"\\u063A\";\n  t[\"\\uFECE\"] = \"\\u063A\";\n  t[\"\\uFECF\"] = \"\\u063A\";\n  t[\"\\uFED0\"] = \"\\u063A\";\n  t[\"\\uFED1\"] = \"\\u0641\";\n  t[\"\\uFED2\"] = \"\\u0641\";\n  t[\"\\uFED3\"] = \"\\u0641\";\n  t[\"\\uFED4\"] = \"\\u0641\";\n  t[\"\\uFED5\"] = \"\\u0642\";\n  t[\"\\uFED6\"] = \"\\u0642\";\n  t[\"\\uFED7\"] = \"\\u0642\";\n  t[\"\\uFED8\"] = \"\\u0642\";\n  t[\"\\uFED9\"] = \"\\u0643\";\n  t[\"\\uFEDA\"] = \"\\u0643\";\n  t[\"\\uFEDB\"] = \"\\u0643\";\n  t[\"\\uFEDC\"] = \"\\u0643\";\n  t[\"\\uFEDD\"] = \"\\u0644\";\n  t[\"\\uFEDE\"] = \"\\u0644\";\n  t[\"\\uFEDF\"] = \"\\u0644\";\n  t[\"\\uFEE0\"] = \"\\u0644\";\n  t[\"\\uFEE1\"] = \"\\u0645\";\n  t[\"\\uFEE2\"] = \"\\u0645\";\n  t[\"\\uFEE3\"] = \"\\u0645\";\n  t[\"\\uFEE4\"] = \"\\u0645\";\n  t[\"\\uFEE5\"] = \"\\u0646\";\n  t[\"\\uFEE6\"] = \"\\u0646\";\n  t[\"\\uFEE7\"] = \"\\u0646\";\n  t[\"\\uFEE8\"] = \"\\u0646\";\n  t[\"\\uFEE9\"] = \"\\u0647\";\n  t[\"\\uFEEA\"] = \"\\u0647\";\n  t[\"\\uFEEB\"] = \"\\u0647\";\n  t[\"\\uFEEC\"] = \"\\u0647\";\n  t[\"\\uFEED\"] = \"\\u0648\";\n  t[\"\\uFEEE\"] = \"\\u0648\";\n  t[\"\\uFEEF\"] = \"\\u0649\";\n  t[\"\\uFEF0\"] = \"\\u0649\";\n  t[\"\\uFEF1\"] = \"\\u064A\";\n  t[\"\\uFEF2\"] = \"\\u064A\";\n  t[\"\\uFEF3\"] = \"\\u064A\";\n  t[\"\\uFEF4\"] = \"\\u064A\";\n  t[\"\\uFEF5\"] = \"\\u0644\\u0622\";\n  t[\"\\uFEF6\"] = \"\\u0644\\u0622\";\n  t[\"\\uFEF7\"] = \"\\u0644\\u0623\";\n  t[\"\\uFEF8\"] = \"\\u0644\\u0623\";\n  t[\"\\uFEF9\"] = \"\\u0644\\u0625\";\n  t[\"\\uFEFA\"] = \"\\u0644\\u0625\";\n  t[\"\\uFEFB\"] = \"\\u0644\\u0627\";\n  t[\"\\uFEFC\"] = \"\\u0644\\u0627\";\n});\n\nfunction reverseIfRtl(chars) {\n  var charsLength = chars.length;\n  // Reverse an arabic ligature.\n  if (charsLength <= 1 || !isRTLRangeFor(chars.charCodeAt(0))) {\n    return chars;\n  }\n  var s = \"\";\n  for (var ii = charsLength - 1; ii >= 0; ii--) {\n    s += chars[ii];\n  }\n  return s;\n}\n\nexports.mapSpecialUnicodeValues = mapSpecialUnicodeValues;\nexports.reverseIfRtl = reverseIfRtl;\nexports.getUnicodeRangeFor = getUnicodeRangeFor;\nexports.getNormalizedUnicodes = getNormalizedUnicodes;\nexports.getUnicodeForGlyph = getUnicodeForGlyph;\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  bytesToString,\n  FONT_IDENTITY_MATRIX,\n  FormatError,\n  unreachable,\n  warn,\n} from \"../shared/util.js\";\nimport { CFFParser } from \"./cff_parser.js\";\nimport { getGlyphsUnicode } from \"./glyphlist.js\";\nimport { StandardEncoding } from \"./encodings.js\";\nimport { Stream } from \"./stream.js\";\n\nvar FontRendererFactory = (function FontRendererFactoryClosure() {\n  function getLong(data, offset) {\n    return (\n      (data[offset] << 24) |\n      (data[offset + 1] << 16) |\n      (data[offset + 2] << 8) |\n      data[offset + 3]\n    );\n  }\n\n  function getUshort(data, offset) {\n    return (data[offset] << 8) | data[offset + 1];\n  }\n\n  function getSubroutineBias(subrs) {\n    const numSubrs = subrs.length;\n    let bias = 32768;\n    if (numSubrs < 1240) {\n      bias = 107;\n    } else if (numSubrs < 33900) {\n      bias = 1131;\n    }\n    return bias;\n  }\n\n  function parseCmap(data, start, end) {\n    var offset =\n      getUshort(data, start + 2) === 1\n        ? getLong(data, start + 8)\n        : getLong(data, start + 16);\n    var format = getUshort(data, start + offset);\n    var ranges, p, i;\n    if (format === 4) {\n      getUshort(data, start + offset + 2); // length\n      var segCount = getUshort(data, start + offset + 6) >> 1;\n      p = start + offset + 14;\n      ranges = [];\n      for (i = 0; i < segCount; i++, p += 2) {\n        ranges[i] = { end: getUshort(data, p) };\n      }\n      p += 2;\n      for (i = 0; i < segCount; i++, p += 2) {\n        ranges[i].start = getUshort(data, p);\n      }\n      for (i = 0; i < segCount; i++, p += 2) {\n        ranges[i].idDelta = getUshort(data, p);\n      }\n      for (i = 0; i < segCount; i++, p += 2) {\n        var idOffset = getUshort(data, p);\n        if (idOffset === 0) {\n          continue;\n        }\n        ranges[i].ids = [];\n        for (var j = 0, jj = ranges[i].end - ranges[i].start + 1; j < jj; j++) {\n          ranges[i].ids[j] = getUshort(data, p + idOffset);\n          idOffset += 2;\n        }\n      }\n      return ranges;\n    } else if (format === 12) {\n      getLong(data, start + offset + 4); // length\n      var groups = getLong(data, start + offset + 12);\n      p = start + offset + 16;\n      ranges = [];\n      for (i = 0; i < groups; i++) {\n        ranges.push({\n          start: getLong(data, p),\n          end: getLong(data, p + 4),\n          idDelta: getLong(data, p + 8) - getLong(data, p),\n        });\n        p += 12;\n      }\n      return ranges;\n    }\n    throw new FormatError(`unsupported cmap: ${format}`);\n  }\n\n  function parseCff(data, start, end, seacAnalysisEnabled) {\n    var properties = {};\n    var parser = new CFFParser(\n      new Stream(data, start, end - start),\n      properties,\n      seacAnalysisEnabled\n    );\n    var cff = parser.parse();\n    return {\n      glyphs: cff.charStrings.objects,\n      subrs:\n        cff.topDict.privateDict &&\n        cff.topDict.privateDict.subrsIndex &&\n        cff.topDict.privateDict.subrsIndex.objects,\n      gsubrs: cff.globalSubrIndex && cff.globalSubrIndex.objects,\n      isCFFCIDFont: cff.isCIDFont,\n      fdSelect: cff.fdSelect,\n      fdArray: cff.fdArray,\n    };\n  }\n\n  function parseGlyfTable(glyf, loca, isGlyphLocationsLong) {\n    var itemSize, itemDecode;\n    if (isGlyphLocationsLong) {\n      itemSize = 4;\n      itemDecode = function fontItemDecodeLong(data, offset) {\n        return (\n          (data[offset] << 24) |\n          (data[offset + 1] << 16) |\n          (data[offset + 2] << 8) |\n          data[offset + 3]\n        );\n      };\n    } else {\n      itemSize = 2;\n      itemDecode = function fontItemDecode(data, offset) {\n        return (data[offset] << 9) | (data[offset + 1] << 1);\n      };\n    }\n    var glyphs = [];\n    var startOffset = itemDecode(loca, 0);\n    for (var j = itemSize; j < loca.length; j += itemSize) {\n      var endOffset = itemDecode(loca, j);\n      glyphs.push(glyf.subarray(startOffset, endOffset));\n      startOffset = endOffset;\n    }\n    return glyphs;\n  }\n\n  function lookupCmap(ranges, unicode) {\n    var code = unicode.codePointAt(0),\n      gid = 0;\n    var l = 0,\n      r = ranges.length - 1;\n    while (l < r) {\n      var c = (l + r + 1) >> 1;\n      if (code < ranges[c].start) {\n        r = c - 1;\n      } else {\n        l = c;\n      }\n    }\n    if (ranges[l].start <= code && code <= ranges[l].end) {\n      gid =\n        (ranges[l].idDelta +\n          (ranges[l].ids ? ranges[l].ids[code - ranges[l].start] : code)) &\n        0xffff;\n    }\n    return {\n      charCode: code,\n      glyphId: gid,\n    };\n  }\n\n  function compileGlyf(code, cmds, font) {\n    function moveTo(x, y) {\n      cmds.push({ cmd: \"moveTo\", args: [x, y] });\n    }\n    function lineTo(x, y) {\n      cmds.push({ cmd: \"lineTo\", args: [x, y] });\n    }\n    function quadraticCurveTo(xa, ya, x, y) {\n      cmds.push({ cmd: \"quadraticCurveTo\", args: [xa, ya, x, y] });\n    }\n\n    var i = 0;\n    var numberOfContours = ((code[i] << 24) | (code[i + 1] << 16)) >> 16;\n    var flags;\n    var x = 0,\n      y = 0;\n    i += 10;\n    if (numberOfContours < 0) {\n      // composite glyph\n      do {\n        flags = (code[i] << 8) | code[i + 1];\n        var glyphIndex = (code[i + 2] << 8) | code[i + 3];\n        i += 4;\n        var arg1, arg2;\n        if (flags & 0x01) {\n          arg1 = ((code[i] << 24) | (code[i + 1] << 16)) >> 16;\n          arg2 = ((code[i + 2] << 24) | (code[i + 3] << 16)) >> 16;\n          i += 4;\n        } else {\n          arg1 = code[i++];\n          arg2 = code[i++];\n        }\n        if (flags & 0x02) {\n          x = arg1;\n          y = arg2;\n        } else {\n          x = 0;\n          y = 0; // TODO \"they are points\" ?\n        }\n        var scaleX = 1,\n          scaleY = 1,\n          scale01 = 0,\n          scale10 = 0;\n        if (flags & 0x08) {\n          scaleX = scaleY =\n            ((code[i] << 24) | (code[i + 1] << 16)) / 1073741824;\n          i += 2;\n        } else if (flags & 0x40) {\n          scaleX = ((code[i] << 24) | (code[i + 1] << 16)) / 1073741824;\n          scaleY = ((code[i + 2] << 24) | (code[i + 3] << 16)) / 1073741824;\n          i += 4;\n        } else if (flags & 0x80) {\n          scaleX = ((code[i] << 24) | (code[i + 1] << 16)) / 1073741824;\n          scale01 = ((code[i + 2] << 24) | (code[i + 3] << 16)) / 1073741824;\n          scale10 = ((code[i + 4] << 24) | (code[i + 5] << 16)) / 1073741824;\n          scaleY = ((code[i + 6] << 24) | (code[i + 7] << 16)) / 1073741824;\n          i += 8;\n        }\n        var subglyph = font.glyphs[glyphIndex];\n        if (subglyph) {\n          cmds.push({ cmd: \"save\" });\n          cmds.push({\n            cmd: \"transform\",\n            args: [scaleX, scale01, scale10, scaleY, x, y],\n          });\n          compileGlyf(subglyph, cmds, font);\n          cmds.push({ cmd: \"restore\" });\n        }\n      } while (flags & 0x20);\n    } else {\n      // simple glyph\n      var endPtsOfContours = [];\n      var j, jj;\n      for (j = 0; j < numberOfContours; j++) {\n        endPtsOfContours.push((code[i] << 8) | code[i + 1]);\n        i += 2;\n      }\n      var instructionLength = (code[i] << 8) | code[i + 1];\n      i += 2 + instructionLength; // skipping the instructions\n      var numberOfPoints = endPtsOfContours[endPtsOfContours.length - 1] + 1;\n      var points = [];\n      while (points.length < numberOfPoints) {\n        flags = code[i++];\n        var repeat = 1;\n        if (flags & 0x08) {\n          repeat += code[i++];\n        }\n        while (repeat-- > 0) {\n          points.push({ flags });\n        }\n      }\n      for (j = 0; j < numberOfPoints; j++) {\n        switch (points[j].flags & 0x12) {\n          case 0x00:\n            x += ((code[i] << 24) | (code[i + 1] << 16)) >> 16;\n            i += 2;\n            break;\n          case 0x02:\n            x -= code[i++];\n            break;\n          case 0x12:\n            x += code[i++];\n            break;\n        }\n        points[j].x = x;\n      }\n      for (j = 0; j < numberOfPoints; j++) {\n        switch (points[j].flags & 0x24) {\n          case 0x00:\n            y += ((code[i] << 24) | (code[i + 1] << 16)) >> 16;\n            i += 2;\n            break;\n          case 0x04:\n            y -= code[i++];\n            break;\n          case 0x24:\n            y += code[i++];\n            break;\n        }\n        points[j].y = y;\n      }\n\n      var startPoint = 0;\n      for (i = 0; i < numberOfContours; i++) {\n        var endPoint = endPtsOfContours[i];\n        // contours might have implicit points, which is located in the middle\n        // between two neighboring off-curve points\n        var contour = points.slice(startPoint, endPoint + 1);\n        if (contour[0].flags & 1) {\n          contour.push(contour[0]); // using start point at the contour end\n        } else if (contour[contour.length - 1].flags & 1) {\n          // first is off-curve point, trying to use one from the end\n          contour.unshift(contour[contour.length - 1]);\n        } else {\n          // start and end are off-curve points, creating implicit one\n          var p = {\n            flags: 1,\n            x: (contour[0].x + contour[contour.length - 1].x) / 2,\n            y: (contour[0].y + contour[contour.length - 1].y) / 2,\n          };\n          contour.unshift(p);\n          contour.push(p);\n        }\n        moveTo(contour[0].x, contour[0].y);\n        for (j = 1, jj = contour.length; j < jj; j++) {\n          if (contour[j].flags & 1) {\n            lineTo(contour[j].x, contour[j].y);\n          } else if (contour[j + 1].flags & 1) {\n            quadraticCurveTo(\n              contour[j].x,\n              contour[j].y,\n              contour[j + 1].x,\n              contour[j + 1].y\n            );\n            j++;\n          } else {\n            quadraticCurveTo(\n              contour[j].x,\n              contour[j].y,\n              (contour[j].x + contour[j + 1].x) / 2,\n              (contour[j].y + contour[j + 1].y) / 2\n            );\n          }\n        }\n        startPoint = endPoint + 1;\n      }\n    }\n  }\n\n  function compileCharString(charStringCode, cmds, font, glyphId) {\n    function moveTo(x, y) {\n      cmds.push({ cmd: \"moveTo\", args: [x, y] });\n    }\n    function lineTo(x, y) {\n      cmds.push({ cmd: \"lineTo\", args: [x, y] });\n    }\n    function bezierCurveTo(x1, y1, x2, y2, x, y) {\n      cmds.push({ cmd: \"bezierCurveTo\", args: [x1, y1, x2, y2, x, y] });\n    }\n\n    var stack = [];\n    var x = 0,\n      y = 0;\n    var stems = 0;\n\n    function parse(code) {\n      var i = 0;\n      while (i < code.length) {\n        var stackClean = false;\n        var v = code[i++];\n        var xa, xb, ya, yb, y1, y2, y3, n, subrCode;\n        switch (v) {\n          case 1: // hstem\n            stems += stack.length >> 1;\n            stackClean = true;\n            break;\n          case 3: // vstem\n            stems += stack.length >> 1;\n            stackClean = true;\n            break;\n          case 4: // vmoveto\n            y += stack.pop();\n            moveTo(x, y);\n            stackClean = true;\n            break;\n          case 5: // rlineto\n            while (stack.length > 0) {\n              x += stack.shift();\n              y += stack.shift();\n              lineTo(x, y);\n            }\n            break;\n          case 6: // hlineto\n            while (stack.length > 0) {\n              x += stack.shift();\n              lineTo(x, y);\n              if (stack.length === 0) {\n                break;\n              }\n              y += stack.shift();\n              lineTo(x, y);\n            }\n            break;\n          case 7: // vlineto\n            while (stack.length > 0) {\n              y += stack.shift();\n              lineTo(x, y);\n              if (stack.length === 0) {\n                break;\n              }\n              x += stack.shift();\n              lineTo(x, y);\n            }\n            break;\n          case 8: // rrcurveto\n            while (stack.length > 0) {\n              xa = x + stack.shift();\n              ya = y + stack.shift();\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              x = xb + stack.shift();\n              y = yb + stack.shift();\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n            }\n            break;\n          case 10: // callsubr\n            n = stack.pop();\n            subrCode = null;\n            if (font.isCFFCIDFont) {\n              const fdIndex = font.fdSelect.getFDIndex(glyphId);\n              if (fdIndex >= 0 && fdIndex < font.fdArray.length) {\n                const fontDict = font.fdArray[fdIndex];\n                let subrs;\n                if (fontDict.privateDict && fontDict.privateDict.subrsIndex) {\n                  subrs = fontDict.privateDict.subrsIndex.objects;\n                }\n                if (subrs) {\n                  // Add subroutine bias.\n                  n += getSubroutineBias(subrs);\n                  subrCode = subrs[n];\n                }\n              } else {\n                warn(\"Invalid fd index for glyph index.\");\n              }\n            } else {\n              subrCode = font.subrs[n + font.subrsBias];\n            }\n            if (subrCode) {\n              parse(subrCode);\n            }\n            break;\n          case 11: // return\n            return;\n          case 12:\n            v = code[i++];\n            switch (v) {\n              case 34: // flex\n                xa = x + stack.shift();\n                xb = xa + stack.shift();\n                y1 = y + stack.shift();\n                x = xb + stack.shift();\n                bezierCurveTo(xa, y, xb, y1, x, y1);\n                xa = x + stack.shift();\n                xb = xa + stack.shift();\n                x = xb + stack.shift();\n                bezierCurveTo(xa, y1, xb, y, x, y);\n                break;\n              case 35: // flex\n                xa = x + stack.shift();\n                ya = y + stack.shift();\n                xb = xa + stack.shift();\n                yb = ya + stack.shift();\n                x = xb + stack.shift();\n                y = yb + stack.shift();\n                bezierCurveTo(xa, ya, xb, yb, x, y);\n                xa = x + stack.shift();\n                ya = y + stack.shift();\n                xb = xa + stack.shift();\n                yb = ya + stack.shift();\n                x = xb + stack.shift();\n                y = yb + stack.shift();\n                bezierCurveTo(xa, ya, xb, yb, x, y);\n                stack.pop(); // fd\n                break;\n              case 36: // hflex1\n                xa = x + stack.shift();\n                y1 = y + stack.shift();\n                xb = xa + stack.shift();\n                y2 = y1 + stack.shift();\n                x = xb + stack.shift();\n                bezierCurveTo(xa, y1, xb, y2, x, y2);\n                xa = x + stack.shift();\n                xb = xa + stack.shift();\n                y3 = y2 + stack.shift();\n                x = xb + stack.shift();\n                bezierCurveTo(xa, y2, xb, y3, x, y);\n                break;\n              case 37: // flex1\n                var x0 = x,\n                  y0 = y;\n                xa = x + stack.shift();\n                ya = y + stack.shift();\n                xb = xa + stack.shift();\n                yb = ya + stack.shift();\n                x = xb + stack.shift();\n                y = yb + stack.shift();\n                bezierCurveTo(xa, ya, xb, yb, x, y);\n                xa = x + stack.shift();\n                ya = y + stack.shift();\n                xb = xa + stack.shift();\n                yb = ya + stack.shift();\n                x = xb;\n                y = yb;\n                if (Math.abs(x - x0) > Math.abs(y - y0)) {\n                  x += stack.shift();\n                } else {\n                  y += stack.shift();\n                }\n                bezierCurveTo(xa, ya, xb, yb, x, y);\n                break;\n              default:\n                throw new FormatError(`unknown operator: 12 ${v}`);\n            }\n            break;\n          case 14: // endchar\n            if (stack.length >= 4) {\n              var achar = stack.pop();\n              var bchar = stack.pop();\n              y = stack.pop();\n              x = stack.pop();\n              cmds.push({ cmd: \"save\" });\n              cmds.push({ cmd: \"translate\", args: [x, y] });\n              var cmap = lookupCmap(\n                font.cmap,\n                String.fromCharCode(font.glyphNameMap[StandardEncoding[achar]])\n              );\n              compileCharString(\n                font.glyphs[cmap.glyphId],\n                cmds,\n                font,\n                cmap.glyphId\n              );\n              cmds.push({ cmd: \"restore\" });\n\n              cmap = lookupCmap(\n                font.cmap,\n                String.fromCharCode(font.glyphNameMap[StandardEncoding[bchar]])\n              );\n              compileCharString(\n                font.glyphs[cmap.glyphId],\n                cmds,\n                font,\n                cmap.glyphId\n              );\n            }\n            return;\n          case 18: // hstemhm\n            stems += stack.length >> 1;\n            stackClean = true;\n            break;\n          case 19: // hintmask\n            stems += stack.length >> 1;\n            i += (stems + 7) >> 3;\n            stackClean = true;\n            break;\n          case 20: // cntrmask\n            stems += stack.length >> 1;\n            i += (stems + 7) >> 3;\n            stackClean = true;\n            break;\n          case 21: // rmoveto\n            y += stack.pop();\n            x += stack.pop();\n            moveTo(x, y);\n            stackClean = true;\n            break;\n          case 22: // hmoveto\n            x += stack.pop();\n            moveTo(x, y);\n            stackClean = true;\n            break;\n          case 23: // vstemhm\n            stems += stack.length >> 1;\n            stackClean = true;\n            break;\n          case 24: // rcurveline\n            while (stack.length > 2) {\n              xa = x + stack.shift();\n              ya = y + stack.shift();\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              x = xb + stack.shift();\n              y = yb + stack.shift();\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n            }\n            x += stack.shift();\n            y += stack.shift();\n            lineTo(x, y);\n            break;\n          case 25: // rlinecurve\n            while (stack.length > 6) {\n              x += stack.shift();\n              y += stack.shift();\n              lineTo(x, y);\n            }\n            xa = x + stack.shift();\n            ya = y + stack.shift();\n            xb = xa + stack.shift();\n            yb = ya + stack.shift();\n            x = xb + stack.shift();\n            y = yb + stack.shift();\n            bezierCurveTo(xa, ya, xb, yb, x, y);\n            break;\n          case 26: // vvcurveto\n            if (stack.length % 2) {\n              x += stack.shift();\n            }\n            while (stack.length > 0) {\n              xa = x;\n              ya = y + stack.shift();\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              x = xb;\n              y = yb + stack.shift();\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n            }\n            break;\n          case 27: // hhcurveto\n            if (stack.length % 2) {\n              y += stack.shift();\n            }\n            while (stack.length > 0) {\n              xa = x + stack.shift();\n              ya = y;\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              x = xb + stack.shift();\n              y = yb;\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n            }\n            break;\n          case 28:\n            stack.push(((code[i] << 24) | (code[i + 1] << 16)) >> 16);\n            i += 2;\n            break;\n          case 29: // callgsubr\n            n = stack.pop() + font.gsubrsBias;\n            subrCode = font.gsubrs[n];\n            if (subrCode) {\n              parse(subrCode);\n            }\n            break;\n          case 30: // vhcurveto\n            while (stack.length > 0) {\n              xa = x;\n              ya = y + stack.shift();\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              x = xb + stack.shift();\n              y = yb + (stack.length === 1 ? stack.shift() : 0);\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n              if (stack.length === 0) {\n                break;\n              }\n\n              xa = x + stack.shift();\n              ya = y;\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              y = yb + stack.shift();\n              x = xb + (stack.length === 1 ? stack.shift() : 0);\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n            }\n            break;\n          case 31: // hvcurveto\n            while (stack.length > 0) {\n              xa = x + stack.shift();\n              ya = y;\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              y = yb + stack.shift();\n              x = xb + (stack.length === 1 ? stack.shift() : 0);\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n              if (stack.length === 0) {\n                break;\n              }\n\n              xa = x;\n              ya = y + stack.shift();\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              x = xb + stack.shift();\n              y = yb + (stack.length === 1 ? stack.shift() : 0);\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n            }\n            break;\n          default:\n            if (v < 32) {\n              throw new FormatError(`unknown operator: ${v}`);\n            }\n            if (v < 247) {\n              stack.push(v - 139);\n            } else if (v < 251) {\n              stack.push((v - 247) * 256 + code[i++] + 108);\n            } else if (v < 255) {\n              stack.push(-(v - 251) * 256 - code[i++] - 108);\n            } else {\n              stack.push(\n                ((code[i] << 24) |\n                  (code[i + 1] << 16) |\n                  (code[i + 2] << 8) |\n                  code[i + 3]) /\n                  65536\n              );\n              i += 4;\n            }\n            break;\n        }\n        if (stackClean) {\n          stack.length = 0;\n        }\n      }\n    }\n    parse(charStringCode);\n  }\n\n  const NOOP = [];\n\n  class CompiledFont {\n    constructor(fontMatrix) {\n      if (this.constructor === CompiledFont) {\n        unreachable(\"Cannot initialize CompiledFont.\");\n      }\n      this.fontMatrix = fontMatrix;\n\n      this.compiledGlyphs = Object.create(null);\n      this.compiledCharCodeToGlyphId = Object.create(null);\n    }\n\n    getPathJs(unicode) {\n      const cmap = lookupCmap(this.cmap, unicode);\n      let fn = this.compiledGlyphs[cmap.glyphId];\n      if (!fn) {\n        fn = this.compileGlyph(this.glyphs[cmap.glyphId], cmap.glyphId);\n        this.compiledGlyphs[cmap.glyphId] = fn;\n      }\n      if (this.compiledCharCodeToGlyphId[cmap.charCode] === undefined) {\n        this.compiledCharCodeToGlyphId[cmap.charCode] = cmap.glyphId;\n      }\n      return fn;\n    }\n\n    compileGlyph(code, glyphId) {\n      if (!code || code.length === 0 || code[0] === 14) {\n        return NOOP;\n      }\n\n      let fontMatrix = this.fontMatrix;\n      if (this.isCFFCIDFont) {\n        // Top DICT's FontMatrix can be ignored because CFFCompiler always\n        // removes it and copies to FDArray DICTs.\n        const fdIndex = this.fdSelect.getFDIndex(glyphId);\n        if (fdIndex >= 0 && fdIndex < this.fdArray.length) {\n          const fontDict = this.fdArray[fdIndex];\n          fontMatrix = fontDict.getByName(\"FontMatrix\") || FONT_IDENTITY_MATRIX;\n        } else {\n          warn(\"Invalid fd index for glyph index.\");\n        }\n      }\n\n      const cmds = [];\n      cmds.push({ cmd: \"save\" });\n      cmds.push({ cmd: \"transform\", args: fontMatrix.slice() });\n      cmds.push({ cmd: \"scale\", args: [\"size\", \"-size\"] });\n\n      this.compileGlyphImpl(code, cmds, glyphId);\n\n      cmds.push({ cmd: \"restore\" });\n\n      return cmds;\n    }\n\n    compileGlyphImpl() {\n      unreachable(\"Children classes should implement this.\");\n    }\n\n    hasBuiltPath(unicode) {\n      const cmap = lookupCmap(this.cmap, unicode);\n      return (\n        this.compiledGlyphs[cmap.glyphId] !== undefined &&\n        this.compiledCharCodeToGlyphId[cmap.charCode] !== undefined\n      );\n    }\n  }\n\n  class TrueTypeCompiled extends CompiledFont {\n    constructor(glyphs, cmap, fontMatrix) {\n      super(fontMatrix || [0.000488, 0, 0, 0.000488, 0, 0]);\n\n      this.glyphs = glyphs;\n      this.cmap = cmap;\n    }\n\n    compileGlyphImpl(code, cmds) {\n      compileGlyf(code, cmds, this);\n    }\n  }\n\n  class Type2Compiled extends CompiledFont {\n    constructor(cffInfo, cmap, fontMatrix, glyphNameMap) {\n      super(fontMatrix || [0.001, 0, 0, 0.001, 0, 0]);\n\n      this.glyphs = cffInfo.glyphs;\n      this.gsubrs = cffInfo.gsubrs || [];\n      this.subrs = cffInfo.subrs || [];\n      this.cmap = cmap;\n      this.glyphNameMap = glyphNameMap || getGlyphsUnicode();\n\n      this.gsubrsBias = getSubroutineBias(this.gsubrs);\n      this.subrsBias = getSubroutineBias(this.subrs);\n\n      this.isCFFCIDFont = cffInfo.isCFFCIDFont;\n      this.fdSelect = cffInfo.fdSelect;\n      this.fdArray = cffInfo.fdArray;\n    }\n\n    compileGlyphImpl(code, cmds, glyphId) {\n      compileCharString(code, cmds, this, glyphId);\n    }\n  }\n\n  return {\n    create: function FontRendererFactory_create(font, seacAnalysisEnabled) {\n      var data = new Uint8Array(font.data);\n      var cmap, glyf, loca, cff, indexToLocFormat, unitsPerEm;\n      var numTables = getUshort(data, 4);\n      for (var i = 0, p = 12; i < numTables; i++, p += 16) {\n        var tag = bytesToString(data.subarray(p, p + 4));\n        var offset = getLong(data, p + 8);\n        var length = getLong(data, p + 12);\n        switch (tag) {\n          case \"cmap\":\n            cmap = parseCmap(data, offset, offset + length);\n            break;\n          case \"glyf\":\n            glyf = data.subarray(offset, offset + length);\n            break;\n          case \"loca\":\n            loca = data.subarray(offset, offset + length);\n            break;\n          case \"head\":\n            unitsPerEm = getUshort(data, offset + 18);\n            indexToLocFormat = getUshort(data, offset + 50);\n            break;\n          case \"CFF \":\n            cff = parseCff(data, offset, offset + length, seacAnalysisEnabled);\n            break;\n        }\n      }\n\n      if (glyf) {\n        var fontMatrix = !unitsPerEm\n          ? font.fontMatrix\n          : [1 / unitsPerEm, 0, 0, 1 / unitsPerEm, 0, 0];\n        return new TrueTypeCompiled(\n          parseGlyfTable(glyf, loca, indexToLocFormat),\n          cmap,\n          fontMatrix\n        );\n      }\n      return new Type2Compiled(cff, cmap, font.fontMatrix, font.glyphNameMap);\n    },\n  };\n})();\n\nexport { FontRendererFactory };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getEncoding } from \"./encodings.js\";\nimport { isWhiteSpace } from \"./core_utils.js\";\nimport { Stream } from \"./stream.js\";\nimport { warn } from \"../shared/util.js\";\n\n// Hinting is currently disabled due to unknown problems on windows\n// in tracemonkey and various other pdfs with type1 fonts.\nvar HINTING_ENABLED = false;\n\n/*\n * CharStrings are encoded following the the CharString Encoding sequence\n * describe in Chapter 6 of the \"Adobe Type1 Font Format\" specification.\n * The value in a byte indicates a command, a number, or subsequent bytes\n * that are to be interpreted in a special way.\n *\n * CharString Number Encoding:\n *  A CharString byte containing the values from 32 through 255 inclusive\n *  indicate an integer. These values are decoded in four ranges.\n *\n * 1. A CharString byte containing a value, v, between 32 and 246 inclusive,\n * indicate the integer v - 139. Thus, the integer values from -107 through\n * 107 inclusive may be encoded in single byte.\n *\n * 2. A CharString byte containing a value, v, between 247 and 250 inclusive,\n * indicates an integer involving the next byte, w, according to the formula:\n * [(v - 247) x 256] + w + 108\n *\n * 3. A CharString byte containing a value, v, between 251 and 254 inclusive,\n * indicates an integer involving the next byte, w, according to the formula:\n * -[(v - 251) * 256] - w - 108\n *\n * 4. A CharString containing the value 255 indicates that the next 4 bytes\n * are a two complement signed integer. The first of these bytes contains the\n * highest order bits, the second byte contains the next higher order bits\n * and the fourth byte contain the lowest order bits.\n *\n *\n * CharString Command Encoding:\n *  CharStrings commands are encoded in 1 or 2 bytes.\n *\n *  Single byte commands are encoded in 1 byte that contains a value between\n *  0 and 31 inclusive.\n *  If a command byte contains the value 12, then the value in the next byte\n *  indicates a command. This \"escape\" mechanism allows many extra commands\n * to be encoded and this encoding technique helps to minimize the length of\n * the charStrings.\n */\nvar Type1CharString = (function Type1CharStringClosure() {\n  var COMMAND_MAP = {\n    hstem: [1],\n    vstem: [3],\n    vmoveto: [4],\n    rlineto: [5],\n    hlineto: [6],\n    vlineto: [7],\n    rrcurveto: [8],\n    callsubr: [10],\n    flex: [12, 35],\n    drop: [12, 18],\n    endchar: [14],\n    rmoveto: [21],\n    hmoveto: [22],\n    vhcurveto: [30],\n    hvcurveto: [31],\n  };\n\n  // eslint-disable-next-line no-shadow\n  function Type1CharString() {\n    this.width = 0;\n    this.lsb = 0;\n    this.flexing = false;\n    this.output = [];\n    this.stack = [];\n  }\n\n  Type1CharString.prototype = {\n    convert: function Type1CharString_convert(\n      encoded,\n      subrs,\n      seacAnalysisEnabled\n    ) {\n      var count = encoded.length;\n      var error = false;\n      var wx, sbx, subrNumber;\n      for (var i = 0; i < count; i++) {\n        var value = encoded[i];\n        if (value < 32) {\n          if (value === 12) {\n            value = (value << 8) + encoded[++i];\n          }\n          switch (value) {\n            case 1: // hstem\n              if (!HINTING_ENABLED) {\n                this.stack = [];\n                break;\n              }\n              error = this.executeCommand(2, COMMAND_MAP.hstem);\n              break;\n            case 3: // vstem\n              if (!HINTING_ENABLED) {\n                this.stack = [];\n                break;\n              }\n              error = this.executeCommand(2, COMMAND_MAP.vstem);\n              break;\n            case 4: // vmoveto\n              if (this.flexing) {\n                if (this.stack.length < 1) {\n                  error = true;\n                  break;\n                }\n                // Add the dx for flex and but also swap the values so they are\n                // the right order.\n                var dy = this.stack.pop();\n                this.stack.push(0, dy);\n                break;\n              }\n              error = this.executeCommand(1, COMMAND_MAP.vmoveto);\n              break;\n            case 5: // rlineto\n              error = this.executeCommand(2, COMMAND_MAP.rlineto);\n              break;\n            case 6: // hlineto\n              error = this.executeCommand(1, COMMAND_MAP.hlineto);\n              break;\n            case 7: // vlineto\n              error = this.executeCommand(1, COMMAND_MAP.vlineto);\n              break;\n            case 8: // rrcurveto\n              error = this.executeCommand(6, COMMAND_MAP.rrcurveto);\n              break;\n            case 9: // closepath\n              // closepath is a Type1 command that does not take argument and is\n              // useless in Type2 and it can simply be ignored.\n              this.stack = [];\n              break;\n            case 10: // callsubr\n              if (this.stack.length < 1) {\n                error = true;\n                break;\n              }\n              subrNumber = this.stack.pop();\n              if (!subrs[subrNumber]) {\n                error = true;\n                break;\n              }\n              error = this.convert(\n                subrs[subrNumber],\n                subrs,\n                seacAnalysisEnabled\n              );\n              break;\n            case 11: // return\n              return error;\n            case 13: // hsbw\n              if (this.stack.length < 2) {\n                error = true;\n                break;\n              }\n              // To convert to type2 we have to move the width value to the\n              // first part of the charstring and then use hmoveto with lsb.\n              wx = this.stack.pop();\n              sbx = this.stack.pop();\n              this.lsb = sbx;\n              this.width = wx;\n              this.stack.push(wx, sbx);\n              error = this.executeCommand(2, COMMAND_MAP.hmoveto);\n              break;\n            case 14: // endchar\n              this.output.push(COMMAND_MAP.endchar[0]);\n              break;\n            case 21: // rmoveto\n              if (this.flexing) {\n                break;\n              }\n              error = this.executeCommand(2, COMMAND_MAP.rmoveto);\n              break;\n            case 22: // hmoveto\n              if (this.flexing) {\n                // Add the dy for flex.\n                this.stack.push(0);\n                break;\n              }\n              error = this.executeCommand(1, COMMAND_MAP.hmoveto);\n              break;\n            case 30: // vhcurveto\n              error = this.executeCommand(4, COMMAND_MAP.vhcurveto);\n              break;\n            case 31: // hvcurveto\n              error = this.executeCommand(4, COMMAND_MAP.hvcurveto);\n              break;\n            case (12 << 8) + 0: // dotsection\n              // dotsection is a Type1 command to specify some hinting feature\n              // for dots that do not take a parameter and it can safely be\n              // ignored for Type2.\n              this.stack = [];\n              break;\n            case (12 << 8) + 1: // vstem3\n              if (!HINTING_ENABLED) {\n                this.stack = [];\n                break;\n              }\n              // [vh]stem3 are Type1 only and Type2 supports [vh]stem with\n              // multiple parameters, so instead of returning [vh]stem3 take a\n              // shortcut and return [vhstem] instead.\n              error = this.executeCommand(2, COMMAND_MAP.vstem);\n              break;\n            case (12 << 8) + 2: // hstem3\n              if (!HINTING_ENABLED) {\n                this.stack = [];\n                break;\n              }\n              // See vstem3.\n              error = this.executeCommand(2, COMMAND_MAP.hstem);\n              break;\n            case (12 << 8) + 6: // seac\n              // seac is like type 2's special endchar but it doesn't use the\n              // first argument asb, so remove it.\n              if (seacAnalysisEnabled) {\n                this.seac = this.stack.splice(-4, 4);\n                error = this.executeCommand(0, COMMAND_MAP.endchar);\n              } else {\n                error = this.executeCommand(4, COMMAND_MAP.endchar);\n              }\n              break;\n            case (12 << 8) + 7: // sbw\n              if (this.stack.length < 4) {\n                error = true;\n                break;\n              }\n              // To convert to type2 we have to move the width value to the\n              // first part of the charstring and then use rmoveto with\n              // (dx, dy). The height argument will not be used for vmtx and\n              // vhea tables reconstruction -- ignoring it.\n              this.stack.pop(); // wy\n              wx = this.stack.pop();\n              var sby = this.stack.pop();\n              sbx = this.stack.pop();\n              this.lsb = sbx;\n              this.width = wx;\n              this.stack.push(wx, sbx, sby);\n              error = this.executeCommand(3, COMMAND_MAP.rmoveto);\n              break;\n            case (12 << 8) + 12: // div\n              if (this.stack.length < 2) {\n                error = true;\n                break;\n              }\n              var num2 = this.stack.pop();\n              var num1 = this.stack.pop();\n              this.stack.push(num1 / num2);\n              break;\n            case (12 << 8) + 16: // callothersubr\n              if (this.stack.length < 2) {\n                error = true;\n                break;\n              }\n              subrNumber = this.stack.pop();\n              var numArgs = this.stack.pop();\n              if (subrNumber === 0 && numArgs === 3) {\n                var flexArgs = this.stack.splice(this.stack.length - 17, 17);\n                this.stack.push(\n                  flexArgs[2] + flexArgs[0], // bcp1x + rpx\n                  flexArgs[3] + flexArgs[1], // bcp1y + rpy\n                  flexArgs[4], // bcp2x\n                  flexArgs[5], // bcp2y\n                  flexArgs[6], // p2x\n                  flexArgs[7], // p2y\n                  flexArgs[8], // bcp3x\n                  flexArgs[9], // bcp3y\n                  flexArgs[10], // bcp4x\n                  flexArgs[11], // bcp4y\n                  flexArgs[12], // p3x\n                  flexArgs[13], // p3y\n                  flexArgs[14] // flexDepth\n                  // 15 = finalx unused by flex\n                  // 16 = finaly unused by flex\n                );\n                error = this.executeCommand(13, COMMAND_MAP.flex, true);\n                this.flexing = false;\n                this.stack.push(flexArgs[15], flexArgs[16]);\n              } else if (subrNumber === 1 && numArgs === 0) {\n                this.flexing = true;\n              }\n              break;\n            case (12 << 8) + 17: // pop\n              // Ignore this since it is only used with othersubr.\n              break;\n            case (12 << 8) + 33: // setcurrentpoint\n              // Ignore for now.\n              this.stack = [];\n              break;\n            default:\n              warn('Unknown type 1 charstring command of \"' + value + '\"');\n              break;\n          }\n          if (error) {\n            break;\n          }\n          continue;\n        } else if (value <= 246) {\n          value = value - 139;\n        } else if (value <= 250) {\n          value = (value - 247) * 256 + encoded[++i] + 108;\n        } else if (value <= 254) {\n          value = -((value - 251) * 256) - encoded[++i] - 108;\n        } else {\n          value =\n            ((encoded[++i] & 0xff) << 24) |\n            ((encoded[++i] & 0xff) << 16) |\n            ((encoded[++i] & 0xff) << 8) |\n            ((encoded[++i] & 0xff) << 0);\n        }\n        this.stack.push(value);\n      }\n      return error;\n    },\n\n    executeCommand(howManyArgs, command, keepStack) {\n      var stackLength = this.stack.length;\n      if (howManyArgs > stackLength) {\n        return true;\n      }\n      var start = stackLength - howManyArgs;\n      for (var i = start; i < stackLength; i++) {\n        var value = this.stack[i];\n        if (Number.isInteger(value)) {\n          this.output.push(28, (value >> 8) & 0xff, value & 0xff);\n        } else {\n          // fixed point\n          value = (65536 * value) | 0;\n          this.output.push(\n            255,\n            (value >> 24) & 0xff,\n            (value >> 16) & 0xff,\n            (value >> 8) & 0xff,\n            value & 0xff\n          );\n        }\n      }\n      this.output.push.apply(this.output, command);\n      if (keepStack) {\n        this.stack.splice(start, howManyArgs);\n      } else {\n        this.stack.length = 0;\n      }\n      return false;\n    },\n  };\n\n  return Type1CharString;\n})();\n\n/*\n * Type1Parser encapsulate the needed code for parsing a Type1 font\n * program. Some of its logic depends on the Type2 charstrings\n * structure.\n * Note: this doesn't really parse the font since that would require evaluation\n * of PostScript, but it is possible in most cases to extract what we need\n * without a full parse.\n */\nvar Type1Parser = (function Type1ParserClosure() {\n  /*\n   * Decrypt a Sequence of Ciphertext Bytes to Produce the Original Sequence\n   * of Plaintext Bytes. The function took a key as a parameter which can be\n   * for decrypting the eexec block of for decoding charStrings.\n   */\n  var EEXEC_ENCRYPT_KEY = 55665;\n  var CHAR_STRS_ENCRYPT_KEY = 4330;\n\n  function isHexDigit(code) {\n    return (\n      (code >= 48 && code <= 57) || // '0'-'9'\n      (code >= 65 && code <= 70) || // 'A'-'F'\n      (code >= 97 && code <= 102) // 'a'-'f'\n    );\n  }\n\n  function decrypt(data, key, discardNumber) {\n    if (discardNumber >= data.length) {\n      return new Uint8Array(0);\n    }\n    var r = key | 0,\n      c1 = 52845,\n      c2 = 22719,\n      i,\n      j;\n    for (i = 0; i < discardNumber; i++) {\n      r = ((data[i] + r) * c1 + c2) & ((1 << 16) - 1);\n    }\n    var count = data.length - discardNumber;\n    var decrypted = new Uint8Array(count);\n    for (i = discardNumber, j = 0; j < count; i++, j++) {\n      var value = data[i];\n      decrypted[j] = value ^ (r >> 8);\n      r = ((value + r) * c1 + c2) & ((1 << 16) - 1);\n    }\n    return decrypted;\n  }\n\n  function decryptAscii(data, key, discardNumber) {\n    var r = key | 0,\n      c1 = 52845,\n      c2 = 22719;\n    var count = data.length,\n      maybeLength = count >>> 1;\n    var decrypted = new Uint8Array(maybeLength);\n    var i, j;\n    for (i = 0, j = 0; i < count; i++) {\n      var digit1 = data[i];\n      if (!isHexDigit(digit1)) {\n        continue;\n      }\n      i++;\n      var digit2;\n      while (i < count && !isHexDigit((digit2 = data[i]))) {\n        i++;\n      }\n      if (i < count) {\n        var value = parseInt(String.fromCharCode(digit1, digit2), 16);\n        decrypted[j++] = value ^ (r >> 8);\n        r = ((value + r) * c1 + c2) & ((1 << 16) - 1);\n      }\n    }\n    return decrypted.slice(discardNumber, j);\n  }\n\n  function isSpecial(c) {\n    return (\n      c === /* '/' = */ 0x2f ||\n      c === /* '[' = */ 0x5b ||\n      c === /* ']' = */ 0x5d ||\n      c === /* '{' = */ 0x7b ||\n      c === /* '}' = */ 0x7d ||\n      c === /* '(' = */ 0x28 ||\n      c === /* ')' = */ 0x29\n    );\n  }\n\n  // eslint-disable-next-line no-shadow\n  function Type1Parser(stream, encrypted, seacAnalysisEnabled) {\n    if (encrypted) {\n      var data = stream.getBytes();\n      var isBinary = !(\n        (isHexDigit(data[0]) || isWhiteSpace(data[0])) &&\n        isHexDigit(data[1]) &&\n        isHexDigit(data[2]) &&\n        isHexDigit(data[3]) &&\n        isHexDigit(data[4]) &&\n        isHexDigit(data[5]) &&\n        isHexDigit(data[6]) &&\n        isHexDigit(data[7])\n      );\n      stream = new Stream(\n        isBinary\n          ? decrypt(data, EEXEC_ENCRYPT_KEY, 4)\n          : decryptAscii(data, EEXEC_ENCRYPT_KEY, 4)\n      );\n    }\n    this.seacAnalysisEnabled = !!seacAnalysisEnabled;\n\n    this.stream = stream;\n    this.nextChar();\n  }\n\n  Type1Parser.prototype = {\n    readNumberArray: function Type1Parser_readNumberArray() {\n      this.getToken(); // read '[' or '{' (arrays can start with either)\n      var array = [];\n      while (true) {\n        var token = this.getToken();\n        if (token === null || token === \"]\" || token === \"}\") {\n          break;\n        }\n        array.push(parseFloat(token || 0));\n      }\n      return array;\n    },\n\n    readNumber: function Type1Parser_readNumber() {\n      var token = this.getToken();\n      return parseFloat(token || 0);\n    },\n\n    readInt: function Type1Parser_readInt() {\n      // Use '| 0' to prevent setting a double into length such as the double\n      // does not flow into the loop variable.\n      var token = this.getToken();\n      return parseInt(token || 0, 10) | 0;\n    },\n\n    readBoolean: function Type1Parser_readBoolean() {\n      var token = this.getToken();\n\n      // Use 1 and 0 since that's what type2 charstrings use.\n      return token === \"true\" ? 1 : 0;\n    },\n\n    nextChar: function Type1_nextChar() {\n      return (this.currentChar = this.stream.getByte());\n    },\n\n    getToken: function Type1Parser_getToken() {\n      // Eat whitespace and comments.\n      var comment = false;\n      var ch = this.currentChar;\n      while (true) {\n        if (ch === -1) {\n          return null;\n        }\n\n        if (comment) {\n          if (ch === 0x0a || ch === 0x0d) {\n            comment = false;\n          }\n        } else if (ch === /* '%' = */ 0x25) {\n          comment = true;\n        } else if (!isWhiteSpace(ch)) {\n          break;\n        }\n        ch = this.nextChar();\n      }\n      if (isSpecial(ch)) {\n        this.nextChar();\n        return String.fromCharCode(ch);\n      }\n      var token = \"\";\n      do {\n        token += String.fromCharCode(ch);\n        ch = this.nextChar();\n      } while (ch >= 0 && !isWhiteSpace(ch) && !isSpecial(ch));\n      return token;\n    },\n\n    readCharStrings: function Type1Parser_readCharStrings(bytes, lenIV) {\n      if (lenIV === -1) {\n        // This isn't in the spec, but Adobe's tx program handles -1\n        // as plain text.\n        return bytes;\n      }\n      return decrypt(bytes, CHAR_STRS_ENCRYPT_KEY, lenIV);\n    },\n\n    /*\n     * Returns an object containing a Subrs array and a CharStrings\n     * array extracted from and eexec encrypted block of data\n     */\n    extractFontProgram: function Type1Parser_extractFontProgram(properties) {\n      var stream = this.stream;\n\n      var subrs = [],\n        charstrings = [];\n      var privateData = Object.create(null);\n      privateData.lenIV = 4;\n      var program = {\n        subrs: [],\n        charstrings: [],\n        properties: {\n          privateData,\n        },\n      };\n      var token, length, data, lenIV, encoded;\n      while ((token = this.getToken()) !== null) {\n        if (token !== \"/\") {\n          continue;\n        }\n        token = this.getToken();\n        switch (token) {\n          case \"CharStrings\":\n            // The number immediately following CharStrings must be greater or\n            // equal to the number of CharStrings.\n            this.getToken();\n            this.getToken(); // read in 'dict'\n            this.getToken(); // read in 'dup'\n            this.getToken(); // read in 'begin'\n            while (true) {\n              token = this.getToken();\n              if (token === null || token === \"end\") {\n                break;\n              }\n\n              if (token !== \"/\") {\n                continue;\n              }\n              var glyph = this.getToken();\n              length = this.readInt();\n              this.getToken(); // read in 'RD' or '-|'\n              data = length > 0 ? stream.getBytes(length) : new Uint8Array(0);\n              lenIV = program.properties.privateData.lenIV;\n              encoded = this.readCharStrings(data, lenIV);\n              this.nextChar();\n              token = this.getToken(); // read in 'ND' or '|-'\n              if (token === \"noaccess\") {\n                this.getToken(); // read in 'def'\n              }\n              charstrings.push({\n                glyph,\n                encoded,\n              });\n            }\n            break;\n          case \"Subrs\":\n            this.readInt(); // num\n            this.getToken(); // read in 'array'\n            while (this.getToken() === \"dup\") {\n              const index = this.readInt();\n              length = this.readInt();\n              this.getToken(); // read in 'RD' or '-|'\n              data = length > 0 ? stream.getBytes(length) : new Uint8Array(0);\n              lenIV = program.properties.privateData.lenIV;\n              encoded = this.readCharStrings(data, lenIV);\n              this.nextChar();\n              token = this.getToken(); // read in 'NP' or '|'\n              if (token === \"noaccess\") {\n                this.getToken(); // read in 'put'\n              }\n              subrs[index] = encoded;\n            }\n            break;\n          case \"BlueValues\":\n          case \"OtherBlues\":\n          case \"FamilyBlues\":\n          case \"FamilyOtherBlues\":\n            var blueArray = this.readNumberArray();\n            // *Blue* values may contain invalid data: disables reading of\n            // those values when hinting is disabled.\n            if (\n              blueArray.length > 0 &&\n              blueArray.length % 2 === 0 &&\n              HINTING_ENABLED\n            ) {\n              program.properties.privateData[token] = blueArray;\n            }\n            break;\n          case \"StemSnapH\":\n          case \"StemSnapV\":\n            program.properties.privateData[token] = this.readNumberArray();\n            break;\n          case \"StdHW\":\n          case \"StdVW\":\n            program.properties.privateData[token] = this.readNumberArray()[0];\n            break;\n          case \"BlueShift\":\n          case \"lenIV\":\n          case \"BlueFuzz\":\n          case \"BlueScale\":\n          case \"LanguageGroup\":\n          case \"ExpansionFactor\":\n            program.properties.privateData[token] = this.readNumber();\n            break;\n          case \"ForceBold\":\n            program.properties.privateData[token] = this.readBoolean();\n            break;\n        }\n      }\n\n      for (var i = 0; i < charstrings.length; i++) {\n        glyph = charstrings[i].glyph;\n        encoded = charstrings[i].encoded;\n        var charString = new Type1CharString();\n        var error = charString.convert(\n          encoded,\n          subrs,\n          this.seacAnalysisEnabled\n        );\n        var output = charString.output;\n        if (error) {\n          // It seems when FreeType encounters an error while evaluating a glyph\n          // that it completely ignores the glyph so we'll mimic that behaviour\n          // here and put an endchar to make the validator happy.\n          output = [14];\n        }\n        const charStringObject = {\n          glyphName: glyph,\n          charstring: output,\n          width: charString.width,\n          lsb: charString.lsb,\n          seac: charString.seac,\n        };\n        if (glyph === \".notdef\") {\n          // Make sure .notdef is at index zero (issue #11477).\n          program.charstrings.unshift(charStringObject);\n        } else {\n          program.charstrings.push(charStringObject);\n        }\n\n        // Attempt to replace missing widths, from the font dictionary /Widths\n        // entry, with ones from the font data (fixes issue11150_reduced.pdf).\n        if (properties.builtInEncoding) {\n          const index = properties.builtInEncoding.indexOf(glyph);\n          if (\n            index > -1 &&\n            properties.widths[index] === undefined &&\n            index >= properties.firstChar &&\n            index <= properties.lastChar\n          ) {\n            properties.widths[index] = charString.width;\n          }\n        }\n      }\n\n      return program;\n    },\n\n    extractFontHeader: function Type1Parser_extractFontHeader(properties) {\n      var token;\n      while ((token = this.getToken()) !== null) {\n        if (token !== \"/\") {\n          continue;\n        }\n        token = this.getToken();\n        switch (token) {\n          case \"FontMatrix\":\n            var matrix = this.readNumberArray();\n            properties.fontMatrix = matrix;\n            break;\n          case \"Encoding\":\n            var encodingArg = this.getToken();\n            var encoding;\n            if (!/^\\d+$/.test(encodingArg)) {\n              // encoding name is specified\n              encoding = getEncoding(encodingArg);\n            } else {\n              encoding = [];\n              var size = parseInt(encodingArg, 10) | 0;\n              this.getToken(); // read in 'array'\n\n              for (var j = 0; j < size; j++) {\n                token = this.getToken();\n                // skipping till first dup or def (e.g. ignoring for statement)\n                while (token !== \"dup\" && token !== \"def\") {\n                  token = this.getToken();\n                  if (token === null) {\n                    return; // invalid header\n                  }\n                }\n                if (token === \"def\") {\n                  break; // read all array data\n                }\n                var index = this.readInt();\n                this.getToken(); // read in '/'\n                var glyph = this.getToken();\n                encoding[index] = glyph;\n                this.getToken(); // read the in 'put'\n              }\n            }\n            properties.builtInEncoding = encoding;\n            break;\n          case \"FontBBox\":\n            var fontBBox = this.readNumberArray();\n            // adjusting ascent/descent\n            properties.ascent = Math.max(fontBBox[3], fontBBox[1]);\n            properties.descent = Math.min(fontBBox[1], fontBBox[3]);\n            properties.ascentScaled = true;\n            break;\n        }\n      }\n    },\n  };\n\n  return Type1Parser;\n})();\n\nexport { Type1Parser };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  FormatError,\n  info,\n  unreachable,\n  UNSUPPORTED_FEATURES,\n  Util,\n  warn,\n} from \"../shared/util.js\";\nimport { ColorSpace } from \"./colorspace.js\";\nimport { isStream } from \"./primitives.js\";\nimport { MissingDataException } from \"./core_utils.js\";\n\nvar ShadingType = {\n  FUNCTION_BASED: 1,\n  AXIAL: 2,\n  RADIAL: 3,\n  FREE_FORM_MESH: 4,\n  LATTICE_FORM_MESH: 5,\n  COONS_PATCH_MESH: 6,\n  TENSOR_PATCH_MESH: 7,\n};\n\nvar Pattern = (function PatternClosure() {\n  // Constructor should define this.getPattern\n  // eslint-disable-next-line no-shadow\n  function Pattern() {\n    unreachable(\"should not call Pattern constructor\");\n  }\n\n  Pattern.prototype = {\n    // Input: current Canvas context\n    // Output: the appropriate fillStyle or strokeStyle\n    getPattern: function Pattern_getPattern(ctx) {\n      unreachable(`Should not call Pattern.getStyle: ${ctx}`);\n    },\n  };\n\n  Pattern.parseShading = function (\n    shading,\n    matrix,\n    xref,\n    res,\n    handler,\n    pdfFunctionFactory\n  ) {\n    var dict = isStream(shading) ? shading.dict : shading;\n    var type = dict.get(\"ShadingType\");\n\n    try {\n      switch (type) {\n        case ShadingType.AXIAL:\n        case ShadingType.RADIAL:\n          // Both radial and axial shadings are handled by RadialAxial shading.\n          return new Shadings.RadialAxial(\n            dict,\n            matrix,\n            xref,\n            res,\n            pdfFunctionFactory\n          );\n        case ShadingType.FREE_FORM_MESH:\n        case ShadingType.LATTICE_FORM_MESH:\n        case ShadingType.COONS_PATCH_MESH:\n        case ShadingType.TENSOR_PATCH_MESH:\n          return new Shadings.Mesh(\n            shading,\n            matrix,\n            xref,\n            res,\n            pdfFunctionFactory\n          );\n        default:\n          throw new FormatError(\"Unsupported ShadingType: \" + type);\n      }\n    } catch (ex) {\n      if (ex instanceof MissingDataException) {\n        throw ex;\n      }\n      handler.send(\"UnsupportedFeature\", {\n        featureId: UNSUPPORTED_FEATURES.shadingPattern,\n      });\n      warn(ex);\n      return new Shadings.Dummy();\n    }\n  };\n  return Pattern;\n})();\n\nvar Shadings = {};\n\n// A small number to offset the first/last color stops so we can insert ones to\n// support extend. Number.MIN_VALUE is too small and breaks the extend.\nShadings.SMALL_NUMBER = 1e-6;\n\n// Radial and axial shading have very similar implementations\n// If needed, the implementations can be broken into two classes\nShadings.RadialAxial = (function RadialAxialClosure() {\n  function RadialAxial(dict, matrix, xref, res, pdfFunctionFactory) {\n    this.matrix = matrix;\n    this.coordsArr = dict.getArray(\"Coords\");\n    this.shadingType = dict.get(\"ShadingType\");\n    this.type = \"Pattern\";\n    var cs = dict.get(\"ColorSpace\", \"CS\");\n    cs = ColorSpace.parse(cs, xref, res, pdfFunctionFactory);\n    this.cs = cs;\n    const bbox = dict.getArray(\"BBox\");\n    if (Array.isArray(bbox) && bbox.length === 4) {\n      this.bbox = Util.normalizeRect(bbox);\n    } else {\n      this.bbox = null;\n    }\n\n    var t0 = 0.0,\n      t1 = 1.0;\n    if (dict.has(\"Domain\")) {\n      var domainArr = dict.getArray(\"Domain\");\n      t0 = domainArr[0];\n      t1 = domainArr[1];\n    }\n\n    var extendStart = false,\n      extendEnd = false;\n    if (dict.has(\"Extend\")) {\n      var extendArr = dict.getArray(\"Extend\");\n      extendStart = extendArr[0];\n      extendEnd = extendArr[1];\n    }\n\n    if (\n      this.shadingType === ShadingType.RADIAL &&\n      (!extendStart || !extendEnd)\n    ) {\n      // Radial gradient only currently works if either circle is fully within\n      // the other circle.\n      var x1 = this.coordsArr[0];\n      var y1 = this.coordsArr[1];\n      var r1 = this.coordsArr[2];\n      var x2 = this.coordsArr[3];\n      var y2 = this.coordsArr[4];\n      var r2 = this.coordsArr[5];\n      var distance = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n      if (r1 <= r2 + distance && r2 <= r1 + distance) {\n        warn(\"Unsupported radial gradient.\");\n      }\n    }\n\n    this.extendStart = extendStart;\n    this.extendEnd = extendEnd;\n\n    var fnObj = dict.get(\"Function\");\n    var fn = pdfFunctionFactory.createFromArray(fnObj);\n\n    // 10 samples seems good enough for now, but probably won't work\n    // if there are sharp color changes. Ideally, we would implement\n    // the spec faithfully and add lossless optimizations.\n    const NUMBER_OF_SAMPLES = 10;\n    const step = (t1 - t0) / NUMBER_OF_SAMPLES;\n\n    var colorStops = (this.colorStops = []);\n\n    // Protect against bad domains.\n    if (t0 >= t1 || step <= 0) {\n      // Acrobat doesn't seem to handle these cases so we'll ignore for\n      // now.\n      info(\"Bad shading domain.\");\n      return;\n    }\n\n    var color = new Float32Array(cs.numComps),\n      ratio = new Float32Array(1);\n    var rgbColor;\n    for (let i = 0; i <= NUMBER_OF_SAMPLES; i++) {\n      ratio[0] = t0 + i * step;\n      fn(ratio, 0, color, 0);\n      rgbColor = cs.getRgb(color, 0);\n      var cssColor = Util.makeCssRgb(rgbColor[0], rgbColor[1], rgbColor[2]);\n      colorStops.push([i / NUMBER_OF_SAMPLES, cssColor]);\n    }\n\n    var background = \"transparent\";\n    if (dict.has(\"Background\")) {\n      rgbColor = cs.getRgb(dict.get(\"Background\"), 0);\n      background = Util.makeCssRgb(rgbColor[0], rgbColor[1], rgbColor[2]);\n    }\n\n    if (!extendStart) {\n      // Insert a color stop at the front and offset the first real color stop\n      // so it doesn't conflict with the one we insert.\n      colorStops.unshift([0, background]);\n      colorStops[1][0] += Shadings.SMALL_NUMBER;\n    }\n    if (!extendEnd) {\n      // Same idea as above in extendStart but for the end.\n      colorStops[colorStops.length - 1][0] -= Shadings.SMALL_NUMBER;\n      colorStops.push([1, background]);\n    }\n\n    this.colorStops = colorStops;\n  }\n\n  RadialAxial.prototype = {\n    getIR: function RadialAxial_getIR() {\n      var coordsArr = this.coordsArr;\n      var shadingType = this.shadingType;\n      var type, p0, p1, r0, r1;\n      if (shadingType === ShadingType.AXIAL) {\n        p0 = [coordsArr[0], coordsArr[1]];\n        p1 = [coordsArr[2], coordsArr[3]];\n        r0 = null;\n        r1 = null;\n        type = \"axial\";\n      } else if (shadingType === ShadingType.RADIAL) {\n        p0 = [coordsArr[0], coordsArr[1]];\n        p1 = [coordsArr[3], coordsArr[4]];\n        r0 = coordsArr[2];\n        r1 = coordsArr[5];\n        type = \"radial\";\n      } else {\n        unreachable(`getPattern type unknown: ${shadingType}`);\n      }\n\n      var matrix = this.matrix;\n      if (matrix) {\n        p0 = Util.applyTransform(p0, matrix);\n        p1 = Util.applyTransform(p1, matrix);\n        if (shadingType === ShadingType.RADIAL) {\n          var scale = Util.singularValueDecompose2dScale(matrix);\n          r0 *= scale[0];\n          r1 *= scale[1];\n        }\n      }\n\n      return [\"RadialAxial\", type, this.bbox, this.colorStops, p0, p1, r0, r1];\n    },\n  };\n\n  return RadialAxial;\n})();\n\n// All mesh shading. For now, they will be presented as set of the triangles\n// to be drawn on the canvas and rgb color for each vertex.\nShadings.Mesh = (function MeshClosure() {\n  function MeshStreamReader(stream, context) {\n    this.stream = stream;\n    this.context = context;\n    this.buffer = 0;\n    this.bufferLength = 0;\n\n    var numComps = context.numComps;\n    this.tmpCompsBuf = new Float32Array(numComps);\n    var csNumComps = context.colorSpace.numComps;\n    this.tmpCsCompsBuf = context.colorFn\n      ? new Float32Array(csNumComps)\n      : this.tmpCompsBuf;\n  }\n  MeshStreamReader.prototype = {\n    get hasData() {\n      if (this.stream.end) {\n        return this.stream.pos < this.stream.end;\n      }\n      if (this.bufferLength > 0) {\n        return true;\n      }\n      var nextByte = this.stream.getByte();\n      if (nextByte < 0) {\n        return false;\n      }\n      this.buffer = nextByte;\n      this.bufferLength = 8;\n      return true;\n    },\n    readBits: function MeshStreamReader_readBits(n) {\n      var buffer = this.buffer;\n      var bufferLength = this.bufferLength;\n      if (n === 32) {\n        if (bufferLength === 0) {\n          return (\n            ((this.stream.getByte() << 24) |\n              (this.stream.getByte() << 16) |\n              (this.stream.getByte() << 8) |\n              this.stream.getByte()) >>>\n            0\n          );\n        }\n        buffer =\n          (buffer << 24) |\n          (this.stream.getByte() << 16) |\n          (this.stream.getByte() << 8) |\n          this.stream.getByte();\n        var nextByte = this.stream.getByte();\n        this.buffer = nextByte & ((1 << bufferLength) - 1);\n        return (\n          ((buffer << (8 - bufferLength)) |\n            ((nextByte & 0xff) >> bufferLength)) >>>\n          0\n        );\n      }\n      if (n === 8 && bufferLength === 0) {\n        return this.stream.getByte();\n      }\n      while (bufferLength < n) {\n        buffer = (buffer << 8) | this.stream.getByte();\n        bufferLength += 8;\n      }\n      bufferLength -= n;\n      this.bufferLength = bufferLength;\n      this.buffer = buffer & ((1 << bufferLength) - 1);\n      return buffer >> bufferLength;\n    },\n    align: function MeshStreamReader_align() {\n      this.buffer = 0;\n      this.bufferLength = 0;\n    },\n    readFlag: function MeshStreamReader_readFlag() {\n      return this.readBits(this.context.bitsPerFlag);\n    },\n    readCoordinate: function MeshStreamReader_readCoordinate() {\n      var bitsPerCoordinate = this.context.bitsPerCoordinate;\n      var xi = this.readBits(bitsPerCoordinate);\n      var yi = this.readBits(bitsPerCoordinate);\n      var decode = this.context.decode;\n      var scale =\n        bitsPerCoordinate < 32\n          ? 1 / ((1 << bitsPerCoordinate) - 1)\n          : 2.3283064365386963e-10; // 2 ^ -32\n      return [\n        xi * scale * (decode[1] - decode[0]) + decode[0],\n        yi * scale * (decode[3] - decode[2]) + decode[2],\n      ];\n    },\n    readComponents: function MeshStreamReader_readComponents() {\n      var numComps = this.context.numComps;\n      var bitsPerComponent = this.context.bitsPerComponent;\n      var scale =\n        bitsPerComponent < 32\n          ? 1 / ((1 << bitsPerComponent) - 1)\n          : 2.3283064365386963e-10; // 2 ^ -32\n      var decode = this.context.decode;\n      var components = this.tmpCompsBuf;\n      for (var i = 0, j = 4; i < numComps; i++, j += 2) {\n        var ci = this.readBits(bitsPerComponent);\n        components[i] = ci * scale * (decode[j + 1] - decode[j]) + decode[j];\n      }\n      var color = this.tmpCsCompsBuf;\n      if (this.context.colorFn) {\n        this.context.colorFn(components, 0, color, 0);\n      }\n      return this.context.colorSpace.getRgb(color, 0);\n    },\n  };\n\n  function decodeType4Shading(mesh, reader) {\n    var coords = mesh.coords;\n    var colors = mesh.colors;\n    var operators = [];\n    var ps = []; // not maintaining cs since that will match ps\n    var verticesLeft = 0; // assuming we have all data to start a new triangle\n    while (reader.hasData) {\n      var f = reader.readFlag();\n      var coord = reader.readCoordinate();\n      var color = reader.readComponents();\n      if (verticesLeft === 0) {\n        // ignoring flags if we started a triangle\n        if (!(0 <= f && f <= 2)) {\n          throw new FormatError(\"Unknown type4 flag\");\n        }\n        switch (f) {\n          case 0:\n            verticesLeft = 3;\n            break;\n          case 1:\n            ps.push(ps[ps.length - 2], ps[ps.length - 1]);\n            verticesLeft = 1;\n            break;\n          case 2:\n            ps.push(ps[ps.length - 3], ps[ps.length - 1]);\n            verticesLeft = 1;\n            break;\n        }\n        operators.push(f);\n      }\n      ps.push(coords.length);\n      coords.push(coord);\n      colors.push(color);\n      verticesLeft--;\n\n      reader.align();\n    }\n    mesh.figures.push({\n      type: \"triangles\",\n      coords: new Int32Array(ps),\n      colors: new Int32Array(ps),\n    });\n  }\n\n  function decodeType5Shading(mesh, reader, verticesPerRow) {\n    var coords = mesh.coords;\n    var colors = mesh.colors;\n    var ps = []; // not maintaining cs since that will match ps\n    while (reader.hasData) {\n      var coord = reader.readCoordinate();\n      var color = reader.readComponents();\n      ps.push(coords.length);\n      coords.push(coord);\n      colors.push(color);\n    }\n    mesh.figures.push({\n      type: \"lattice\",\n      coords: new Int32Array(ps),\n      colors: new Int32Array(ps),\n      verticesPerRow,\n    });\n  }\n\n  var MIN_SPLIT_PATCH_CHUNKS_AMOUNT = 3;\n  var MAX_SPLIT_PATCH_CHUNKS_AMOUNT = 20;\n\n  var TRIANGLE_DENSITY = 20; // count of triangles per entire mesh bounds\n\n  var getB = (function getBClosure() {\n    function buildB(count) {\n      var lut = [];\n      for (var i = 0; i <= count; i++) {\n        var t = i / count,\n          t_ = 1 - t;\n        lut.push(\n          new Float32Array([\n            t_ * t_ * t_,\n            3 * t * t_ * t_,\n            3 * t * t * t_,\n            t * t * t,\n          ])\n        );\n      }\n      return lut;\n    }\n    var cache = [];\n\n    // eslint-disable-next-line no-shadow\n    return function getB(count) {\n      if (!cache[count]) {\n        cache[count] = buildB(count);\n      }\n      return cache[count];\n    };\n  })();\n\n  function buildFigureFromPatch(mesh, index) {\n    var figure = mesh.figures[index];\n    assert(figure.type === \"patch\", \"Unexpected patch mesh figure\");\n\n    var coords = mesh.coords,\n      colors = mesh.colors;\n    var pi = figure.coords;\n    var ci = figure.colors;\n\n    var figureMinX = Math.min(\n      coords[pi[0]][0],\n      coords[pi[3]][0],\n      coords[pi[12]][0],\n      coords[pi[15]][0]\n    );\n    var figureMinY = Math.min(\n      coords[pi[0]][1],\n      coords[pi[3]][1],\n      coords[pi[12]][1],\n      coords[pi[15]][1]\n    );\n    var figureMaxX = Math.max(\n      coords[pi[0]][0],\n      coords[pi[3]][0],\n      coords[pi[12]][0],\n      coords[pi[15]][0]\n    );\n    var figureMaxY = Math.max(\n      coords[pi[0]][1],\n      coords[pi[3]][1],\n      coords[pi[12]][1],\n      coords[pi[15]][1]\n    );\n    var splitXBy = Math.ceil(\n      ((figureMaxX - figureMinX) * TRIANGLE_DENSITY) /\n        (mesh.bounds[2] - mesh.bounds[0])\n    );\n    splitXBy = Math.max(\n      MIN_SPLIT_PATCH_CHUNKS_AMOUNT,\n      Math.min(MAX_SPLIT_PATCH_CHUNKS_AMOUNT, splitXBy)\n    );\n    var splitYBy = Math.ceil(\n      ((figureMaxY - figureMinY) * TRIANGLE_DENSITY) /\n        (mesh.bounds[3] - mesh.bounds[1])\n    );\n    splitYBy = Math.max(\n      MIN_SPLIT_PATCH_CHUNKS_AMOUNT,\n      Math.min(MAX_SPLIT_PATCH_CHUNKS_AMOUNT, splitYBy)\n    );\n\n    var verticesPerRow = splitXBy + 1;\n    var figureCoords = new Int32Array((splitYBy + 1) * verticesPerRow);\n    var figureColors = new Int32Array((splitYBy + 1) * verticesPerRow);\n    var k = 0;\n    var cl = new Uint8Array(3),\n      cr = new Uint8Array(3);\n    var c0 = colors[ci[0]],\n      c1 = colors[ci[1]],\n      c2 = colors[ci[2]],\n      c3 = colors[ci[3]];\n    var bRow = getB(splitYBy),\n      bCol = getB(splitXBy);\n    for (var row = 0; row <= splitYBy; row++) {\n      cl[0] = ((c0[0] * (splitYBy - row) + c2[0] * row) / splitYBy) | 0;\n      cl[1] = ((c0[1] * (splitYBy - row) + c2[1] * row) / splitYBy) | 0;\n      cl[2] = ((c0[2] * (splitYBy - row) + c2[2] * row) / splitYBy) | 0;\n\n      cr[0] = ((c1[0] * (splitYBy - row) + c3[0] * row) / splitYBy) | 0;\n      cr[1] = ((c1[1] * (splitYBy - row) + c3[1] * row) / splitYBy) | 0;\n      cr[2] = ((c1[2] * (splitYBy - row) + c3[2] * row) / splitYBy) | 0;\n\n      for (var col = 0; col <= splitXBy; col++, k++) {\n        if (\n          (row === 0 || row === splitYBy) &&\n          (col === 0 || col === splitXBy)\n        ) {\n          continue;\n        }\n        var x = 0,\n          y = 0;\n        var q = 0;\n        for (var i = 0; i <= 3; i++) {\n          for (var j = 0; j <= 3; j++, q++) {\n            var m = bRow[row][i] * bCol[col][j];\n            x += coords[pi[q]][0] * m;\n            y += coords[pi[q]][1] * m;\n          }\n        }\n        figureCoords[k] = coords.length;\n        coords.push([x, y]);\n        figureColors[k] = colors.length;\n        var newColor = new Uint8Array(3);\n        newColor[0] = ((cl[0] * (splitXBy - col) + cr[0] * col) / splitXBy) | 0;\n        newColor[1] = ((cl[1] * (splitXBy - col) + cr[1] * col) / splitXBy) | 0;\n        newColor[2] = ((cl[2] * (splitXBy - col) + cr[2] * col) / splitXBy) | 0;\n        colors.push(newColor);\n      }\n    }\n    figureCoords[0] = pi[0];\n    figureColors[0] = ci[0];\n    figureCoords[splitXBy] = pi[3];\n    figureColors[splitXBy] = ci[1];\n    figureCoords[verticesPerRow * splitYBy] = pi[12];\n    figureColors[verticesPerRow * splitYBy] = ci[2];\n    figureCoords[verticesPerRow * splitYBy + splitXBy] = pi[15];\n    figureColors[verticesPerRow * splitYBy + splitXBy] = ci[3];\n\n    mesh.figures[index] = {\n      type: \"lattice\",\n      coords: figureCoords,\n      colors: figureColors,\n      verticesPerRow,\n    };\n  }\n\n  function decodeType6Shading(mesh, reader) {\n    // A special case of Type 7. The p11, p12, p21, p22 automatically filled\n    var coords = mesh.coords;\n    var colors = mesh.colors;\n    var ps = new Int32Array(16); // p00, p10, ..., p30, p01, ..., p33\n    var cs = new Int32Array(4); // c00, c30, c03, c33\n    while (reader.hasData) {\n      var f = reader.readFlag();\n      if (!(0 <= f && f <= 3)) {\n        throw new FormatError(\"Unknown type6 flag\");\n      }\n      var i, ii;\n      var pi = coords.length;\n      for (i = 0, ii = f !== 0 ? 8 : 12; i < ii; i++) {\n        coords.push(reader.readCoordinate());\n      }\n      var ci = colors.length;\n      for (i = 0, ii = f !== 0 ? 2 : 4; i < ii; i++) {\n        colors.push(reader.readComponents());\n      }\n      var tmp1, tmp2, tmp3, tmp4;\n      switch (f) {\n        // prettier-ignore\n        case 0:\n          ps[12] = pi + 3; ps[13] = pi + 4;  ps[14] = pi + 5;  ps[15] = pi + 6;\n          ps[ 8] = pi + 2; /* values for 5, 6, 9, 10 are    */ ps[11] = pi + 7;\n          ps[ 4] = pi + 1; /* calculated below              */ ps[ 7] = pi + 8;\n          ps[ 0] = pi;     ps[ 1] = pi + 11; ps[ 2] = pi + 10; ps[ 3] = pi + 9;\n          cs[2] = ci + 1; cs[3] = ci + 2;\n          cs[0] = ci;     cs[1] = ci + 3;\n          break;\n        // prettier-ignore\n        case 1:\n          tmp1 = ps[12]; tmp2 = ps[13]; tmp3 = ps[14]; tmp4 = ps[15];\n          ps[12] = tmp4; ps[13] = pi + 0;  ps[14] = pi + 1;  ps[15] = pi + 2;\n          ps[ 8] = tmp3; /* values for 5, 6, 9, 10 are    */ ps[11] = pi + 3;\n          ps[ 4] = tmp2; /* calculated below              */ ps[ 7] = pi + 4;\n          ps[ 0] = tmp1; ps[ 1] = pi + 7;   ps[ 2] = pi + 6; ps[ 3] = pi + 5;\n          tmp1 = cs[2]; tmp2 = cs[3];\n          cs[2] = tmp2;   cs[3] = ci;\n          cs[0] = tmp1;   cs[1] = ci + 1;\n          break;\n        // prettier-ignore\n        case 2:\n          tmp1 = ps[15];\n          tmp2 = ps[11];\n          ps[12] = ps[3];  ps[13] = pi + 0; ps[14] = pi + 1;   ps[15] = pi + 2;\n          ps[ 8] = ps[7];  /* values for 5, 6, 9, 10 are    */ ps[11] = pi + 3;\n          ps[ 4] = tmp2;   /* calculated below              */ ps[ 7] = pi + 4;\n          ps[ 0] = tmp1;  ps[ 1] = pi + 7;   ps[ 2] = pi + 6;  ps[ 3] = pi + 5;\n          tmp1 = cs[3];\n          cs[2] = cs[1]; cs[3] = ci;\n          cs[0] = tmp1;  cs[1] = ci + 1;\n          break;\n        // prettier-ignore\n        case 3:\n          ps[12] = ps[0];  ps[13] = pi + 0;   ps[14] = pi + 1; ps[15] = pi + 2;\n          ps[ 8] = ps[1];  /* values for 5, 6, 9, 10 are    */ ps[11] = pi + 3;\n          ps[ 4] = ps[2];  /* calculated below              */ ps[ 7] = pi + 4;\n          ps[ 0] = ps[3];  ps[ 1] = pi + 7;   ps[ 2] = pi + 6; ps[ 3] = pi + 5;\n          cs[2] = cs[0]; cs[3] = ci;\n          cs[0] = cs[1]; cs[1] = ci + 1;\n          break;\n      }\n      // set p11, p12, p21, p22\n      ps[5] = coords.length;\n      coords.push([\n        (-4 * coords[ps[0]][0] -\n          coords[ps[15]][0] +\n          6 * (coords[ps[4]][0] + coords[ps[1]][0]) -\n          2 * (coords[ps[12]][0] + coords[ps[3]][0]) +\n          3 * (coords[ps[13]][0] + coords[ps[7]][0])) /\n          9,\n        (-4 * coords[ps[0]][1] -\n          coords[ps[15]][1] +\n          6 * (coords[ps[4]][1] + coords[ps[1]][1]) -\n          2 * (coords[ps[12]][1] + coords[ps[3]][1]) +\n          3 * (coords[ps[13]][1] + coords[ps[7]][1])) /\n          9,\n      ]);\n      ps[6] = coords.length;\n      coords.push([\n        (-4 * coords[ps[3]][0] -\n          coords[ps[12]][0] +\n          6 * (coords[ps[2]][0] + coords[ps[7]][0]) -\n          2 * (coords[ps[0]][0] + coords[ps[15]][0]) +\n          3 * (coords[ps[4]][0] + coords[ps[14]][0])) /\n          9,\n        (-4 * coords[ps[3]][1] -\n          coords[ps[12]][1] +\n          6 * (coords[ps[2]][1] + coords[ps[7]][1]) -\n          2 * (coords[ps[0]][1] + coords[ps[15]][1]) +\n          3 * (coords[ps[4]][1] + coords[ps[14]][1])) /\n          9,\n      ]);\n      ps[9] = coords.length;\n      coords.push([\n        (-4 * coords[ps[12]][0] -\n          coords[ps[3]][0] +\n          6 * (coords[ps[8]][0] + coords[ps[13]][0]) -\n          2 * (coords[ps[0]][0] + coords[ps[15]][0]) +\n          3 * (coords[ps[11]][0] + coords[ps[1]][0])) /\n          9,\n        (-4 * coords[ps[12]][1] -\n          coords[ps[3]][1] +\n          6 * (coords[ps[8]][1] + coords[ps[13]][1]) -\n          2 * (coords[ps[0]][1] + coords[ps[15]][1]) +\n          3 * (coords[ps[11]][1] + coords[ps[1]][1])) /\n          9,\n      ]);\n      ps[10] = coords.length;\n      coords.push([\n        (-4 * coords[ps[15]][0] -\n          coords[ps[0]][0] +\n          6 * (coords[ps[11]][0] + coords[ps[14]][0]) -\n          2 * (coords[ps[12]][0] + coords[ps[3]][0]) +\n          3 * (coords[ps[2]][0] + coords[ps[8]][0])) /\n          9,\n        (-4 * coords[ps[15]][1] -\n          coords[ps[0]][1] +\n          6 * (coords[ps[11]][1] + coords[ps[14]][1]) -\n          2 * (coords[ps[12]][1] + coords[ps[3]][1]) +\n          3 * (coords[ps[2]][1] + coords[ps[8]][1])) /\n          9,\n      ]);\n      mesh.figures.push({\n        type: \"patch\",\n        coords: new Int32Array(ps), // making copies of ps and cs\n        colors: new Int32Array(cs),\n      });\n    }\n  }\n\n  function decodeType7Shading(mesh, reader) {\n    var coords = mesh.coords;\n    var colors = mesh.colors;\n    var ps = new Int32Array(16); // p00, p10, ..., p30, p01, ..., p33\n    var cs = new Int32Array(4); // c00, c30, c03, c33\n    while (reader.hasData) {\n      var f = reader.readFlag();\n      if (!(0 <= f && f <= 3)) {\n        throw new FormatError(\"Unknown type7 flag\");\n      }\n      var i, ii;\n      var pi = coords.length;\n      for (i = 0, ii = f !== 0 ? 12 : 16; i < ii; i++) {\n        coords.push(reader.readCoordinate());\n      }\n      var ci = colors.length;\n      for (i = 0, ii = f !== 0 ? 2 : 4; i < ii; i++) {\n        colors.push(reader.readComponents());\n      }\n      var tmp1, tmp2, tmp3, tmp4;\n      switch (f) {\n        // prettier-ignore\n        case 0:\n          ps[12] = pi + 3; ps[13] = pi + 4;  ps[14] = pi + 5;  ps[15] = pi + 6;\n          ps[ 8] = pi + 2; ps[ 9] = pi + 13; ps[10] = pi + 14; ps[11] = pi + 7;\n          ps[ 4] = pi + 1; ps[ 5] = pi + 12; ps[ 6] = pi + 15; ps[ 7] = pi + 8;\n          ps[ 0] = pi;     ps[ 1] = pi + 11; ps[ 2] = pi + 10; ps[ 3] = pi + 9;\n          cs[2] = ci + 1; cs[3] = ci + 2;\n          cs[0] = ci;     cs[1] = ci + 3;\n          break;\n        // prettier-ignore\n        case 1:\n          tmp1 = ps[12]; tmp2 = ps[13]; tmp3 = ps[14]; tmp4 = ps[15];\n          ps[12] = tmp4;   ps[13] = pi + 0;  ps[14] = pi + 1;  ps[15] = pi + 2;\n          ps[ 8] = tmp3;   ps[ 9] = pi + 9;  ps[10] = pi + 10; ps[11] = pi + 3;\n          ps[ 4] = tmp2;   ps[ 5] = pi + 8;  ps[ 6] = pi + 11; ps[ 7] = pi + 4;\n          ps[ 0] = tmp1;   ps[ 1] = pi + 7;  ps[ 2] = pi + 6;  ps[ 3] = pi + 5;\n          tmp1 = cs[2]; tmp2 = cs[3];\n          cs[2] = tmp2;   cs[3] = ci;\n          cs[0] = tmp1;   cs[1] = ci + 1;\n          break;\n        // prettier-ignore\n        case 2:\n          tmp1 = ps[15];\n          tmp2 = ps[11];\n          ps[12] = ps[3]; ps[13] = pi + 0; ps[14] = pi + 1;  ps[15] = pi + 2;\n          ps[ 8] = ps[7]; ps[ 9] = pi + 9; ps[10] = pi + 10; ps[11] = pi + 3;\n          ps[ 4] = tmp2;  ps[ 5] = pi + 8; ps[ 6] = pi + 11; ps[ 7] = pi + 4;\n          ps[ 0] = tmp1;  ps[ 1] = pi + 7; ps[ 2] = pi + 6;  ps[ 3] = pi + 5;\n          tmp1 = cs[3];\n          cs[2] = cs[1]; cs[3] = ci;\n          cs[0] = tmp1;  cs[1] = ci + 1;\n          break;\n        // prettier-ignore\n        case 3:\n          ps[12] = ps[0];  ps[13] = pi + 0;  ps[14] = pi + 1;  ps[15] = pi + 2;\n          ps[ 8] = ps[1];  ps[ 9] = pi + 9;  ps[10] = pi + 10; ps[11] = pi + 3;\n          ps[ 4] = ps[2];  ps[ 5] = pi + 8;  ps[ 6] = pi + 11; ps[ 7] = pi + 4;\n          ps[ 0] = ps[3];  ps[ 1] = pi + 7;  ps[ 2] = pi + 6;  ps[ 3] = pi + 5;\n          cs[2] = cs[0]; cs[3] = ci;\n          cs[0] = cs[1]; cs[1] = ci + 1;\n          break;\n      }\n      mesh.figures.push({\n        type: \"patch\",\n        coords: new Int32Array(ps), // making copies of ps and cs\n        colors: new Int32Array(cs),\n      });\n    }\n  }\n\n  function updateBounds(mesh) {\n    var minX = mesh.coords[0][0],\n      minY = mesh.coords[0][1],\n      maxX = minX,\n      maxY = minY;\n    for (var i = 1, ii = mesh.coords.length; i < ii; i++) {\n      var x = mesh.coords[i][0],\n        y = mesh.coords[i][1];\n      minX = minX > x ? x : minX;\n      minY = minY > y ? y : minY;\n      maxX = maxX < x ? x : maxX;\n      maxY = maxY < y ? y : maxY;\n    }\n    mesh.bounds = [minX, minY, maxX, maxY];\n  }\n\n  function packData(mesh) {\n    var i, ii, j, jj;\n\n    var coords = mesh.coords;\n    var coordsPacked = new Float32Array(coords.length * 2);\n    for (i = 0, j = 0, ii = coords.length; i < ii; i++) {\n      var xy = coords[i];\n      coordsPacked[j++] = xy[0];\n      coordsPacked[j++] = xy[1];\n    }\n    mesh.coords = coordsPacked;\n\n    var colors = mesh.colors;\n    var colorsPacked = new Uint8Array(colors.length * 3);\n    for (i = 0, j = 0, ii = colors.length; i < ii; i++) {\n      var c = colors[i];\n      colorsPacked[j++] = c[0];\n      colorsPacked[j++] = c[1];\n      colorsPacked[j++] = c[2];\n    }\n    mesh.colors = colorsPacked;\n\n    var figures = mesh.figures;\n    for (i = 0, ii = figures.length; i < ii; i++) {\n      var figure = figures[i],\n        ps = figure.coords,\n        cs = figure.colors;\n      for (j = 0, jj = ps.length; j < jj; j++) {\n        ps[j] *= 2;\n        cs[j] *= 3;\n      }\n    }\n  }\n\n  function Mesh(stream, matrix, xref, res, pdfFunctionFactory) {\n    if (!isStream(stream)) {\n      throw new FormatError(\"Mesh data is not a stream\");\n    }\n    var dict = stream.dict;\n    this.matrix = matrix;\n    this.shadingType = dict.get(\"ShadingType\");\n    this.type = \"Pattern\";\n    const bbox = dict.getArray(\"BBox\");\n    if (Array.isArray(bbox) && bbox.length === 4) {\n      this.bbox = Util.normalizeRect(bbox);\n    } else {\n      this.bbox = null;\n    }\n    var cs = dict.get(\"ColorSpace\", \"CS\");\n    cs = ColorSpace.parse(cs, xref, res, pdfFunctionFactory);\n    this.cs = cs;\n    this.background = dict.has(\"Background\")\n      ? cs.getRgb(dict.get(\"Background\"), 0)\n      : null;\n\n    var fnObj = dict.get(\"Function\");\n    var fn = fnObj ? pdfFunctionFactory.createFromArray(fnObj) : null;\n\n    this.coords = [];\n    this.colors = [];\n    this.figures = [];\n\n    var decodeContext = {\n      bitsPerCoordinate: dict.get(\"BitsPerCoordinate\"),\n      bitsPerComponent: dict.get(\"BitsPerComponent\"),\n      bitsPerFlag: dict.get(\"BitsPerFlag\"),\n      decode: dict.getArray(\"Decode\"),\n      colorFn: fn,\n      colorSpace: cs,\n      numComps: fn ? 1 : cs.numComps,\n    };\n    var reader = new MeshStreamReader(stream, decodeContext);\n\n    var patchMesh = false;\n    switch (this.shadingType) {\n      case ShadingType.FREE_FORM_MESH:\n        decodeType4Shading(this, reader);\n        break;\n      case ShadingType.LATTICE_FORM_MESH:\n        var verticesPerRow = dict.get(\"VerticesPerRow\") | 0;\n        if (verticesPerRow < 2) {\n          throw new FormatError(\"Invalid VerticesPerRow\");\n        }\n        decodeType5Shading(this, reader, verticesPerRow);\n        break;\n      case ShadingType.COONS_PATCH_MESH:\n        decodeType6Shading(this, reader);\n        patchMesh = true;\n        break;\n      case ShadingType.TENSOR_PATCH_MESH:\n        decodeType7Shading(this, reader);\n        patchMesh = true;\n        break;\n      default:\n        unreachable(\"Unsupported mesh type.\");\n        break;\n    }\n\n    if (patchMesh) {\n      // dirty bounds calculation for determining, how dense shall be triangles\n      updateBounds(this);\n      for (var i = 0, ii = this.figures.length; i < ii; i++) {\n        buildFigureFromPatch(this, i);\n      }\n    }\n    // calculate bounds\n    updateBounds(this);\n\n    packData(this);\n  }\n\n  Mesh.prototype = {\n    getIR: function Mesh_getIR() {\n      return [\n        \"Mesh\",\n        this.shadingType,\n        this.coords,\n        this.colors,\n        this.figures,\n        this.bounds,\n        this.matrix,\n        this.bbox,\n        this.background,\n      ];\n    },\n  };\n\n  return Mesh;\n})();\n\nShadings.Dummy = (function DummyClosure() {\n  function Dummy() {\n    this.type = \"Pattern\";\n  }\n\n  Dummy.prototype = {\n    getIR: function Dummy_getIR() {\n      return [\"Dummy\"];\n    },\n  };\n  return Dummy;\n})();\n\nfunction getTilingPatternIR(operatorList, dict, args) {\n  const matrix = dict.getArray(\"Matrix\");\n  const bbox = Util.normalizeRect(dict.getArray(\"BBox\"));\n  const xstep = dict.get(\"XStep\");\n  const ystep = dict.get(\"YStep\");\n  const paintType = dict.get(\"PaintType\");\n  const tilingType = dict.get(\"TilingType\");\n\n  // Ensure that the pattern has a non-zero width and height, to prevent errors\n  // in `pattern_helper.js` (fixes issue8330.pdf).\n  if (bbox[2] - bbox[0] === 0 || bbox[3] - bbox[1] === 0) {\n    throw new FormatError(`Invalid getTilingPatternIR /BBox array: [${bbox}].`);\n  }\n\n  return [\n    \"TilingPattern\",\n    args,\n    operatorList,\n    matrix,\n    bbox,\n    xstep,\n    ystep,\n    paintType,\n    tilingType,\n  ];\n}\n\nexport { Pattern, getTilingPatternIR };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { warn } from \"../shared/util.js\";\n\n// Character types for symbols from 0000 to 00FF.\n// Source: ftp://ftp.unicode.org/Public/UNIDATA/UnicodeData.txt\n// prettier-ignore\nvar baseTypes = [\n  \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"S\", \"B\", \"S\",\n  \"WS\", \"B\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\",\n  \"BN\", \"BN\", \"BN\", \"BN\", \"B\", \"B\", \"B\", \"S\", \"WS\", \"ON\", \"ON\", \"ET\",\n  \"ET\", \"ET\", \"ON\", \"ON\", \"ON\", \"ON\", \"ON\", \"ES\", \"CS\", \"ES\", \"CS\", \"CS\",\n  \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"CS\", \"ON\",\n  \"ON\", \"ON\", \"ON\", \"ON\", \"ON\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\",\n  \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\",\n  \"L\", \"L\", \"L\", \"L\", \"ON\", \"ON\", \"ON\", \"ON\", \"ON\", \"ON\", \"L\", \"L\", \"L\",\n  \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\",\n  \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"ON\", \"ON\", \"ON\", \"ON\",\n  \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"B\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\",\n  \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\",\n  \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"CS\", \"ON\", \"ET\",\n  \"ET\", \"ET\", \"ET\", \"ON\", \"ON\", \"ON\", \"ON\", \"L\", \"ON\", \"ON\", \"BN\", \"ON\",\n  \"ON\", \"ET\", \"ET\", \"EN\", \"EN\", \"ON\", \"L\", \"ON\", \"ON\", \"ON\", \"EN\", \"L\",\n  \"ON\", \"ON\", \"ON\", \"ON\", \"ON\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\",\n  \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\",\n  \"L\", \"ON\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\",\n  \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\",\n  \"L\", \"L\", \"L\", \"L\", \"L\", \"ON\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\"\n];\n\n// Character types for symbols from 0600 to 06FF.\n// Source: ftp://ftp.unicode.org/Public/UNIDATA/UnicodeData.txt\n// Note that 061D does not exist in the Unicode standard (see\n// http://unicode.org/charts/PDF/U0600.pdf), so we replace it with an\n// empty string and issue a warning if we encounter this character. The\n// empty string is required to properly index the items after it.\n// prettier-ignore\nvar arabicTypes = [\n  \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"ON\", \"ON\", \"AL\", \"ET\", \"ET\", \"AL\",\n  \"CS\", \"AL\", \"ON\", \"ON\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\",\n  \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"AL\", \"AL\", \"\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\",\n  \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\",\n  \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\",\n  \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\",\n  \"AL\", \"AL\", \"AL\", \"AL\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\",\n  \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\",\n  \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\",\n  \"AN\", \"AN\", \"AN\", \"ET\", \"AN\", \"AN\", \"AL\", \"AL\", \"AL\", \"NSM\", \"AL\", \"AL\",\n  \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\",\n  \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\",\n  \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\",\n  \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\",\n  \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\",\n  \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\",\n  \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\",\n  \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\",\n  \"AL\", \"AL\", \"AL\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"AN\",\n  \"ON\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"AL\", \"AL\", \"NSM\", \"NSM\",\n  \"ON\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"AL\", \"AL\", \"EN\", \"EN\", \"EN\", \"EN\",\n  \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\"\n];\n\nfunction isOdd(i) {\n  return (i & 1) !== 0;\n}\n\nfunction isEven(i) {\n  return (i & 1) === 0;\n}\n\nfunction findUnequal(arr, start, value) {\n  for (var j = start, jj = arr.length; j < jj; ++j) {\n    if (arr[j] !== value) {\n      return j;\n    }\n  }\n  return j;\n}\n\nfunction setValues(arr, start, end, value) {\n  for (var j = start; j < end; ++j) {\n    arr[j] = value;\n  }\n}\n\nfunction reverseValues(arr, start, end) {\n  for (var i = start, j = end - 1; i < j; ++i, --j) {\n    var temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n  }\n}\n\nfunction createBidiText(str, isLTR, vertical = false) {\n  let dir = \"ltr\";\n  if (vertical) {\n    dir = \"ttb\";\n  } else if (!isLTR) {\n    dir = \"rtl\";\n  }\n  return { str, dir };\n}\n\n// These are used in bidi(), which is called frequently. We re-use them on\n// each call to avoid unnecessary allocations.\nvar chars = [];\nvar types = [];\n\nfunction bidi(str, startLevel, vertical) {\n  var isLTR = true;\n  var strLength = str.length;\n  if (strLength === 0 || vertical) {\n    return createBidiText(str, isLTR, vertical);\n  }\n\n  // Get types and fill arrays\n  chars.length = strLength;\n  types.length = strLength;\n  var numBidi = 0;\n\n  var i, ii;\n  for (i = 0; i < strLength; ++i) {\n    chars[i] = str.charAt(i);\n\n    var charCode = str.charCodeAt(i);\n    var charType = \"L\";\n    if (charCode <= 0x00ff) {\n      charType = baseTypes[charCode];\n    } else if (0x0590 <= charCode && charCode <= 0x05f4) {\n      charType = \"R\";\n    } else if (0x0600 <= charCode && charCode <= 0x06ff) {\n      charType = arabicTypes[charCode & 0xff];\n      if (!charType) {\n        warn(\"Bidi: invalid Unicode character \" + charCode.toString(16));\n      }\n    } else if (0x0700 <= charCode && charCode <= 0x08ac) {\n      charType = \"AL\";\n    }\n    if (charType === \"R\" || charType === \"AL\" || charType === \"AN\") {\n      numBidi++;\n    }\n    types[i] = charType;\n  }\n\n  // Detect the bidi method\n  // - If there are no rtl characters then no bidi needed\n  // - If less than 30% chars are rtl then string is primarily ltr\n  // - If more than 30% chars are rtl then string is primarily rtl\n  if (numBidi === 0) {\n    isLTR = true;\n    return createBidiText(str, isLTR);\n  }\n\n  if (startLevel === -1) {\n    if (numBidi / strLength < 0.3) {\n      isLTR = true;\n      startLevel = 0;\n    } else {\n      isLTR = false;\n      startLevel = 1;\n    }\n  }\n\n  var levels = [];\n  for (i = 0; i < strLength; ++i) {\n    levels[i] = startLevel;\n  }\n\n  /*\n   X1-X10: skip most of this, since we are NOT doing the embeddings.\n   */\n  var e = isOdd(startLevel) ? \"R\" : \"L\";\n  var sor = e;\n  var eor = sor;\n\n  /*\n   W1. Examine each non-spacing mark (NSM) in the level run, and change the\n   type of the NSM to the type of the previous character. If the NSM is at the\n   start of the level run, it will get the type of sor.\n   */\n  var lastType = sor;\n  for (i = 0; i < strLength; ++i) {\n    if (types[i] === \"NSM\") {\n      types[i] = lastType;\n    } else {\n      lastType = types[i];\n    }\n  }\n\n  /*\n   W2. Search backwards from each instance of a European number until the\n   first strong type (R, L, AL, or sor) is found.  If an AL is found, change\n   the type of the European number to Arabic number.\n   */\n  lastType = sor;\n  var t;\n  for (i = 0; i < strLength; ++i) {\n    t = types[i];\n    if (t === \"EN\") {\n      types[i] = lastType === \"AL\" ? \"AN\" : \"EN\";\n    } else if (t === \"R\" || t === \"L\" || t === \"AL\") {\n      lastType = t;\n    }\n  }\n\n  /*\n   W3. Change all ALs to R.\n   */\n  for (i = 0; i < strLength; ++i) {\n    t = types[i];\n    if (t === \"AL\") {\n      types[i] = \"R\";\n    }\n  }\n\n  /*\n   W4. A single European separator between two European numbers changes to a\n   European number. A single common separator between two numbers of the same\n   type changes to that type:\n   */\n  for (i = 1; i < strLength - 1; ++i) {\n    if (types[i] === \"ES\" && types[i - 1] === \"EN\" && types[i + 1] === \"EN\") {\n      types[i] = \"EN\";\n    }\n    if (\n      types[i] === \"CS\" &&\n      (types[i - 1] === \"EN\" || types[i - 1] === \"AN\") &&\n      types[i + 1] === types[i - 1]\n    ) {\n      types[i] = types[i - 1];\n    }\n  }\n\n  /*\n   W5. A sequence of European terminators adjacent to European numbers changes\n   to all European numbers:\n   */\n  for (i = 0; i < strLength; ++i) {\n    if (types[i] === \"EN\") {\n      // do before\n      var j;\n      for (j = i - 1; j >= 0; --j) {\n        if (types[j] !== \"ET\") {\n          break;\n        }\n        types[j] = \"EN\";\n      }\n      // do after\n      for (j = i + 1; j < strLength; ++j) {\n        if (types[j] !== \"ET\") {\n          break;\n        }\n        types[j] = \"EN\";\n      }\n    }\n  }\n\n  /*\n   W6. Otherwise, separators and terminators change to Other Neutral:\n   */\n  for (i = 0; i < strLength; ++i) {\n    t = types[i];\n    if (t === \"WS\" || t === \"ES\" || t === \"ET\" || t === \"CS\") {\n      types[i] = \"ON\";\n    }\n  }\n\n  /*\n   W7. Search backwards from each instance of a European number until the\n   first strong type (R, L, or sor) is found. If an L is found,  then change\n   the type of the European number to L.\n   */\n  lastType = sor;\n  for (i = 0; i < strLength; ++i) {\n    t = types[i];\n    if (t === \"EN\") {\n      types[i] = lastType === \"L\" ? \"L\" : \"EN\";\n    } else if (t === \"R\" || t === \"L\") {\n      lastType = t;\n    }\n  }\n\n  /*\n   N1. A sequence of neutrals takes the direction of the surrounding strong\n   text if the text on both sides has the same direction. European and Arabic\n   numbers are treated as though they were R. Start-of-level-run (sor) and\n   end-of-level-run (eor) are used at level run boundaries.\n   */\n  for (i = 0; i < strLength; ++i) {\n    if (types[i] === \"ON\") {\n      var end = findUnequal(types, i + 1, \"ON\");\n      var before = sor;\n      if (i > 0) {\n        before = types[i - 1];\n      }\n\n      var after = eor;\n      if (end + 1 < strLength) {\n        after = types[end + 1];\n      }\n      if (before !== \"L\") {\n        before = \"R\";\n      }\n      if (after !== \"L\") {\n        after = \"R\";\n      }\n      if (before === after) {\n        setValues(types, i, end, before);\n      }\n      i = end - 1; // reset to end (-1 so next iteration is ok)\n    }\n  }\n\n  /*\n   N2. Any remaining neutrals take the embedding direction.\n   */\n  for (i = 0; i < strLength; ++i) {\n    if (types[i] === \"ON\") {\n      types[i] = e;\n    }\n  }\n\n  /*\n   I1. For all characters with an even (left-to-right) embedding direction,\n   those of type R go up one level and those of type AN or EN go up two\n   levels.\n   I2. For all characters with an odd (right-to-left) embedding direction,\n   those of type L, EN or AN go up one level.\n   */\n  for (i = 0; i < strLength; ++i) {\n    t = types[i];\n    if (isEven(levels[i])) {\n      if (t === \"R\") {\n        levels[i] += 1;\n      } else if (t === \"AN\" || t === \"EN\") {\n        levels[i] += 2;\n      }\n    } else {\n      // isOdd\n      if (t === \"L\" || t === \"AN\" || t === \"EN\") {\n        levels[i] += 1;\n      }\n    }\n  }\n\n  /*\n   L1. On each line, reset the embedding level of the following characters to\n   the paragraph embedding level:\n\n   segment separators,\n   paragraph separators,\n   any sequence of whitespace characters preceding a segment separator or\n   paragraph separator, and any sequence of white space characters at the end\n   of the line.\n   */\n\n  // don't bother as text is only single line\n\n  /*\n   L2. From the highest level found in the text to the lowest odd level on\n   each line, reverse any contiguous sequence of characters that are at that\n   level or higher.\n   */\n\n  // find highest level & lowest odd level\n  var highestLevel = -1;\n  var lowestOddLevel = 99;\n  var level;\n  for (i = 0, ii = levels.length; i < ii; ++i) {\n    level = levels[i];\n    if (highestLevel < level) {\n      highestLevel = level;\n    }\n    if (lowestOddLevel > level && isOdd(level)) {\n      lowestOddLevel = level;\n    }\n  }\n\n  // now reverse between those limits\n  for (level = highestLevel; level >= lowestOddLevel; --level) {\n    // find segments to reverse\n    var start = -1;\n    for (i = 0, ii = levels.length; i < ii; ++i) {\n      if (levels[i] < level) {\n        if (start >= 0) {\n          reverseValues(chars, start, i);\n          start = -1;\n        }\n      } else if (start < 0) {\n        start = i;\n      }\n    }\n    if (start >= 0) {\n      reverseValues(chars, start, levels.length);\n    }\n  }\n\n  /*\n   L3. Combining marks applied to a right-to-left base character will at this\n   point precede their base character. If the rendering engine expects them to\n   follow the base characters in the final display process, then the ordering\n   of the marks and the base character must be reversed.\n   */\n\n  // don't bother for now\n\n  /*\n   L4. A character that possesses the mirrored property as specified by\n   Section 4.7, Mirrored, must be depicted by a mirrored glyph if the resolved\n   directionality of that character is R.\n   */\n\n  // don't mirror as characters are already mirrored in the pdf\n\n  // Finally, return string\n  for (i = 0, ii = chars.length; i < ii; ++i) {\n    var ch = chars[i];\n    if (ch === \"<\" || ch === \">\") {\n      chars[i] = \"\";\n    }\n  }\n  return createBidiText(chars.join(\"\"), isLTR);\n}\n\nexport { bidi };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getLookupTableFactory } from \"./core_utils.js\";\n\n// The Metrics object contains glyph widths (in glyph space units).\n// As per PDF spec, for most fonts (Type 3 being an exception) a glyph\n// space unit corresponds to 1/1000th of text space unit.\nvar getMetrics = getLookupTableFactory(function (t) {\n  t.Courier = 600;\n  t[\"Courier-Bold\"] = 600;\n  t[\"Courier-BoldOblique\"] = 600;\n  t[\"Courier-Oblique\"] = 600;\n  // eslint-disable-next-line no-shadow\n  t.Helvetica = getLookupTableFactory(function (t) {\n    t.space = 278;\n    t.exclam = 278;\n    t.quotedbl = 355;\n    t.numbersign = 556;\n    t.dollar = 556;\n    t.percent = 889;\n    t.ampersand = 667;\n    t.quoteright = 222;\n    t.parenleft = 333;\n    t.parenright = 333;\n    t.asterisk = 389;\n    t.plus = 584;\n    t.comma = 278;\n    t.hyphen = 333;\n    t.period = 278;\n    t.slash = 278;\n    t.zero = 556;\n    t.one = 556;\n    t.two = 556;\n    t.three = 556;\n    t.four = 556;\n    t.five = 556;\n    t.six = 556;\n    t.seven = 556;\n    t.eight = 556;\n    t.nine = 556;\n    t.colon = 278;\n    t.semicolon = 278;\n    t.less = 584;\n    t.equal = 584;\n    t.greater = 584;\n    t.question = 556;\n    t.at = 1015;\n    t.A = 667;\n    t.B = 667;\n    t.C = 722;\n    t.D = 722;\n    t.E = 667;\n    t.F = 611;\n    t.G = 778;\n    t.H = 722;\n    t.I = 278;\n    t.J = 500;\n    t.K = 667;\n    t.L = 556;\n    t.M = 833;\n    t.N = 722;\n    t.O = 778;\n    t.P = 667;\n    t.Q = 778;\n    t.R = 722;\n    t.S = 667;\n    t.T = 611;\n    t.U = 722;\n    t.V = 667;\n    t.W = 944;\n    t.X = 667;\n    t.Y = 667;\n    t.Z = 611;\n    t.bracketleft = 278;\n    t.backslash = 278;\n    t.bracketright = 278;\n    t.asciicircum = 469;\n    t.underscore = 556;\n    t.quoteleft = 222;\n    t.a = 556;\n    t.b = 556;\n    t.c = 500;\n    t.d = 556;\n    t.e = 556;\n    t.f = 278;\n    t.g = 556;\n    t.h = 556;\n    t.i = 222;\n    t.j = 222;\n    t.k = 500;\n    t.l = 222;\n    t.m = 833;\n    t.n = 556;\n    t.o = 556;\n    t.p = 556;\n    t.q = 556;\n    t.r = 333;\n    t.s = 500;\n    t.t = 278;\n    t.u = 556;\n    t.v = 500;\n    t.w = 722;\n    t.x = 500;\n    t.y = 500;\n    t.z = 500;\n    t.braceleft = 334;\n    t.bar = 260;\n    t.braceright = 334;\n    t.asciitilde = 584;\n    t.exclamdown = 333;\n    t.cent = 556;\n    t.sterling = 556;\n    t.fraction = 167;\n    t.yen = 556;\n    t.florin = 556;\n    t.section = 556;\n    t.currency = 556;\n    t.quotesingle = 191;\n    t.quotedblleft = 333;\n    t.guillemotleft = 556;\n    t.guilsinglleft = 333;\n    t.guilsinglright = 333;\n    t.fi = 500;\n    t.fl = 500;\n    t.endash = 556;\n    t.dagger = 556;\n    t.daggerdbl = 556;\n    t.periodcentered = 278;\n    t.paragraph = 537;\n    t.bullet = 350;\n    t.quotesinglbase = 222;\n    t.quotedblbase = 333;\n    t.quotedblright = 333;\n    t.guillemotright = 556;\n    t.ellipsis = 1000;\n    t.perthousand = 1000;\n    t.questiondown = 611;\n    t.grave = 333;\n    t.acute = 333;\n    t.circumflex = 333;\n    t.tilde = 333;\n    t.macron = 333;\n    t.breve = 333;\n    t.dotaccent = 333;\n    t.dieresis = 333;\n    t.ring = 333;\n    t.cedilla = 333;\n    t.hungarumlaut = 333;\n    t.ogonek = 333;\n    t.caron = 333;\n    t.emdash = 1000;\n    t.AE = 1000;\n    t.ordfeminine = 370;\n    t.Lslash = 556;\n    t.Oslash = 778;\n    t.OE = 1000;\n    t.ordmasculine = 365;\n    t.ae = 889;\n    t.dotlessi = 278;\n    t.lslash = 222;\n    t.oslash = 611;\n    t.oe = 944;\n    t.germandbls = 611;\n    t.Idieresis = 278;\n    t.eacute = 556;\n    t.abreve = 556;\n    t.uhungarumlaut = 556;\n    t.ecaron = 556;\n    t.Ydieresis = 667;\n    t.divide = 584;\n    t.Yacute = 667;\n    t.Acircumflex = 667;\n    t.aacute = 556;\n    t.Ucircumflex = 722;\n    t.yacute = 500;\n    t.scommaaccent = 500;\n    t.ecircumflex = 556;\n    t.Uring = 722;\n    t.Udieresis = 722;\n    t.aogonek = 556;\n    t.Uacute = 722;\n    t.uogonek = 556;\n    t.Edieresis = 667;\n    t.Dcroat = 722;\n    t.commaaccent = 250;\n    t.copyright = 737;\n    t.Emacron = 667;\n    t.ccaron = 500;\n    t.aring = 556;\n    t.Ncommaaccent = 722;\n    t.lacute = 222;\n    t.agrave = 556;\n    t.Tcommaaccent = 611;\n    t.Cacute = 722;\n    t.atilde = 556;\n    t.Edotaccent = 667;\n    t.scaron = 500;\n    t.scedilla = 500;\n    t.iacute = 278;\n    t.lozenge = 471;\n    t.Rcaron = 722;\n    t.Gcommaaccent = 778;\n    t.ucircumflex = 556;\n    t.acircumflex = 556;\n    t.Amacron = 667;\n    t.rcaron = 333;\n    t.ccedilla = 500;\n    t.Zdotaccent = 611;\n    t.Thorn = 667;\n    t.Omacron = 778;\n    t.Racute = 722;\n    t.Sacute = 667;\n    t.dcaron = 643;\n    t.Umacron = 722;\n    t.uring = 556;\n    t.threesuperior = 333;\n    t.Ograve = 778;\n    t.Agrave = 667;\n    t.Abreve = 667;\n    t.multiply = 584;\n    t.uacute = 556;\n    t.Tcaron = 611;\n    t.partialdiff = 476;\n    t.ydieresis = 500;\n    t.Nacute = 722;\n    t.icircumflex = 278;\n    t.Ecircumflex = 667;\n    t.adieresis = 556;\n    t.edieresis = 556;\n    t.cacute = 500;\n    t.nacute = 556;\n    t.umacron = 556;\n    t.Ncaron = 722;\n    t.Iacute = 278;\n    t.plusminus = 584;\n    t.brokenbar = 260;\n    t.registered = 737;\n    t.Gbreve = 778;\n    t.Idotaccent = 278;\n    t.summation = 600;\n    t.Egrave = 667;\n    t.racute = 333;\n    t.omacron = 556;\n    t.Zacute = 611;\n    t.Zcaron = 611;\n    t.greaterequal = 549;\n    t.Eth = 722;\n    t.Ccedilla = 722;\n    t.lcommaaccent = 222;\n    t.tcaron = 317;\n    t.eogonek = 556;\n    t.Uogonek = 722;\n    t.Aacute = 667;\n    t.Adieresis = 667;\n    t.egrave = 556;\n    t.zacute = 500;\n    t.iogonek = 222;\n    t.Oacute = 778;\n    t.oacute = 556;\n    t.amacron = 556;\n    t.sacute = 500;\n    t.idieresis = 278;\n    t.Ocircumflex = 778;\n    t.Ugrave = 722;\n    t.Delta = 612;\n    t.thorn = 556;\n    t.twosuperior = 333;\n    t.Odieresis = 778;\n    t.mu = 556;\n    t.igrave = 278;\n    t.ohungarumlaut = 556;\n    t.Eogonek = 667;\n    t.dcroat = 556;\n    t.threequarters = 834;\n    t.Scedilla = 667;\n    t.lcaron = 299;\n    t.Kcommaaccent = 667;\n    t.Lacute = 556;\n    t.trademark = 1000;\n    t.edotaccent = 556;\n    t.Igrave = 278;\n    t.Imacron = 278;\n    t.Lcaron = 556;\n    t.onehalf = 834;\n    t.lessequal = 549;\n    t.ocircumflex = 556;\n    t.ntilde = 556;\n    t.Uhungarumlaut = 722;\n    t.Eacute = 667;\n    t.emacron = 556;\n    t.gbreve = 556;\n    t.onequarter = 834;\n    t.Scaron = 667;\n    t.Scommaaccent = 667;\n    t.Ohungarumlaut = 778;\n    t.degree = 400;\n    t.ograve = 556;\n    t.Ccaron = 722;\n    t.ugrave = 556;\n    t.radical = 453;\n    t.Dcaron = 722;\n    t.rcommaaccent = 333;\n    t.Ntilde = 722;\n    t.otilde = 556;\n    t.Rcommaaccent = 722;\n    t.Lcommaaccent = 556;\n    t.Atilde = 667;\n    t.Aogonek = 667;\n    t.Aring = 667;\n    t.Otilde = 778;\n    t.zdotaccent = 500;\n    t.Ecaron = 667;\n    t.Iogonek = 278;\n    t.kcommaaccent = 500;\n    t.minus = 584;\n    t.Icircumflex = 278;\n    t.ncaron = 556;\n    t.tcommaaccent = 278;\n    t.logicalnot = 584;\n    t.odieresis = 556;\n    t.udieresis = 556;\n    t.notequal = 549;\n    t.gcommaaccent = 556;\n    t.eth = 556;\n    t.zcaron = 500;\n    t.ncommaaccent = 556;\n    t.onesuperior = 333;\n    t.imacron = 278;\n    t.Euro = 556;\n  });\n  // eslint-disable-next-line no-shadow\n  t[\"Helvetica-Bold\"] = getLookupTableFactory(function (t) {\n    t.space = 278;\n    t.exclam = 333;\n    t.quotedbl = 474;\n    t.numbersign = 556;\n    t.dollar = 556;\n    t.percent = 889;\n    t.ampersand = 722;\n    t.quoteright = 278;\n    t.parenleft = 333;\n    t.parenright = 333;\n    t.asterisk = 389;\n    t.plus = 584;\n    t.comma = 278;\n    t.hyphen = 333;\n    t.period = 278;\n    t.slash = 278;\n    t.zero = 556;\n    t.one = 556;\n    t.two = 556;\n    t.three = 556;\n    t.four = 556;\n    t.five = 556;\n    t.six = 556;\n    t.seven = 556;\n    t.eight = 556;\n    t.nine = 556;\n    t.colon = 333;\n    t.semicolon = 333;\n    t.less = 584;\n    t.equal = 584;\n    t.greater = 584;\n    t.question = 611;\n    t.at = 975;\n    t.A = 722;\n    t.B = 722;\n    t.C = 722;\n    t.D = 722;\n    t.E = 667;\n    t.F = 611;\n    t.G = 778;\n    t.H = 722;\n    t.I = 278;\n    t.J = 556;\n    t.K = 722;\n    t.L = 611;\n    t.M = 833;\n    t.N = 722;\n    t.O = 778;\n    t.P = 667;\n    t.Q = 778;\n    t.R = 722;\n    t.S = 667;\n    t.T = 611;\n    t.U = 722;\n    t.V = 667;\n    t.W = 944;\n    t.X = 667;\n    t.Y = 667;\n    t.Z = 611;\n    t.bracketleft = 333;\n    t.backslash = 278;\n    t.bracketright = 333;\n    t.asciicircum = 584;\n    t.underscore = 556;\n    t.quoteleft = 278;\n    t.a = 556;\n    t.b = 611;\n    t.c = 556;\n    t.d = 611;\n    t.e = 556;\n    t.f = 333;\n    t.g = 611;\n    t.h = 611;\n    t.i = 278;\n    t.j = 278;\n    t.k = 556;\n    t.l = 278;\n    t.m = 889;\n    t.n = 611;\n    t.o = 611;\n    t.p = 611;\n    t.q = 611;\n    t.r = 389;\n    t.s = 556;\n    t.t = 333;\n    t.u = 611;\n    t.v = 556;\n    t.w = 778;\n    t.x = 556;\n    t.y = 556;\n    t.z = 500;\n    t.braceleft = 389;\n    t.bar = 280;\n    t.braceright = 389;\n    t.asciitilde = 584;\n    t.exclamdown = 333;\n    t.cent = 556;\n    t.sterling = 556;\n    t.fraction = 167;\n    t.yen = 556;\n    t.florin = 556;\n    t.section = 556;\n    t.currency = 556;\n    t.quotesingle = 238;\n    t.quotedblleft = 500;\n    t.guillemotleft = 556;\n    t.guilsinglleft = 333;\n    t.guilsinglright = 333;\n    t.fi = 611;\n    t.fl = 611;\n    t.endash = 556;\n    t.dagger = 556;\n    t.daggerdbl = 556;\n    t.periodcentered = 278;\n    t.paragraph = 556;\n    t.bullet = 350;\n    t.quotesinglbase = 278;\n    t.quotedblbase = 500;\n    t.quotedblright = 500;\n    t.guillemotright = 556;\n    t.ellipsis = 1000;\n    t.perthousand = 1000;\n    t.questiondown = 611;\n    t.grave = 333;\n    t.acute = 333;\n    t.circumflex = 333;\n    t.tilde = 333;\n    t.macron = 333;\n    t.breve = 333;\n    t.dotaccent = 333;\n    t.dieresis = 333;\n    t.ring = 333;\n    t.cedilla = 333;\n    t.hungarumlaut = 333;\n    t.ogonek = 333;\n    t.caron = 333;\n    t.emdash = 1000;\n    t.AE = 1000;\n    t.ordfeminine = 370;\n    t.Lslash = 611;\n    t.Oslash = 778;\n    t.OE = 1000;\n    t.ordmasculine = 365;\n    t.ae = 889;\n    t.dotlessi = 278;\n    t.lslash = 278;\n    t.oslash = 611;\n    t.oe = 944;\n    t.germandbls = 611;\n    t.Idieresis = 278;\n    t.eacute = 556;\n    t.abreve = 556;\n    t.uhungarumlaut = 611;\n    t.ecaron = 556;\n    t.Ydieresis = 667;\n    t.divide = 584;\n    t.Yacute = 667;\n    t.Acircumflex = 722;\n    t.aacute = 556;\n    t.Ucircumflex = 722;\n    t.yacute = 556;\n    t.scommaaccent = 556;\n    t.ecircumflex = 556;\n    t.Uring = 722;\n    t.Udieresis = 722;\n    t.aogonek = 556;\n    t.Uacute = 722;\n    t.uogonek = 611;\n    t.Edieresis = 667;\n    t.Dcroat = 722;\n    t.commaaccent = 250;\n    t.copyright = 737;\n    t.Emacron = 667;\n    t.ccaron = 556;\n    t.aring = 556;\n    t.Ncommaaccent = 722;\n    t.lacute = 278;\n    t.agrave = 556;\n    t.Tcommaaccent = 611;\n    t.Cacute = 722;\n    t.atilde = 556;\n    t.Edotaccent = 667;\n    t.scaron = 556;\n    t.scedilla = 556;\n    t.iacute = 278;\n    t.lozenge = 494;\n    t.Rcaron = 722;\n    t.Gcommaaccent = 778;\n    t.ucircumflex = 611;\n    t.acircumflex = 556;\n    t.Amacron = 722;\n    t.rcaron = 389;\n    t.ccedilla = 556;\n    t.Zdotaccent = 611;\n    t.Thorn = 667;\n    t.Omacron = 778;\n    t.Racute = 722;\n    t.Sacute = 667;\n    t.dcaron = 743;\n    t.Umacron = 722;\n    t.uring = 611;\n    t.threesuperior = 333;\n    t.Ograve = 778;\n    t.Agrave = 722;\n    t.Abreve = 722;\n    t.multiply = 584;\n    t.uacute = 611;\n    t.Tcaron = 611;\n    t.partialdiff = 494;\n    t.ydieresis = 556;\n    t.Nacute = 722;\n    t.icircumflex = 278;\n    t.Ecircumflex = 667;\n    t.adieresis = 556;\n    t.edieresis = 556;\n    t.cacute = 556;\n    t.nacute = 611;\n    t.umacron = 611;\n    t.Ncaron = 722;\n    t.Iacute = 278;\n    t.plusminus = 584;\n    t.brokenbar = 280;\n    t.registered = 737;\n    t.Gbreve = 778;\n    t.Idotaccent = 278;\n    t.summation = 600;\n    t.Egrave = 667;\n    t.racute = 389;\n    t.omacron = 611;\n    t.Zacute = 611;\n    t.Zcaron = 611;\n    t.greaterequal = 549;\n    t.Eth = 722;\n    t.Ccedilla = 722;\n    t.lcommaaccent = 278;\n    t.tcaron = 389;\n    t.eogonek = 556;\n    t.Uogonek = 722;\n    t.Aacute = 722;\n    t.Adieresis = 722;\n    t.egrave = 556;\n    t.zacute = 500;\n    t.iogonek = 278;\n    t.Oacute = 778;\n    t.oacute = 611;\n    t.amacron = 556;\n    t.sacute = 556;\n    t.idieresis = 278;\n    t.Ocircumflex = 778;\n    t.Ugrave = 722;\n    t.Delta = 612;\n    t.thorn = 611;\n    t.twosuperior = 333;\n    t.Odieresis = 778;\n    t.mu = 611;\n    t.igrave = 278;\n    t.ohungarumlaut = 611;\n    t.Eogonek = 667;\n    t.dcroat = 611;\n    t.threequarters = 834;\n    t.Scedilla = 667;\n    t.lcaron = 400;\n    t.Kcommaaccent = 722;\n    t.Lacute = 611;\n    t.trademark = 1000;\n    t.edotaccent = 556;\n    t.Igrave = 278;\n    t.Imacron = 278;\n    t.Lcaron = 611;\n    t.onehalf = 834;\n    t.lessequal = 549;\n    t.ocircumflex = 611;\n    t.ntilde = 611;\n    t.Uhungarumlaut = 722;\n    t.Eacute = 667;\n    t.emacron = 556;\n    t.gbreve = 611;\n    t.onequarter = 834;\n    t.Scaron = 667;\n    t.Scommaaccent = 667;\n    t.Ohungarumlaut = 778;\n    t.degree = 400;\n    t.ograve = 611;\n    t.Ccaron = 722;\n    t.ugrave = 611;\n    t.radical = 549;\n    t.Dcaron = 722;\n    t.rcommaaccent = 389;\n    t.Ntilde = 722;\n    t.otilde = 611;\n    t.Rcommaaccent = 722;\n    t.Lcommaaccent = 611;\n    t.Atilde = 722;\n    t.Aogonek = 722;\n    t.Aring = 722;\n    t.Otilde = 778;\n    t.zdotaccent = 500;\n    t.Ecaron = 667;\n    t.Iogonek = 278;\n    t.kcommaaccent = 556;\n    t.minus = 584;\n    t.Icircumflex = 278;\n    t.ncaron = 611;\n    t.tcommaaccent = 333;\n    t.logicalnot = 584;\n    t.odieresis = 611;\n    t.udieresis = 611;\n    t.notequal = 549;\n    t.gcommaaccent = 611;\n    t.eth = 611;\n    t.zcaron = 500;\n    t.ncommaaccent = 611;\n    t.onesuperior = 333;\n    t.imacron = 278;\n    t.Euro = 556;\n  });\n  // eslint-disable-next-line no-shadow\n  t[\"Helvetica-BoldOblique\"] = getLookupTableFactory(function (t) {\n    t.space = 278;\n    t.exclam = 333;\n    t.quotedbl = 474;\n    t.numbersign = 556;\n    t.dollar = 556;\n    t.percent = 889;\n    t.ampersand = 722;\n    t.quoteright = 278;\n    t.parenleft = 333;\n    t.parenright = 333;\n    t.asterisk = 389;\n    t.plus = 584;\n    t.comma = 278;\n    t.hyphen = 333;\n    t.period = 278;\n    t.slash = 278;\n    t.zero = 556;\n    t.one = 556;\n    t.two = 556;\n    t.three = 556;\n    t.four = 556;\n    t.five = 556;\n    t.six = 556;\n    t.seven = 556;\n    t.eight = 556;\n    t.nine = 556;\n    t.colon = 333;\n    t.semicolon = 333;\n    t.less = 584;\n    t.equal = 584;\n    t.greater = 584;\n    t.question = 611;\n    t.at = 975;\n    t.A = 722;\n    t.B = 722;\n    t.C = 722;\n    t.D = 722;\n    t.E = 667;\n    t.F = 611;\n    t.G = 778;\n    t.H = 722;\n    t.I = 278;\n    t.J = 556;\n    t.K = 722;\n    t.L = 611;\n    t.M = 833;\n    t.N = 722;\n    t.O = 778;\n    t.P = 667;\n    t.Q = 778;\n    t.R = 722;\n    t.S = 667;\n    t.T = 611;\n    t.U = 722;\n    t.V = 667;\n    t.W = 944;\n    t.X = 667;\n    t.Y = 667;\n    t.Z = 611;\n    t.bracketleft = 333;\n    t.backslash = 278;\n    t.bracketright = 333;\n    t.asciicircum = 584;\n    t.underscore = 556;\n    t.quoteleft = 278;\n    t.a = 556;\n    t.b = 611;\n    t.c = 556;\n    t.d = 611;\n    t.e = 556;\n    t.f = 333;\n    t.g = 611;\n    t.h = 611;\n    t.i = 278;\n    t.j = 278;\n    t.k = 556;\n    t.l = 278;\n    t.m = 889;\n    t.n = 611;\n    t.o = 611;\n    t.p = 611;\n    t.q = 611;\n    t.r = 389;\n    t.s = 556;\n    t.t = 333;\n    t.u = 611;\n    t.v = 556;\n    t.w = 778;\n    t.x = 556;\n    t.y = 556;\n    t.z = 500;\n    t.braceleft = 389;\n    t.bar = 280;\n    t.braceright = 389;\n    t.asciitilde = 584;\n    t.exclamdown = 333;\n    t.cent = 556;\n    t.sterling = 556;\n    t.fraction = 167;\n    t.yen = 556;\n    t.florin = 556;\n    t.section = 556;\n    t.currency = 556;\n    t.quotesingle = 238;\n    t.quotedblleft = 500;\n    t.guillemotleft = 556;\n    t.guilsinglleft = 333;\n    t.guilsinglright = 333;\n    t.fi = 611;\n    t.fl = 611;\n    t.endash = 556;\n    t.dagger = 556;\n    t.daggerdbl = 556;\n    t.periodcentered = 278;\n    t.paragraph = 556;\n    t.bullet = 350;\n    t.quotesinglbase = 278;\n    t.quotedblbase = 500;\n    t.quotedblright = 500;\n    t.guillemotright = 556;\n    t.ellipsis = 1000;\n    t.perthousand = 1000;\n    t.questiondown = 611;\n    t.grave = 333;\n    t.acute = 333;\n    t.circumflex = 333;\n    t.tilde = 333;\n    t.macron = 333;\n    t.breve = 333;\n    t.dotaccent = 333;\n    t.dieresis = 333;\n    t.ring = 333;\n    t.cedilla = 333;\n    t.hungarumlaut = 333;\n    t.ogonek = 333;\n    t.caron = 333;\n    t.emdash = 1000;\n    t.AE = 1000;\n    t.ordfeminine = 370;\n    t.Lslash = 611;\n    t.Oslash = 778;\n    t.OE = 1000;\n    t.ordmasculine = 365;\n    t.ae = 889;\n    t.dotlessi = 278;\n    t.lslash = 278;\n    t.oslash = 611;\n    t.oe = 944;\n    t.germandbls = 611;\n    t.Idieresis = 278;\n    t.eacute = 556;\n    t.abreve = 556;\n    t.uhungarumlaut = 611;\n    t.ecaron = 556;\n    t.Ydieresis = 667;\n    t.divide = 584;\n    t.Yacute = 667;\n    t.Acircumflex = 722;\n    t.aacute = 556;\n    t.Ucircumflex = 722;\n    t.yacute = 556;\n    t.scommaaccent = 556;\n    t.ecircumflex = 556;\n    t.Uring = 722;\n    t.Udieresis = 722;\n    t.aogonek = 556;\n    t.Uacute = 722;\n    t.uogonek = 611;\n    t.Edieresis = 667;\n    t.Dcroat = 722;\n    t.commaaccent = 250;\n    t.copyright = 737;\n    t.Emacron = 667;\n    t.ccaron = 556;\n    t.aring = 556;\n    t.Ncommaaccent = 722;\n    t.lacute = 278;\n    t.agrave = 556;\n    t.Tcommaaccent = 611;\n    t.Cacute = 722;\n    t.atilde = 556;\n    t.Edotaccent = 667;\n    t.scaron = 556;\n    t.scedilla = 556;\n    t.iacute = 278;\n    t.lozenge = 494;\n    t.Rcaron = 722;\n    t.Gcommaaccent = 778;\n    t.ucircumflex = 611;\n    t.acircumflex = 556;\n    t.Amacron = 722;\n    t.rcaron = 389;\n    t.ccedilla = 556;\n    t.Zdotaccent = 611;\n    t.Thorn = 667;\n    t.Omacron = 778;\n    t.Racute = 722;\n    t.Sacute = 667;\n    t.dcaron = 743;\n    t.Umacron = 722;\n    t.uring = 611;\n    t.threesuperior = 333;\n    t.Ograve = 778;\n    t.Agrave = 722;\n    t.Abreve = 722;\n    t.multiply = 584;\n    t.uacute = 611;\n    t.Tcaron = 611;\n    t.partialdiff = 494;\n    t.ydieresis = 556;\n    t.Nacute = 722;\n    t.icircumflex = 278;\n    t.Ecircumflex = 667;\n    t.adieresis = 556;\n    t.edieresis = 556;\n    t.cacute = 556;\n    t.nacute = 611;\n    t.umacron = 611;\n    t.Ncaron = 722;\n    t.Iacute = 278;\n    t.plusminus = 584;\n    t.brokenbar = 280;\n    t.registered = 737;\n    t.Gbreve = 778;\n    t.Idotaccent = 278;\n    t.summation = 600;\n    t.Egrave = 667;\n    t.racute = 389;\n    t.omacron = 611;\n    t.Zacute = 611;\n    t.Zcaron = 611;\n    t.greaterequal = 549;\n    t.Eth = 722;\n    t.Ccedilla = 722;\n    t.lcommaaccent = 278;\n    t.tcaron = 389;\n    t.eogonek = 556;\n    t.Uogonek = 722;\n    t.Aacute = 722;\n    t.Adieresis = 722;\n    t.egrave = 556;\n    t.zacute = 500;\n    t.iogonek = 278;\n    t.Oacute = 778;\n    t.oacute = 611;\n    t.amacron = 556;\n    t.sacute = 556;\n    t.idieresis = 278;\n    t.Ocircumflex = 778;\n    t.Ugrave = 722;\n    t.Delta = 612;\n    t.thorn = 611;\n    t.twosuperior = 333;\n    t.Odieresis = 778;\n    t.mu = 611;\n    t.igrave = 278;\n    t.ohungarumlaut = 611;\n    t.Eogonek = 667;\n    t.dcroat = 611;\n    t.threequarters = 834;\n    t.Scedilla = 667;\n    t.lcaron = 400;\n    t.Kcommaaccent = 722;\n    t.Lacute = 611;\n    t.trademark = 1000;\n    t.edotaccent = 556;\n    t.Igrave = 278;\n    t.Imacron = 278;\n    t.Lcaron = 611;\n    t.onehalf = 834;\n    t.lessequal = 549;\n    t.ocircumflex = 611;\n    t.ntilde = 611;\n    t.Uhungarumlaut = 722;\n    t.Eacute = 667;\n    t.emacron = 556;\n    t.gbreve = 611;\n    t.onequarter = 834;\n    t.Scaron = 667;\n    t.Scommaaccent = 667;\n    t.Ohungarumlaut = 778;\n    t.degree = 400;\n    t.ograve = 611;\n    t.Ccaron = 722;\n    t.ugrave = 611;\n    t.radical = 549;\n    t.Dcaron = 722;\n    t.rcommaaccent = 389;\n    t.Ntilde = 722;\n    t.otilde = 611;\n    t.Rcommaaccent = 722;\n    t.Lcommaaccent = 611;\n    t.Atilde = 722;\n    t.Aogonek = 722;\n    t.Aring = 722;\n    t.Otilde = 778;\n    t.zdotaccent = 500;\n    t.Ecaron = 667;\n    t.Iogonek = 278;\n    t.kcommaaccent = 556;\n    t.minus = 584;\n    t.Icircumflex = 278;\n    t.ncaron = 611;\n    t.tcommaaccent = 333;\n    t.logicalnot = 584;\n    t.odieresis = 611;\n    t.udieresis = 611;\n    t.notequal = 549;\n    t.gcommaaccent = 611;\n    t.eth = 611;\n    t.zcaron = 500;\n    t.ncommaaccent = 611;\n    t.onesuperior = 333;\n    t.imacron = 278;\n    t.Euro = 556;\n  });\n  // eslint-disable-next-line no-shadow\n  t[\"Helvetica-Oblique\"] = getLookupTableFactory(function (t) {\n    t.space = 278;\n    t.exclam = 278;\n    t.quotedbl = 355;\n    t.numbersign = 556;\n    t.dollar = 556;\n    t.percent = 889;\n    t.ampersand = 667;\n    t.quoteright = 222;\n    t.parenleft = 333;\n    t.parenright = 333;\n    t.asterisk = 389;\n    t.plus = 584;\n    t.comma = 278;\n    t.hyphen = 333;\n    t.period = 278;\n    t.slash = 278;\n    t.zero = 556;\n    t.one = 556;\n    t.two = 556;\n    t.three = 556;\n    t.four = 556;\n    t.five = 556;\n    t.six = 556;\n    t.seven = 556;\n    t.eight = 556;\n    t.nine = 556;\n    t.colon = 278;\n    t.semicolon = 278;\n    t.less = 584;\n    t.equal = 584;\n    t.greater = 584;\n    t.question = 556;\n    t.at = 1015;\n    t.A = 667;\n    t.B = 667;\n    t.C = 722;\n    t.D = 722;\n    t.E = 667;\n    t.F = 611;\n    t.G = 778;\n    t.H = 722;\n    t.I = 278;\n    t.J = 500;\n    t.K = 667;\n    t.L = 556;\n    t.M = 833;\n    t.N = 722;\n    t.O = 778;\n    t.P = 667;\n    t.Q = 778;\n    t.R = 722;\n    t.S = 667;\n    t.T = 611;\n    t.U = 722;\n    t.V = 667;\n    t.W = 944;\n    t.X = 667;\n    t.Y = 667;\n    t.Z = 611;\n    t.bracketleft = 278;\n    t.backslash = 278;\n    t.bracketright = 278;\n    t.asciicircum = 469;\n    t.underscore = 556;\n    t.quoteleft = 222;\n    t.a = 556;\n    t.b = 556;\n    t.c = 500;\n    t.d = 556;\n    t.e = 556;\n    t.f = 278;\n    t.g = 556;\n    t.h = 556;\n    t.i = 222;\n    t.j = 222;\n    t.k = 500;\n    t.l = 222;\n    t.m = 833;\n    t.n = 556;\n    t.o = 556;\n    t.p = 556;\n    t.q = 556;\n    t.r = 333;\n    t.s = 500;\n    t.t = 278;\n    t.u = 556;\n    t.v = 500;\n    t.w = 722;\n    t.x = 500;\n    t.y = 500;\n    t.z = 500;\n    t.braceleft = 334;\n    t.bar = 260;\n    t.braceright = 334;\n    t.asciitilde = 584;\n    t.exclamdown = 333;\n    t.cent = 556;\n    t.sterling = 556;\n    t.fraction = 167;\n    t.yen = 556;\n    t.florin = 556;\n    t.section = 556;\n    t.currency = 556;\n    t.quotesingle = 191;\n    t.quotedblleft = 333;\n    t.guillemotleft = 556;\n    t.guilsinglleft = 333;\n    t.guilsinglright = 333;\n    t.fi = 500;\n    t.fl = 500;\n    t.endash = 556;\n    t.dagger = 556;\n    t.daggerdbl = 556;\n    t.periodcentered = 278;\n    t.paragraph = 537;\n    t.bullet = 350;\n    t.quotesinglbase = 222;\n    t.quotedblbase = 333;\n    t.quotedblright = 333;\n    t.guillemotright = 556;\n    t.ellipsis = 1000;\n    t.perthousand = 1000;\n    t.questiondown = 611;\n    t.grave = 333;\n    t.acute = 333;\n    t.circumflex = 333;\n    t.tilde = 333;\n    t.macron = 333;\n    t.breve = 333;\n    t.dotaccent = 333;\n    t.dieresis = 333;\n    t.ring = 333;\n    t.cedilla = 333;\n    t.hungarumlaut = 333;\n    t.ogonek = 333;\n    t.caron = 333;\n    t.emdash = 1000;\n    t.AE = 1000;\n    t.ordfeminine = 370;\n    t.Lslash = 556;\n    t.Oslash = 778;\n    t.OE = 1000;\n    t.ordmasculine = 365;\n    t.ae = 889;\n    t.dotlessi = 278;\n    t.lslash = 222;\n    t.oslash = 611;\n    t.oe = 944;\n    t.germandbls = 611;\n    t.Idieresis = 278;\n    t.eacute = 556;\n    t.abreve = 556;\n    t.uhungarumlaut = 556;\n    t.ecaron = 556;\n    t.Ydieresis = 667;\n    t.divide = 584;\n    t.Yacute = 667;\n    t.Acircumflex = 667;\n    t.aacute = 556;\n    t.Ucircumflex = 722;\n    t.yacute = 500;\n    t.scommaaccent = 500;\n    t.ecircumflex = 556;\n    t.Uring = 722;\n    t.Udieresis = 722;\n    t.aogonek = 556;\n    t.Uacute = 722;\n    t.uogonek = 556;\n    t.Edieresis = 667;\n    t.Dcroat = 722;\n    t.commaaccent = 250;\n    t.copyright = 737;\n    t.Emacron = 667;\n    t.ccaron = 500;\n    t.aring = 556;\n    t.Ncommaaccent = 722;\n    t.lacute = 222;\n    t.agrave = 556;\n    t.Tcommaaccent = 611;\n    t.Cacute = 722;\n    t.atilde = 556;\n    t.Edotaccent = 667;\n    t.scaron = 500;\n    t.scedilla = 500;\n    t.iacute = 278;\n    t.lozenge = 471;\n    t.Rcaron = 722;\n    t.Gcommaaccent = 778;\n    t.ucircumflex = 556;\n    t.acircumflex = 556;\n    t.Amacron = 667;\n    t.rcaron = 333;\n    t.ccedilla = 500;\n    t.Zdotaccent = 611;\n    t.Thorn = 667;\n    t.Omacron = 778;\n    t.Racute = 722;\n    t.Sacute = 667;\n    t.dcaron = 643;\n    t.Umacron = 722;\n    t.uring = 556;\n    t.threesuperior = 333;\n    t.Ograve = 778;\n    t.Agrave = 667;\n    t.Abreve = 667;\n    t.multiply = 584;\n    t.uacute = 556;\n    t.Tcaron = 611;\n    t.partialdiff = 476;\n    t.ydieresis = 500;\n    t.Nacute = 722;\n    t.icircumflex = 278;\n    t.Ecircumflex = 667;\n    t.adieresis = 556;\n    t.edieresis = 556;\n    t.cacute = 500;\n    t.nacute = 556;\n    t.umacron = 556;\n    t.Ncaron = 722;\n    t.Iacute = 278;\n    t.plusminus = 584;\n    t.brokenbar = 260;\n    t.registered = 737;\n    t.Gbreve = 778;\n    t.Idotaccent = 278;\n    t.summation = 600;\n    t.Egrave = 667;\n    t.racute = 333;\n    t.omacron = 556;\n    t.Zacute = 611;\n    t.Zcaron = 611;\n    t.greaterequal = 549;\n    t.Eth = 722;\n    t.Ccedilla = 722;\n    t.lcommaaccent = 222;\n    t.tcaron = 317;\n    t.eogonek = 556;\n    t.Uogonek = 722;\n    t.Aacute = 667;\n    t.Adieresis = 667;\n    t.egrave = 556;\n    t.zacute = 500;\n    t.iogonek = 222;\n    t.Oacute = 778;\n    t.oacute = 556;\n    t.amacron = 556;\n    t.sacute = 500;\n    t.idieresis = 278;\n    t.Ocircumflex = 778;\n    t.Ugrave = 722;\n    t.Delta = 612;\n    t.thorn = 556;\n    t.twosuperior = 333;\n    t.Odieresis = 778;\n    t.mu = 556;\n    t.igrave = 278;\n    t.ohungarumlaut = 556;\n    t.Eogonek = 667;\n    t.dcroat = 556;\n    t.threequarters = 834;\n    t.Scedilla = 667;\n    t.lcaron = 299;\n    t.Kcommaaccent = 667;\n    t.Lacute = 556;\n    t.trademark = 1000;\n    t.edotaccent = 556;\n    t.Igrave = 278;\n    t.Imacron = 278;\n    t.Lcaron = 556;\n    t.onehalf = 834;\n    t.lessequal = 549;\n    t.ocircumflex = 556;\n    t.ntilde = 556;\n    t.Uhungarumlaut = 722;\n    t.Eacute = 667;\n    t.emacron = 556;\n    t.gbreve = 556;\n    t.onequarter = 834;\n    t.Scaron = 667;\n    t.Scommaaccent = 667;\n    t.Ohungarumlaut = 778;\n    t.degree = 400;\n    t.ograve = 556;\n    t.Ccaron = 722;\n    t.ugrave = 556;\n    t.radical = 453;\n    t.Dcaron = 722;\n    t.rcommaaccent = 333;\n    t.Ntilde = 722;\n    t.otilde = 556;\n    t.Rcommaaccent = 722;\n    t.Lcommaaccent = 556;\n    t.Atilde = 667;\n    t.Aogonek = 667;\n    t.Aring = 667;\n    t.Otilde = 778;\n    t.zdotaccent = 500;\n    t.Ecaron = 667;\n    t.Iogonek = 278;\n    t.kcommaaccent = 500;\n    t.minus = 584;\n    t.Icircumflex = 278;\n    t.ncaron = 556;\n    t.tcommaaccent = 278;\n    t.logicalnot = 584;\n    t.odieresis = 556;\n    t.udieresis = 556;\n    t.notequal = 549;\n    t.gcommaaccent = 556;\n    t.eth = 556;\n    t.zcaron = 500;\n    t.ncommaaccent = 556;\n    t.onesuperior = 333;\n    t.imacron = 278;\n    t.Euro = 556;\n  });\n  // eslint-disable-next-line no-shadow\n  t.Symbol = getLookupTableFactory(function (t) {\n    t.space = 250;\n    t.exclam = 333;\n    t.universal = 713;\n    t.numbersign = 500;\n    t.existential = 549;\n    t.percent = 833;\n    t.ampersand = 778;\n    t.suchthat = 439;\n    t.parenleft = 333;\n    t.parenright = 333;\n    t.asteriskmath = 500;\n    t.plus = 549;\n    t.comma = 250;\n    t.minus = 549;\n    t.period = 250;\n    t.slash = 278;\n    t.zero = 500;\n    t.one = 500;\n    t.two = 500;\n    t.three = 500;\n    t.four = 500;\n    t.five = 500;\n    t.six = 500;\n    t.seven = 500;\n    t.eight = 500;\n    t.nine = 500;\n    t.colon = 278;\n    t.semicolon = 278;\n    t.less = 549;\n    t.equal = 549;\n    t.greater = 549;\n    t.question = 444;\n    t.congruent = 549;\n    t.Alpha = 722;\n    t.Beta = 667;\n    t.Chi = 722;\n    t.Delta = 612;\n    t.Epsilon = 611;\n    t.Phi = 763;\n    t.Gamma = 603;\n    t.Eta = 722;\n    t.Iota = 333;\n    t.theta1 = 631;\n    t.Kappa = 722;\n    t.Lambda = 686;\n    t.Mu = 889;\n    t.Nu = 722;\n    t.Omicron = 722;\n    t.Pi = 768;\n    t.Theta = 741;\n    t.Rho = 556;\n    t.Sigma = 592;\n    t.Tau = 611;\n    t.Upsilon = 690;\n    t.sigma1 = 439;\n    t.Omega = 768;\n    t.Xi = 645;\n    t.Psi = 795;\n    t.Zeta = 611;\n    t.bracketleft = 333;\n    t.therefore = 863;\n    t.bracketright = 333;\n    t.perpendicular = 658;\n    t.underscore = 500;\n    t.radicalex = 500;\n    t.alpha = 631;\n    t.beta = 549;\n    t.chi = 549;\n    t.delta = 494;\n    t.epsilon = 439;\n    t.phi = 521;\n    t.gamma = 411;\n    t.eta = 603;\n    t.iota = 329;\n    t.phi1 = 603;\n    t.kappa = 549;\n    t.lambda = 549;\n    t.mu = 576;\n    t.nu = 521;\n    t.omicron = 549;\n    t.pi = 549;\n    t.theta = 521;\n    t.rho = 549;\n    t.sigma = 603;\n    t.tau = 439;\n    t.upsilon = 576;\n    t.omega1 = 713;\n    t.omega = 686;\n    t.xi = 493;\n    t.psi = 686;\n    t.zeta = 494;\n    t.braceleft = 480;\n    t.bar = 200;\n    t.braceright = 480;\n    t.similar = 549;\n    t.Euro = 750;\n    t.Upsilon1 = 620;\n    t.minute = 247;\n    t.lessequal = 549;\n    t.fraction = 167;\n    t.infinity = 713;\n    t.florin = 500;\n    t.club = 753;\n    t.diamond = 753;\n    t.heart = 753;\n    t.spade = 753;\n    t.arrowboth = 1042;\n    t.arrowleft = 987;\n    t.arrowup = 603;\n    t.arrowright = 987;\n    t.arrowdown = 603;\n    t.degree = 400;\n    t.plusminus = 549;\n    t.second = 411;\n    t.greaterequal = 549;\n    t.multiply = 549;\n    t.proportional = 713;\n    t.partialdiff = 494;\n    t.bullet = 460;\n    t.divide = 549;\n    t.notequal = 549;\n    t.equivalence = 549;\n    t.approxequal = 549;\n    t.ellipsis = 1000;\n    t.arrowvertex = 603;\n    t.arrowhorizex = 1000;\n    t.carriagereturn = 658;\n    t.aleph = 823;\n    t.Ifraktur = 686;\n    t.Rfraktur = 795;\n    t.weierstrass = 987;\n    t.circlemultiply = 768;\n    t.circleplus = 768;\n    t.emptyset = 823;\n    t.intersection = 768;\n    t.union = 768;\n    t.propersuperset = 713;\n    t.reflexsuperset = 713;\n    t.notsubset = 713;\n    t.propersubset = 713;\n    t.reflexsubset = 713;\n    t.element = 713;\n    t.notelement = 713;\n    t.angle = 768;\n    t.gradient = 713;\n    t.registerserif = 790;\n    t.copyrightserif = 790;\n    t.trademarkserif = 890;\n    t.product = 823;\n    t.radical = 549;\n    t.dotmath = 250;\n    t.logicalnot = 713;\n    t.logicaland = 603;\n    t.logicalor = 603;\n    t.arrowdblboth = 1042;\n    t.arrowdblleft = 987;\n    t.arrowdblup = 603;\n    t.arrowdblright = 987;\n    t.arrowdbldown = 603;\n    t.lozenge = 494;\n    t.angleleft = 329;\n    t.registersans = 790;\n    t.copyrightsans = 790;\n    t.trademarksans = 786;\n    t.summation = 713;\n    t.parenlefttp = 384;\n    t.parenleftex = 384;\n    t.parenleftbt = 384;\n    t.bracketlefttp = 384;\n    t.bracketleftex = 384;\n    t.bracketleftbt = 384;\n    t.bracelefttp = 494;\n    t.braceleftmid = 494;\n    t.braceleftbt = 494;\n    t.braceex = 494;\n    t.angleright = 329;\n    t.integral = 274;\n    t.integraltp = 686;\n    t.integralex = 686;\n    t.integralbt = 686;\n    t.parenrighttp = 384;\n    t.parenrightex = 384;\n    t.parenrightbt = 384;\n    t.bracketrighttp = 384;\n    t.bracketrightex = 384;\n    t.bracketrightbt = 384;\n    t.bracerighttp = 494;\n    t.bracerightmid = 494;\n    t.bracerightbt = 494;\n    t.apple = 790;\n  });\n  // eslint-disable-next-line no-shadow\n  t[\"Times-Roman\"] = getLookupTableFactory(function (t) {\n    t.space = 250;\n    t.exclam = 333;\n    t.quotedbl = 408;\n    t.numbersign = 500;\n    t.dollar = 500;\n    t.percent = 833;\n    t.ampersand = 778;\n    t.quoteright = 333;\n    t.parenleft = 333;\n    t.parenright = 333;\n    t.asterisk = 500;\n    t.plus = 564;\n    t.comma = 250;\n    t.hyphen = 333;\n    t.period = 250;\n    t.slash = 278;\n    t.zero = 500;\n    t.one = 500;\n    t.two = 500;\n    t.three = 500;\n    t.four = 500;\n    t.five = 500;\n    t.six = 500;\n    t.seven = 500;\n    t.eight = 500;\n    t.nine = 500;\n    t.colon = 278;\n    t.semicolon = 278;\n    t.less = 564;\n    t.equal = 564;\n    t.greater = 564;\n    t.question = 444;\n    t.at = 921;\n    t.A = 722;\n    t.B = 667;\n    t.C = 667;\n    t.D = 722;\n    t.E = 611;\n    t.F = 556;\n    t.G = 722;\n    t.H = 722;\n    t.I = 333;\n    t.J = 389;\n    t.K = 722;\n    t.L = 611;\n    t.M = 889;\n    t.N = 722;\n    t.O = 722;\n    t.P = 556;\n    t.Q = 722;\n    t.R = 667;\n    t.S = 556;\n    t.T = 611;\n    t.U = 722;\n    t.V = 722;\n    t.W = 944;\n    t.X = 722;\n    t.Y = 722;\n    t.Z = 611;\n    t.bracketleft = 333;\n    t.backslash = 278;\n    t.bracketright = 333;\n    t.asciicircum = 469;\n    t.underscore = 500;\n    t.quoteleft = 333;\n    t.a = 444;\n    t.b = 500;\n    t.c = 444;\n    t.d = 500;\n    t.e = 444;\n    t.f = 333;\n    t.g = 500;\n    t.h = 500;\n    t.i = 278;\n    t.j = 278;\n    t.k = 500;\n    t.l = 278;\n    t.m = 778;\n    t.n = 500;\n    t.o = 500;\n    t.p = 500;\n    t.q = 500;\n    t.r = 333;\n    t.s = 389;\n    t.t = 278;\n    t.u = 500;\n    t.v = 500;\n    t.w = 722;\n    t.x = 500;\n    t.y = 500;\n    t.z = 444;\n    t.braceleft = 480;\n    t.bar = 200;\n    t.braceright = 480;\n    t.asciitilde = 541;\n    t.exclamdown = 333;\n    t.cent = 500;\n    t.sterling = 500;\n    t.fraction = 167;\n    t.yen = 500;\n    t.florin = 500;\n    t.section = 500;\n    t.currency = 500;\n    t.quotesingle = 180;\n    t.quotedblleft = 444;\n    t.guillemotleft = 500;\n    t.guilsinglleft = 333;\n    t.guilsinglright = 333;\n    t.fi = 556;\n    t.fl = 556;\n    t.endash = 500;\n    t.dagger = 500;\n    t.daggerdbl = 500;\n    t.periodcentered = 250;\n    t.paragraph = 453;\n    t.bullet = 350;\n    t.quotesinglbase = 333;\n    t.quotedblbase = 444;\n    t.quotedblright = 444;\n    t.guillemotright = 500;\n    t.ellipsis = 1000;\n    t.perthousand = 1000;\n    t.questiondown = 444;\n    t.grave = 333;\n    t.acute = 333;\n    t.circumflex = 333;\n    t.tilde = 333;\n    t.macron = 333;\n    t.breve = 333;\n    t.dotaccent = 333;\n    t.dieresis = 333;\n    t.ring = 333;\n    t.cedilla = 333;\n    t.hungarumlaut = 333;\n    t.ogonek = 333;\n    t.caron = 333;\n    t.emdash = 1000;\n    t.AE = 889;\n    t.ordfeminine = 276;\n    t.Lslash = 611;\n    t.Oslash = 722;\n    t.OE = 889;\n    t.ordmasculine = 310;\n    t.ae = 667;\n    t.dotlessi = 278;\n    t.lslash = 278;\n    t.oslash = 500;\n    t.oe = 722;\n    t.germandbls = 500;\n    t.Idieresis = 333;\n    t.eacute = 444;\n    t.abreve = 444;\n    t.uhungarumlaut = 500;\n    t.ecaron = 444;\n    t.Ydieresis = 722;\n    t.divide = 564;\n    t.Yacute = 722;\n    t.Acircumflex = 722;\n    t.aacute = 444;\n    t.Ucircumflex = 722;\n    t.yacute = 500;\n    t.scommaaccent = 389;\n    t.ecircumflex = 444;\n    t.Uring = 722;\n    t.Udieresis = 722;\n    t.aogonek = 444;\n    t.Uacute = 722;\n    t.uogonek = 500;\n    t.Edieresis = 611;\n    t.Dcroat = 722;\n    t.commaaccent = 250;\n    t.copyright = 760;\n    t.Emacron = 611;\n    t.ccaron = 444;\n    t.aring = 444;\n    t.Ncommaaccent = 722;\n    t.lacute = 278;\n    t.agrave = 444;\n    t.Tcommaaccent = 611;\n    t.Cacute = 667;\n    t.atilde = 444;\n    t.Edotaccent = 611;\n    t.scaron = 389;\n    t.scedilla = 389;\n    t.iacute = 278;\n    t.lozenge = 471;\n    t.Rcaron = 667;\n    t.Gcommaaccent = 722;\n    t.ucircumflex = 500;\n    t.acircumflex = 444;\n    t.Amacron = 722;\n    t.rcaron = 333;\n    t.ccedilla = 444;\n    t.Zdotaccent = 611;\n    t.Thorn = 556;\n    t.Omacron = 722;\n    t.Racute = 667;\n    t.Sacute = 556;\n    t.dcaron = 588;\n    t.Umacron = 722;\n    t.uring = 500;\n    t.threesuperior = 300;\n    t.Ograve = 722;\n    t.Agrave = 722;\n    t.Abreve = 722;\n    t.multiply = 564;\n    t.uacute = 500;\n    t.Tcaron = 611;\n    t.partialdiff = 476;\n    t.ydieresis = 500;\n    t.Nacute = 722;\n    t.icircumflex = 278;\n    t.Ecircumflex = 611;\n    t.adieresis = 444;\n    t.edieresis = 444;\n    t.cacute = 444;\n    t.nacute = 500;\n    t.umacron = 500;\n    t.Ncaron = 722;\n    t.Iacute = 333;\n    t.plusminus = 564;\n    t.brokenbar = 200;\n    t.registered = 760;\n    t.Gbreve = 722;\n    t.Idotaccent = 333;\n    t.summation = 600;\n    t.Egrave = 611;\n    t.racute = 333;\n    t.omacron = 500;\n    t.Zacute = 611;\n    t.Zcaron = 611;\n    t.greaterequal = 549;\n    t.Eth = 722;\n    t.Ccedilla = 667;\n    t.lcommaaccent = 278;\n    t.tcaron = 326;\n    t.eogonek = 444;\n    t.Uogonek = 722;\n    t.Aacute = 722;\n    t.Adieresis = 722;\n    t.egrave = 444;\n    t.zacute = 444;\n    t.iogonek = 278;\n    t.Oacute = 722;\n    t.oacute = 500;\n    t.amacron = 444;\n    t.sacute = 389;\n    t.idieresis = 278;\n    t.Ocircumflex = 722;\n    t.Ugrave = 722;\n    t.Delta = 612;\n    t.thorn = 500;\n    t.twosuperior = 300;\n    t.Odieresis = 722;\n    t.mu = 500;\n    t.igrave = 278;\n    t.ohungarumlaut = 500;\n    t.Eogonek = 611;\n    t.dcroat = 500;\n    t.threequarters = 750;\n    t.Scedilla = 556;\n    t.lcaron = 344;\n    t.Kcommaaccent = 722;\n    t.Lacute = 611;\n    t.trademark = 980;\n    t.edotaccent = 444;\n    t.Igrave = 333;\n    t.Imacron = 333;\n    t.Lcaron = 611;\n    t.onehalf = 750;\n    t.lessequal = 549;\n    t.ocircumflex = 500;\n    t.ntilde = 500;\n    t.Uhungarumlaut = 722;\n    t.Eacute = 611;\n    t.emacron = 444;\n    t.gbreve = 500;\n    t.onequarter = 750;\n    t.Scaron = 556;\n    t.Scommaaccent = 556;\n    t.Ohungarumlaut = 722;\n    t.degree = 400;\n    t.ograve = 500;\n    t.Ccaron = 667;\n    t.ugrave = 500;\n    t.radical = 453;\n    t.Dcaron = 722;\n    t.rcommaaccent = 333;\n    t.Ntilde = 722;\n    t.otilde = 500;\n    t.Rcommaaccent = 667;\n    t.Lcommaaccent = 611;\n    t.Atilde = 722;\n    t.Aogonek = 722;\n    t.Aring = 722;\n    t.Otilde = 722;\n    t.zdotaccent = 444;\n    t.Ecaron = 611;\n    t.Iogonek = 333;\n    t.kcommaaccent = 500;\n    t.minus = 564;\n    t.Icircumflex = 333;\n    t.ncaron = 500;\n    t.tcommaaccent = 278;\n    t.logicalnot = 564;\n    t.odieresis = 500;\n    t.udieresis = 500;\n    t.notequal = 549;\n    t.gcommaaccent = 500;\n    t.eth = 500;\n    t.zcaron = 444;\n    t.ncommaaccent = 500;\n    t.onesuperior = 300;\n    t.imacron = 278;\n    t.Euro = 500;\n  });\n  // eslint-disable-next-line no-shadow\n  t[\"Times-Bold\"] = getLookupTableFactory(function (t) {\n    t.space = 250;\n    t.exclam = 333;\n    t.quotedbl = 555;\n    t.numbersign = 500;\n    t.dollar = 500;\n    t.percent = 1000;\n    t.ampersand = 833;\n    t.quoteright = 333;\n    t.parenleft = 333;\n    t.parenright = 333;\n    t.asterisk = 500;\n    t.plus = 570;\n    t.comma = 250;\n    t.hyphen = 333;\n    t.period = 250;\n    t.slash = 278;\n    t.zero = 500;\n    t.one = 500;\n    t.two = 500;\n    t.three = 500;\n    t.four = 500;\n    t.five = 500;\n    t.six = 500;\n    t.seven = 500;\n    t.eight = 500;\n    t.nine = 500;\n    t.colon = 333;\n    t.semicolon = 333;\n    t.less = 570;\n    t.equal = 570;\n    t.greater = 570;\n    t.question = 500;\n    t.at = 930;\n    t.A = 722;\n    t.B = 667;\n    t.C = 722;\n    t.D = 722;\n    t.E = 667;\n    t.F = 611;\n    t.G = 778;\n    t.H = 778;\n    t.I = 389;\n    t.J = 500;\n    t.K = 778;\n    t.L = 667;\n    t.M = 944;\n    t.N = 722;\n    t.O = 778;\n    t.P = 611;\n    t.Q = 778;\n    t.R = 722;\n    t.S = 556;\n    t.T = 667;\n    t.U = 722;\n    t.V = 722;\n    t.W = 1000;\n    t.X = 722;\n    t.Y = 722;\n    t.Z = 667;\n    t.bracketleft = 333;\n    t.backslash = 278;\n    t.bracketright = 333;\n    t.asciicircum = 581;\n    t.underscore = 500;\n    t.quoteleft = 333;\n    t.a = 500;\n    t.b = 556;\n    t.c = 444;\n    t.d = 556;\n    t.e = 444;\n    t.f = 333;\n    t.g = 500;\n    t.h = 556;\n    t.i = 278;\n    t.j = 333;\n    t.k = 556;\n    t.l = 278;\n    t.m = 833;\n    t.n = 556;\n    t.o = 500;\n    t.p = 556;\n    t.q = 556;\n    t.r = 444;\n    t.s = 389;\n    t.t = 333;\n    t.u = 556;\n    t.v = 500;\n    t.w = 722;\n    t.x = 500;\n    t.y = 500;\n    t.z = 444;\n    t.braceleft = 394;\n    t.bar = 220;\n    t.braceright = 394;\n    t.asciitilde = 520;\n    t.exclamdown = 333;\n    t.cent = 500;\n    t.sterling = 500;\n    t.fraction = 167;\n    t.yen = 500;\n    t.florin = 500;\n    t.section = 500;\n    t.currency = 500;\n    t.quotesingle = 278;\n    t.quotedblleft = 500;\n    t.guillemotleft = 500;\n    t.guilsinglleft = 333;\n    t.guilsinglright = 333;\n    t.fi = 556;\n    t.fl = 556;\n    t.endash = 500;\n    t.dagger = 500;\n    t.daggerdbl = 500;\n    t.periodcentered = 250;\n    t.paragraph = 540;\n    t.bullet = 350;\n    t.quotesinglbase = 333;\n    t.quotedblbase = 500;\n    t.quotedblright = 500;\n    t.guillemotright = 500;\n    t.ellipsis = 1000;\n    t.perthousand = 1000;\n    t.questiondown = 500;\n    t.grave = 333;\n    t.acute = 333;\n    t.circumflex = 333;\n    t.tilde = 333;\n    t.macron = 333;\n    t.breve = 333;\n    t.dotaccent = 333;\n    t.dieresis = 333;\n    t.ring = 333;\n    t.cedilla = 333;\n    t.hungarumlaut = 333;\n    t.ogonek = 333;\n    t.caron = 333;\n    t.emdash = 1000;\n    t.AE = 1000;\n    t.ordfeminine = 300;\n    t.Lslash = 667;\n    t.Oslash = 778;\n    t.OE = 1000;\n    t.ordmasculine = 330;\n    t.ae = 722;\n    t.dotlessi = 278;\n    t.lslash = 278;\n    t.oslash = 500;\n    t.oe = 722;\n    t.germandbls = 556;\n    t.Idieresis = 389;\n    t.eacute = 444;\n    t.abreve = 500;\n    t.uhungarumlaut = 556;\n    t.ecaron = 444;\n    t.Ydieresis = 722;\n    t.divide = 570;\n    t.Yacute = 722;\n    t.Acircumflex = 722;\n    t.aacute = 500;\n    t.Ucircumflex = 722;\n    t.yacute = 500;\n    t.scommaaccent = 389;\n    t.ecircumflex = 444;\n    t.Uring = 722;\n    t.Udieresis = 722;\n    t.aogonek = 500;\n    t.Uacute = 722;\n    t.uogonek = 556;\n    t.Edieresis = 667;\n    t.Dcroat = 722;\n    t.commaaccent = 250;\n    t.copyright = 747;\n    t.Emacron = 667;\n    t.ccaron = 444;\n    t.aring = 500;\n    t.Ncommaaccent = 722;\n    t.lacute = 278;\n    t.agrave = 500;\n    t.Tcommaaccent = 667;\n    t.Cacute = 722;\n    t.atilde = 500;\n    t.Edotaccent = 667;\n    t.scaron = 389;\n    t.scedilla = 389;\n    t.iacute = 278;\n    t.lozenge = 494;\n    t.Rcaron = 722;\n    t.Gcommaaccent = 778;\n    t.ucircumflex = 556;\n    t.acircumflex = 500;\n    t.Amacron = 722;\n    t.rcaron = 444;\n    t.ccedilla = 444;\n    t.Zdotaccent = 667;\n    t.Thorn = 611;\n    t.Omacron = 778;\n    t.Racute = 722;\n    t.Sacute = 556;\n    t.dcaron = 672;\n    t.Umacron = 722;\n    t.uring = 556;\n    t.threesuperior = 300;\n    t.Ograve = 778;\n    t.Agrave = 722;\n    t.Abreve = 722;\n    t.multiply = 570;\n    t.uacute = 556;\n    t.Tcaron = 667;\n    t.partialdiff = 494;\n    t.ydieresis = 500;\n    t.Nacute = 722;\n    t.icircumflex = 278;\n    t.Ecircumflex = 667;\n    t.adieresis = 500;\n    t.edieresis = 444;\n    t.cacute = 444;\n    t.nacute = 556;\n    t.umacron = 556;\n    t.Ncaron = 722;\n    t.Iacute = 389;\n    t.plusminus = 570;\n    t.brokenbar = 220;\n    t.registered = 747;\n    t.Gbreve = 778;\n    t.Idotaccent = 389;\n    t.summation = 600;\n    t.Egrave = 667;\n    t.racute = 444;\n    t.omacron = 500;\n    t.Zacute = 667;\n    t.Zcaron = 667;\n    t.greaterequal = 549;\n    t.Eth = 722;\n    t.Ccedilla = 722;\n    t.lcommaaccent = 278;\n    t.tcaron = 416;\n    t.eogonek = 444;\n    t.Uogonek = 722;\n    t.Aacute = 722;\n    t.Adieresis = 722;\n    t.egrave = 444;\n    t.zacute = 444;\n    t.iogonek = 278;\n    t.Oacute = 778;\n    t.oacute = 500;\n    t.amacron = 500;\n    t.sacute = 389;\n    t.idieresis = 278;\n    t.Ocircumflex = 778;\n    t.Ugrave = 722;\n    t.Delta = 612;\n    t.thorn = 556;\n    t.twosuperior = 300;\n    t.Odieresis = 778;\n    t.mu = 556;\n    t.igrave = 278;\n    t.ohungarumlaut = 500;\n    t.Eogonek = 667;\n    t.dcroat = 556;\n    t.threequarters = 750;\n    t.Scedilla = 556;\n    t.lcaron = 394;\n    t.Kcommaaccent = 778;\n    t.Lacute = 667;\n    t.trademark = 1000;\n    t.edotaccent = 444;\n    t.Igrave = 389;\n    t.Imacron = 389;\n    t.Lcaron = 667;\n    t.onehalf = 750;\n    t.lessequal = 549;\n    t.ocircumflex = 500;\n    t.ntilde = 556;\n    t.Uhungarumlaut = 722;\n    t.Eacute = 667;\n    t.emacron = 444;\n    t.gbreve = 500;\n    t.onequarter = 750;\n    t.Scaron = 556;\n    t.Scommaaccent = 556;\n    t.Ohungarumlaut = 778;\n    t.degree = 400;\n    t.ograve = 500;\n    t.Ccaron = 722;\n    t.ugrave = 556;\n    t.radical = 549;\n    t.Dcaron = 722;\n    t.rcommaaccent = 444;\n    t.Ntilde = 722;\n    t.otilde = 500;\n    t.Rcommaaccent = 722;\n    t.Lcommaaccent = 667;\n    t.Atilde = 722;\n    t.Aogonek = 722;\n    t.Aring = 722;\n    t.Otilde = 778;\n    t.zdotaccent = 444;\n    t.Ecaron = 667;\n    t.Iogonek = 389;\n    t.kcommaaccent = 556;\n    t.minus = 570;\n    t.Icircumflex = 389;\n    t.ncaron = 556;\n    t.tcommaaccent = 333;\n    t.logicalnot = 570;\n    t.odieresis = 500;\n    t.udieresis = 556;\n    t.notequal = 549;\n    t.gcommaaccent = 500;\n    t.eth = 500;\n    t.zcaron = 444;\n    t.ncommaaccent = 556;\n    t.onesuperior = 300;\n    t.imacron = 278;\n    t.Euro = 500;\n  });\n  // eslint-disable-next-line no-shadow\n  t[\"Times-BoldItalic\"] = getLookupTableFactory(function (t) {\n    t.space = 250;\n    t.exclam = 389;\n    t.quotedbl = 555;\n    t.numbersign = 500;\n    t.dollar = 500;\n    t.percent = 833;\n    t.ampersand = 778;\n    t.quoteright = 333;\n    t.parenleft = 333;\n    t.parenright = 333;\n    t.asterisk = 500;\n    t.plus = 570;\n    t.comma = 250;\n    t.hyphen = 333;\n    t.period = 250;\n    t.slash = 278;\n    t.zero = 500;\n    t.one = 500;\n    t.two = 500;\n    t.three = 500;\n    t.four = 500;\n    t.five = 500;\n    t.six = 500;\n    t.seven = 500;\n    t.eight = 500;\n    t.nine = 500;\n    t.colon = 333;\n    t.semicolon = 333;\n    t.less = 570;\n    t.equal = 570;\n    t.greater = 570;\n    t.question = 500;\n    t.at = 832;\n    t.A = 667;\n    t.B = 667;\n    t.C = 667;\n    t.D = 722;\n    t.E = 667;\n    t.F = 667;\n    t.G = 722;\n    t.H = 778;\n    t.I = 389;\n    t.J = 500;\n    t.K = 667;\n    t.L = 611;\n    t.M = 889;\n    t.N = 722;\n    t.O = 722;\n    t.P = 611;\n    t.Q = 722;\n    t.R = 667;\n    t.S = 556;\n    t.T = 611;\n    t.U = 722;\n    t.V = 667;\n    t.W = 889;\n    t.X = 667;\n    t.Y = 611;\n    t.Z = 611;\n    t.bracketleft = 333;\n    t.backslash = 278;\n    t.bracketright = 333;\n    t.asciicircum = 570;\n    t.underscore = 500;\n    t.quoteleft = 333;\n    t.a = 500;\n    t.b = 500;\n    t.c = 444;\n    t.d = 500;\n    t.e = 444;\n    t.f = 333;\n    t.g = 500;\n    t.h = 556;\n    t.i = 278;\n    t.j = 278;\n    t.k = 500;\n    t.l = 278;\n    t.m = 778;\n    t.n = 556;\n    t.o = 500;\n    t.p = 500;\n    t.q = 500;\n    t.r = 389;\n    t.s = 389;\n    t.t = 278;\n    t.u = 556;\n    t.v = 444;\n    t.w = 667;\n    t.x = 500;\n    t.y = 444;\n    t.z = 389;\n    t.braceleft = 348;\n    t.bar = 220;\n    t.braceright = 348;\n    t.asciitilde = 570;\n    t.exclamdown = 389;\n    t.cent = 500;\n    t.sterling = 500;\n    t.fraction = 167;\n    t.yen = 500;\n    t.florin = 500;\n    t.section = 500;\n    t.currency = 500;\n    t.quotesingle = 278;\n    t.quotedblleft = 500;\n    t.guillemotleft = 500;\n    t.guilsinglleft = 333;\n    t.guilsinglright = 333;\n    t.fi = 556;\n    t.fl = 556;\n    t.endash = 500;\n    t.dagger = 500;\n    t.daggerdbl = 500;\n    t.periodcentered = 250;\n    t.paragraph = 500;\n    t.bullet = 350;\n    t.quotesinglbase = 333;\n    t.quotedblbase = 500;\n    t.quotedblright = 500;\n    t.guillemotright = 500;\n    t.ellipsis = 1000;\n    t.perthousand = 1000;\n    t.questiondown = 500;\n    t.grave = 333;\n    t.acute = 333;\n    t.circumflex = 333;\n    t.tilde = 333;\n    t.macron = 333;\n    t.breve = 333;\n    t.dotaccent = 333;\n    t.dieresis = 333;\n    t.ring = 333;\n    t.cedilla = 333;\n    t.hungarumlaut = 333;\n    t.ogonek = 333;\n    t.caron = 333;\n    t.emdash = 1000;\n    t.AE = 944;\n    t.ordfeminine = 266;\n    t.Lslash = 611;\n    t.Oslash = 722;\n    t.OE = 944;\n    t.ordmasculine = 300;\n    t.ae = 722;\n    t.dotlessi = 278;\n    t.lslash = 278;\n    t.oslash = 500;\n    t.oe = 722;\n    t.germandbls = 500;\n    t.Idieresis = 389;\n    t.eacute = 444;\n    t.abreve = 500;\n    t.uhungarumlaut = 556;\n    t.ecaron = 444;\n    t.Ydieresis = 611;\n    t.divide = 570;\n    t.Yacute = 611;\n    t.Acircumflex = 667;\n    t.aacute = 500;\n    t.Ucircumflex = 722;\n    t.yacute = 444;\n    t.scommaaccent = 389;\n    t.ecircumflex = 444;\n    t.Uring = 722;\n    t.Udieresis = 722;\n    t.aogonek = 500;\n    t.Uacute = 722;\n    t.uogonek = 556;\n    t.Edieresis = 667;\n    t.Dcroat = 722;\n    t.commaaccent = 250;\n    t.copyright = 747;\n    t.Emacron = 667;\n    t.ccaron = 444;\n    t.aring = 500;\n    t.Ncommaaccent = 722;\n    t.lacute = 278;\n    t.agrave = 500;\n    t.Tcommaaccent = 611;\n    t.Cacute = 667;\n    t.atilde = 500;\n    t.Edotaccent = 667;\n    t.scaron = 389;\n    t.scedilla = 389;\n    t.iacute = 278;\n    t.lozenge = 494;\n    t.Rcaron = 667;\n    t.Gcommaaccent = 722;\n    t.ucircumflex = 556;\n    t.acircumflex = 500;\n    t.Amacron = 667;\n    t.rcaron = 389;\n    t.ccedilla = 444;\n    t.Zdotaccent = 611;\n    t.Thorn = 611;\n    t.Omacron = 722;\n    t.Racute = 667;\n    t.Sacute = 556;\n    t.dcaron = 608;\n    t.Umacron = 722;\n    t.uring = 556;\n    t.threesuperior = 300;\n    t.Ograve = 722;\n    t.Agrave = 667;\n    t.Abreve = 667;\n    t.multiply = 570;\n    t.uacute = 556;\n    t.Tcaron = 611;\n    t.partialdiff = 494;\n    t.ydieresis = 444;\n    t.Nacute = 722;\n    t.icircumflex = 278;\n    t.Ecircumflex = 667;\n    t.adieresis = 500;\n    t.edieresis = 444;\n    t.cacute = 444;\n    t.nacute = 556;\n    t.umacron = 556;\n    t.Ncaron = 722;\n    t.Iacute = 389;\n    t.plusminus = 570;\n    t.brokenbar = 220;\n    t.registered = 747;\n    t.Gbreve = 722;\n    t.Idotaccent = 389;\n    t.summation = 600;\n    t.Egrave = 667;\n    t.racute = 389;\n    t.omacron = 500;\n    t.Zacute = 611;\n    t.Zcaron = 611;\n    t.greaterequal = 549;\n    t.Eth = 722;\n    t.Ccedilla = 667;\n    t.lcommaaccent = 278;\n    t.tcaron = 366;\n    t.eogonek = 444;\n    t.Uogonek = 722;\n    t.Aacute = 667;\n    t.Adieresis = 667;\n    t.egrave = 444;\n    t.zacute = 389;\n    t.iogonek = 278;\n    t.Oacute = 722;\n    t.oacute = 500;\n    t.amacron = 500;\n    t.sacute = 389;\n    t.idieresis = 278;\n    t.Ocircumflex = 722;\n    t.Ugrave = 722;\n    t.Delta = 612;\n    t.thorn = 500;\n    t.twosuperior = 300;\n    t.Odieresis = 722;\n    t.mu = 576;\n    t.igrave = 278;\n    t.ohungarumlaut = 500;\n    t.Eogonek = 667;\n    t.dcroat = 500;\n    t.threequarters = 750;\n    t.Scedilla = 556;\n    t.lcaron = 382;\n    t.Kcommaaccent = 667;\n    t.Lacute = 611;\n    t.trademark = 1000;\n    t.edotaccent = 444;\n    t.Igrave = 389;\n    t.Imacron = 389;\n    t.Lcaron = 611;\n    t.onehalf = 750;\n    t.lessequal = 549;\n    t.ocircumflex = 500;\n    t.ntilde = 556;\n    t.Uhungarumlaut = 722;\n    t.Eacute = 667;\n    t.emacron = 444;\n    t.gbreve = 500;\n    t.onequarter = 750;\n    t.Scaron = 556;\n    t.Scommaaccent = 556;\n    t.Ohungarumlaut = 722;\n    t.degree = 400;\n    t.ograve = 500;\n    t.Ccaron = 667;\n    t.ugrave = 556;\n    t.radical = 549;\n    t.Dcaron = 722;\n    t.rcommaaccent = 389;\n    t.Ntilde = 722;\n    t.otilde = 500;\n    t.Rcommaaccent = 667;\n    t.Lcommaaccent = 611;\n    t.Atilde = 667;\n    t.Aogonek = 667;\n    t.Aring = 667;\n    t.Otilde = 722;\n    t.zdotaccent = 389;\n    t.Ecaron = 667;\n    t.Iogonek = 389;\n    t.kcommaaccent = 500;\n    t.minus = 606;\n    t.Icircumflex = 389;\n    t.ncaron = 556;\n    t.tcommaaccent = 278;\n    t.logicalnot = 606;\n    t.odieresis = 500;\n    t.udieresis = 556;\n    t.notequal = 549;\n    t.gcommaaccent = 500;\n    t.eth = 500;\n    t.zcaron = 389;\n    t.ncommaaccent = 556;\n    t.onesuperior = 300;\n    t.imacron = 278;\n    t.Euro = 500;\n  });\n  // eslint-disable-next-line no-shadow\n  t[\"Times-Italic\"] = getLookupTableFactory(function (t) {\n    t.space = 250;\n    t.exclam = 333;\n    t.quotedbl = 420;\n    t.numbersign = 500;\n    t.dollar = 500;\n    t.percent = 833;\n    t.ampersand = 778;\n    t.quoteright = 333;\n    t.parenleft = 333;\n    t.parenright = 333;\n    t.asterisk = 500;\n    t.plus = 675;\n    t.comma = 250;\n    t.hyphen = 333;\n    t.period = 250;\n    t.slash = 278;\n    t.zero = 500;\n    t.one = 500;\n    t.two = 500;\n    t.three = 500;\n    t.four = 500;\n    t.five = 500;\n    t.six = 500;\n    t.seven = 500;\n    t.eight = 500;\n    t.nine = 500;\n    t.colon = 333;\n    t.semicolon = 333;\n    t.less = 675;\n    t.equal = 675;\n    t.greater = 675;\n    t.question = 500;\n    t.at = 920;\n    t.A = 611;\n    t.B = 611;\n    t.C = 667;\n    t.D = 722;\n    t.E = 611;\n    t.F = 611;\n    t.G = 722;\n    t.H = 722;\n    t.I = 333;\n    t.J = 444;\n    t.K = 667;\n    t.L = 556;\n    t.M = 833;\n    t.N = 667;\n    t.O = 722;\n    t.P = 611;\n    t.Q = 722;\n    t.R = 611;\n    t.S = 500;\n    t.T = 556;\n    t.U = 722;\n    t.V = 611;\n    t.W = 833;\n    t.X = 611;\n    t.Y = 556;\n    t.Z = 556;\n    t.bracketleft = 389;\n    t.backslash = 278;\n    t.bracketright = 389;\n    t.asciicircum = 422;\n    t.underscore = 500;\n    t.quoteleft = 333;\n    t.a = 500;\n    t.b = 500;\n    t.c = 444;\n    t.d = 500;\n    t.e = 444;\n    t.f = 278;\n    t.g = 500;\n    t.h = 500;\n    t.i = 278;\n    t.j = 278;\n    t.k = 444;\n    t.l = 278;\n    t.m = 722;\n    t.n = 500;\n    t.o = 500;\n    t.p = 500;\n    t.q = 500;\n    t.r = 389;\n    t.s = 389;\n    t.t = 278;\n    t.u = 500;\n    t.v = 444;\n    t.w = 667;\n    t.x = 444;\n    t.y = 444;\n    t.z = 389;\n    t.braceleft = 400;\n    t.bar = 275;\n    t.braceright = 400;\n    t.asciitilde = 541;\n    t.exclamdown = 389;\n    t.cent = 500;\n    t.sterling = 500;\n    t.fraction = 167;\n    t.yen = 500;\n    t.florin = 500;\n    t.section = 500;\n    t.currency = 500;\n    t.quotesingle = 214;\n    t.quotedblleft = 556;\n    t.guillemotleft = 500;\n    t.guilsinglleft = 333;\n    t.guilsinglright = 333;\n    t.fi = 500;\n    t.fl = 500;\n    t.endash = 500;\n    t.dagger = 500;\n    t.daggerdbl = 500;\n    t.periodcentered = 250;\n    t.paragraph = 523;\n    t.bullet = 350;\n    t.quotesinglbase = 333;\n    t.quotedblbase = 556;\n    t.quotedblright = 556;\n    t.guillemotright = 500;\n    t.ellipsis = 889;\n    t.perthousand = 1000;\n    t.questiondown = 500;\n    t.grave = 333;\n    t.acute = 333;\n    t.circumflex = 333;\n    t.tilde = 333;\n    t.macron = 333;\n    t.breve = 333;\n    t.dotaccent = 333;\n    t.dieresis = 333;\n    t.ring = 333;\n    t.cedilla = 333;\n    t.hungarumlaut = 333;\n    t.ogonek = 333;\n    t.caron = 333;\n    t.emdash = 889;\n    t.AE = 889;\n    t.ordfeminine = 276;\n    t.Lslash = 556;\n    t.Oslash = 722;\n    t.OE = 944;\n    t.ordmasculine = 310;\n    t.ae = 667;\n    t.dotlessi = 278;\n    t.lslash = 278;\n    t.oslash = 500;\n    t.oe = 667;\n    t.germandbls = 500;\n    t.Idieresis = 333;\n    t.eacute = 444;\n    t.abreve = 500;\n    t.uhungarumlaut = 500;\n    t.ecaron = 444;\n    t.Ydieresis = 556;\n    t.divide = 675;\n    t.Yacute = 556;\n    t.Acircumflex = 611;\n    t.aacute = 500;\n    t.Ucircumflex = 722;\n    t.yacute = 444;\n    t.scommaaccent = 389;\n    t.ecircumflex = 444;\n    t.Uring = 722;\n    t.Udieresis = 722;\n    t.aogonek = 500;\n    t.Uacute = 722;\n    t.uogonek = 500;\n    t.Edieresis = 611;\n    t.Dcroat = 722;\n    t.commaaccent = 250;\n    t.copyright = 760;\n    t.Emacron = 611;\n    t.ccaron = 444;\n    t.aring = 500;\n    t.Ncommaaccent = 667;\n    t.lacute = 278;\n    t.agrave = 500;\n    t.Tcommaaccent = 556;\n    t.Cacute = 667;\n    t.atilde = 500;\n    t.Edotaccent = 611;\n    t.scaron = 389;\n    t.scedilla = 389;\n    t.iacute = 278;\n    t.lozenge = 471;\n    t.Rcaron = 611;\n    t.Gcommaaccent = 722;\n    t.ucircumflex = 500;\n    t.acircumflex = 500;\n    t.Amacron = 611;\n    t.rcaron = 389;\n    t.ccedilla = 444;\n    t.Zdotaccent = 556;\n    t.Thorn = 611;\n    t.Omacron = 722;\n    t.Racute = 611;\n    t.Sacute = 500;\n    t.dcaron = 544;\n    t.Umacron = 722;\n    t.uring = 500;\n    t.threesuperior = 300;\n    t.Ograve = 722;\n    t.Agrave = 611;\n    t.Abreve = 611;\n    t.multiply = 675;\n    t.uacute = 500;\n    t.Tcaron = 556;\n    t.partialdiff = 476;\n    t.ydieresis = 444;\n    t.Nacute = 667;\n    t.icircumflex = 278;\n    t.Ecircumflex = 611;\n    t.adieresis = 500;\n    t.edieresis = 444;\n    t.cacute = 444;\n    t.nacute = 500;\n    t.umacron = 500;\n    t.Ncaron = 667;\n    t.Iacute = 333;\n    t.plusminus = 675;\n    t.brokenbar = 275;\n    t.registered = 760;\n    t.Gbreve = 722;\n    t.Idotaccent = 333;\n    t.summation = 600;\n    t.Egrave = 611;\n    t.racute = 389;\n    t.omacron = 500;\n    t.Zacute = 556;\n    t.Zcaron = 556;\n    t.greaterequal = 549;\n    t.Eth = 722;\n    t.Ccedilla = 667;\n    t.lcommaaccent = 278;\n    t.tcaron = 300;\n    t.eogonek = 444;\n    t.Uogonek = 722;\n    t.Aacute = 611;\n    t.Adieresis = 611;\n    t.egrave = 444;\n    t.zacute = 389;\n    t.iogonek = 278;\n    t.Oacute = 722;\n    t.oacute = 500;\n    t.amacron = 500;\n    t.sacute = 389;\n    t.idieresis = 278;\n    t.Ocircumflex = 722;\n    t.Ugrave = 722;\n    t.Delta = 612;\n    t.thorn = 500;\n    t.twosuperior = 300;\n    t.Odieresis = 722;\n    t.mu = 500;\n    t.igrave = 278;\n    t.ohungarumlaut = 500;\n    t.Eogonek = 611;\n    t.dcroat = 500;\n    t.threequarters = 750;\n    t.Scedilla = 500;\n    t.lcaron = 300;\n    t.Kcommaaccent = 667;\n    t.Lacute = 556;\n    t.trademark = 980;\n    t.edotaccent = 444;\n    t.Igrave = 333;\n    t.Imacron = 333;\n    t.Lcaron = 611;\n    t.onehalf = 750;\n    t.lessequal = 549;\n    t.ocircumflex = 500;\n    t.ntilde = 500;\n    t.Uhungarumlaut = 722;\n    t.Eacute = 611;\n    t.emacron = 444;\n    t.gbreve = 500;\n    t.onequarter = 750;\n    t.Scaron = 500;\n    t.Scommaaccent = 500;\n    t.Ohungarumlaut = 722;\n    t.degree = 400;\n    t.ograve = 500;\n    t.Ccaron = 667;\n    t.ugrave = 500;\n    t.radical = 453;\n    t.Dcaron = 722;\n    t.rcommaaccent = 389;\n    t.Ntilde = 667;\n    t.otilde = 500;\n    t.Rcommaaccent = 611;\n    t.Lcommaaccent = 556;\n    t.Atilde = 611;\n    t.Aogonek = 611;\n    t.Aring = 611;\n    t.Otilde = 722;\n    t.zdotaccent = 389;\n    t.Ecaron = 611;\n    t.Iogonek = 333;\n    t.kcommaaccent = 444;\n    t.minus = 675;\n    t.Icircumflex = 333;\n    t.ncaron = 500;\n    t.tcommaaccent = 278;\n    t.logicalnot = 675;\n    t.odieresis = 500;\n    t.udieresis = 500;\n    t.notequal = 549;\n    t.gcommaaccent = 500;\n    t.eth = 500;\n    t.zcaron = 389;\n    t.ncommaaccent = 500;\n    t.onesuperior = 300;\n    t.imacron = 278;\n    t.Euro = 500;\n  });\n  // eslint-disable-next-line no-shadow\n  t.ZapfDingbats = getLookupTableFactory(function (t) {\n    t.space = 278;\n    t.a1 = 974;\n    t.a2 = 961;\n    t.a202 = 974;\n    t.a3 = 980;\n    t.a4 = 719;\n    t.a5 = 789;\n    t.a119 = 790;\n    t.a118 = 791;\n    t.a117 = 690;\n    t.a11 = 960;\n    t.a12 = 939;\n    t.a13 = 549;\n    t.a14 = 855;\n    t.a15 = 911;\n    t.a16 = 933;\n    t.a105 = 911;\n    t.a17 = 945;\n    t.a18 = 974;\n    t.a19 = 755;\n    t.a20 = 846;\n    t.a21 = 762;\n    t.a22 = 761;\n    t.a23 = 571;\n    t.a24 = 677;\n    t.a25 = 763;\n    t.a26 = 760;\n    t.a27 = 759;\n    t.a28 = 754;\n    t.a6 = 494;\n    t.a7 = 552;\n    t.a8 = 537;\n    t.a9 = 577;\n    t.a10 = 692;\n    t.a29 = 786;\n    t.a30 = 788;\n    t.a31 = 788;\n    t.a32 = 790;\n    t.a33 = 793;\n    t.a34 = 794;\n    t.a35 = 816;\n    t.a36 = 823;\n    t.a37 = 789;\n    t.a38 = 841;\n    t.a39 = 823;\n    t.a40 = 833;\n    t.a41 = 816;\n    t.a42 = 831;\n    t.a43 = 923;\n    t.a44 = 744;\n    t.a45 = 723;\n    t.a46 = 749;\n    t.a47 = 790;\n    t.a48 = 792;\n    t.a49 = 695;\n    t.a50 = 776;\n    t.a51 = 768;\n    t.a52 = 792;\n    t.a53 = 759;\n    t.a54 = 707;\n    t.a55 = 708;\n    t.a56 = 682;\n    t.a57 = 701;\n    t.a58 = 826;\n    t.a59 = 815;\n    t.a60 = 789;\n    t.a61 = 789;\n    t.a62 = 707;\n    t.a63 = 687;\n    t.a64 = 696;\n    t.a65 = 689;\n    t.a66 = 786;\n    t.a67 = 787;\n    t.a68 = 713;\n    t.a69 = 791;\n    t.a70 = 785;\n    t.a71 = 791;\n    t.a72 = 873;\n    t.a73 = 761;\n    t.a74 = 762;\n    t.a203 = 762;\n    t.a75 = 759;\n    t.a204 = 759;\n    t.a76 = 892;\n    t.a77 = 892;\n    t.a78 = 788;\n    t.a79 = 784;\n    t.a81 = 438;\n    t.a82 = 138;\n    t.a83 = 277;\n    t.a84 = 415;\n    t.a97 = 392;\n    t.a98 = 392;\n    t.a99 = 668;\n    t.a100 = 668;\n    t.a89 = 390;\n    t.a90 = 390;\n    t.a93 = 317;\n    t.a94 = 317;\n    t.a91 = 276;\n    t.a92 = 276;\n    t.a205 = 509;\n    t.a85 = 509;\n    t.a206 = 410;\n    t.a86 = 410;\n    t.a87 = 234;\n    t.a88 = 234;\n    t.a95 = 334;\n    t.a96 = 334;\n    t.a101 = 732;\n    t.a102 = 544;\n    t.a103 = 544;\n    t.a104 = 910;\n    t.a106 = 667;\n    t.a107 = 760;\n    t.a108 = 760;\n    t.a112 = 776;\n    t.a111 = 595;\n    t.a110 = 694;\n    t.a109 = 626;\n    t.a120 = 788;\n    t.a121 = 788;\n    t.a122 = 788;\n    t.a123 = 788;\n    t.a124 = 788;\n    t.a125 = 788;\n    t.a126 = 788;\n    t.a127 = 788;\n    t.a128 = 788;\n    t.a129 = 788;\n    t.a130 = 788;\n    t.a131 = 788;\n    t.a132 = 788;\n    t.a133 = 788;\n    t.a134 = 788;\n    t.a135 = 788;\n    t.a136 = 788;\n    t.a137 = 788;\n    t.a138 = 788;\n    t.a139 = 788;\n    t.a140 = 788;\n    t.a141 = 788;\n    t.a142 = 788;\n    t.a143 = 788;\n    t.a144 = 788;\n    t.a145 = 788;\n    t.a146 = 788;\n    t.a147 = 788;\n    t.a148 = 788;\n    t.a149 = 788;\n    t.a150 = 788;\n    t.a151 = 788;\n    t.a152 = 788;\n    t.a153 = 788;\n    t.a154 = 788;\n    t.a155 = 788;\n    t.a156 = 788;\n    t.a157 = 788;\n    t.a158 = 788;\n    t.a159 = 788;\n    t.a160 = 894;\n    t.a161 = 838;\n    t.a163 = 1016;\n    t.a164 = 458;\n    t.a196 = 748;\n    t.a165 = 924;\n    t.a192 = 748;\n    t.a166 = 918;\n    t.a167 = 927;\n    t.a168 = 928;\n    t.a169 = 928;\n    t.a170 = 834;\n    t.a171 = 873;\n    t.a172 = 828;\n    t.a173 = 924;\n    t.a162 = 924;\n    t.a174 = 917;\n    t.a175 = 930;\n    t.a176 = 931;\n    t.a177 = 463;\n    t.a178 = 883;\n    t.a179 = 836;\n    t.a193 = 836;\n    t.a180 = 867;\n    t.a199 = 867;\n    t.a181 = 696;\n    t.a200 = 696;\n    t.a182 = 874;\n    t.a201 = 874;\n    t.a183 = 760;\n    t.a184 = 946;\n    t.a197 = 771;\n    t.a185 = 865;\n    t.a194 = 771;\n    t.a198 = 888;\n    t.a186 = 967;\n    t.a195 = 888;\n    t.a187 = 831;\n    t.a188 = 873;\n    t.a189 = 927;\n    t.a190 = 970;\n    t.a191 = 918;\n  });\n});\n\nexport { getMetrics };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FormatError,\n  info,\n  isBool,\n  IsEvalSupportedCached,\n  unreachable,\n} from \"../shared/util.js\";\nimport { isDict, isStream } from \"./primitives.js\";\nimport { PostScriptLexer, PostScriptParser } from \"./ps_parser.js\";\n\nclass PDFFunctionFactory {\n  constructor({ xref, isEvalSupported = true }) {\n    this.xref = xref;\n    this.isEvalSupported = isEvalSupported !== false;\n  }\n\n  create(fn) {\n    return PDFFunction.parse({\n      xref: this.xref,\n      isEvalSupported: this.isEvalSupported,\n      fn,\n    });\n  }\n\n  createFromArray(fnObj) {\n    return PDFFunction.parseArray({\n      xref: this.xref,\n      isEvalSupported: this.isEvalSupported,\n      fnObj,\n    });\n  }\n}\n\nfunction toNumberArray(arr) {\n  if (!Array.isArray(arr)) {\n    return null;\n  }\n  const length = arr.length;\n  for (let i = 0; i < length; i++) {\n    if (typeof arr[i] !== \"number\") {\n      // Non-number is found -- convert all items to numbers.\n      const result = new Array(length);\n      for (let j = 0; j < length; j++) {\n        result[j] = +arr[j];\n      }\n      return result;\n    }\n  }\n  return arr;\n}\n\nvar PDFFunction = (function PDFFunctionClosure() {\n  const CONSTRUCT_SAMPLED = 0;\n  const CONSTRUCT_INTERPOLATED = 2;\n  const CONSTRUCT_STICHED = 3;\n  const CONSTRUCT_POSTSCRIPT = 4;\n\n  return {\n    getSampleArray(size, outputSize, bps, stream) {\n      var i, ii;\n      var length = 1;\n      for (i = 0, ii = size.length; i < ii; i++) {\n        length *= size[i];\n      }\n      length *= outputSize;\n\n      var array = new Array(length);\n      var codeSize = 0;\n      var codeBuf = 0;\n      // 32 is a valid bps so shifting won't work\n      var sampleMul = 1.0 / (2.0 ** bps - 1);\n\n      var strBytes = stream.getBytes((length * bps + 7) / 8);\n      var strIdx = 0;\n      for (i = 0; i < length; i++) {\n        while (codeSize < bps) {\n          codeBuf <<= 8;\n          codeBuf |= strBytes[strIdx++];\n          codeSize += 8;\n        }\n        codeSize -= bps;\n        array[i] = (codeBuf >> codeSize) * sampleMul;\n        codeBuf &= (1 << codeSize) - 1;\n      }\n      return array;\n    },\n\n    getIR({ xref, isEvalSupported, fn }) {\n      var dict = fn.dict;\n      if (!dict) {\n        dict = fn;\n      }\n\n      var types = [\n        this.constructSampled,\n        null,\n        this.constructInterpolated,\n        this.constructStiched,\n        this.constructPostScript,\n      ];\n\n      var typeNum = dict.get(\"FunctionType\");\n      var typeFn = types[typeNum];\n      if (!typeFn) {\n        throw new FormatError(\"Unknown type of function\");\n      }\n\n      return typeFn.call(this, { xref, isEvalSupported, fn, dict });\n    },\n\n    fromIR({ xref, isEvalSupported, IR }) {\n      var type = IR[0];\n      switch (type) {\n        case CONSTRUCT_SAMPLED:\n          return this.constructSampledFromIR({ xref, isEvalSupported, IR });\n        case CONSTRUCT_INTERPOLATED:\n          return this.constructInterpolatedFromIR({\n            xref,\n            isEvalSupported,\n            IR,\n          });\n        case CONSTRUCT_STICHED:\n          return this.constructStichedFromIR({ xref, isEvalSupported, IR });\n        // case CONSTRUCT_POSTSCRIPT:\n        default:\n          return this.constructPostScriptFromIR({ xref, isEvalSupported, IR });\n      }\n    },\n\n    parse({ xref, isEvalSupported, fn }) {\n      const IR = this.getIR({ xref, isEvalSupported, fn });\n      return this.fromIR({ xref, isEvalSupported, IR });\n    },\n\n    parseArray({ xref, isEvalSupported, fnObj }) {\n      if (!Array.isArray(fnObj)) {\n        // not an array -- parsing as regular function\n        return this.parse({ xref, isEvalSupported, fn: fnObj });\n      }\n\n      var fnArray = [];\n      for (var j = 0, jj = fnObj.length; j < jj; j++) {\n        fnArray.push(\n          this.parse({ xref, isEvalSupported, fn: xref.fetchIfRef(fnObj[j]) })\n        );\n      }\n      return function (src, srcOffset, dest, destOffset) {\n        for (var i = 0, ii = fnArray.length; i < ii; i++) {\n          fnArray[i](src, srcOffset, dest, destOffset + i);\n        }\n      };\n    },\n\n    constructSampled({ xref, isEvalSupported, fn, dict }) {\n      function toMultiArray(arr) {\n        var inputLength = arr.length;\n        var out = [];\n        var index = 0;\n        for (var i = 0; i < inputLength; i += 2) {\n          out[index] = [arr[i], arr[i + 1]];\n          ++index;\n        }\n        return out;\n      }\n      var domain = toNumberArray(dict.getArray(\"Domain\"));\n      var range = toNumberArray(dict.getArray(\"Range\"));\n\n      if (!domain || !range) {\n        throw new FormatError(\"No domain or range\");\n      }\n\n      var inputSize = domain.length / 2;\n      var outputSize = range.length / 2;\n\n      domain = toMultiArray(domain);\n      range = toMultiArray(range);\n\n      var size = toNumberArray(dict.getArray(\"Size\"));\n      var bps = dict.get(\"BitsPerSample\");\n      var order = dict.get(\"Order\") || 1;\n      if (order !== 1) {\n        // No description how cubic spline interpolation works in PDF32000:2008\n        // As in poppler, ignoring order, linear interpolation may work as good\n        info(\"No support for cubic spline interpolation: \" + order);\n      }\n\n      var encode = toNumberArray(dict.getArray(\"Encode\"));\n      if (!encode) {\n        encode = [];\n        for (var i = 0; i < inputSize; ++i) {\n          encode.push([0, size[i] - 1]);\n        }\n      } else {\n        encode = toMultiArray(encode);\n      }\n\n      var decode = toNumberArray(dict.getArray(\"Decode\"));\n      if (!decode) {\n        decode = range;\n      } else {\n        decode = toMultiArray(decode);\n      }\n\n      var samples = this.getSampleArray(size, outputSize, bps, fn);\n\n      return [\n        CONSTRUCT_SAMPLED,\n        inputSize,\n        domain,\n        encode,\n        decode,\n        samples,\n        size,\n        outputSize,\n        2 ** bps - 1,\n        range,\n      ];\n    },\n\n    constructSampledFromIR({ xref, isEvalSupported, IR }) {\n      // See chapter 3, page 109 of the PDF reference\n      function interpolate(x, xmin, xmax, ymin, ymax) {\n        return ymin + (x - xmin) * ((ymax - ymin) / (xmax - xmin));\n      }\n\n      return function constructSampledFromIRResult(\n        src,\n        srcOffset,\n        dest,\n        destOffset\n      ) {\n        // See chapter 3, page 110 of the PDF reference.\n        var m = IR[1];\n        var domain = IR[2];\n        var encode = IR[3];\n        var decode = IR[4];\n        var samples = IR[5];\n        var size = IR[6];\n        var n = IR[7];\n        // var mask = IR[8];\n        var range = IR[9];\n\n        // Building the cube vertices: its part and sample index\n        // http://rjwagner49.com/Mathematics/Interpolation.pdf\n        var cubeVertices = 1 << m;\n        var cubeN = new Float64Array(cubeVertices);\n        var cubeVertex = new Uint32Array(cubeVertices);\n        var i, j;\n        for (j = 0; j < cubeVertices; j++) {\n          cubeN[j] = 1;\n        }\n\n        var k = n,\n          pos = 1;\n        // Map x_i to y_j for 0 <= i < m using the sampled function.\n        for (i = 0; i < m; ++i) {\n          // x_i' = min(max(x_i, Domain_2i), Domain_2i+1)\n          var domain_2i = domain[i][0];\n          var domain_2i_1 = domain[i][1];\n          var xi = Math.min(\n            Math.max(src[srcOffset + i], domain_2i),\n            domain_2i_1\n          );\n\n          // e_i = Interpolate(x_i', Domain_2i, Domain_2i+1,\n          //                   Encode_2i, Encode_2i+1)\n          var e = interpolate(\n            xi,\n            domain_2i,\n            domain_2i_1,\n            encode[i][0],\n            encode[i][1]\n          );\n\n          // e_i' = min(max(e_i, 0), Size_i - 1)\n          var size_i = size[i];\n          e = Math.min(Math.max(e, 0), size_i - 1);\n\n          // Adjusting the cube: N and vertex sample index\n          var e0 = e < size_i - 1 ? Math.floor(e) : e - 1; // e1 = e0 + 1;\n          var n0 = e0 + 1 - e; // (e1 - e) / (e1 - e0);\n          var n1 = e - e0; // (e - e0) / (e1 - e0);\n          var offset0 = e0 * k;\n          var offset1 = offset0 + k; // e1 * k\n          for (j = 0; j < cubeVertices; j++) {\n            if (j & pos) {\n              cubeN[j] *= n1;\n              cubeVertex[j] += offset1;\n            } else {\n              cubeN[j] *= n0;\n              cubeVertex[j] += offset0;\n            }\n          }\n\n          k *= size_i;\n          pos <<= 1;\n        }\n\n        for (j = 0; j < n; ++j) {\n          // Sum all cube vertices' samples portions\n          var rj = 0;\n          for (i = 0; i < cubeVertices; i++) {\n            rj += samples[cubeVertex[i] + j] * cubeN[i];\n          }\n\n          // r_j' = Interpolate(r_j, 0, 2^BitsPerSample - 1,\n          //                    Decode_2j, Decode_2j+1)\n          rj = interpolate(rj, 0, 1, decode[j][0], decode[j][1]);\n\n          // y_j = min(max(r_j, range_2j), range_2j+1)\n          dest[destOffset + j] = Math.min(\n            Math.max(rj, range[j][0]),\n            range[j][1]\n          );\n        }\n      };\n    },\n\n    constructInterpolated({ xref, isEvalSupported, fn, dict }) {\n      var c0 = toNumberArray(dict.getArray(\"C0\")) || [0];\n      var c1 = toNumberArray(dict.getArray(\"C1\")) || [1];\n      var n = dict.get(\"N\");\n\n      var length = c0.length;\n      var diff = [];\n      for (var i = 0; i < length; ++i) {\n        diff.push(c1[i] - c0[i]);\n      }\n\n      return [CONSTRUCT_INTERPOLATED, c0, diff, n];\n    },\n\n    constructInterpolatedFromIR({ xref, isEvalSupported, IR }) {\n      var c0 = IR[1];\n      var diff = IR[2];\n      var n = IR[3];\n\n      var length = diff.length;\n\n      return function constructInterpolatedFromIRResult(\n        src,\n        srcOffset,\n        dest,\n        destOffset\n      ) {\n        var x = n === 1 ? src[srcOffset] : src[srcOffset] ** n;\n\n        for (var j = 0; j < length; ++j) {\n          dest[destOffset + j] = c0[j] + x * diff[j];\n        }\n      };\n    },\n\n    constructStiched({ xref, isEvalSupported, fn, dict }) {\n      var domain = toNumberArray(dict.getArray(\"Domain\"));\n\n      if (!domain) {\n        throw new FormatError(\"No domain\");\n      }\n\n      var inputSize = domain.length / 2;\n      if (inputSize !== 1) {\n        throw new FormatError(\"Bad domain for stiched function\");\n      }\n\n      var fnRefs = dict.get(\"Functions\");\n      var fns = [];\n      for (var i = 0, ii = fnRefs.length; i < ii; ++i) {\n        fns.push(\n          this.parse({ xref, isEvalSupported, fn: xref.fetchIfRef(fnRefs[i]) })\n        );\n      }\n\n      var bounds = toNumberArray(dict.getArray(\"Bounds\"));\n      var encode = toNumberArray(dict.getArray(\"Encode\"));\n\n      return [CONSTRUCT_STICHED, domain, bounds, encode, fns];\n    },\n\n    constructStichedFromIR({ xref, isEvalSupported, IR }) {\n      var domain = IR[1];\n      var bounds = IR[2];\n      var encode = IR[3];\n      var fns = IR[4];\n      var tmpBuf = new Float32Array(1);\n\n      return function constructStichedFromIRResult(\n        src,\n        srcOffset,\n        dest,\n        destOffset\n      ) {\n        var clip = function constructStichedFromIRClip(v, min, max) {\n          if (v > max) {\n            v = max;\n          } else if (v < min) {\n            v = min;\n          }\n          return v;\n        };\n\n        // clip to domain\n        var v = clip(src[srcOffset], domain[0], domain[1]);\n        // calculate which bound the value is in\n        for (var i = 0, ii = bounds.length; i < ii; ++i) {\n          if (v < bounds[i]) {\n            break;\n          }\n        }\n\n        // encode value into domain of function\n        var dmin = domain[0];\n        if (i > 0) {\n          dmin = bounds[i - 1];\n        }\n        var dmax = domain[1];\n        if (i < bounds.length) {\n          dmax = bounds[i];\n        }\n\n        var rmin = encode[2 * i];\n        var rmax = encode[2 * i + 1];\n\n        // Prevent the value from becoming NaN as a result\n        // of division by zero (fixes issue6113.pdf).\n        tmpBuf[0] =\n          dmin === dmax\n            ? rmin\n            : rmin + ((v - dmin) * (rmax - rmin)) / (dmax - dmin);\n\n        // call the appropriate function\n        fns[i](tmpBuf, 0, dest, destOffset);\n      };\n    },\n\n    constructPostScript({ xref, isEvalSupported, fn, dict }) {\n      var domain = toNumberArray(dict.getArray(\"Domain\"));\n      var range = toNumberArray(dict.getArray(\"Range\"));\n\n      if (!domain) {\n        throw new FormatError(\"No domain.\");\n      }\n\n      if (!range) {\n        throw new FormatError(\"No range.\");\n      }\n\n      var lexer = new PostScriptLexer(fn);\n      var parser = new PostScriptParser(lexer);\n      var code = parser.parse();\n\n      return [CONSTRUCT_POSTSCRIPT, domain, range, code];\n    },\n\n    constructPostScriptFromIR({ xref, isEvalSupported, IR }) {\n      var domain = IR[1];\n      var range = IR[2];\n      var code = IR[3];\n\n      if (isEvalSupported && IsEvalSupportedCached.value) {\n        const compiled = new PostScriptCompiler().compile(code, domain, range);\n        if (compiled) {\n          // Compiled function consists of simple expressions such as addition,\n          // subtraction, Math.max, and also contains 'var' and 'return'\n          // statements. See the generation in the PostScriptCompiler below.\n          // eslint-disable-next-line no-new-func\n          return new Function(\n            \"src\",\n            \"srcOffset\",\n            \"dest\",\n            \"destOffset\",\n            compiled\n          );\n        }\n      }\n      info(\"Unable to compile PS function\");\n\n      var numOutputs = range.length >> 1;\n      var numInputs = domain.length >> 1;\n      var evaluator = new PostScriptEvaluator(code);\n      // Cache the values for a big speed up, the cache size is limited though\n      // since the number of possible values can be huge from a PS function.\n      var cache = Object.create(null);\n      // The MAX_CACHE_SIZE is set to ~4x the maximum number of distinct values\n      // seen in our tests.\n      var MAX_CACHE_SIZE = 2048 * 4;\n      var cache_available = MAX_CACHE_SIZE;\n      var tmpBuf = new Float32Array(numInputs);\n\n      return function constructPostScriptFromIRResult(\n        src,\n        srcOffset,\n        dest,\n        destOffset\n      ) {\n        var i, value;\n        var key = \"\";\n        var input = tmpBuf;\n        for (i = 0; i < numInputs; i++) {\n          value = src[srcOffset + i];\n          input[i] = value;\n          key += value + \"_\";\n        }\n\n        var cachedValue = cache[key];\n        if (cachedValue !== undefined) {\n          dest.set(cachedValue, destOffset);\n          return;\n        }\n\n        var output = new Float32Array(numOutputs);\n        var stack = evaluator.execute(input);\n        var stackIndex = stack.length - numOutputs;\n        for (i = 0; i < numOutputs; i++) {\n          value = stack[stackIndex + i];\n          var bound = range[i * 2];\n          if (value < bound) {\n            value = bound;\n          } else {\n            bound = range[i * 2 + 1];\n            if (value > bound) {\n              value = bound;\n            }\n          }\n          output[i] = value;\n        }\n        if (cache_available > 0) {\n          cache_available--;\n          cache[key] = output;\n        }\n        dest.set(output, destOffset);\n      };\n    },\n  };\n})();\n\nfunction isPDFFunction(v) {\n  var fnDict;\n  if (typeof v !== \"object\") {\n    return false;\n  } else if (isDict(v)) {\n    fnDict = v;\n  } else if (isStream(v)) {\n    fnDict = v.dict;\n  } else {\n    return false;\n  }\n  return fnDict.has(\"FunctionType\");\n}\n\nvar PostScriptStack = (function PostScriptStackClosure() {\n  var MAX_STACK_SIZE = 100;\n\n  // eslint-disable-next-line no-shadow\n  function PostScriptStack(initialStack) {\n    this.stack = !initialStack\n      ? []\n      : Array.prototype.slice.call(initialStack, 0);\n  }\n\n  PostScriptStack.prototype = {\n    push: function PostScriptStack_push(value) {\n      if (this.stack.length >= MAX_STACK_SIZE) {\n        throw new Error(\"PostScript function stack overflow.\");\n      }\n      this.stack.push(value);\n    },\n    pop: function PostScriptStack_pop() {\n      if (this.stack.length <= 0) {\n        throw new Error(\"PostScript function stack underflow.\");\n      }\n      return this.stack.pop();\n    },\n    copy: function PostScriptStack_copy(n) {\n      if (this.stack.length + n >= MAX_STACK_SIZE) {\n        throw new Error(\"PostScript function stack overflow.\");\n      }\n      var stack = this.stack;\n      for (var i = stack.length - n, j = n - 1; j >= 0; j--, i++) {\n        stack.push(stack[i]);\n      }\n    },\n    index: function PostScriptStack_index(n) {\n      this.push(this.stack[this.stack.length - n - 1]);\n    },\n    // rotate the last n stack elements p times\n    roll: function PostScriptStack_roll(n, p) {\n      var stack = this.stack;\n      var l = stack.length - n;\n      var r = stack.length - 1,\n        c = l + (p - Math.floor(p / n) * n),\n        i,\n        j,\n        t;\n      for (i = l, j = r; i < j; i++, j--) {\n        t = stack[i];\n        stack[i] = stack[j];\n        stack[j] = t;\n      }\n      for (i = l, j = c - 1; i < j; i++, j--) {\n        t = stack[i];\n        stack[i] = stack[j];\n        stack[j] = t;\n      }\n      for (i = c, j = r; i < j; i++, j--) {\n        t = stack[i];\n        stack[i] = stack[j];\n        stack[j] = t;\n      }\n    },\n  };\n  return PostScriptStack;\n})();\nvar PostScriptEvaluator = (function PostScriptEvaluatorClosure() {\n  // eslint-disable-next-line no-shadow\n  function PostScriptEvaluator(operators) {\n    this.operators = operators;\n  }\n  PostScriptEvaluator.prototype = {\n    execute: function PostScriptEvaluator_execute(initialStack) {\n      var stack = new PostScriptStack(initialStack);\n      var counter = 0;\n      var operators = this.operators;\n      var length = operators.length;\n      var operator, a, b;\n      while (counter < length) {\n        operator = operators[counter++];\n        if (typeof operator === \"number\") {\n          // Operator is really an operand and should be pushed to the stack.\n          stack.push(operator);\n          continue;\n        }\n        switch (operator) {\n          // non standard ps operators\n          case \"jz\": // jump if false\n            b = stack.pop();\n            a = stack.pop();\n            if (!a) {\n              counter = b;\n            }\n            break;\n          case \"j\": // jump\n            a = stack.pop();\n            counter = a;\n            break;\n\n          // all ps operators in alphabetical order (excluding if/ifelse)\n          case \"abs\":\n            a = stack.pop();\n            stack.push(Math.abs(a));\n            break;\n          case \"add\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a + b);\n            break;\n          case \"and\":\n            b = stack.pop();\n            a = stack.pop();\n            if (isBool(a) && isBool(b)) {\n              stack.push(a && b);\n            } else {\n              stack.push(a & b);\n            }\n            break;\n          case \"atan\":\n            a = stack.pop();\n            stack.push(Math.atan(a));\n            break;\n          case \"bitshift\":\n            b = stack.pop();\n            a = stack.pop();\n            if (a > 0) {\n              stack.push(a << b);\n            } else {\n              stack.push(a >> b);\n            }\n            break;\n          case \"ceiling\":\n            a = stack.pop();\n            stack.push(Math.ceil(a));\n            break;\n          case \"copy\":\n            a = stack.pop();\n            stack.copy(a);\n            break;\n          case \"cos\":\n            a = stack.pop();\n            stack.push(Math.cos(a));\n            break;\n          case \"cvi\":\n            a = stack.pop() | 0;\n            stack.push(a);\n            break;\n          case \"cvr\":\n            // noop\n            break;\n          case \"div\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a / b);\n            break;\n          case \"dup\":\n            stack.copy(1);\n            break;\n          case \"eq\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a === b);\n            break;\n          case \"exch\":\n            stack.roll(2, 1);\n            break;\n          case \"exp\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a ** b);\n            break;\n          case \"false\":\n            stack.push(false);\n            break;\n          case \"floor\":\n            a = stack.pop();\n            stack.push(Math.floor(a));\n            break;\n          case \"ge\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a >= b);\n            break;\n          case \"gt\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a > b);\n            break;\n          case \"idiv\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push((a / b) | 0);\n            break;\n          case \"index\":\n            a = stack.pop();\n            stack.index(a);\n            break;\n          case \"le\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a <= b);\n            break;\n          case \"ln\":\n            a = stack.pop();\n            stack.push(Math.log(a));\n            break;\n          case \"log\":\n            a = stack.pop();\n            stack.push(Math.log(a) / Math.LN10);\n            break;\n          case \"lt\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a < b);\n            break;\n          case \"mod\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a % b);\n            break;\n          case \"mul\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a * b);\n            break;\n          case \"ne\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a !== b);\n            break;\n          case \"neg\":\n            a = stack.pop();\n            stack.push(-a);\n            break;\n          case \"not\":\n            a = stack.pop();\n            if (isBool(a)) {\n              stack.push(!a);\n            } else {\n              stack.push(~a);\n            }\n            break;\n          case \"or\":\n            b = stack.pop();\n            a = stack.pop();\n            if (isBool(a) && isBool(b)) {\n              stack.push(a || b);\n            } else {\n              stack.push(a | b);\n            }\n            break;\n          case \"pop\":\n            stack.pop();\n            break;\n          case \"roll\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.roll(a, b);\n            break;\n          case \"round\":\n            a = stack.pop();\n            stack.push(Math.round(a));\n            break;\n          case \"sin\":\n            a = stack.pop();\n            stack.push(Math.sin(a));\n            break;\n          case \"sqrt\":\n            a = stack.pop();\n            stack.push(Math.sqrt(a));\n            break;\n          case \"sub\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a - b);\n            break;\n          case \"true\":\n            stack.push(true);\n            break;\n          case \"truncate\":\n            a = stack.pop();\n            a = a < 0 ? Math.ceil(a) : Math.floor(a);\n            stack.push(a);\n            break;\n          case \"xor\":\n            b = stack.pop();\n            a = stack.pop();\n            if (isBool(a) && isBool(b)) {\n              stack.push(a !== b);\n            } else {\n              stack.push(a ^ b);\n            }\n            break;\n          default:\n            throw new FormatError(`Unknown operator ${operator}`);\n        }\n      }\n      return stack.stack;\n    },\n  };\n  return PostScriptEvaluator;\n})();\n\n// Most of the PDFs functions consist of simple operations such as:\n//   roll, exch, sub, cvr, pop, index, dup, mul, if, gt, add.\n//\n// We can compile most of such programs, and at the same moment, we can\n// optimize some expressions using basic math properties. Keeping track of\n// min/max values will allow us to avoid extra Math.min/Math.max calls.\nvar PostScriptCompiler = (function PostScriptCompilerClosure() {\n  function AstNode(type) {\n    this.type = type;\n  }\n  AstNode.prototype.visit = function (visitor) {\n    unreachable(\"abstract method\");\n  };\n\n  function AstArgument(index, min, max) {\n    AstNode.call(this, \"args\");\n    this.index = index;\n    this.min = min;\n    this.max = max;\n  }\n  AstArgument.prototype = Object.create(AstNode.prototype);\n  AstArgument.prototype.visit = function (visitor) {\n    visitor.visitArgument(this);\n  };\n\n  function AstLiteral(number) {\n    AstNode.call(this, \"literal\");\n    this.number = number;\n    this.min = number;\n    this.max = number;\n  }\n  AstLiteral.prototype = Object.create(AstNode.prototype);\n  AstLiteral.prototype.visit = function (visitor) {\n    visitor.visitLiteral(this);\n  };\n\n  function AstBinaryOperation(op, arg1, arg2, min, max) {\n    AstNode.call(this, \"binary\");\n    this.op = op;\n    this.arg1 = arg1;\n    this.arg2 = arg2;\n    this.min = min;\n    this.max = max;\n  }\n  AstBinaryOperation.prototype = Object.create(AstNode.prototype);\n  AstBinaryOperation.prototype.visit = function (visitor) {\n    visitor.visitBinaryOperation(this);\n  };\n\n  function AstMin(arg, max) {\n    AstNode.call(this, \"max\");\n    this.arg = arg;\n    this.min = arg.min;\n    this.max = max;\n  }\n  AstMin.prototype = Object.create(AstNode.prototype);\n  AstMin.prototype.visit = function (visitor) {\n    visitor.visitMin(this);\n  };\n\n  function AstVariable(index, min, max) {\n    AstNode.call(this, \"var\");\n    this.index = index;\n    this.min = min;\n    this.max = max;\n  }\n  AstVariable.prototype = Object.create(AstNode.prototype);\n  AstVariable.prototype.visit = function (visitor) {\n    visitor.visitVariable(this);\n  };\n\n  function AstVariableDefinition(variable, arg) {\n    AstNode.call(this, \"definition\");\n    this.variable = variable;\n    this.arg = arg;\n  }\n  AstVariableDefinition.prototype = Object.create(AstNode.prototype);\n  AstVariableDefinition.prototype.visit = function (visitor) {\n    visitor.visitVariableDefinition(this);\n  };\n\n  function ExpressionBuilderVisitor() {\n    this.parts = [];\n  }\n  ExpressionBuilderVisitor.prototype = {\n    visitArgument(arg) {\n      this.parts.push(\n        \"Math.max(\",\n        arg.min,\n        \", Math.min(\",\n        arg.max,\n        \", src[srcOffset + \",\n        arg.index,\n        \"]))\"\n      );\n    },\n    visitVariable(variable) {\n      this.parts.push(\"v\", variable.index);\n    },\n    visitLiteral(literal) {\n      this.parts.push(literal.number);\n    },\n    visitBinaryOperation(operation) {\n      this.parts.push(\"(\");\n      operation.arg1.visit(this);\n      this.parts.push(\" \", operation.op, \" \");\n      operation.arg2.visit(this);\n      this.parts.push(\")\");\n    },\n    visitVariableDefinition(definition) {\n      this.parts.push(\"var \");\n      definition.variable.visit(this);\n      this.parts.push(\" = \");\n      definition.arg.visit(this);\n      this.parts.push(\";\");\n    },\n    visitMin(max) {\n      this.parts.push(\"Math.min(\");\n      max.arg.visit(this);\n      this.parts.push(\", \", max.max, \")\");\n    },\n    toString() {\n      return this.parts.join(\"\");\n    },\n  };\n\n  function buildAddOperation(num1, num2) {\n    if (num2.type === \"literal\" && num2.number === 0) {\n      // optimization: second operand is 0\n      return num1;\n    }\n    if (num1.type === \"literal\" && num1.number === 0) {\n      // optimization: first operand is 0\n      return num2;\n    }\n    if (num2.type === \"literal\" && num1.type === \"literal\") {\n      // optimization: operands operand are literals\n      return new AstLiteral(num1.number + num2.number);\n    }\n    return new AstBinaryOperation(\n      \"+\",\n      num1,\n      num2,\n      num1.min + num2.min,\n      num1.max + num2.max\n    );\n  }\n\n  function buildMulOperation(num1, num2) {\n    if (num2.type === \"literal\") {\n      // optimization: second operands is a literal...\n      if (num2.number === 0) {\n        return new AstLiteral(0); // and it's 0\n      } else if (num2.number === 1) {\n        return num1; // and it's 1\n      } else if (num1.type === \"literal\") {\n        // ... and first operands is a literal too\n        return new AstLiteral(num1.number * num2.number);\n      }\n    }\n    if (num1.type === \"literal\") {\n      // optimization: first operands is a literal...\n      if (num1.number === 0) {\n        return new AstLiteral(0); // and it's 0\n      } else if (num1.number === 1) {\n        return num2; // and it's 1\n      }\n    }\n    var min = Math.min(\n      num1.min * num2.min,\n      num1.min * num2.max,\n      num1.max * num2.min,\n      num1.max * num2.max\n    );\n    var max = Math.max(\n      num1.min * num2.min,\n      num1.min * num2.max,\n      num1.max * num2.min,\n      num1.max * num2.max\n    );\n    return new AstBinaryOperation(\"*\", num1, num2, min, max);\n  }\n\n  function buildSubOperation(num1, num2) {\n    if (num2.type === \"literal\") {\n      // optimization: second operands is a literal...\n      if (num2.number === 0) {\n        return num1; // ... and it's 0\n      } else if (num1.type === \"literal\") {\n        // ... and first operands is a literal too\n        return new AstLiteral(num1.number - num2.number);\n      }\n    }\n    if (\n      num2.type === \"binary\" &&\n      num2.op === \"-\" &&\n      num1.type === \"literal\" &&\n      num1.number === 1 &&\n      num2.arg1.type === \"literal\" &&\n      num2.arg1.number === 1\n    ) {\n      // optimization for case: 1 - (1 - x)\n      return num2.arg2;\n    }\n    return new AstBinaryOperation(\n      \"-\",\n      num1,\n      num2,\n      num1.min - num2.max,\n      num1.max - num2.min\n    );\n  }\n\n  function buildMinOperation(num1, max) {\n    if (num1.min >= max) {\n      // optimization: num1 min value is not less than required max\n      return new AstLiteral(max); // just returning max\n    } else if (num1.max <= max) {\n      // optimization: num1 max value is not greater than required max\n      return num1; // just returning an argument\n    }\n    return new AstMin(num1, max);\n  }\n\n  // eslint-disable-next-line no-shadow\n  function PostScriptCompiler() {}\n  PostScriptCompiler.prototype = {\n    compile: function PostScriptCompiler_compile(code, domain, range) {\n      var stack = [];\n      var instructions = [];\n      var inputSize = domain.length >> 1,\n        outputSize = range.length >> 1;\n      var lastRegister = 0;\n      var n, j;\n      var num1, num2, ast1, ast2, tmpVar, item;\n      for (let i = 0; i < inputSize; i++) {\n        stack.push(new AstArgument(i, domain[i * 2], domain[i * 2 + 1]));\n      }\n\n      for (let i = 0, ii = code.length; i < ii; i++) {\n        item = code[i];\n        if (typeof item === \"number\") {\n          stack.push(new AstLiteral(item));\n          continue;\n        }\n\n        switch (item) {\n          case \"add\":\n            if (stack.length < 2) {\n              return null;\n            }\n            num2 = stack.pop();\n            num1 = stack.pop();\n            stack.push(buildAddOperation(num1, num2));\n            break;\n          case \"cvr\":\n            if (stack.length < 1) {\n              return null;\n            }\n            break;\n          case \"mul\":\n            if (stack.length < 2) {\n              return null;\n            }\n            num2 = stack.pop();\n            num1 = stack.pop();\n            stack.push(buildMulOperation(num1, num2));\n            break;\n          case \"sub\":\n            if (stack.length < 2) {\n              return null;\n            }\n            num2 = stack.pop();\n            num1 = stack.pop();\n            stack.push(buildSubOperation(num1, num2));\n            break;\n          case \"exch\":\n            if (stack.length < 2) {\n              return null;\n            }\n            ast1 = stack.pop();\n            ast2 = stack.pop();\n            stack.push(ast1, ast2);\n            break;\n          case \"pop\":\n            if (stack.length < 1) {\n              return null;\n            }\n            stack.pop();\n            break;\n          case \"index\":\n            if (stack.length < 1) {\n              return null;\n            }\n            num1 = stack.pop();\n            if (num1.type !== \"literal\") {\n              return null;\n            }\n            n = num1.number;\n            if (n < 0 || !Number.isInteger(n) || stack.length < n) {\n              return null;\n            }\n            ast1 = stack[stack.length - n - 1];\n            if (ast1.type === \"literal\" || ast1.type === \"var\") {\n              stack.push(ast1);\n              break;\n            }\n            tmpVar = new AstVariable(lastRegister++, ast1.min, ast1.max);\n            stack[stack.length - n - 1] = tmpVar;\n            stack.push(tmpVar);\n            instructions.push(new AstVariableDefinition(tmpVar, ast1));\n            break;\n          case \"dup\":\n            if (stack.length < 1) {\n              return null;\n            }\n            if (\n              typeof code[i + 1] === \"number\" &&\n              code[i + 2] === \"gt\" &&\n              code[i + 3] === i + 7 &&\n              code[i + 4] === \"jz\" &&\n              code[i + 5] === \"pop\" &&\n              code[i + 6] === code[i + 1]\n            ) {\n              // special case of the commands sequence for the min operation\n              num1 = stack.pop();\n              stack.push(buildMinOperation(num1, code[i + 1]));\n              i += 6;\n              break;\n            }\n            ast1 = stack[stack.length - 1];\n            if (ast1.type === \"literal\" || ast1.type === \"var\") {\n              // we don't have to save into intermediate variable a literal or\n              // variable.\n              stack.push(ast1);\n              break;\n            }\n            tmpVar = new AstVariable(lastRegister++, ast1.min, ast1.max);\n            stack[stack.length - 1] = tmpVar;\n            stack.push(tmpVar);\n            instructions.push(new AstVariableDefinition(tmpVar, ast1));\n            break;\n          case \"roll\":\n            if (stack.length < 2) {\n              return null;\n            }\n            num2 = stack.pop();\n            num1 = stack.pop();\n            if (num2.type !== \"literal\" || num1.type !== \"literal\") {\n              // both roll operands must be numbers\n              return null;\n            }\n            j = num2.number;\n            n = num1.number;\n            if (\n              n <= 0 ||\n              !Number.isInteger(n) ||\n              !Number.isInteger(j) ||\n              stack.length < n\n            ) {\n              // ... and integers\n              return null;\n            }\n            j = ((j % n) + n) % n;\n            if (j === 0) {\n              break; // just skipping -- there are nothing to rotate\n            }\n            Array.prototype.push.apply(\n              stack,\n              stack.splice(stack.length - n, n - j)\n            );\n            break;\n          default:\n            return null; // unsupported operator\n        }\n      }\n\n      if (stack.length !== outputSize) {\n        return null;\n      }\n\n      var result = [];\n      instructions.forEach(function (instruction) {\n        var statementBuilder = new ExpressionBuilderVisitor();\n        instruction.visit(statementBuilder);\n        result.push(statementBuilder.toString());\n      });\n      stack.forEach(function (expr, i) {\n        var statementBuilder = new ExpressionBuilderVisitor();\n        expr.visit(statementBuilder);\n        var min = range[i * 2],\n          max = range[i * 2 + 1];\n        var out = [statementBuilder.toString()];\n        if (min > expr.min) {\n          out.unshift(\"Math.max(\", min, \", \");\n          out.push(\")\");\n        }\n        if (max < expr.max) {\n          out.unshift(\"Math.min(\", max, \", \");\n          out.push(\")\");\n        }\n        out.unshift(\"dest[destOffset + \", i, \"] = \");\n        out.push(\";\");\n        result.push(out.join(\"\"));\n      });\n      return result.join(\"\\n\");\n    },\n  };\n\n  return PostScriptCompiler;\n})();\n\nexport {\n  isPDFFunction,\n  PDFFunctionFactory,\n  PostScriptEvaluator,\n  PostScriptCompiler,\n};\n", "/* Copyright 2014 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint no-var: error */\n\nimport { FormatError, shadow } from \"../shared/util.js\";\nimport { EOF } from \"./primitives.js\";\nimport { isWhiteSpace } from \"./core_utils.js\";\n\nclass PostScriptParser {\n  constructor(lexer) {\n    this.lexer = lexer;\n    this.operators = [];\n    this.token = null;\n    this.prev = null;\n  }\n\n  nextToken() {\n    this.prev = this.token;\n    this.token = this.lexer.getToken();\n  }\n\n  accept(type) {\n    if (this.token.type === type) {\n      this.nextToken();\n      return true;\n    }\n    return false;\n  }\n\n  expect(type) {\n    if (this.accept(type)) {\n      return true;\n    }\n    throw new FormatError(\n      `Unexpected symbol: found ${this.token.type} expected ${type}.`\n    );\n  }\n\n  parse() {\n    this.nextToken();\n    this.expect(PostScriptTokenTypes.LBRACE);\n    this.parseBlock();\n    this.expect(PostScriptTokenTypes.RBRACE);\n    return this.operators;\n  }\n\n  parseBlock() {\n    while (true) {\n      if (this.accept(PostScriptTokenTypes.NUMBER)) {\n        this.operators.push(this.prev.value);\n      } else if (this.accept(PostScriptTokenTypes.OPERATOR)) {\n        this.operators.push(this.prev.value);\n      } else if (this.accept(PostScriptTokenTypes.LBRACE)) {\n        this.parseCondition();\n      } else {\n        return;\n      }\n    }\n  }\n\n  parseCondition() {\n    // Add two place holders that will be updated later\n    const conditionLocation = this.operators.length;\n    this.operators.push(null, null);\n\n    this.parseBlock();\n    this.expect(PostScriptTokenTypes.RBRACE);\n    if (this.accept(PostScriptTokenTypes.IF)) {\n      // The true block is right after the 'if' so it just falls through on true\n      // else it jumps and skips the true block.\n      this.operators[conditionLocation] = this.operators.length;\n      this.operators[conditionLocation + 1] = \"jz\";\n    } else if (this.accept(PostScriptTokenTypes.LBRACE)) {\n      const jumpLocation = this.operators.length;\n      this.operators.push(null, null);\n      const endOfTrue = this.operators.length;\n      this.parseBlock();\n      this.expect(PostScriptTokenTypes.RBRACE);\n      this.expect(PostScriptTokenTypes.IFELSE);\n      // The jump is added at the end of the true block to skip the false block.\n      this.operators[jumpLocation] = this.operators.length;\n      this.operators[jumpLocation + 1] = \"j\";\n\n      this.operators[conditionLocation] = endOfTrue;\n      this.operators[conditionLocation + 1] = \"jz\";\n    } else {\n      throw new FormatError(\"PS Function: error parsing conditional.\");\n    }\n  }\n}\n\nconst PostScriptTokenTypes = {\n  LBRACE: 0,\n  RBRACE: 1,\n  NUMBER: 2,\n  OPERATOR: 3,\n  IF: 4,\n  IFELSE: 5,\n};\n\nconst PostScriptToken = (function PostScriptTokenClosure() {\n  const opCache = Object.create(null);\n\n  // eslint-disable-next-line no-shadow\n  class PostScriptToken {\n    constructor(type, value) {\n      this.type = type;\n      this.value = value;\n    }\n\n    static getOperator(op) {\n      const opValue = opCache[op];\n      if (opValue) {\n        return opValue;\n      }\n      return (opCache[op] = new PostScriptToken(\n        PostScriptTokenTypes.OPERATOR,\n        op\n      ));\n    }\n\n    static get LBRACE() {\n      return shadow(\n        this,\n        \"LBRACE\",\n        new PostScriptToken(PostScriptTokenTypes.LBRACE, \"{\")\n      );\n    }\n\n    static get RBRACE() {\n      return shadow(\n        this,\n        \"RBRACE\",\n        new PostScriptToken(PostScriptTokenTypes.RBRACE, \"}\")\n      );\n    }\n\n    static get IF() {\n      return shadow(\n        this,\n        \"IF\",\n        new PostScriptToken(PostScriptTokenTypes.IF, \"IF\")\n      );\n    }\n\n    static get IFELSE() {\n      return shadow(\n        this,\n        \"IFELSE\",\n        new PostScriptToken(PostScriptTokenTypes.IFELSE, \"IFELSE\")\n      );\n    }\n  }\n  return PostScriptToken;\n})();\n\nclass PostScriptLexer {\n  constructor(stream) {\n    this.stream = stream;\n    this.nextChar();\n\n    this.strBuf = [];\n  }\n\n  nextChar() {\n    return (this.currentChar = this.stream.getByte());\n  }\n\n  getToken() {\n    let comment = false;\n    let ch = this.currentChar;\n\n    // skip comments\n    while (true) {\n      if (ch < 0) {\n        return EOF;\n      }\n\n      if (comment) {\n        if (ch === 0x0a || ch === 0x0d) {\n          comment = false;\n        }\n      } else if (ch === /* '%' = */ 0x25) {\n        comment = true;\n      } else if (!isWhiteSpace(ch)) {\n        break;\n      }\n      ch = this.nextChar();\n    }\n    switch (ch | 0) {\n      case 0x30: // '0'\n      case 0x31: // '1'\n      case 0x32: // '2'\n      case 0x33: // '3'\n      case 0x34: // '4'\n      case 0x35: // '5'\n      case 0x36: // '6'\n      case 0x37: // '7'\n      case 0x38: // '8'\n      case 0x39: // '9'\n      case 0x2b: // '+'\n      case 0x2d: // '-'\n      case 0x2e: // '.'\n        return new PostScriptToken(\n          PostScriptTokenTypes.NUMBER,\n          this.getNumber()\n        );\n      case 0x7b: // '{'\n        this.nextChar();\n        return PostScriptToken.LBRACE;\n      case 0x7d: // '}'\n        this.nextChar();\n        return PostScriptToken.RBRACE;\n    }\n    // operator\n    const strBuf = this.strBuf;\n    strBuf.length = 0;\n    strBuf[0] = String.fromCharCode(ch);\n\n    while (\n      (ch = this.nextChar()) >= 0 &&\n      ((ch >= /* 'A' = */ 0x41 && ch <= /* 'Z' = */ 0x5a) ||\n        (ch >= /* 'a' = */ 0x61 && ch <= /* 'z' = */ 0x7a))\n    ) {\n      strBuf.push(String.fromCharCode(ch));\n    }\n    const str = strBuf.join(\"\");\n    switch (str.toLowerCase()) {\n      case \"if\":\n        return PostScriptToken.IF;\n      case \"ifelse\":\n        return PostScriptToken.IFELSE;\n      default:\n        return PostScriptToken.getOperator(str);\n    }\n  }\n\n  getNumber() {\n    let ch = this.currentChar;\n    const strBuf = this.strBuf;\n    strBuf.length = 0;\n    strBuf[0] = String.fromCharCode(ch);\n\n    while ((ch = this.nextChar()) >= 0) {\n      if (\n        (ch >= /* '0' = */ 0x30 && ch <= /* '9' = */ 0x39) ||\n        ch === /* '-' = */ 0x2d ||\n        ch === /* '.' = */ 0x2e\n      ) {\n        strBuf.push(String.fromCharCode(ch));\n      } else {\n        break;\n      }\n    }\n    const value = parseFloat(strBuf.join(\"\"));\n    if (isNaN(value)) {\n      throw new FormatError(`Invalid floating point number: ${value}`);\n    }\n    return value;\n  }\n}\n\nexport { PostScriptLexer, PostScriptParser };\n", "/* Copyright 2014 Opera Software ASA\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n * Based on https://code.google.com/p/smhasher/wiki/MurmurHash3.\n * Hashes roughly 100 KB per millisecond on i7 3.4 GHz.\n */\n/* eslint no-var: error */\n\nimport { isArrayBuffer, isString } from \"../shared/util.js\";\n\nconst SEED = 0xc3d2e1f0;\n// Workaround for missing math precision in JS.\nconst MASK_HIGH = 0xffff0000;\nconst MASK_LOW = 0xffff;\n\nclass MurmurHash3_64 {\n  constructor(seed) {\n    this.h1 = seed ? seed & 0xffffffff : SEED;\n    this.h2 = seed ? seed & 0xffffffff : SEED;\n  }\n\n  update(input) {\n    let data, length;\n    if (isString(input)) {\n      data = new Uint8Array(input.length * 2);\n      length = 0;\n      for (let i = 0, ii = input.length; i < ii; i++) {\n        const code = input.charCodeAt(i);\n        if (code <= 0xff) {\n          data[length++] = code;\n        } else {\n          data[length++] = code >>> 8;\n          data[length++] = code & 0xff;\n        }\n      }\n    } else if (isArrayBuffer(input)) {\n      data = input;\n      length = data.byteLength;\n    } else {\n      throw new Error(\n        \"Wrong data format in MurmurHash3_64_update. \" +\n          \"Input must be a string or array.\"\n      );\n    }\n\n    const blockCounts = length >> 2;\n    const tailLength = length - blockCounts * 4;\n    // We don't care about endianness here.\n    const dataUint32 = new Uint32Array(data.buffer, 0, blockCounts);\n    let k1 = 0,\n      k2 = 0;\n    let h1 = this.h1,\n      h2 = this.h2;\n    const C1 = 0xcc9e2d51,\n      C2 = 0x1b873593;\n    const C1_LOW = C1 & MASK_LOW,\n      C2_LOW = C2 & MASK_LOW;\n\n    for (let i = 0; i < blockCounts; i++) {\n      if (i & 1) {\n        k1 = dataUint32[i];\n        k1 = ((k1 * C1) & MASK_HIGH) | ((k1 * C1_LOW) & MASK_LOW);\n        k1 = (k1 << 15) | (k1 >>> 17);\n        k1 = ((k1 * C2) & MASK_HIGH) | ((k1 * C2_LOW) & MASK_LOW);\n        h1 ^= k1;\n        h1 = (h1 << 13) | (h1 >>> 19);\n        h1 = h1 * 5 + 0xe6546b64;\n      } else {\n        k2 = dataUint32[i];\n        k2 = ((k2 * C1) & MASK_HIGH) | ((k2 * C1_LOW) & MASK_LOW);\n        k2 = (k2 << 15) | (k2 >>> 17);\n        k2 = ((k2 * C2) & MASK_HIGH) | ((k2 * C2_LOW) & MASK_LOW);\n        h2 ^= k2;\n        h2 = (h2 << 13) | (h2 >>> 19);\n        h2 = h2 * 5 + 0xe6546b64;\n      }\n    }\n\n    k1 = 0;\n\n    switch (tailLength) {\n      case 3:\n        k1 ^= data[blockCounts * 4 + 2] << 16;\n      /* falls through */\n      case 2:\n        k1 ^= data[blockCounts * 4 + 1] << 8;\n      /* falls through */\n      case 1:\n        k1 ^= data[blockCounts * 4];\n        /* falls through */\n\n        k1 = ((k1 * C1) & MASK_HIGH) | ((k1 * C1_LOW) & MASK_LOW);\n        k1 = (k1 << 15) | (k1 >>> 17);\n        k1 = ((k1 * C2) & MASK_HIGH) | ((k1 * C2_LOW) & MASK_LOW);\n        if (blockCounts & 1) {\n          h1 ^= k1;\n        } else {\n          h2 ^= k1;\n        }\n    }\n\n    this.h1 = h1;\n    this.h2 = h2;\n  }\n\n  hexdigest() {\n    let h1 = this.h1,\n      h2 = this.h2;\n\n    h1 ^= h2 >>> 1;\n    h1 = ((h1 * 0xed558ccd) & MASK_HIGH) | ((h1 * 0x8ccd) & MASK_LOW);\n    h2 =\n      ((h2 * 0xff51afd7) & MASK_HIGH) |\n      (((((h2 << 16) | (h1 >>> 16)) * 0xafd7ed55) & MASK_HIGH) >>> 16);\n    h1 ^= h2 >>> 1;\n    h1 = ((h1 * 0x1a85ec53) & MASK_HIGH) | ((h1 * 0xec53) & MASK_LOW);\n    h2 =\n      ((h2 * 0xc4ceb9fe) & MASK_HIGH) |\n      (((((h2 << 16) | (h1 >>> 16)) * 0xb9fe1a85) & MASK_HIGH) >>> 16);\n    h1 ^= h2 >>> 1;\n\n    const hex1 = (h1 >>> 0).toString(16),\n      hex2 = (h2 >>> 0).toString(16);\n    return hex1.padStart(8, \"0\") + hex2.padStart(8, \"0\");\n  }\n}\n\nexport { MurmurHash3_64 };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, FormatError, ImageKind, info, warn } from \"../shared/util.js\";\nimport { isName, isStream, Name } from \"./primitives.js\";\nimport { ColorSpace } from \"./colorspace.js\";\nimport { DecodeStream } from \"./stream.js\";\nimport { JpegStream } from \"./jpeg_stream.js\";\nimport { JpxImage } from \"./jpx.js\";\n\nvar PDFImage = (function PDFImageClosure() {\n  /**\n   * Decode and clamp a value. The formula is different from the spec because we\n   * don't decode to float range [0,1], we decode it in the [0,max] range.\n   */\n  function decodeAndClamp(value, addend, coefficient, max) {\n    value = addend + value * coefficient;\n    // Clamp the value to the range\n    if (value < 0) {\n      value = 0;\n    } else if (value > max) {\n      value = max;\n    }\n    return value;\n  }\n\n  /**\n   * Resizes an image mask with 1 component.\n   * @param {TypedArray} src - The source buffer.\n   * @param {number} bpc - Number of bits per component.\n   * @param {number} w1 - Original width.\n   * @param {number} h1 - Original height.\n   * @param {number} w2 - New width.\n   * @param {number} h2 - New height.\n   * @returns {TypedArray} The resized image mask buffer.\n   */\n  function resizeImageMask(src, bpc, w1, h1, w2, h2) {\n    var length = w2 * h2;\n    let dest;\n    if (bpc <= 8) {\n      dest = new Uint8Array(length);\n    } else if (bpc <= 16) {\n      dest = new Uint16Array(length);\n    } else {\n      dest = new Uint32Array(length);\n    }\n    var xRatio = w1 / w2;\n    var yRatio = h1 / h2;\n    var i,\n      j,\n      py,\n      newIndex = 0,\n      oldIndex;\n    var xScaled = new Uint16Array(w2);\n    var w1Scanline = w1;\n\n    for (i = 0; i < w2; i++) {\n      xScaled[i] = Math.floor(i * xRatio);\n    }\n    for (i = 0; i < h2; i++) {\n      py = Math.floor(i * yRatio) * w1Scanline;\n      for (j = 0; j < w2; j++) {\n        oldIndex = py + xScaled[j];\n        dest[newIndex++] = src[oldIndex];\n      }\n    }\n    return dest;\n  }\n\n  // eslint-disable-next-line no-shadow\n  function PDFImage({\n    xref,\n    res,\n    image,\n    isInline = false,\n    smask = null,\n    mask = null,\n    isMask = false,\n    pdfFunctionFactory,\n  }) {\n    this.image = image;\n    var dict = image.dict;\n\n    const filter = dict.get(\"Filter\");\n    if (isName(filter)) {\n      switch (filter.name) {\n        case \"JPXDecode\":\n          var jpxImage = new JpxImage();\n          jpxImage.parseImageProperties(image.stream);\n          image.stream.reset();\n\n          image.width = jpxImage.width;\n          image.height = jpxImage.height;\n          image.bitsPerComponent = jpxImage.bitsPerComponent;\n          image.numComps = jpxImage.componentsCount;\n          break;\n        case \"JBIG2Decode\":\n          image.bitsPerComponent = 1;\n          image.numComps = 1;\n          break;\n      }\n    }\n    // TODO cache rendered images?\n\n    let width = dict.get(\"Width\", \"W\");\n    let height = dict.get(\"Height\", \"H\");\n\n    if (\n      Number.isInteger(image.width) &&\n      image.width > 0 &&\n      Number.isInteger(image.height) &&\n      image.height > 0 &&\n      (image.width !== width || image.height !== height)\n    ) {\n      warn(\n        \"PDFImage - using the Width/Height of the image data, \" +\n          \"rather than the image dictionary.\"\n      );\n      width = image.width;\n      height = image.height;\n    }\n    if (width < 1 || height < 1) {\n      throw new FormatError(\n        `Invalid image width: ${width} or height: ${height}`\n      );\n    }\n    this.width = width;\n    this.height = height;\n\n    this.interpolate = dict.get(\"Interpolate\", \"I\") || false;\n    this.imageMask = dict.get(\"ImageMask\", \"IM\") || false;\n    this.matte = dict.get(\"Matte\") || false;\n\n    var bitsPerComponent = image.bitsPerComponent;\n    if (!bitsPerComponent) {\n      bitsPerComponent = dict.get(\"BitsPerComponent\", \"BPC\");\n      if (!bitsPerComponent) {\n        if (this.imageMask) {\n          bitsPerComponent = 1;\n        } else {\n          throw new FormatError(\n            `Bits per component missing in image: ${this.imageMask}`\n          );\n        }\n      }\n    }\n    this.bpc = bitsPerComponent;\n\n    if (!this.imageMask) {\n      var colorSpace = dict.get(\"ColorSpace\", \"CS\");\n      if (!colorSpace) {\n        info(\"JPX images (which do not require color spaces)\");\n        switch (image.numComps) {\n          case 1:\n            colorSpace = Name.get(\"DeviceGray\");\n            break;\n          case 3:\n            colorSpace = Name.get(\"DeviceRGB\");\n            break;\n          case 4:\n            colorSpace = Name.get(\"DeviceCMYK\");\n            break;\n          default:\n            throw new Error(\n              `JPX images with ${image.numComps} ` +\n                \"color components not supported.\"\n            );\n        }\n      }\n      const resources = isInline ? res : null;\n      this.colorSpace = ColorSpace.parse(\n        colorSpace,\n        xref,\n        resources,\n        pdfFunctionFactory\n      );\n      this.numComps = this.colorSpace.numComps;\n    }\n\n    this.decode = dict.getArray(\"Decode\", \"D\");\n    this.needsDecode = false;\n    if (\n      this.decode &&\n      ((this.colorSpace &&\n        !this.colorSpace.isDefaultDecode(this.decode, bitsPerComponent)) ||\n        (isMask &&\n          !ColorSpace.isDefaultDecode(this.decode, /* numComps = */ 1)))\n    ) {\n      this.needsDecode = true;\n      // Do some preprocessing to avoid more math.\n      var max = (1 << bitsPerComponent) - 1;\n      this.decodeCoefficients = [];\n      this.decodeAddends = [];\n      const isIndexed = this.colorSpace && this.colorSpace.name === \"Indexed\";\n      for (var i = 0, j = 0; i < this.decode.length; i += 2, ++j) {\n        var dmin = this.decode[i];\n        var dmax = this.decode[i + 1];\n        this.decodeCoefficients[j] = isIndexed\n          ? (dmax - dmin) / max\n          : dmax - dmin;\n        this.decodeAddends[j] = isIndexed ? dmin : max * dmin;\n      }\n    }\n\n    if (smask) {\n      this.smask = new PDFImage({\n        xref,\n        res,\n        image: smask,\n        isInline,\n        pdfFunctionFactory,\n      });\n    } else if (mask) {\n      if (isStream(mask)) {\n        var maskDict = mask.dict,\n          imageMask = maskDict.get(\"ImageMask\", \"IM\");\n        if (!imageMask) {\n          warn(\"Ignoring /Mask in image without /ImageMask.\");\n        } else {\n          this.mask = new PDFImage({\n            xref,\n            res,\n            image: mask,\n            isInline,\n            isMask: true,\n            pdfFunctionFactory,\n          });\n        }\n      } else {\n        // Color key mask (just an array).\n        this.mask = mask;\n      }\n    }\n  }\n  /**\n   * Handles processing of image data and returns the Promise that is resolved\n   * with a PDFImage when the image is ready to be used.\n   */\n  PDFImage.buildImage = function ({\n    xref,\n    res,\n    image,\n    isInline = false,\n    pdfFunctionFactory,\n  }) {\n    const imageData = image;\n    let smaskData = null;\n    let maskData = null;\n\n    const smask = image.dict.get(\"SMask\");\n    const mask = image.dict.get(\"Mask\");\n\n    if (smask) {\n      smaskData = smask;\n    } else if (mask) {\n      if (isStream(mask) || Array.isArray(mask)) {\n        maskData = mask;\n      } else {\n        warn(\"Unsupported mask format.\");\n      }\n    }\n    return Promise.resolve(\n      new PDFImage({\n        xref,\n        res,\n        image: imageData,\n        isInline,\n        smask: smaskData,\n        mask: maskData,\n        pdfFunctionFactory,\n      })\n    );\n  };\n\n  PDFImage.createMask = function ({\n    imgArray,\n    width,\n    height,\n    imageIsFromDecodeStream,\n    inverseDecode,\n  }) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      assert(\n        imgArray instanceof Uint8ClampedArray,\n        'PDFImage.createMask: Unsupported \"imgArray\" type.'\n      );\n    }\n    // |imgArray| might not contain full data for every pixel of the mask, so\n    // we need to distinguish between |computedLength| and |actualLength|.\n    // In particular, if inverseDecode is true, then the array we return must\n    // have a length of |computedLength|.\n\n    var computedLength = ((width + 7) >> 3) * height;\n    var actualLength = imgArray.byteLength;\n    var haveFullData = computedLength === actualLength;\n    var data, i;\n\n    if (imageIsFromDecodeStream && (!inverseDecode || haveFullData)) {\n      // imgArray came from a DecodeStream and its data is in an appropriate\n      // form, so we can just transfer it.\n      data = imgArray;\n    } else if (!inverseDecode) {\n      data = new Uint8ClampedArray(actualLength);\n      data.set(imgArray);\n    } else {\n      data = new Uint8ClampedArray(computedLength);\n      data.set(imgArray);\n      for (i = actualLength; i < computedLength; i++) {\n        data[i] = 0xff;\n      }\n    }\n\n    // If necessary, invert the original mask data (but not any extra we might\n    // have added above). It's safe to modify the array -- whether it's the\n    // original or a copy, we're about to transfer it anyway, so nothing else\n    // in this thread can be relying on its contents.\n    if (inverseDecode) {\n      for (i = 0; i < actualLength; i++) {\n        data[i] ^= 0xff;\n      }\n    }\n\n    return { data, width, height };\n  };\n\n  PDFImage.prototype = {\n    get drawWidth() {\n      return Math.max(\n        this.width,\n        (this.smask && this.smask.width) || 0,\n        (this.mask && this.mask.width) || 0\n      );\n    },\n\n    get drawHeight() {\n      return Math.max(\n        this.height,\n        (this.smask && this.smask.height) || 0,\n        (this.mask && this.mask.height) || 0\n      );\n    },\n\n    decodeBuffer(buffer) {\n      var bpc = this.bpc;\n      var numComps = this.numComps;\n\n      var decodeAddends = this.decodeAddends;\n      var decodeCoefficients = this.decodeCoefficients;\n      var max = (1 << bpc) - 1;\n      var i, ii;\n\n      if (bpc === 1) {\n        // If the buffer needed decode that means it just needs to be inverted.\n        for (i = 0, ii = buffer.length; i < ii; i++) {\n          buffer[i] = +!buffer[i];\n        }\n        return;\n      }\n      var index = 0;\n      for (i = 0, ii = this.width * this.height; i < ii; i++) {\n        for (var j = 0; j < numComps; j++) {\n          buffer[index] = decodeAndClamp(\n            buffer[index],\n            decodeAddends[j],\n            decodeCoefficients[j],\n            max\n          );\n          index++;\n        }\n      }\n    },\n\n    getComponents(buffer) {\n      var bpc = this.bpc;\n\n      // This image doesn't require any extra work.\n      if (bpc === 8) {\n        return buffer;\n      }\n\n      var width = this.width;\n      var height = this.height;\n      var numComps = this.numComps;\n\n      var length = width * height * numComps;\n      var bufferPos = 0;\n      let output;\n      if (bpc <= 8) {\n        output = new Uint8Array(length);\n      } else if (bpc <= 16) {\n        output = new Uint16Array(length);\n      } else {\n        output = new Uint32Array(length);\n      }\n      var rowComps = width * numComps;\n\n      var max = (1 << bpc) - 1;\n      var i = 0,\n        ii,\n        buf;\n\n      if (bpc === 1) {\n        // Optimization for reading 1 bpc images.\n        var mask, loop1End, loop2End;\n        for (var j = 0; j < height; j++) {\n          loop1End = i + (rowComps & ~7);\n          loop2End = i + rowComps;\n\n          // unroll loop for all full bytes\n          while (i < loop1End) {\n            buf = buffer[bufferPos++];\n            output[i] = (buf >> 7) & 1;\n            output[i + 1] = (buf >> 6) & 1;\n            output[i + 2] = (buf >> 5) & 1;\n            output[i + 3] = (buf >> 4) & 1;\n            output[i + 4] = (buf >> 3) & 1;\n            output[i + 5] = (buf >> 2) & 1;\n            output[i + 6] = (buf >> 1) & 1;\n            output[i + 7] = buf & 1;\n            i += 8;\n          }\n\n          // handle remaining bits\n          if (i < loop2End) {\n            buf = buffer[bufferPos++];\n            mask = 128;\n            while (i < loop2End) {\n              output[i++] = +!!(buf & mask);\n              mask >>= 1;\n            }\n          }\n        }\n      } else {\n        // The general case that handles all other bpc values.\n        var bits = 0;\n        buf = 0;\n        for (i = 0, ii = length; i < ii; ++i) {\n          if (i % rowComps === 0) {\n            buf = 0;\n            bits = 0;\n          }\n\n          while (bits < bpc) {\n            buf = (buf << 8) | buffer[bufferPos++];\n            bits += 8;\n          }\n\n          var remainingBits = bits - bpc;\n          let value = buf >> remainingBits;\n          if (value < 0) {\n            value = 0;\n          } else if (value > max) {\n            value = max;\n          }\n          output[i] = value;\n          buf = buf & ((1 << remainingBits) - 1);\n          bits = remainingBits;\n        }\n      }\n      return output;\n    },\n\n    fillOpacity(rgbaBuf, width, height, actualHeight, image) {\n      if (\n        typeof PDFJSDev === \"undefined\" ||\n        PDFJSDev.test(\"!PRODUCTION || TESTING\")\n      ) {\n        assert(\n          rgbaBuf instanceof Uint8ClampedArray,\n          'PDFImage.fillOpacity: Unsupported \"rgbaBuf\" type.'\n        );\n      }\n      var smask = this.smask;\n      var mask = this.mask;\n      var alphaBuf, sw, sh, i, ii, j;\n\n      if (smask) {\n        sw = smask.width;\n        sh = smask.height;\n        alphaBuf = new Uint8ClampedArray(sw * sh);\n        smask.fillGrayBuffer(alphaBuf);\n        if (sw !== width || sh !== height) {\n          alphaBuf = resizeImageMask(\n            alphaBuf,\n            smask.bpc,\n            sw,\n            sh,\n            width,\n            height\n          );\n        }\n      } else if (mask) {\n        if (mask instanceof PDFImage) {\n          sw = mask.width;\n          sh = mask.height;\n          alphaBuf = new Uint8ClampedArray(sw * sh);\n          mask.numComps = 1;\n          mask.fillGrayBuffer(alphaBuf);\n\n          // Need to invert values in rgbaBuf\n          for (i = 0, ii = sw * sh; i < ii; ++i) {\n            alphaBuf[i] = 255 - alphaBuf[i];\n          }\n\n          if (sw !== width || sh !== height) {\n            alphaBuf = resizeImageMask(\n              alphaBuf,\n              mask.bpc,\n              sw,\n              sh,\n              width,\n              height\n            );\n          }\n        } else if (Array.isArray(mask)) {\n          // Color key mask: if any of the components are outside the range\n          // then they should be painted.\n          alphaBuf = new Uint8ClampedArray(width * height);\n          var numComps = this.numComps;\n          for (i = 0, ii = width * height; i < ii; ++i) {\n            var opacity = 0;\n            var imageOffset = i * numComps;\n            for (j = 0; j < numComps; ++j) {\n              var color = image[imageOffset + j];\n              var maskOffset = j * 2;\n              if (color < mask[maskOffset] || color > mask[maskOffset + 1]) {\n                opacity = 255;\n                break;\n              }\n            }\n            alphaBuf[i] = opacity;\n          }\n        } else {\n          throw new FormatError(\"Unknown mask format.\");\n        }\n      }\n\n      if (alphaBuf) {\n        for (i = 0, j = 3, ii = width * actualHeight; i < ii; ++i, j += 4) {\n          rgbaBuf[j] = alphaBuf[i];\n        }\n      } else {\n        // No mask.\n        for (i = 0, j = 3, ii = width * actualHeight; i < ii; ++i, j += 4) {\n          rgbaBuf[j] = 255;\n        }\n      }\n    },\n\n    undoPreblend(buffer, width, height) {\n      if (\n        typeof PDFJSDev === \"undefined\" ||\n        PDFJSDev.test(\"!PRODUCTION || TESTING\")\n      ) {\n        assert(\n          buffer instanceof Uint8ClampedArray,\n          'PDFImage.undoPreblend: Unsupported \"buffer\" type.'\n        );\n      }\n      var matte = this.smask && this.smask.matte;\n      if (!matte) {\n        return;\n      }\n      var matteRgb = this.colorSpace.getRgb(matte, 0);\n      var matteR = matteRgb[0];\n      var matteG = matteRgb[1];\n      var matteB = matteRgb[2];\n      var length = width * height * 4;\n      for (var i = 0; i < length; i += 4) {\n        var alpha = buffer[i + 3];\n        if (alpha === 0) {\n          // according formula we have to get Infinity in all components\n          // making it white (typical paper color) should be okay\n          buffer[i] = 255;\n          buffer[i + 1] = 255;\n          buffer[i + 2] = 255;\n          continue;\n        }\n        var k = 255 / alpha;\n        buffer[i] = (buffer[i] - matteR) * k + matteR;\n        buffer[i + 1] = (buffer[i + 1] - matteG) * k + matteG;\n        buffer[i + 2] = (buffer[i + 2] - matteB) * k + matteB;\n      }\n    },\n\n    createImageData(forceRGBA = false) {\n      var drawWidth = this.drawWidth;\n      var drawHeight = this.drawHeight;\n      var imgData = {\n        width: drawWidth,\n        height: drawHeight,\n        kind: 0,\n        data: null,\n        // Other fields are filled in below.\n      };\n\n      var numComps = this.numComps;\n      var originalWidth = this.width;\n      var originalHeight = this.height;\n      var bpc = this.bpc;\n\n      // Rows start at byte boundary.\n      var rowBytes = (originalWidth * numComps * bpc + 7) >> 3;\n      var imgArray;\n\n      if (!forceRGBA) {\n        // If it is a 1-bit-per-pixel grayscale (i.e. black-and-white) image\n        // without any complications, we pass a same-sized copy to the main\n        // thread rather than expanding by 32x to RGBA form. This saves *lots*\n        // of memory for many scanned documents. It's also much faster.\n        //\n        // Similarly, if it is a 24-bit-per pixel RGB image without any\n        // complications, we avoid expanding by 1.333x to RGBA form.\n        var kind;\n        if (this.colorSpace.name === \"DeviceGray\" && bpc === 1) {\n          kind = ImageKind.GRAYSCALE_1BPP;\n        } else if (\n          this.colorSpace.name === \"DeviceRGB\" &&\n          bpc === 8 &&\n          !this.needsDecode\n        ) {\n          kind = ImageKind.RGB_24BPP;\n        }\n        if (\n          kind &&\n          !this.smask &&\n          !this.mask &&\n          drawWidth === originalWidth &&\n          drawHeight === originalHeight\n        ) {\n          imgData.kind = kind;\n\n          imgArray = this.getImageBytes(originalHeight * rowBytes);\n          // If imgArray came from a DecodeStream, we're safe to transfer it\n          // (and thus detach its underlying buffer) because it will constitute\n          // the entire DecodeStream's data.  But if it came from a Stream, we\n          // need to copy it because it'll only be a portion of the Stream's\n          // data, and the rest will be read later on.\n          if (this.image instanceof DecodeStream) {\n            imgData.data = imgArray;\n          } else {\n            var newArray = new Uint8ClampedArray(imgArray.length);\n            newArray.set(imgArray);\n            imgData.data = newArray;\n          }\n          if (this.needsDecode) {\n            // Invert the buffer (which must be grayscale if we reached here).\n            assert(\n              kind === ImageKind.GRAYSCALE_1BPP,\n              \"PDFImage.createImageData: The image must be grayscale.\"\n            );\n            var buffer = imgData.data;\n            for (var i = 0, ii = buffer.length; i < ii; i++) {\n              buffer[i] ^= 0xff;\n            }\n          }\n          return imgData;\n        }\n        if (this.image instanceof JpegStream && !this.smask && !this.mask) {\n          let imageLength = originalHeight * rowBytes;\n          switch (this.colorSpace.name) {\n            case \"DeviceGray\":\n              // Avoid truncating the image, since `JpegImage.getData`\n              // will expand the image data when `forceRGB === true`.\n              imageLength *= 3;\n            /* falls through */\n            case \"DeviceRGB\":\n            case \"DeviceCMYK\":\n              imgData.kind = ImageKind.RGB_24BPP;\n              imgData.data = this.getImageBytes(\n                imageLength,\n                drawWidth,\n                drawHeight,\n                /* forceRGB = */ true\n              );\n              return imgData;\n          }\n        }\n      }\n\n      imgArray = this.getImageBytes(originalHeight * rowBytes);\n      // imgArray can be incomplete (e.g. after CCITT fax encoding).\n      var actualHeight =\n        0 | (((imgArray.length / rowBytes) * drawHeight) / originalHeight);\n\n      var comps = this.getComponents(imgArray);\n\n      // If opacity data is present, use RGBA_32BPP form. Otherwise, use the\n      // more compact RGB_24BPP form if allowable.\n      var alpha01, maybeUndoPreblend;\n      if (!forceRGBA && !this.smask && !this.mask) {\n        imgData.kind = ImageKind.RGB_24BPP;\n        imgData.data = new Uint8ClampedArray(drawWidth * drawHeight * 3);\n        alpha01 = 0;\n        maybeUndoPreblend = false;\n      } else {\n        imgData.kind = ImageKind.RGBA_32BPP;\n        imgData.data = new Uint8ClampedArray(drawWidth * drawHeight * 4);\n        alpha01 = 1;\n        maybeUndoPreblend = true;\n\n        // Color key masking (opacity) must be performed before decoding.\n        this.fillOpacity(\n          imgData.data,\n          drawWidth,\n          drawHeight,\n          actualHeight,\n          comps\n        );\n      }\n\n      if (this.needsDecode) {\n        this.decodeBuffer(comps);\n      }\n      this.colorSpace.fillRgb(\n        imgData.data,\n        originalWidth,\n        originalHeight,\n        drawWidth,\n        drawHeight,\n        actualHeight,\n        bpc,\n        comps,\n        alpha01\n      );\n      if (maybeUndoPreblend) {\n        this.undoPreblend(imgData.data, drawWidth, actualHeight);\n      }\n\n      return imgData;\n    },\n\n    fillGrayBuffer(buffer) {\n      if (\n        typeof PDFJSDev === \"undefined\" ||\n        PDFJSDev.test(\"!PRODUCTION || TESTING\")\n      ) {\n        assert(\n          buffer instanceof Uint8ClampedArray,\n          'PDFImage.fillGrayBuffer: Unsupported \"buffer\" type.'\n        );\n      }\n      var numComps = this.numComps;\n      if (numComps !== 1) {\n        throw new FormatError(\n          `Reading gray scale from a color image: ${numComps}`\n        );\n      }\n\n      var width = this.width;\n      var height = this.height;\n      var bpc = this.bpc;\n\n      // rows start at byte boundary\n      var rowBytes = (width * numComps * bpc + 7) >> 3;\n      var imgArray = this.getImageBytes(height * rowBytes);\n\n      var comps = this.getComponents(imgArray);\n      var i, length;\n\n      if (bpc === 1) {\n        // inline decoding (= inversion) for 1 bpc images\n        length = width * height;\n        if (this.needsDecode) {\n          // invert and scale to {0, 255}\n          for (i = 0; i < length; ++i) {\n            buffer[i] = (comps[i] - 1) & 255;\n          }\n        } else {\n          // scale to {0, 255}\n          for (i = 0; i < length; ++i) {\n            buffer[i] = -comps[i] & 255;\n          }\n        }\n        return;\n      }\n\n      if (this.needsDecode) {\n        this.decodeBuffer(comps);\n      }\n      length = width * height;\n      // we aren't using a colorspace so we need to scale the value\n      var scale = 255 / ((1 << bpc) - 1);\n      for (i = 0; i < length; ++i) {\n        buffer[i] = scale * comps[i];\n      }\n    },\n\n    getImageBytes(length, drawWidth, drawHeight, forceRGB = false) {\n      this.image.reset();\n      this.image.drawWidth = drawWidth || this.width;\n      this.image.drawHeight = drawHeight || this.height;\n      this.image.forceRGB = !!forceRGB;\n      return this.image.getBytes(length, /* forceClamped = */ true);\n    },\n  };\n  return PDFImage;\n})();\n\nexport { PDFImage };\n", "/* Copyright 2018 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint no-var: error, prefer-const: error */\n\nimport {\n  AbortException,\n  assert,\n  createPromiseCapability,\n  MissingPDFException,\n  UnexpectedResponseException,\n  UnknownErrorException,\n} from \"./util.js\";\n\nconst CallbackKind = {\n  UNKNOWN: 0,\n  DATA: 1,\n  ERROR: 2,\n};\n\nconst StreamKind = {\n  UNKNOWN: 0,\n  CANCEL: 1,\n  CANCEL_COMPLETE: 2,\n  CLOSE: 3,\n  ENQUEUE: 4,\n  ERROR: 5,\n  PULL: 6,\n  PULL_COMPLETE: 7,\n  START_COMPLETE: 8,\n};\n\nfunction wrapReason(reason) {\n  if (\n    typeof PDFJSDev === \"undefined\" ||\n    PDFJSDev.test(\"!PRODUCTION || TESTING\")\n  ) {\n    assert(\n      reason instanceof Error ||\n        (typeof reason === \"object\" && reason !== null),\n      'wrapReason: Expected \"reason\" to be a (possibly cloned) Error.'\n    );\n  } else {\n    if (typeof reason !== \"object\" || reason === null) {\n      return reason;\n    }\n  }\n  switch (reason.name) {\n    case \"AbortException\":\n      return new AbortException(reason.message);\n    case \"MissingPDFException\":\n      return new MissingPDFException(reason.message);\n    case \"UnexpectedResponseException\":\n      return new UnexpectedResponseException(reason.message, reason.status);\n    case \"UnknownErrorException\":\n      return new UnknownErrorException(reason.message, reason.details);\n    default:\n      return new UnknownErrorException(reason.message, reason.toString());\n  }\n}\n\nclass MessageHandler {\n  constructor(sourceName, targetName, comObj) {\n    this.sourceName = sourceName;\n    this.targetName = targetName;\n    this.comObj = comObj;\n    this.callbackId = 1;\n    this.streamId = 1;\n    this.postMessageTransfers = true;\n    this.streamSinks = Object.create(null);\n    this.streamControllers = Object.create(null);\n    this.callbackCapabilities = Object.create(null);\n    this.actionHandler = Object.create(null);\n\n    this._onComObjOnMessage = event => {\n      const data = event.data;\n      if (data.targetName !== this.sourceName) {\n        return;\n      }\n      if (data.stream) {\n        this._processStreamMessage(data);\n        return;\n      }\n      if (data.callback) {\n        const callbackId = data.callbackId;\n        const capability = this.callbackCapabilities[callbackId];\n        if (!capability) {\n          throw new Error(`Cannot resolve callback ${callbackId}`);\n        }\n        delete this.callbackCapabilities[callbackId];\n\n        if (data.callback === CallbackKind.DATA) {\n          capability.resolve(data.data);\n        } else if (data.callback === CallbackKind.ERROR) {\n          capability.reject(wrapReason(data.reason));\n        } else {\n          throw new Error(\"Unexpected callback case\");\n        }\n        return;\n      }\n      const action = this.actionHandler[data.action];\n      if (!action) {\n        throw new Error(`Unknown action from worker: ${data.action}`);\n      }\n      if (data.callbackId) {\n        const cbSourceName = this.sourceName;\n        const cbTargetName = data.sourceName;\n        new Promise(function (resolve) {\n          resolve(action(data.data));\n        }).then(\n          function (result) {\n            comObj.postMessage({\n              sourceName: cbSourceName,\n              targetName: cbTargetName,\n              callback: CallbackKind.DATA,\n              callbackId: data.callbackId,\n              data: result,\n            });\n          },\n          function (reason) {\n            comObj.postMessage({\n              sourceName: cbSourceName,\n              targetName: cbTargetName,\n              callback: CallbackKind.ERROR,\n              callbackId: data.callbackId,\n              reason: wrapReason(reason),\n            });\n          }\n        );\n        return;\n      }\n      if (data.streamId) {\n        this._createStreamSink(data);\n        return;\n      }\n      action(data.data);\n    };\n    comObj.addEventListener(\"message\", this._onComObjOnMessage);\n  }\n\n  on(actionName, handler) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      assert(\n        typeof handler === \"function\",\n        'MessageHandler.on: Expected \"handler\" to be a function.'\n      );\n    }\n    const ah = this.actionHandler;\n    if (ah[actionName]) {\n      throw new Error(`There is already an actionName called \"${actionName}\"`);\n    }\n    ah[actionName] = handler;\n  }\n\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * @param {string} actionName - Action to call.\n   * @param {JSON} data - JSON data to send.\n   * @param {Array} [transfers] - List of transfers/ArrayBuffers.\n   */\n  send(actionName, data, transfers) {\n    this._postMessage(\n      {\n        sourceName: this.sourceName,\n        targetName: this.targetName,\n        action: actionName,\n        data,\n      },\n      transfers\n    );\n  }\n\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * Expects that the other side will callback with the response.\n   * @param {string} actionName - Action to call.\n   * @param {JSON} data - JSON data to send.\n   * @param {Array} [transfers] - List of transfers/ArrayBuffers.\n   * @returns {Promise} Promise to be resolved with response data.\n   */\n  sendWithPromise(actionName, data, transfers) {\n    const callbackId = this.callbackId++;\n    const capability = createPromiseCapability();\n    this.callbackCapabilities[callbackId] = capability;\n    try {\n      this._postMessage(\n        {\n          sourceName: this.sourceName,\n          targetName: this.targetName,\n          action: actionName,\n          callbackId,\n          data,\n        },\n        transfers\n      );\n    } catch (ex) {\n      capability.reject(ex);\n    }\n    return capability.promise;\n  }\n\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * Expect that the other side will callback to signal 'start_complete'.\n   * @param {string} actionName - Action to call.\n   * @param {JSON} data - JSON data to send.\n   * @param {Object} queueingStrategy - Strategy to signal backpressure based on\n   *                 internal queue.\n   * @param {Array} [transfers] - List of transfers/ArrayBuffers.\n   * @returns {ReadableStream} ReadableStream to read data in chunks.\n   */\n  sendWithStream(actionName, data, queueingStrategy, transfers) {\n    const streamId = this.streamId++;\n    const sourceName = this.sourceName;\n    const targetName = this.targetName;\n    const comObj = this.comObj;\n\n    return new ReadableStream(\n      {\n        start: controller => {\n          const startCapability = createPromiseCapability();\n          this.streamControllers[streamId] = {\n            controller,\n            startCall: startCapability,\n            pullCall: null,\n            cancelCall: null,\n            isClosed: false,\n          };\n          this._postMessage(\n            {\n              sourceName,\n              targetName,\n              action: actionName,\n              streamId,\n              data,\n              desiredSize: controller.desiredSize,\n            },\n            transfers\n          );\n          // Return Promise for Async process, to signal success/failure.\n          return startCapability.promise;\n        },\n\n        pull: controller => {\n          const pullCapability = createPromiseCapability();\n          this.streamControllers[streamId].pullCall = pullCapability;\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.PULL,\n            streamId,\n            desiredSize: controller.desiredSize,\n          });\n          // Returning Promise will not call \"pull\"\n          // again until current pull is resolved.\n          return pullCapability.promise;\n        },\n\n        cancel: reason => {\n          assert(reason instanceof Error, \"cancel must have a valid reason\");\n          const cancelCapability = createPromiseCapability();\n          this.streamControllers[streamId].cancelCall = cancelCapability;\n          this.streamControllers[streamId].isClosed = true;\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.CANCEL,\n            streamId,\n            reason: wrapReason(reason),\n          });\n          // Return Promise to signal success or failure.\n          return cancelCapability.promise;\n        },\n      },\n      queueingStrategy\n    );\n  }\n\n  /**\n   * @private\n   */\n  _createStreamSink(data) {\n    const self = this;\n    const action = this.actionHandler[data.action];\n    const streamId = data.streamId;\n    const sourceName = this.sourceName;\n    const targetName = data.sourceName;\n    const comObj = this.comObj;\n\n    const streamSink = {\n      enqueue(chunk, size = 1, transfers) {\n        if (this.isCancelled) {\n          return;\n        }\n        const lastDesiredSize = this.desiredSize;\n        this.desiredSize -= size;\n        // Enqueue decreases the desiredSize property of sink,\n        // so when it changes from positive to negative,\n        // set ready as unresolved promise.\n        if (lastDesiredSize > 0 && this.desiredSize <= 0) {\n          this.sinkCapability = createPromiseCapability();\n          this.ready = this.sinkCapability.promise;\n        }\n        self._postMessage(\n          {\n            sourceName,\n            targetName,\n            stream: StreamKind.ENQUEUE,\n            streamId,\n            chunk,\n          },\n          transfers\n        );\n      },\n\n      close() {\n        if (this.isCancelled) {\n          return;\n        }\n        this.isCancelled = true;\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.CLOSE,\n          streamId,\n        });\n        delete self.streamSinks[streamId];\n      },\n\n      error(reason) {\n        assert(reason instanceof Error, \"error must have a valid reason\");\n        if (this.isCancelled) {\n          return;\n        }\n        this.isCancelled = true;\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.ERROR,\n          streamId,\n          reason: wrapReason(reason),\n        });\n      },\n\n      sinkCapability: createPromiseCapability(),\n      onPull: null,\n      onCancel: null,\n      isCancelled: false,\n      desiredSize: data.desiredSize,\n      ready: null,\n    };\n\n    streamSink.sinkCapability.resolve();\n    streamSink.ready = streamSink.sinkCapability.promise;\n    this.streamSinks[streamId] = streamSink;\n    new Promise(function (resolve) {\n      resolve(action(data.data, streamSink));\n    }).then(\n      function () {\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.START_COMPLETE,\n          streamId,\n          success: true,\n        });\n      },\n      function (reason) {\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.START_COMPLETE,\n          streamId,\n          reason: wrapReason(reason),\n        });\n      }\n    );\n  }\n\n  /**\n   * @private\n   */\n  _processStreamMessage(data) {\n    const streamId = data.streamId;\n    const sourceName = this.sourceName;\n    const targetName = data.sourceName;\n    const comObj = this.comObj;\n\n    switch (data.stream) {\n      case StreamKind.START_COMPLETE:\n        if (data.success) {\n          this.streamControllers[streamId].startCall.resolve();\n        } else {\n          this.streamControllers[streamId].startCall.reject(\n            wrapReason(data.reason)\n          );\n        }\n        break;\n      case StreamKind.PULL_COMPLETE:\n        if (data.success) {\n          this.streamControllers[streamId].pullCall.resolve();\n        } else {\n          this.streamControllers[streamId].pullCall.reject(\n            wrapReason(data.reason)\n          );\n        }\n        break;\n      case StreamKind.PULL:\n        // Ignore any pull after close is called.\n        if (!this.streamSinks[streamId]) {\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.PULL_COMPLETE,\n            streamId,\n            success: true,\n          });\n          break;\n        }\n        // Pull increases the desiredSize property of sink,\n        // so when it changes from negative to positive,\n        // set ready property as resolved promise.\n        if (\n          this.streamSinks[streamId].desiredSize <= 0 &&\n          data.desiredSize > 0\n        ) {\n          this.streamSinks[streamId].sinkCapability.resolve();\n        }\n        // Reset desiredSize property of sink on every pull.\n        this.streamSinks[streamId].desiredSize = data.desiredSize;\n        const { onPull } = this.streamSinks[data.streamId];\n        new Promise(function (resolve) {\n          resolve(onPull && onPull());\n        }).then(\n          function () {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.PULL_COMPLETE,\n              streamId,\n              success: true,\n            });\n          },\n          function (reason) {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.PULL_COMPLETE,\n              streamId,\n              reason: wrapReason(reason),\n            });\n          }\n        );\n        break;\n      case StreamKind.ENQUEUE:\n        assert(\n          this.streamControllers[streamId],\n          \"enqueue should have stream controller\"\n        );\n        if (this.streamControllers[streamId].isClosed) {\n          break;\n        }\n        this.streamControllers[streamId].controller.enqueue(data.chunk);\n        break;\n      case StreamKind.CLOSE:\n        assert(\n          this.streamControllers[streamId],\n          \"close should have stream controller\"\n        );\n        if (this.streamControllers[streamId].isClosed) {\n          break;\n        }\n        this.streamControllers[streamId].isClosed = true;\n        this.streamControllers[streamId].controller.close();\n        this._deleteStreamController(streamId);\n        break;\n      case StreamKind.ERROR:\n        assert(\n          this.streamControllers[streamId],\n          \"error should have stream controller\"\n        );\n        this.streamControllers[streamId].controller.error(\n          wrapReason(data.reason)\n        );\n        this._deleteStreamController(streamId);\n        break;\n      case StreamKind.CANCEL_COMPLETE:\n        if (data.success) {\n          this.streamControllers[streamId].cancelCall.resolve();\n        } else {\n          this.streamControllers[streamId].cancelCall.reject(\n            wrapReason(data.reason)\n          );\n        }\n        this._deleteStreamController(streamId);\n        break;\n      case StreamKind.CANCEL:\n        if (!this.streamSinks[streamId]) {\n          break;\n        }\n        const { onCancel } = this.streamSinks[data.streamId];\n        new Promise(function (resolve) {\n          resolve(onCancel && onCancel(wrapReason(data.reason)));\n        }).then(\n          function () {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.CANCEL_COMPLETE,\n              streamId,\n              success: true,\n            });\n          },\n          function (reason) {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.CANCEL_COMPLETE,\n              streamId,\n              reason: wrapReason(reason),\n            });\n          }\n        );\n        this.streamSinks[streamId].sinkCapability.reject(\n          wrapReason(data.reason)\n        );\n        this.streamSinks[streamId].isCancelled = true;\n        delete this.streamSinks[streamId];\n        break;\n      default:\n        throw new Error(\"Unexpected stream case\");\n    }\n  }\n\n  /**\n   * @private\n   */\n  async _deleteStreamController(streamId) {\n    // Delete the `streamController` only when the start, pull, and cancel\n    // capabilities have settled, to prevent `TypeError`s.\n    await Promise.allSettled(\n      [\n        this.streamControllers[streamId].startCall,\n        this.streamControllers[streamId].pullCall,\n        this.streamControllers[streamId].cancelCall,\n      ].map(function (capability) {\n        return capability && capability.promise;\n      })\n    );\n    delete this.streamControllers[streamId];\n  }\n\n  /**\n   * Sends raw message to the comObj.\n   * @param {Object} message - Raw message.\n   * @param transfers List of transfers/ArrayBuffers, or undefined.\n   * @private\n   */\n  _postMessage(message, transfers) {\n    if (transfers && this.postMessageTransfers) {\n      this.comObj.postMessage(message, transfers);\n    } else {\n      this.comObj.postMessage(message);\n    }\n  }\n\n  destroy() {\n    this.comObj.removeEventListener(\"message\", this._onComObjOnMessage);\n  }\n}\n\nexport { MessageHandler };\n", "/* Copyright 2019 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint no-var: error */\n\nimport { assert } from \"../shared/util.js\";\n\n/** @implements {IPDFStream} */\nclass PDFWorkerStream {\n  constructor(msgHandler) {\n    this._msgHandler = msgHandler;\n    this._contentLength = null;\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n\n  getFullReader() {\n    assert(\n      !this._fullRequestReader,\n      \"PDFWorkerStream.getFullReader can only be called once.\"\n    );\n    this._fullRequestReader = new PDFWorkerStreamReader(this._msgHandler);\n    return this._fullRequestReader;\n  }\n\n  getRangeReader(begin, end) {\n    const reader = new PDFWorkerStreamRangeReader(begin, end, this._msgHandler);\n    this._rangeRequestReaders.push(reader);\n    return reader;\n  }\n\n  cancelAllRequests(reason) {\n    if (this._fullRequestReader) {\n      this._fullRequestReader.cancel(reason);\n    }\n    const readers = this._rangeRequestReaders.slice(0);\n    readers.forEach(function (reader) {\n      reader.cancel(reason);\n    });\n  }\n}\n\n/** @implements {IPDFStreamReader} */\nclass PDFWorkerStreamReader {\n  constructor(msgHandler) {\n    this._msgHandler = msgHandler;\n    this.onProgress = null;\n\n    this._contentLength = null;\n    this._isRangeSupported = false;\n    this._isStreamingSupported = false;\n\n    const readableStream = this._msgHandler.sendWithStream(\"GetReader\");\n    this._reader = readableStream.getReader();\n\n    this._headersReady = this._msgHandler\n      .sendWithPromise(\"ReaderHeadersReady\")\n      .then(data => {\n        this._isStreamingSupported = data.isStreamingSupported;\n        this._isRangeSupported = data.isRangeSupported;\n        this._contentLength = data.contentLength;\n      });\n  }\n\n  get headersReady() {\n    return this._headersReady;\n  }\n\n  get contentLength() {\n    return this._contentLength;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  get isRangeSupported() {\n    return this._isRangeSupported;\n  }\n\n  async read() {\n    const { value, done } = await this._reader.read();\n    if (done) {\n      return { value: undefined, done: true };\n    }\n    // `value` is wrapped into Uint8Array, we need to\n    // unwrap it to ArrayBuffer for further processing.\n    return { value: value.buffer, done: false };\n  }\n\n  cancel(reason) {\n    this._reader.cancel(reason);\n  }\n}\n\n/** @implements {IPDFStreamRangeReader} */\nclass PDFWorkerStreamRangeReader {\n  constructor(begin, end, msgHandler) {\n    this._msgHandler = msgHandler;\n    this.onProgress = null;\n\n    const readableStream = this._msgHandler.sendWithStream(\"GetRangeReader\", {\n      begin,\n      end,\n    });\n    this._reader = readableStream.getReader();\n  }\n\n  get isStreamingSupported() {\n    return false;\n  }\n\n  async read() {\n    const { value, done } = await this._reader.read();\n    if (done) {\n      return { value: undefined, done: true };\n    }\n    return { value: value.buffer, done: false };\n  }\n\n  cancel(reason) {\n    this._reader.cancel(reason);\n  }\n}\n\nexport { PDFWorkerStream };\n"],
  "mappings": "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A,GAAmB,CAAA,GAAA,YAAA,GACnB,CAAA,GAAA,YAAA,GAAmB,CAAA,GAAA,YAAA,GACnB,CAAA,GAAA,YAAA,GAAmB,CAAA,GAAA,YAAA,GACnB,CAAA,GAAA,YAAA,GAAmB,CAAA,GAAA,YAAA,GACnB,CAAA,GAAA,YAAA,GAAmB,CAAA,GAAA,YAAA,GACnB,CAAA,GAAA,YAAA,GAAmB,CAAA,GAAA,YAAA,GACnB,CAAA,GAAA,YAAA,GAAmB,CAAA,GAAA,YAAA,GACnB,CAAA,GAAA,YAAA,GAAmB,CAAA,GAAA,YAAA,GACnB,CAAA,GAAA,YAAA,GAAmB,CAAA,GAAA,YAAA,GACnB,CAAA,GAAA,YAAA,GAAmB,CAAA,GAAA,YAAA,GACnB,CAAA,GAAA,WAAA,GAAkB,CAAA,GAAA,WAAA,GAClB,CAAA,GAAA,WAAA,GAAkB,CAAA,GAAA,WAAA,GAClB,CAAA,GAAA,WAAA,GAAkB,CAAA,GAAA,WAAA,GAClB,CAAA,GAAA,WAAA,GAAkB,CAAA,GAAA,WAAA,GAClB,CAAA,GAAA,WAAA,GAAkB,CAAA,GAAA,WAAA,GAClB,CAAA,GAAA,WAAA,GAAkB,CAAA,GAAA,WAAA,GAClB,CAAA,GAAA,WAAA,GAAkB,CAAA,GAAA,WAAA,GAClB,CAAA,GAAA,WAAA,GAAkB,CAAA,GAAA,WAAA,GAClB,CAAA,GAAA,WAAA,GAAkB,CAAA,GAAA,WAAA,GAClB,CAAA,GAAA,WAAA,GAAkB,CAAA,GAAA,WAAA,GAClB,CAAA,GAAA,WAAA,GAAkB,CAAA,GAAA,WAAA,GAClB,CAAA,GAAA,WAAA,GAAkB,CAAA,GAAA,WAAA,GAClB,CAAA,GAAA,WAAA,GAAkB,CAAA,GAAA,WAAA,GAClB,CAAA,GAAA,WAAA,GAAkB,CAAA,GAAA,WAAA,GAClB,CAAA,GAAA,WAAA,GAAkB,CAAA,GAAA,WAAA,GAClB,CAAA,GAAA,WAAA,GAAkB,CAAA,GAAA,WAAA,GAClB,CAAA,GAAA,WAAA,GAAkB,CAAA,GAAA,WAAA,GAClB,CAAA,GAAA,WAAA,GAAkB,CAAA,GAAA,WAAA,GAClB,CAAA,GAAA,WAAA,GAAkB,CAAA,GAAA,WAAA,G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AA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxjC,CAAA,GAAA,IAAA,GAAW,CAAA,GAAA,IAAA,GAAW,CAAA,GAAA,IAAA,GAAW,CAAA,GAAA,IAAA,GACjxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,GAAA,GAAU,CAAA,GAAA,GAAA,GAAU,CAAA,GAAA,GAAA,GAAU,CAAA,GAAA,GAAA,GAC9B,CAAA,GAAA,GAAA,GAAU,CAAA,GAAA,GAAA,GAAU,CAAA,GAAA,GAAA,GAAU,CAAA,GAAA,GAAA,GAC9B,CAAA,GAAA,GAAA,GAAU,CAAA,GAAA,GAAA,GAAU,CAAA,GAAA,GAAA,GAAU,CAAA,GAAA,GAAA,GAC9B,CAAA,GAAA,GAAA,GAAU,CAAA,GAAA,GAAA,GAAU,CAAA,GAAA,GAAA,GAAU,CAAA,GAAA,GAAA,GAC9B,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAC3B,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAC3B,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAC3B,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAC3B,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAC3B,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAC3B,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAC3B,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAC3B,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAC3B,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAC3B,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAC3B,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAC3B,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GACxB,CAAA,GAAA,CAAA,GAAQ,CAAA,GAAA,CAAA,GAAQ,CAAA,G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AS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAC3B,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAC3B,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAC3B,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAC3B,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAC3B,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAC3B,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAC3B,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAC3B,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAC3B,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAC3B,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAC3B,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAC3B,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAC3B,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAC3B,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAC3B,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAC3B,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAC3B,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAC3B,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAC3B,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAC3B,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAC3B,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAC3B,CAAA,IAAA,GAAA,GACA,CAAA,IAAA,GAAA,GACA,CAAA,IAAA,EAAA,GACA,CAAA,IAAA,EAAA,GACA,CAAA,IAAA,EAAA,GACA,CAAA,IAAA,EAAA,GACA,CAAA,IAAA,EAAA,GAAU,CAAA,IAAA,EAAA,GACV,CAAA,IAAA,EAAA,GAAU,CAAA,IAAA,EAAA,GACV,CAAA,IAAA,EAAA,GACA,CAAA,IAAA,EAAA,GACA,CAAA,IAAA,EAAA,GACA,CAAA,IAAA,EAAA,GACA,CAAA,IAAA,EAAA,GACA,CAAA,IAAA,EAAA,GACA,CAAA,IAAA,EAAA,GAAU,CAAA,IAAA,EAAA,GACV,CAAA,IAAA,EAAA,GACA,CAAA,IAAA,EAAA,GACA,CAAA,IAAA,CAAA,GAAS,CAAA,IAAA,CAAA,GAAS,CAAA,IAAA,CAAA,GAAS,CAAA,IAAA,CAAA,GAC3B,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAC3B,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAAS,CAAA,GAAA,EAAA,GAC3B,CAAA,GAAA,EA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C,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAASC,KAAK;cAAvB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAASC,KAAK;cAAvB;cACA;gBAAED,OAAO;gBAASC,KAAK;cAAvB;cACA;gBAAED,OAAO;gBAASC,KAAK;cAAvB;cACA;gBAAED,OAAO;gBAASC,KAAK;cAAvB;cACA;gBAAED,OAAO;gBAASC,KAAK;cAAvB;cACA;gBAAED,OAAO;gBAASC,KAAK;cAAvB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAASC,KAAK;cAAvB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAASC,KAAK;cAAvB;cACA;gBAAED,OAAO;gBAASC,KAAK;cAAvB;cACA;gBAAED,OAAO;gBAASC,KAAK;cAAvB;cACA;gBAAED,OAAO;gBAASC,KAAK;cAAvB;cACA;gBAAED,OAAO;gBAASC,KAAK;cAAvB;cACA;gBAAED,OAAO;gBAASC,KAAK;cAAvB;cACA;gBAAED,OAAO;gBAASC,KAAK;cAAvB;cACA;gBAAED,OAAO;gBAASC,KAAK;cAAvB;cACA;gBAAED,OAAO;gBAASC,KAAK;cAAvB;cACA;gBAAED,OAAO;gBAASC,KAAK;cAAvB;cACA;gBAAED,OAAO;gBAASC,KAAK;cAAvB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAAQC,KAAK;cAAtB;cACA;gBAAED,OAAO;gBAASC,KAAK;cAAvB;cACA;gBAAED,OAAO;gBAASC,KAAK;cAAvB;cACA;gBAAED,OAAO;gBAASC,KAAK;cAAvB;cACA;gBAAED,OAAO;gBAASC,KAAK;cAAvB;YA3HkB;AA8HpB,qBAASkuE,mBAAmBh2E,OAAO;AACjC,uBAAS7U,IAAI,GAAGqY,KAAK8lO,cAAcx9O,QAAQX,IAAIqY,IAAIrY,KAAK;AACtD,oBAAIwf,QAAQ2+N,cAAcn+O,CAAd;AACZ,oBAAI6U,SAAS2K,MAAM9C,SAAS7H,QAAQ2K,MAAM7C,KAAK;AAC7C,yBAAO3c;gBADsC;cAFO;AAMxD,qBAAO;YAP0B;AAUnC,qBAASo+O,cAAcvpO,OAAO;AAC5B,kBAAI2K,QAAQ2+N,cAAc,EAAd;AACZ,kBAAItpO,SAAS2K,MAAM9C,SAAS7H,QAAQ2K,MAAM7C,KAAK;AAC7C,uBAAO;cADsC;AAG/C6C,sBAAQ2+N,cAAc,EAAd;AACR,kBAAItpO,SAAS2K,MAAM9C,SAAS7H,QAAQ2K,MAAM7C,KAAK;AAC7C,uBAAO;cADsC;AAG/C,qBAAO;YATqB;AAc9B,gBAAI0hO,wBAAwBt4I,sBAAsB,SAAU9nE,GAAG;AAC7DA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE,GAAF,IAAc;AACdA,gBAAE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",
  "names": ["module", "exports", "key", "pdfjsVersion", "pdfjsBuild", "WorkerTask", "finish", "terminate", "ensureNotTerminated", "WorkerMessageHandler", "setup", "testMessageProcessed", "handler", "supportTransfers", "data", "setVerbosityLevel", "createDocumentHandler", "terminated", "cancelXHRs", "WorkerTasks", "verbosity", "apiVersion", "docParams", "workerVersion", "enumerableProperties", "Promise", "docId", "docBaseUrl", "workerHandlerName", "task", "i", "pdfManager", "pdfManagerCapability", "source", "newPdfManager", "cachedChunks", "pdfStream", "fullRequest", "disableAutoFetch", "msgHandler", "password", "length", "rangeChunkSize", "loaded", "flushChunks", "pdfFile", "arraysToBytes", "warn", "readPromise", "readChunk", "arrayByteLength", "total", "Math", "reject", "pdfInfo", "ex", "startWorkerTask", "finishWorkerTask", "pdfManagerReady", "loadDocument", "onFailure", "evaluatorOptions", "maxImageSize", "disableFontFace", "ignoreErrors", "isEvalSupported", "fontExtraProperties", "getPdfManager", "stream", "ref", "Ref", "catalog", "page", "pageIndex", "start", "VerbosityLevel", "Date", "intent", "renderInteractiveForms", "info", "operatorListInfo", "sink", "featureId", "UNSUPPORTED_FEATURES", "normalizeWhitespace", "combineTextItems", "waitOn", "cleanupPromise", "setupDoc", "initializeFromPort", "maybePort", "isMessagePort", "IDENTITY_MATRIX", "FONT_IDENTITY_MATRIX", "PermissionFlag", "PRINT", "MODIFY_CONTENTS", "COPY", "MODIFY_ANNOTATIONS", "FILL_INTERACTIVE_FORMS", "COPY_FOR_ACCESSIBILITY", "ASSEMBLE", "PRINT_HIGH_QUALITY", "TextRenderingMode", "FILL", "STROKE", "FILL_STROKE", "INVISIBLE", "FILL_ADD_TO_PATH", "STROKE_ADD_TO_PATH", "FILL_STROKE_ADD_TO_PATH", "ADD_TO_PATH", "FILL_STROKE_MASK", "ADD_TO_PATH_FLAG", "ImageKind", "GRAYSCALE_1BPP", "RGB_24BPP", "RGBA_32BPP", "AnnotationType", "TEXT", "LINK", "FREETEXT", "LINE", "SQUARE", "CIRCLE", "POLYGON", "POLYLINE", "HIGHLIGHT", "UNDERLINE", "SQUIGGLY", "STRIKEOUT", "STAMP", "CARET", "INK", "POPUP", "FILEATTACHMENT", "SOUND", "MOVIE", "WIDGET", "SCREEN", "PRINTERMARK", "TRAPNET", "WATERMARK", "THREED", "REDACT", "AnnotationStateModelType", "MARKED", "REVIEW", "AnnotationMarkedState", "UNMARKED", "AnnotationReviewState", "ACCEPTED", "REJECTED", "CANCELLED", "COMPLETED", "NONE", "AnnotationReplyType", "GROUP", "REPLY", "AnnotationFlag", "HIDDEN", "NOZOOM", "NOROTATE", "NOVIEW", "READONLY", "LOCKED", "TOGGLENOVIEW", "LOCKEDCONTENTS", "AnnotationFieldFlag", "REQUIRED", "NOEXPORT", "MULTILINE", "PASSWORD", "NOTOGGLETOOFF", "RADIO", "PUSHBUTTON", "COMBO", "EDIT", "SORT", "FILESELECT", "MULTISELECT", "DONOTSPELLCHECK", "DONOTSCROLL", "COMB", "RICHTEXT", "RADIOSINUNISON", "COMMITONSELCHANGE", "AnnotationBorderStyleType", "SOLID", "DASHED", "BEVELED", "INSET", "StreamType", "UNKNOWN", "FLATE", "LZW", "DCT", "JPX", "JBIG", "A85", "AHX", "CCF", "RLX", "FontType", "TYPE1", "TYPE1C", "CIDFONTTYPE0", "CIDFONTTYPE0C", "TRUETYPE", "CIDFONTTYPE2", "TYPE3", "OPENTYPE", "TYPE0", "MMTYPE1", "ERRORS", "WARNINGS", "INFOS", "CMapCompressionType", "BINARY", "STREAM", "OPS", "dependency", "setLineWidth", "setLineCap", "setLineJoin", "setMiterLimit", "setDash", "setRenderingIntent", "setFlatness", "setGState", "save", "restore", "transform", "moveTo", "lineTo", "curveTo", "curveTo2", "curveTo3", "closePath", "rectangle", "stroke", "closeStroke", "fill", "eoFill", "fillStroke", "eoFillStroke", "closeFillStroke", "closeEOFillStroke", "endPath", "clip", "eoClip", "beginText", "endText", "setCharSpacing", "setWordSpacing", "setHScale", "setLeading", "setFont", "setTextRenderingMode", "setTextRise", "moveText", "setLeadingMoveText", "setTextMatrix", "nextLine", "showText", "showSpacedText", "nextLineShowText", "nextLineSetSpacingShowText", "setCharWidth", "setCharWidthAndBounds", "setStrokeColorSpace", "setFillColorSpace", "setStrokeColor", "setStrokeColorN", "setFillColor", "setFillColorN", "setStrokeGray", "setFillGray", "setStrokeRGBColor", "setFillRGBColor", "setStrokeCMYKColor", "setFillCMYKColor", "shadingFill", "beginInlineImage", "beginImageData", "endInlineImage", "paintXObject", "markPoint", "markPointProps", "beginMarkedContent", "beginMarkedContentProps", "endMarkedContent", "beginCompat", "endCompat", "paintFormXObjectBegin", "paintFormXObjectEnd", "beginGroup", "endGroup", "beginAnnotations", "endAnnotations", "beginAnnotation", "endAnnotation", "paintJpegXObject", "paintImageMaskXObject", "paintImageMaskXObjectGroup", "paintImageXObject", "paintInlineImageXObject", "paintInlineImageXObjectGroup", "paintImageXObjectRepeat", "paintImageMaskXObjectRepeat", "paintSolidColorImageMask", "constructPath", "unknown", "forms", "javaScript", "smask", "shadingPattern", "font", "errorTilingPattern", "errorExtGState", "errorXObject", "errorFontLoadType3", "errorFontState", "errorFontMissing", "errorFontTranslate", "errorColorSpace", "errorOperatorList", "errorFontToUnicode", "errorFontLoadNative", "errorFontGetPath", "PasswordResponses", "NEED_PASSWORD", "INCORRECT_PASSWORD", "Number", "console", "unreachable", "base", "other", "url", "absoluteUrl", "baseUrl", "_isValidProtocol", "Object", "enumerable", "configurable", "writable", "BaseException", "constructor", "NullCharactersRegExp", "str", "assert", "bytes", "MAX_ARGUMENT_COUNT", "String", "strBuf", "chunkEnd", "chunk", "arr", "resultLength", "pos", "item", "stringToBytes", "itemLength", "value", "buffer8", "view32", "IsLittleEndianCached", "shadow", "isLittleEndian", "IsEvalSupportedCached", "rgbBuf", "m1", "m2", "xt", "p", "m", "yt", "d", "p1", "Util", "p2", "r", "p3", "p4", "v", "transpose", "a", "b", "c", "first", "second", "sx", "sy", "rect", "orderedX", "rect1", "rect2", "orderedY", "result", "PDFStringTranslateTable", "code", "decodeURIComponent", "escape", "unescape", "encodeURIComponent", "arr1", "arr2", "element", "capability", "isSettled", "get", "resolve", "createObjectURL", "digits", "forceDataSchema", "URL", "blob", "type", "buffer", "ii", "b1", "b2", "b3", "d1", "d2", "d3", "d4", "isNodeJS", "process", "EOF", "Name", "nameCache", "nameValue", "Cmd", "cmdCache", "cmdValue", "Dict", "nonSerializable", "assignXref", "key2", "key3", "getArray", "Array", "getRaw", "getKeys", "set", "has", "forEach", "callback", "mergedDict", "dictArray", "dict", "isDict", "refCache", "toString", "gen", "refValue", "RefSet", "put", "remove", "RefSetCache", "putAlias", "clear", "isName", "v1", "v2", "createValidAbsoluteUrl", "onLoadedStream", "ensureDoc", "ensureXRef", "ensureCatalog", "getPage", "fontFallback", "cleanup", "manuallyTriggered", "requestRange", "requestLoadedStream", "sendProgressiveData", "updatePassword", "obj", "args", "getMissingChunks", "chunks", "n", "getBaseStreams", "allChunksLoaded", "onReceiveData", "chunkSize", "begin", "end", "beginChunk", "endChunk", "curChunk", "onReceiveProgressiveData", "position", "ensureByte", "ensureRange", "nextEmptyChunk", "numChunks", "hasChunk", "getByte", "getUint16", "b0", "getInt32", "getBytes", "forceClamped", "strEnd", "subarray", "peekByte", "peekedByte", "peekBytes", "getByteRange", "skip", "reset", "moveStart", "makeSubStream", "ChunkedStreamSubstream", "missingChunks", "subStream", "sendRequest", "rangeReader", "promise", "chunkData", "requestAllChunks", "_requestChunks", "requestId", "chunksNeeded", "isEmptyObj", "chunksToRequest", "groupedChunksToRequest", "groupedChunk", "getStream", "requestRanges", "ranges", "range", "groupChunks", "groupedChunks", "prevChunk", "onProgress", "isProgressive", "loadedRequests", "requestIds", "lastChunk", "onError", "getBeginChunk", "getEndChunk", "abort", "lookup", "initializer", "stopWhenFound", "LOOP_LIMIT", "loopCount", "values", "ROMAN_NUMBER_MAP", "lowerCase", "number", "romanBuf", "romanStr", "x", "offset", "ch", "DEFAULT_USER_UNIT", "LETTER_SIZE_MEDIABOX", "annotation", "idCounters", "createObjId", "getDocId", "_getInheritableProperty", "_getBoundingBox", "box", "isNum", "cropBox", "isArrayEqual", "view", "rotate", "getContentStream", "content", "xref", "streams", "isStream", "loadResources", "objectLoader", "getOperatorList", "contentStreamPromise", "resourcesPromise", "partialEvaluator", "idFactory", "fontCache", "builtInCMapCache", "globalImageCache", "options", "pdfFunctionFactory", "dataPromises", "pageListPromise", "opList", "transparency", "resources", "operatorList", "annotations", "pageOpList", "opListPromises", "isAnnotationRenderable", "extractTextContent", "getAnnotationsData", "annotationsData", "parsedAnnotations", "annotationPromises", "PDF_HEADER_SIGNATURE", "STARTXREF_SIGNATURE", "ENDOBJ_SIGNATURE", "FINGERPRINT_FIRST_BYTES", "EMPTY_FINGERPRINT", "PDF_HEADER_VERSION_REGEXP", "limit", "backwards", "signatureLength", "signature", "scanBytes", "scanLength", "signatureEnd", "j", "isArrayBuffer", "parse", "version", "fields", "collection", "linearization", "Linearization", "err", "startXRef", "find", "step", "startXRefLength", "found", "isWhiteSpace", "parseInt", "isNaN", "checkHeader", "MAX_PDF_VERSION_LENGTH", "parseStartXRef", "num", "DocumentInfoValidators", "Title", "Author", "Subject", "Keywords", "Creator", "Producer", "CreationDate", "ModDate", "Trapped", "docInfo", "PDFFormatVersion", "IsLinearized", "IsAcroFormPresent", "IsXFAPresent", "IsCollectionPresent", "infoDict", "stringToPDFString", "isString", "customValue", "isBool", "idArray", "hash", "calculateMD5", "fingerprintBuf", "hex", "_getLinearizationPage", "reason", "checkFirstPage", "dest", "streamRef", "isRef", "suppressEncryption", "subtype", "metadata", "stringToUTF8String", "bytesToString", "e", "pagesObj", "_readDocumentOutline", "root", "items", "queue", "parent", "processed", "blackColor", "outlineDict", "Catalog", "destDict", "resultObj", "title", "flags", "color", "count", "rgbColor", "ColorSpace", "outlineItem", "unsafeUrl", "newWindow", "bold", "italic", "permissions", "_readPermissions", "encrypt", "dests", "names", "fetchDestination", "getDestination", "_readDests", "_readPageLabels", "pageLabels", "style", "prefix", "numberTree", "nums", "currentLabel", "currentIndex", "labelDict", "s", "st", "toRomanNumerals", "LIMIT", "A_UPPER_CASE", "A_LOWER_CASE", "baseCharCode", "letterIndex", "character", "charBuf", "jj", "pageLayout", "pageMode", "ViewerPreferencesValidators", "HideToolbar", "HideMenubar", "HideWindowUI", "FitWindow", "CenterWindow", "DisplayDocTitle", "NonFullScreenPageMode", "Direction", "ViewArea", "ViewClip", "PrintArea", "PrintClip", "PrintScaling", "Duplex", "PickTrayByPDFSize", "PrintPageRange", "NumCopies", "prefs", "prefValue", "isValid", "openAction", "action", "attachments", "nameTree", "fs", "jsDict", "js", "appendIfJavaScriptDict", "promises", "translatedFonts", "translatedFont", "getPageDict", "nodesToVisit", "visitedNodes", "pageKidsCountCache", "currentPageIndex", "currentNode", "next", "objId", "kids", "last", "getPageIndex", "isRefsEqual", "node", "parentRef", "kidPromises", "kid", "params", "actionType", "actionName", "addDefaultProtocolToUrl", "urlDict", "remoteDest", "JSON", "namedAction", "jsAction", "URL_OPEN_METHODS", "regex", "jsUrl", "tryConvertUrlEncoding", "XRef", "streamTypes", "fontTypes", "setStartXRef", "trailerDict", "ids", "fileId", "processXRefTable", "entryNum", "streamPos", "parser", "parserBuf1", "parserBuf2", "isCmd", "readXRefTable", "tableState", "entry", "processXRefStream", "streamParameters", "byteWidths", "entryRanges", "readXRefStream", "streamState", "typeFieldWidth", "offsetFieldWidth", "generationFieldWidth", "generation", "indexObjects", "TAB", "LF", "CR", "SPACE", "PERCENT", "LT", "token", "what", "dataLength", "skipped", "objRegExp", "endobjRegExp", "nestedObjRegExp", "CHECK_CONTENT_LENGTH", "trailerBytes", "startxrefBytes", "objBytes", "xrefBytes", "trailers", "xrefStms", "readToken", "skipUntil", "uncompressed", "startPos", "endPos", "contentLength", "checkPos", "tokenStr", "objToken", "xrefTagOffset", "lexer", "allowStreams", "recoveryMode", "rootDict", "readXRef", "startXRefParsedCache", "getEntry", "xrefEntry", "fetchIfRef", "fetch", "cacheEntry", "fetchUncompressed", "obj1", "obj2", "obj3", "fetchCompressed", "tableOffset", "entries", "getCatalogObj", "getAll", "kidsOrEntries", "MAX_LEVELS", "l", "limits", "tmp", "currentKey", "mm", "FileSpec", "filename", "pickPlatformItem", "fileObj", "ObjectLoader", "dictKeys", "rawValue", "mayHaveChildren", "keys", "nodesToRevisit", "pendingRequests", "baseStreams", "foundMissingData", "addChildren", "MAX_LENGTH_TO_CACHE", "MAX_ADLER32_LENGTH", "bytesLength", "refill", "shift", "tryShift", "getObj", "cipherTransform", "buf1", "array", "isEOF", "findDefaultInlineStreamEnd", "E", "I", "NUL", "state", "maybeEIPos", "followingBytes", "endOffset", "findDCTDecodeInlineStreamEnd", "foundEOI", "markerLength", "findASCII85DecodeInlineStreamEnd", "TILDE", "GT", "tildePos", "maybeEI", "findASCIIHexDecodeInlineStreamEnd", "inlineStreamSkipEI", "makeInlineImage", "dictLength", "filter", "filterName", "filterZero", "imageStream", "imageBytes", "initialStreamPos", "dictBytes", "cacheKey", "computeAdler32", "_findStreamLength", "SCAN_BLOCK_LENGTH", "makeStream", "ENDSTREAM_SIGNATURE", "actualLength", "MAX_TRUNCATION", "TRUNCATED_SIGNATURE", "maybeLength", "lastByte", "filterArray", "paramsArray", "makeFilter", "xrefStreamStats", "name", "earlyChange", "specialChars", "knownCommands", "nextChar", "peekChar", "getNumber", "eNotation", "divideBy", "sign", "baseValue", "powerValue", "powerValueSign", "currentDigit", "getString", "numParen", "done", "charBuffered", "getName", "toHexDigit", "previousCh", "x2", "_hexStringWarn", "MAX_HEX_STRING_NUM_WARN", "getHexString", "isFirstHex", "firstDigit", "secondDigit", "comment", "knownCommandFound", "possibleCommand", "skipToNextLine", "linDict", "allowZeroValue", "hints", "hintsLength", "index", "hint", "getInt", "getHints", "objectNumberFirst", "endFirst", "numPages", "mainXRefEntriesOffset", "pageFirst", "Stream", "arrayBuffer", "StringStream", "DecodeStream", "emptyBuffer", "maybeMinBufferLength", "ensureBuffer", "requested", "size", "buffer2", "bufEnd", "StreamsSequenceStream", "bufferLength", "newLength", "FlateStream", "codeLenCodeMap", "lengthDecode", "distDecode", "fixedLitCodeTab", "fixedDistCodeTab", "cmf", "flg", "codeSize", "codeBuf", "codes", "table", "maxLen", "codeLen", "codeVal", "lengths", "len", "val", "code2", "t", "hdr", "blockLen", "check", "block", "litCodeTable", "distCodeTable", "numLitCodes", "numDistCodes", "numCodeLenCodes", "codeLenCodeLengths", "codeLenCodeTab", "codeLengths", "bitsLength", "bitsOffset", "repeatLength", "code1", "dist", "k", "PredictorStream", "predictor", "colors", "bits", "columns", "rowBytes", "rawBytes", "inbuf", "outbuf", "inbits", "outbits", "bytesPerPixel", "sum", "compArray", "bitMask", "kk", "pixBytes", "prevRow", "up", "upLeft", "left", "pa", "pb", "pc", "DecryptStream", "hasMoreData", "decrypt", "Ascii85Stream", "TILDA_CHAR", "Z_LOWER_CHAR", "input", "AsciiHexStream", "UPSTREAM_BLOCK_SIZE", "maxDecodeLength", "digit", "RunLengthStream", "repeatHeader", "LZWStream", "maxLzwDictionarySize", "lzwState", "codeLength", "nextCode", "dictionaryValues", "dictionaryLengths", "dictionaryPrevCodes", "currentSequence", "currentSequenceLength", "bitsCached", "cachedData", "blockSize", "estimatedDecodedSize", "decodedSizeDelta", "prevCode", "decodedLength", "currentBufferLength", "hasPrev", "q", "NullStream", "CCITTFaxStream", "K", "EndOfLine", "EncodedByteAlign", "Columns", "Rows", "EndOfBlock", "BlackIs1", "CCITTFaxDecoder", "ccittEOL", "ccittEOF", "twoDimPass", "twoDimHoriz", "twoDimVert0", "twoDimVertR1", "twoDimVertL1", "twoDimVertR2", "twoDimVertL2", "twoDimVertR3", "twoDimVertL3", "twoDimTable", "whiteTable1", "whiteTable2", "blackTable1", "blackTable2", "blackTable3", "eoblock", "readNextChar", "refLine", "codingLine", "refPos", "blackPixels", "code3", "gotEOL", "_addPixels", "codingPos", "a1", "_addPixelsNeg", "_findTableCode", "limitValue", "_getTwoDimCode", "_getWhiteCode", "_getBlackCode", "_lookBits", "_eatBits", "Jbig2Stream", "jbig2Image", "globalsStream", "globals", "Jbig2Image", "ContextCache", "getContexts", "id", "DecodingContext", "decoder", "cache", "contexts", "contextCache", "prev", "bit", "readBits", "SegmentTypes", "CodingTemplates", "y", "RefinementTemplates", "coding", "reference", "ReusedContexts", "RefinementReusedContexts", "decodingContext", "bitmap", "OLD_PIXEL_MASK", "row", "row1", "row2", "contextLabel", "pixel", "decodeMMRBitmap", "templateIndex", "at", "decodeBitmapTemplate0", "useskip", "template", "templateLength", "templateX", "templateY", "changingTemplateEntries", "reuseMask", "minX", "maxX", "minY", "changingEntriesLength", "changingTemplateX", "changingTemplateY", "changingTemplateBit", "sbb_left", "sbb_top", "sbb_right", "width", "pseudoPixelContext", "ltp", "sltp", "i0", "j0", "codingTemplate", "codingTemplateLength", "codingTemplateX", "codingTemplateY", "referenceTemplate", "referenceTemplateLength", "referenceTemplateX", "referenceTemplateY", "referenceWidth", "referenceBitmap", "referenceHeight", "huffman", "newSymbols", "currentHeight", "symbolCodeLength", "log2", "symbols", "tableB1", "getStandardTable", "symbolWidths", "deltaHeight", "huffmanTables", "decodeInteger", "currentWidth", "totalWidth", "firstSymbol", "deltaWidth", "numberOfInstances", "decodeTextRegion", "symbolId", "decodeIAID", "rdx", "rdy", "symbol", "decodeRefinement", "decodeBitmap", "bitmapSize", "huffmanInput", "collectiveBitmap", "readUncompressedBitmap", "originalEnd", "bitmapEnd", "numberOfSymbolsDecoded", "xMin", "bitmapWidth", "xMax", "symbolBitmap", "exportedSymbols", "currentFlag", "totalSymbolsLength", "runLength", "stripT", "firstS", "deltaT", "deltaFirstS", "currentS", "currentT", "stripSize", "applyRefinement", "refinement", "inputSymbols", "symbolWidth", "symbolHeight", "rdw", "rdh", "offsetT", "offsetS", "s2", "symbolRow", "maxWidth", "t2", "deltaS", "collectiveWidth", "patterns", "patternBitmap", "patternWidth", "combinationOperator", "regionBitmap", "numberOfPatterns", "pattern0", "patternHeight", "bitsPerValue", "grayScaleBitPlanes", "mmrInput", "mg", "ng", "patternIndex", "gridOffsetX", "gridOffsetY", "regionRow", "patternRow", "regionY", "regionX", "segmentHeader", "readUint32", "segmentType", "pageAssociationFieldSize", "referredFlags", "referredToCount", "retainBits", "referredToSegmentNumberSize", "referredTo", "readUint16", "genericRegionInfo", "readRegionSegmentInformation", "genericRegionSegmentFlags", "genericRegionMmr", "searchPatternLength", "searchPattern", "segments", "readSegmentHeader", "segment", "header", "height", "RegionSegmentInformationFieldLength", "dictionary", "dictionaryFlags", "atLength", "readInt8", "textRegion", "textRegionSegmentFlags", "textRegionHuffmanFlags", "patternDictionary", "patternDictionaryFlags", "halftoneRegion", "halftoneRegionFlags", "genericRegion", "pageInfo", "resolutionX", "resolutionY", "pageSegmentFlags", "callbackName", "visitor", "processSegment", "readSegments", "processSegments", "bitPacked", "imgData", "mask", "SimpleSegmentVisitor", "onPageInformation", "rowSize", "drawBitmap", "regionInfo", "mask0", "offset0", "onImmediateGenericRegion", "region", "onImmediateLosslessGenericRegion", "onSymbolDictionary", "getSymbolDictionaryHuffmanTables", "referredSegments", "referredSymbols", "decodeSymbolDictionary", "onImmediateTextRegion", "getTextRegionHuffmanTables", "onImmediateLosslessTextRegion", "onPatternDictionary", "decodePatternDictionary", "onImmediateHalftoneRegion", "decodeHalftoneRegion", "onImmediateLosslessHalftoneRegion", "onTables", "customTables", "decodeTablesSegment", "lineData", "line", "HuffmanTreeNode", "buildTree", "decodeNode", "htOffset", "reader", "lines", "HuffmanTable", "decode", "assignPrefixCodes", "linesLength", "prefixLengthMax", "histogram", "currentLength", "firstCode", "currentCode", "currentTemp", "lowestValue", "highestValue", "prefixSizeBits", "rangeSizeBits", "currentRangeLow", "prefixLength", "rangeLength", "standardTablesCache", "Reader", "readBit", "numBits", "byteAlign", "runCodesTable", "numberOfRepeats", "repeatedLength", "symbolIDTable", "customIndex", "tableFirstS", "getCustomHuffmanTable", "tableDeltaS", "tableDeltaT", "tableDeltaHeight", "tableDeltaWidth", "tableBitmapSize", "tableAggregateInstances", "eof", "currentByte", "endOfBlock", "lookForEOFLimit", "parseChunks", "parseJbig2Chunks", "parseJbig2", "QeTable", "qe", "nmps", "nlps", "switchFlag", "byteIn", "bp", "cx_index", "cx_mps", "qeTableIcx", "qeIcx", "JpegStream", "jpegOptions", "decodeTransform", "colorTransform", "decodeArr", "bitsPerComponent", "decodeArrLength", "transformNeeded", "maxValue", "jpegImage", "forceRGB", "isSourcePDF", "JpegImage", "dctZigZag", "dctCos1", "dctSin1", "dctCos3", "dctSin3", "dctCos6", "dctSin6", "dctSqrt2", "dctSqrt1d2", "children", "parseDNLMarker", "mcusPerLine", "frame", "progressive", "startOffset", "bitsData", "bitsCount", "nextByte", "scanLines", "maybeScanLines", "blockRow", "receive", "component", "decodeHuffman", "diff", "receiveAndExtend", "rs", "z", "blockOffset", "eobrun", "successiveACState", "offsetZ", "successiveACNextValue", "mcu", "mcuRow", "mcuCol", "blockCol", "getBlockBufferOffset", "componentsLength", "components", "spectralStart", "decodeFn", "successivePrev", "mcuExpected", "mcuToRead", "resetInterval", "decodeBlock", "h", "decodeMcu", "fileMarker", "findNextFileMarker", "partialMsg", "qt", "blockData", "p0", "blockBufferOffset", "p5", "p6", "p7", "v0", "v3", "v4", "v7", "v5", "v6", "col", "blocksPerLine", "blocksPerColumn", "computationBuffer", "quantizeAndInverse", "maxPos", "newPos", "currentPos", "currentMarker", "invalid", "marker", "newMarker", "dnlScanLines", "mcusPerColumn", "blocksPerLineForMcu", "blocksPerColumnForMcu", "blocksBufferSize", "jfif", "adobe", "numSOSMarkers", "quantizationTables", "huffmanTablesAC", "huffmanTablesDC", "appData", "readDataBlock", "major", "minor", "densityUnits", "xDensity", "yDensity", "thumbWidth", "thumbHeight", "thumbData", "flags0", "flags1", "transformCode", "quantizationTablesLength", "quantizationTablesEnd", "quantizationTableSpec", "tableData", "sofScanLines", "componentsCount", "maxH", "maxV", "componentId", "qId", "quantizationId", "quantizationTable", "prepareComponents", "huffmanLength", "huffmanTableSpec", "codeLengthSum", "huffmanValues", "buildHuffmanTable", "selectorsCount", "componentIndex", "tableSpec", "spectralEnd", "successiveApproximation", "decodeScan", "nextFileMarker", "output", "buildComponentData", "scaleX", "scaleY", "_getLinearizedBlockData", "numComponents", "xScaleBlockOffset", "mask3LSB", "componentScaleX", "componentScaleY", "blocksPerScanline", "lastComponentScaleX", "_convertYccToRgb", "Y", "Cb", "Cr", "_convertYcckToRgb", "_convertYcckToCmyk", "_convertCmykToRgb", "getData", "rgbData", "grayColor", "JpxStream", "jpxImage", "tileCount", "tileComponents", "tileWidth", "tileHeight", "tileLeft", "tileTop", "src", "srcPosition", "dataPosition", "imgRowSize", "tileRowSize", "JpxImage", "SubbandsGainLog2", "LL", "LH", "HL", "HH", "head", "headerSize", "lbox", "tbox", "jumpDataLength", "method", "colorspace", "headerType", "parseImageProperties", "newByte", "oldByte", "Xsiz", "Ysiz", "XOsiz", "YOsiz", "Csiz", "parseCodestream", "context", "doNotRecover", "siz", "precision", "isSigned", "XRsiz", "YRsiz", "calculateComponentDimensions", "calculateTileGrids", "qcd", "sqcd", "spqcdSize", "scalarExpounded", "spqcds", "spqcd", "qcc", "cqcc", "cod", "scod", "blockStyle", "precinctsSizes", "precinctsSize", "PPx", "PPy", "unsupported", "tile", "initializeTile", "buildPackets", "parseTilePackets", "transformComponents", "tiles", "numXtiles", "numYtiles", "tileComponent", "codOrCoc", "precinctWidth", "dimensions", "precinctHeight", "isZeroRes", "resolution", "precinctWidthInSubband", "precinctHeightInSubband", "numprecinctswide", "numprecinctshigh", "numprecincts", "xcb_", "ycb_", "codeblockWidth", "codeblockHeight", "cbx0", "subband", "cby0", "cbx1", "cby1", "precinctParameters", "codeblocks", "precincts", "codeblock", "cbx", "cby", "tbx0", "tby0", "tbx1", "tby1", "pi", "pj", "precinctNumber", "precinct", "cbxMin", "cbyMin", "cbxMax", "cbyMax", "numcodeblockwide", "numcodeblockhigh", "precinctCodeblocks", "subbands", "tileIndex", "layersCount", "maxDecompositionLevelsCount", "packet", "createPacket", "maxNumPrecinctsInLevel", "maxNumPrecincts", "resolutions", "getPrecinctSizesInImageScale", "precinctsIterationSizes", "px", "py", "decompositionLevelsCount", "sizeInImageScale", "getPrecinctIndexIfExist", "posX", "pxIndex", "precinctIterationSizes", "posY", "pyIndex", "startPrecinctRowIndex", "minWidth", "minHeight", "maxNumWide", "maxNumHigh", "sizePerComponent", "sizePerResolution", "minWidthCurrentComponent", "minHeightCurrentComponent", "maxNumWideCurrentComponent", "maxNumHighCurrentComponent", "scale", "widthCurrentResolution", "heightCurrentResolution", "blocksDimensions", "getBlocksDimensions", "buildPrecincts", "buildCodeblocks", "bscale", "resolutionSubbands", "progressionOrder", "bufferSize", "skipNextBit", "skipBytes", "sopMarkerUsed", "ephMarkerUsed", "packetsIterator", "alignToByte", "skipMarkerIfEqual", "layerNumber", "codeblockColumn", "codeblockRow", "codeblockIncluded", "firstTimeInclusion", "inclusionTree", "zeroBitPlanesTree", "valueReady", "codingpasses", "readCodingpasses", "codingpassesLog2", "codedDataLength", "packetItem", "x0", "y0", "right", "bottom", "blockWidth", "blockHeight", "bitModel", "currentCodingpassType", "totalLength", "dataItem", "encodedData", "magnitude", "bitsDecoded", "magnitudeCorrection", "reversible", "interleave", "levelOffset", "nb", "coefficients", "mb", "codingStyleParameters", "quantizationParameters", "guardBits", "segmentationSymbolUsed", "subbandCoefficients", "mu", "epsilon", "gainLog2", "delta", "copyCoefficients", "top", "resultImages", "transformedTiles", "transformTile", "tile0", "out", "fourComponents", "y0items", "y1items", "y2items", "y3items", "component0", "alpha01", "y1", "y2", "g", "qcdOrQcc", "TagTree", "levelsLength", "level", "currentLevel", "incrementValue", "nextLevel", "InclusionTree", "stopValue", "propagateValues", "levelIndex", "currentValue", "BitModel", "UNIFORM_CONTEXT", "RUNLENGTH_CONTEXT", "LLAndLHContextsLabel", "HLContextLabel", "HHContextLabel", "contextLabelTable", "coefficientCount", "coefficentsMagnitude", "zeroBitPlanes", "setDecoder", "setNeighborsSignificance", "neighborsSignificance", "column", "runSignificancePropagationPass", "coefficentsSign", "processingFlags", "labels", "processedInverseMask", "processedMask", "firstMagnitudeBitMask", "i1", "decision", "decodeSignBit", "significance1", "sign1", "sign0", "contribution", "horizontalContribution", "decoded", "runMagnitudeRefinementPass", "width4", "index0", "indexNext", "significance", "runCleanupPass", "oneRowDown", "twoRowsDown", "threeRowsDown", "iNext", "indexBase", "checkAllEmpty", "allEmpty", "hasSignificantCoefficent", "i2", "checkSegmentationSymbol", "Transform", "ll", "j1", "j2", "llWidth", "llHeight", "llItems", "hl_lh_hh", "bufferPadding", "rowBuffer", "numBuffers", "colBuffers", "currentBuffer", "u", "IrreversibleTransform", "alpha", "beta", "gamma", "K_", "current", "ReversibleTransform", "ARCFourCipher", "keyLength", "encryptBlock", "tmp2", "h0", "h1", "h2", "h3", "paddedLength", "padded", "w", "f", "rotateArg", "Word64", "highInteger", "lowInteger", "and", "word", "xor", "or", "shiftRight", "places", "shiftLeft", "rotateRight", "high", "low", "not", "add", "lowAdd", "highAdd", "copyTo", "assign", "calculateSHA256", "rotr", "h4", "h5", "h6", "h7", "littleSigmaPrime", "littleSigma", "t1", "sigmaPrime", "sigma", "maj", "calculateSHA512", "mode384", "tmp1", "tmp3", "calculateSHA384", "NullCipher", "decryptBlock", "_expandKey", "_decrypt", "s0", "s1", "s3", "_encrypt", "_decryptBlock2", "sourceLength", "iv", "plain", "outputLength", "lastBlock", "psLen", "cipher", "rcon", "t3", "t4", "PDF17", "array1", "array2", "checkOwnerPassword", "hashData", "ownerValidationSalt", "compareByteArrays", "checkUserPassword", "getOwnerKey", "ownerKeySalt", "getUserKey", "PDF20", "arrayLength", "userBytes", "k1", "concatArrays", "remainder", "calculatePDF20Hash", "CipherTransform", "createStream", "decryptString", "CipherTransformFactory", "defaultPasswordBytes", "passwordLength", "revision", "pdfAlgorithm", "hashDataSize", "ownerPassword", "keyLengthInBytes", "encryptionKey", "checkData", "derivedKey", "userPassword", "identityName", "algorithm", "cfDict", "streamCryptoName", "handlerDict", "encryptMetadata", "fileIdBytes", "utf8StringToString", "passwordBytes", "prepareKeyData", "uBytes", "userValidationSalt", "userKeySalt", "ownerEncryption", "userEncryption", "perms", "createEncryptionKey20", "decodedPassword", "decodeUserPassword", "cf", "cryptFilter", "cfm", "buildObjectKey", "createCipherTransform", "buildCipherConstructor", "cipherConstructor", "COMPONENTS", "xRatio", "w1", "yRatio", "newIndex", "xScaled", "w1Scanline", "oldIndex", "getRgb", "rgb", "getRgbItem", "getRgbBuffer", "getOutputLength", "isPassthrough", "isDefaultDecode", "fillRgb", "originalWidth", "numComponentColors", "needsResizing", "originalHeight", "allColors", "bpc", "colorMap", "destPos", "comps", "rgbPos", "resizeRgbImage", "IR", "whitePoint", "blackPoint", "matrix", "basePatternCS", "baseIndexedCS", "hiVal", "numComps", "alt", "tintFn", "res", "cs", "colorSpaces", "resCS", "mode", "altIR", "altCS", "tmpBuf", "baseNumComps", "usesZeroToOneRange", "baseBuf", "scaled", "tinted", "srcOffset", "inputLength", "outputDelta", "lookupPos", "destOffset", "decodeMap", "DeviceCmykCS", "convertToRgb", "CalGrayCS", "A", "AG", "L", "CalRGBCS", "BRADFORD_SCALE_MATRIX", "BRADFORD_SCALE_INVERSE_MATRIX", "SRGB_D65_XYZ_TO_RGB_MATRIX", "FLAT_WHITEPOINT_MATRIX", "tempNormalizeMatrix", "tempConvertMatrix1", "tempConvertMatrix2", "DECODE_L_CONSTANT", "LMS", "sourceWhitePoint", "D65X", "D65Y", "D65Z", "adjustToRange", "decodeL", "sourceBlackPoint", "XYZ_Flat", "zeroDecodeL", "X_DST", "X_SRC", "Y_DST", "Y_SRC", "Z_DST", "Z_SRC", "X_Scale", "X_Offset", "Y_Scale", "Y_Offset", "Z_Scale", "Z_Offset", "XYZ_In", "matrixProduct", "LMS_Flat", "convertToFlat", "LMS_D65", "convertToD65", "B", "C", "AGR", "BGG", "CGB", "X", "Z", "XYZ", "normalizeWhitePointToFlat", "XYZ_Black", "compensateBlackPoint", "XYZ_D65", "normalizeWhitePointToD65", "SRGB", "sRGBTransferFunction", "XW", "YW", "ZW", "XB", "YB", "ZB", "LabCS", "low2", "Ls", "as", "bs", "maxVal", "M", "N", "fn_g", "getByName", "getByRef", "shouldCache", "pageIndexSet", "GlobalImageCache", "addPageIndex", "setData", "onlyData", "parameters", "fieldType", "quadPoints", "quadPointsLists", "annotationFlags", "borderStyle", "contents", "hasAppearance", "modificationDate", "_hasFlag", "_isViewable", "_isPrintable", "setContents", "setModificationDate", "setFlags", "hasFlag", "setRectangle", "setColor", "setBorderStyle", "dictType", "setAppearance", "appearanceStates", "normalAppearanceState", "appearanceDict", "bbox", "getTransformMatrix", "setWidth", "maxHeight", "setStyle", "setDashArray", "dashArray", "allZeros", "validNumber", "setHorizontalCornerRadius", "setVerticalCornerRadius", "rawIRT", "rt", "setCreationDate", "_constructFieldName", "fieldName", "loopDict", "hasFieldFlag", "alignment", "maximumLength", "renderForms", "_processCheckBox", "customAppearance", "exportValueOptionsDict", "exportValues", "hasCorrectOptionCount", "_processRadioButton", "fieldParent", "fieldParentValue", "_processPushButton", "option", "isOptionArray", "exportValue", "displayValue", "DEFAULT_ICON_SIZE", "getQuadPoints", "parentItem", "parentSubtype", "rawParent", "parentFlags", "rawVertices", "originalInkLists", "file", "QueueOptimizer", "pattern", "iFirstPIMXO", "iFirstSave", "arg", "argsArray", "imageMask", "fnArray", "InitialState", "addState", "MIN_IMAGES_IN_INLINE_IMAGES_BLOCK", "MAX_IMAGES_IN_INLINE_IMAGES_BLOCK", "MAX_WIDTH", "IMAGE_PADDING", "curr", "iFirstTransform", "iFirstPIIXO", "map", "maxLineHeight", "currentX", "currentY", "img", "imgWidth", "imgHeight", "dataOffset", "kind", "MIN_IMAGES_IN_MASKS_BLOCK", "MAX_IMAGES_IN_MASKS_BLOCK", "MAX_SAME_IMAGES_IN_MASKS_BLOCK", "handlePaintSolidColorImageMask", "isSameImage", "firstPIMXOArg0", "firstTransformArg0", "firstTransformArg3", "iTransform", "iPIMXO", "transformArgs", "positions", "images", "maskParams", "iFirstPIXO", "firstPIXOArg0", "MIN_IMAGES_IN_BLOCK", "MAX_IMAGES_IN_BLOCK", "iFirstSetFont", "firstSetFontArg0", "firstSetFontArg1", "MIN_CHARS_IN_BLOCK", "MAX_CHARS_IN_BLOCK", "iFirstBeginText", "iFirstSetTextMatrix", "iFirstShowText", "iFirstEndText", "iFirst", "iEndText", "iCurr", "_optimize", "match", "iterate", "push", "flush", "NullOptimizer", "OperatorList", "CHUNK_SIZE", "CHUNK_SIZE_ABOUT", "streamSink", "addOp", "fn", "addDependency", "addDependencies", "addOpList", "getIR", "transfers", "PartialEvaluator", "DefaultPartialEvaluatorOptions", "readableStream", "pump", "TIME_SLOT_DURATION_MS", "CHECK_TIME_EVERY", "TimeSlotManager", "parsingArray", "maybeBM", "normalizeBlendMode", "deferred", "TILING_PATTERN", "SHADING_PATTERN", "clone", "newOptions", "newEvaluator", "hasBlendModes", "nodes", "graphicStates", "graphicStatesKeys", "graphicState", "bm", "xObjects", "xObjectsKeys", "xObject", "xResources", "xobj", "group", "groupOptions", "isolated", "knockout", "groupSubtype", "colorSpace", "isInline", "image", "imageRef", "bitStrideLength", "imgArray", "imageIsFromDecodeStream", "inverseDecode", "localImageCache", "softMask", "SMALL_IMAGE_DIMENSIONS", "imageObj", "cacheGlobally", "imgPromise", "handleSMask", "smaskContent", "smaskOptions", "backdrop", "transferObj", "isPDFFunction", "transferFn", "transferMap", "stateManager", "handleTilingType", "tilingOpList", "resourcesArray", "patternDict", "patternResources", "handleSetFont", "fontArgs", "fontName", "translated", "loadedName", "extraProperties", "handleText", "glyphs", "isAddToPathSet", "ensureStateFont", "gStateObj", "gStateKeys", "gState", "loadFont", "errorFont", "fontRef", "fontRes", "fontCapability", "preEvaluatedFont", "fontRefIsRef", "fontID", "descriptor", "fontAliases", "aliasFontRef", "Font", "translatedPromise", "xrefFontStats", "fontFile3", "fontType", "getFontType", "buildPath", "parsingText", "lastIndex", "opArgs", "parseColorSpace", "patternName", "typeNum", "shading", "Pattern", "initialState", "self", "xobjs", "preprocessor", "timeSlotManager", "promiseBody", "operation", "localImage", "resolveXObject", "globalImage", "fontSize", "combinedGlyphs", "arrLength", "arrItem", "shadingRes", "patternIR", "dictName", "extGState", "closePendingRestoreOPS", "getTextContent", "seenStyles", "WhitespaceRegexp", "textContent", "styles", "textContentItem", "initialized", "vertical", "lastAdvanceWidth", "lastAdvanceHeight", "textAdvanceScale", "spaceWidth", "fakeSpaceMin", "fakeMultiSpaceMin", "fakeMultiSpaceMax", "textRunBreakAllowed", "SPACE_FACTOR", "MULTI_SPACE_FACTOR", "MULTI_SPACE_FACTOR_MAX", "emptyXObjectCache", "textState", "fontFamily", "ascent", "descent", "tsm", "glyphHeight", "trm", "scaleLineX", "scaleCtmX", "textChunk", "bidiResult", "bidi", "replaceWhitespace", "dir", "ensureTextContentItem", "glyph", "glyphWidth", "glyphUnicode", "NormalizedUnicodes", "reverseIfRtl", "charSpacing", "wordSpacing", "addFakeSpaces", "tx", "ty", "w0", "fakeSpaces", "runBidiTransform", "enqueueChunk", "fontNameArg", "fontSizeArg", "flushTextContentItem", "isSameTextLine", "advance", "buildTextContentItem", "breakTextRun", "currentState", "xObjStateManager", "sinkWrapper", "enqueueInvoked", "enqueue", "gStateFont", "stop", "extractDataStructures", "toUnicode", "baseDict", "toUnicodePromise", "properties", "cidSystemInfo", "registry", "ordering", "supplement", "cidToGidMap", "cidToGidBytes", "differences", "baseEncodingName", "encoding", "diffEncoding", "getEncoding", "isSymbolicFont", "FontFlags", "isNonsymbolicFont", "readToUnicode", "builtToUnicode", "_buildSimpleFontToUnicode", "forceGlyphs", "glyphName", "glyphsUnicodeMap", "codeStr", "unicode", "getUnicodeForGlyph", "baseEncoding", "buildToUnicode", "ucs2CMapName", "fetchBuiltInCMap", "useCMap", "cMap", "cid", "ucs2", "ucs2CMap", "cmapObj", "cmap", "w2", "readCidToGidMap", "glyphsData", "glyphID", "extractWidths", "glyphsWidths", "defaultWidth", "glyphsVMetrics", "widths", "vmetrics", "defaultVMetrics", "vmetric", "firstChar", "parseFloat", "baseFontName", "metrics", "isMonospace", "firstWidth", "isSerifFont", "fontNameWoStyle", "getBaseFontMetrics", "monospace", "stdFontMap", "lookupName", "Metrics", "glyphWidths", "buildCharCodeToWidth", "charCode", "widthsByGlyphName", "preEvaluateFont", "composite", "df", "diffLength", "diffBuf", "diffEntry", "lastChar", "uint8array", "translateFont", "maxCharIndex", "newProperties", "baseFont", "fontNameStr", "baseFontStr", "fontFile", "length1", "length2", "length3", "fixedPitch", "fontMatrix", "xHeight", "capHeight", "italicAngle", "isType3Font", "cidEncoding", "cMapPromise", "accent", "send", "fallback", "loadType3Data", "type3Options", "evaluator", "type3Evaluator", "loadCharProcsPromise", "charProcs", "fontResources", "charProcKeys", "charProcOperatorList", "glyphStream", "parentOperatorList", "dummyOperatorList", "StateManager", "old", "TextState", "setTextLineMatrix", "translateTextMatrix", "translateTextLineMatrix", "calcTextLineMatrixAdvance", "txDiff", "tyDiff", "denominator", "calcRenderMatrix", "carriageReturn", "EvalState", "EvaluatorPreprocessor", "getOPMap", "numArgs", "variableArgs", "MAX_INVALID_PATH_OPS", "read", "cmd", "opSpec", "argsLength", "nonProcessedArgs", "preprocessCommand", "BUILT_IN_CMAPS", "MAX_MAP_RANGE", "builtInCMap", "addCodespaceRange", "mapCidRange", "dstLow", "mapBfRange", "mapBfRangeToArray", "mapOne", "contains", "charCodeOf", "getMap", "readCharCode", "codespaceRanges", "nn", "codespaceRange", "BinaryCMapReader", "MAX_NUM_SIZE", "MAX_ENCODED_NUM_SIZE", "BinaryCMapStream", "readByte", "readNumber", "readSigned", "readHex", "readHexNumber", "stack", "sp", "readHexSigned", "readString", "char", "sequence", "dataSize", "ucs2DataSize", "subitemsCount", "addHex", "hexToInt", "incHex", "hexToStr", "extend", "CMapFactory", "expectString", "strToInt", "dst", "expectInt", "parseWMode", "parseCMapName", "previous", "embeddedUseCMap", "parseCodespaceRange", "parseBfChar", "parseCidChar", "parseBfRange", "parseCidRange", "extendCMap", "useCodespaceRanges", "cMapData", "compressionType", "parseCMap", "createBuiltInCMap", "parsedCMap", "PRIVATE_USE_AREAS", "PDF_GLYPH_SPACE_UNITS", "SEAC_ANALYSIS_ENABLED", "EXPORT_DATA_PROPERTIES", "EXPORT_DATA_EXTRA_PROPERTIES", "FixedPitch", "Serif", "Symbolic", "Script", "Nonsymbolic", "Italic", "AllCap", "SmallCap", "ForceBold", "MacStandardGlyphOrdering", "builtInEncoding", "Glyph", "ToUnicodeMap", "amend", "IdentityToUnicodeMap", "OpenTypeFileBuilder", "maxPower2", "searchRange", "rangeShift", "entrySize", "OTF_HEADER_SIZE", "OTF_TABLE_ENTRY_SIZE", "toArray", "sfnt", "tables", "tablesNames", "numTables", "tableOffsets", "writeData", "string32", "writeInt16", "searchParams", "tableName", "checksum", "quad", "writeInt32", "addTable", "tag", "fallbackName", "getFontFileType", "cff", "adjustWidths", "ID", "isTrueTypeFile", "isTrueTypeCollectionFile", "fileType", "isOpenTypeFile", "isType1File", "isCFFFile", "fileSubtype", "toFontChar", "newMap", "privateUseAreaIndex", "nextAvailableFontCharCode", "privateUseOffetEnd", "originalCharCode", "glyphId", "charCodeToGlyphId", "hasGlyph", "fontCharCode", "codeIndices", "getRanges", "string16", "bmpLength", "trailingRangesCount", "segCount", "startCount", "endCount", "idDeltas", "idRangeOffsets", "glyphsIds", "bias", "contiguous", "startCode", "format314", "format31012", "header31012", "os2", "selection", "usWinAscent", "override", "unitsPerEm", "yMax", "yMin", "ulUnicodeRange1", "ulUnicodeRange2", "ulUnicodeRange3", "ulUnicodeRange4", "firstCharIndex", "lastCharIndex", "getUnicodeRangeFor", "typoAscent", "typoDescent", "winAscent", "winDescent", "angle", "proto", "strings", "stringsUnicode", "strBufUnicode", "platforms", "encodings", "languages", "namesRecordCount", "nameTable", "strOffset", "strs", "nameRecord", "mimetype", "renderer", "FontRendererFactory", "exportData", "exportDataProperties", "fallbackToSystemFont", "nonStdFontMap", "isStandardFont", "GlyphMapForStandardFonts", "SupplementalGlyphMapForArialBlack", "SupplementalGlyphMapForCalibri", "isIdentityUnicode", "buildToFontChar", "unicodeCharCode", "checkAndRepair", "VALID_TABLES", "readTableEntry", "previousPosition", "ttf", "entrySelector", "ttcTag", "ttc", "majorVersion", "minorVersion", "numFonts", "offsetTable", "readTrueTypeCollectionHeader", "potentialHeader", "readOpenTypeHeader", "potentialTables", "readTables", "readNameTable", "nameEntry", "platformId", "encodingId", "mappings", "hasShortCmap", "canBreak", "useTable", "potentialTable", "format", "segIndex", "offsetsCount", "rangeOffset", "offsetIndex", "offsets", "entryCount", "numGlyphs", "dupFirstEntry", "numOfMetrics", "numOfSidebearings", "numMissing", "hintsValid", "glyphProfile", "sizeOfInstructions", "sourceEnd", "glyf", "contoursCount", "signedInt16", "writeSignedInt16", "flagsCount", "endPoint", "instructionsStart", "instructionsLength", "instructionsEnd", "coordinatesLength", "flag", "xLength", "yLength", "xyLength", "repeat", "glyphDataLength", "destStart", "int32", "indexToLocFormat", "int16", "numGlyphsPlusOne", "locaLength", "isGlyphLocationsLong", "maxSizeOfInstructions", "itemSize", "itemDecode", "itemEncode", "numGlyphsOut", "locaDataSize", "locaData", "loca", "oldGlyfData", "oldGlyfDataLength", "newGlyfData", "writeOffset", "missingGlyphs", "sanitizeGlyph", "simpleGlyph", "firstEntryLength", "post", "valid", "glyphNames", "glyphNameIndexes", "customNames", "stringLength", "propertiesObj", "FORMAT_0_HEADER_LENGTH", "numRecords", "stringsStart", "records", "NAME_RECORD_LENGTH", "platform", "language", "record", "nameIndex", "TTOpsStackDeltas", "lastEndf", "lastDeff", "callstack", "functionsCalled", "tooComplexToFollowFunctions", "ttContext", "inFDEF", "ifLevel", "inELSE", "op", "funcId", "newStackLength", "stackTop", "stackDelta", "foldTTTable", "maxFunctionDefs", "functionsDefined", "functionsUsed", "functionsStackDeltas", "sanitizeTTProgram", "checkInvalidFunctions", "cvt", "cvtData", "ttcData", "readTrueTypeCollectionData", "isTrueType", "isComposite", "cffFile", "maxZones", "sanitizeTTPrograms", "sanitizeMetrics", "sanitizeHead", "glyphsInfo", "sanitizeGlyphLocations", "metricsOverride", "readPostScriptTable", "createPostTable", "isCidToGidMapEmpty", "cmapTable", "readCmapTable", "cmapPlatformId", "cmapEncodingId", "cmapMappings", "cmapMappingsLength", "StandardEncoding", "standardGlyphName", "recoverGlyphName", "unicodeOrCharCode", "MacRomanEncoding", "glyphZeroId", "newMapping", "adjustMapping", "createCmapTable", "validateOS2Table", "createOS2Table", "compiler", "createNameTable", "namePrototype", "builder", "convert", "adjustToUnicode", "mapping", "charCodes", "seacs", "charset", "seacMap", "seac", "baseGlyphName", "accentGlyphName", "baseGlyphId", "accentGlyphId", "accentOffset", "getCharCodes", "baseFontCharCode", "createCharCode", "accentFontCharCode", "safeString16", "charstrings", "cffWidths", "hmtx", "charstring", "possibleSpaceReplacements", "charcode", "charToGlyph", "widthCode", "isInFont", "mapSpecialUnicodeValues", "operatorListId", "fontChar", "charsToGlyphs", "charsCache", "charsCacheKey", "chars", "isSpace", "ErrorFont", "error", "Type1Font", "streamBytesLength", "streamBytes", "EEXEC_SIGNATURE", "streamStartPos", "headerBytes", "headerBytesLength", "findBlock", "suggestedLength", "eexecBytes", "PFB_HEADER_SIZE", "headerBlockLength", "eexecBlockLength", "pfbHeader", "pfbHeaderPresent", "headerBlock", "getHeaderBlock", "headerBlockParser", "eexecBlock", "getEexecBlock", "eexecBlockParser", "type2Charstrings", "subrs", "getCharset", "getGlyphMapping", "charstringsLen", "type1FontGlyphMapping", "hasGlyphId", "getSeacs", "getType2Charstrings", "type1Charstrings", "getType2Subrs", "type1Subrs", "type2Subrs", "wrap", "topDict", "charsetArray", "CFFStandardStrings", "charStringsIndex", "privateDict", "field", "subrIndex", "CFFFont", "charsets", "MAX_SUBR_NESTING", "NUM_STANDARD_CFF_STRINGS", "CFFParser", "CharstringValidationData", "min", "stackClearing", "stem", "resetStack", "undefStack", "CharstringValidationData12", "stackFn", "topDictIndex", "stringIndex", "globalSubrIndex", "topDictParsed", "charStringOffset", "charStringIndex", "fontBBox", "fdArrayIndex", "dictRaw", "fontDict", "charStringsAndSeacs", "charStrings", "localSubrIndex", "fdSelect", "fdArray", "parseHeader", "hdrSize", "offSize", "parseDict", "parseFloatOperand", "operands", "parseOperand", "parseIndex", "cffIndex", "offsetSize", "offsetStart", "offsetEnd", "parseNameIndex", "parseStringIndex", "createDict", "cffDict", "pair", "parseCharString", "stackSize", "validationCommand", "subrsIndex", "subrNumber", "parseCharStrings", "callDepth", "firstStackClearing", "hasVStems", "localSubrToUse", "privateDictToUse", "fdIndex", "nominalWidth", "emptyPrivateDictionary", "parentDict", "parsePrivateDict", "privateOffset", "privateDictEnd", "dictData", "subrsOffset", "relativeOffset", "parseCharsets", "CFFCharsetPredefinedTypes", "raw", "parseEncoding", "predefined", "supplementsCount", "sid", "dataStart", "glyphsCount", "rangesCount", "gid", "dataEnd", "readSupplement", "parseFDSelect", "CFF", "duplicateFirstGlyph", "glyphZero", "CFFHeader", "CFFStrings", "getSID", "CFFIndex", "CFFDict", "setByKey", "valueLength", "setByName", "hasName", "removeByName", "keyToNameMap", "nameToKeyMap", "defaults", "types", "opcodes", "order", "layout", "CFFTopDict", "CFFPrivateDict", "ISO_ADOBE", "EXPERT", "EXPERT_SUBSET", "CFFCharset", "CFFEncoding", "CFFFDSelect", "getFDIndex", "glyphIndex", "CFFOffsetTracker", "isTracking", "track", "setEntryLocation", "offset1", "offset2", "offset3", "offset4", "CFFCompiler", "compile", "subDict", "compiled", "topDictTracker", "fontDictTrackers", "encodeNumber", "encodeFloat", "nibbles", "encodeInteger", "compileHeader", "compileNameIndex", "sanitizedName", "compileTopDicts", "dicts", "fontDictTracker", "fontDictData", "trackers", "compilePrivateDicts", "privateDictTracker", "privateDictData", "compileDict", "offsetTracker", "compileStringIndex", "compileGlobalSubrIndex", "compileCharStrings", "compileCharset", "numGlyphsLessNotDef", "charsetIndex", "numCharsets", "warned", "compileEncoding", "compileFDSelect", "lastFD", "currentFD", "numRanges", "compileTypedArray", "compileIndex", "objects", "lastOffset", "ISOAdobeCharset", "ExpertCharset", "ExpertSubsetCharset", "ExpertEncoding", "MacExpertEncoding", "WinAnsiEncoding", "SymbolSetEncoding", "ZapfDingbatsEncoding", "getLookupTableFactory", "require", "getGlyphsUnicode", "AE", "AEacute", "AEmacron", "AEsmall", "Aacute", "Aacutesmall", "Abreve", "Abreveacute", "Abrevecyrillic", "Abrevedotbelow", "Abrevegrave", "Abrevehookabove", "Abrevetilde", "Acaron", "Acircle", "Acircumflex", "Acircumflexacute", "Acircumflexdotbelow", "Acircumflexgrave", "Acircumflexhookabove", "Acircumflexsmall", "Acircumflextilde", "Acute", "Acutesmall", "Acyrillic", "Adblgrave", "Adieresis", "Adieresiscyrillic", "Adieresismacron", "Adieresissmall", "Adotbelow", "Adotmacron", "Agrave", "Agravesmall", "Ahookabove", "Aiecyrillic", "Ainvertedbreve", "Alpha", "Alphatonos", "Amacron", "Amonospace", "Aogonek", "Aring", "Aringacute", "Aringbelow", "Aringsmall", "Asmall", "Atilde", "Atildesmall", "Aybarmenian", "Bcircle", "Bdotaccent", "Bdotbelow", "Becyrillic", "Benarmenian", "Beta", "Bhook", "Blinebelow", "Bmonospace", "Brevesmall", "Bsmall", "Btopbar", "Caarmenian", "Cacute", "Caron", "Caronsmall", "Ccaron", "Ccedilla", "Ccedillaacute", "Ccedillasmall", "Ccircle", "Ccircumflex", "Cdot", "Cdotaccent", "Cedillasmall", "Chaarmenian", "Cheabkhasiancyrillic", "Checyrillic", "Chedescenderabkhasiancyrillic", "Chedescendercyrillic", "Chedieresiscyrillic", "Cheharmenian", "Chekhakassiancyrillic", "Cheverticalstrokecyrillic", "Chi", "Chook", "Circumflexsmall", "Cmonospace", "Coarmenian", "Csmall", "D", "DZ", "DZcaron", "Daarmenian", "Dafrican", "Dcaron", "Dcedilla", "Dcircle", "Dcircumflexbelow", "Dcroat", "Ddotaccent", "Ddotbelow", "Decyrillic", "Deicoptic", "Delta", "Deltagreek", "Dhook", "Dieresis", "DieresisAcute", "DieresisGrave", "Dieresissmall", "Digammagreek", "Djecyrillic", "Dlinebelow", "Dmonospace", "Dotaccentsmall", "Dslash", "Dsmall", "Dtopbar", "Dz", "Dzcaron", "Dzeabkhasiancyrillic", "Dzecyrillic", "Dzhecyrillic", "Eacute", "Eacutesmall", "Ebreve", "Ecaron", "Ecedillabreve", "Echarmenian", "Ecircle", "Ecircumflex", "Ecircumflexacute", "Ecircumflexbelow", "Ecircumflexdotbelow", "Ecircumflexgrave", "Ecircumflexhookabove", "Ecircumflexsmall", "Ecircumflextilde", "Ecyrillic", "Edblgrave", "Edieresis", "Edieresissmall", "Edot", "Edotaccent", "Edotbelow", "Efcyrillic", "Egrave", "Egravesmall", "Eharmenian", "Ehookabove", "Eightroman", "Einvertedbreve", "Eiotifiedcyrillic", "Elcyrillic", "Elevenroman", "Emacron", "Emacronacute", "Emacrongrave", "Emcyrillic", "Emonospace", "Encyrillic", "Endescendercyrillic", "Eng", "Enghecyrillic", "Enhookcyrillic", "Eogonek", "Eopen", "Epsilon", "Epsilontonos", "Ercyrillic", "Ereversed", "Ereversedcyrillic", "Escyrillic", "Esdescendercyrillic", "Esh", "Esmall", "Eta", "Etarmenian", "Etatonos", "Eth", "Ethsmall", "Etilde", "Etildebelow", "Euro", "Ezh", "Ezhcaron", "Ezhreversed", "F", "Fcircle", "Fdotaccent", "Feharmenian", "Feicoptic", "Fhook", "Fitacyrillic", "Fiveroman", "Fmonospace", "Fourroman", "Fsmall", "G", "GBsquare", "Gacute", "Gamma", "Gammaafrican", "Gangiacoptic", "Gbreve", "Gcaron", "Gcedilla", "Gcircle", "Gcircumflex", "Gcommaaccent", "Gdot", "Gdotaccent", "Gecyrillic", "Ghadarmenian", "Ghemiddlehookcyrillic", "Ghestrokecyrillic", "Gheupturncyrillic", "Ghook", "Gimarmenian", "Gjecyrillic", "Gmacron", "Gmonospace", "Grave", "Gravesmall", "Gsmall", "Gsmallhook", "Gstroke", "H", "H18533", "H18543", "H18551", "H22073", "HPsquare", "Haabkhasiancyrillic", "Hadescendercyrillic", "Hardsigncyrillic", "Hbar", "Hbrevebelow", "Hcedilla", "Hcircle", "Hcircumflex", "Hdieresis", "Hdotaccent", "Hdotbelow", "Hmonospace", "Hoarmenian", "Horicoptic", "Hsmall", "Hungarumlaut", "Hungarumlautsmall", "Hzsquare", "IAcyrillic", "IJ", "IUcyrillic", "Iacute", "Iacutesmall", "Ibreve", "Icaron", "Icircle", "Icircumflex", "Icircumflexsmall", "Icyrillic", "Idblgrave", "Idieresis", "Idieresisacute", "Idieresiscyrillic", "Idieresissmall", "Idot", "Idotaccent", "Idotbelow", "Iebrevecyrillic", "Iecyrillic", "Ifraktur", "Igrave", "Igravesmall", "Ihookabove", "Iicyrillic", "Iinvertedbreve", "Iishortcyrillic", "Imacron", "Imacroncyrillic", "Imonospace", "Iniarmenian", "Iocyrillic", "Iogonek", "Iota", "Iotaafrican", "Iotadieresis", "Iotatonos", "Ismall", "Istroke", "Itilde", "Itildebelow", "Izhitsacyrillic", "Izhitsadblgravecyrillic", "J", "Jaarmenian", "Jcircle", "Jcircumflex", "Jecyrillic", "Jheharmenian", "Jmonospace", "Jsmall", "KBsquare", "KKsquare", "Kabashkircyrillic", "Kacute", "Kacyrillic", "Kadescendercyrillic", "Kahookcyrillic", "Kappa", "Kastrokecyrillic", "Kaverticalstrokecyrillic", "Kcaron", "Kcedilla", "Kcircle", "Kcommaaccent", "Kdotbelow", "Keharmenian", "Kenarmenian", "Khacyrillic", "Kheicoptic", "Khook", "Kjecyrillic", "Klinebelow", "Kmonospace", "Koppacyrillic", "Koppagreek", "Ksicyrillic", "Ksmall", "LJ", "Lacute", "Lambda", "Lcaron", "Lcedilla", "Lcircle", "Lcircumflexbelow", "Lcommaaccent", "Ldot", "Ldotaccent", "Ldotbelow", "Ldotbelowmacron", "Liwnarmenian", "Lj", "Ljecyrillic", "Llinebelow", "Lmonospace", "Lslash", "Lslashsmall", "Lsmall", "MBsquare", "Macron", "Macronsmall", "Macute", "Mcircle", "Mdotaccent", "Mdotbelow", "Menarmenian", "Mmonospace", "Msmall", "Mturned", "Mu", "NJ", "Nacute", "Ncaron", "Ncedilla", "Ncircle", "Ncircumflexbelow", "Ncommaaccent", "Ndotaccent", "Ndotbelow", "Nhookleft", "Nineroman", "Nj", "Njecyrillic", "Nlinebelow", "Nmonospace", "Nowarmenian", "Nsmall", "Ntilde", "Ntildesmall", "Nu", "O", "OE", "OEsmall", "Oacute", "Oacutesmall", "Obarredcyrillic", "Obarreddieresiscyrillic", "Obreve", "Ocaron", "Ocenteredtilde", "Ocircle", "Ocircumflex", "Ocircumflexacute", "Ocircumflexdotbelow", "Ocircumflexgrave", "Ocircumflexhookabove", "Ocircumflexsmall", "Ocircumflextilde", "Ocyrillic", "Odblacute", "Odblgrave", "Odieresis", "Odieresiscyrillic", "Odieresissmall", "Odotbelow", "Ogoneksmall", "Ograve", "Ogravesmall", "Oharmenian", "Ohm", "Ohookabove", "Ohorn", "Ohornacute", "Ohorndotbelow", "Ohorngrave", "Ohornhookabove", "Ohorntilde", "Ohungarumlaut", "Oi", "Oinvertedbreve", "Omacron", "Omacronacute", "Omacrongrave", "Omega", "Omegacyrillic", "Omegagreek", "Omegaroundcyrillic", "Omegatitlocyrillic", "Omegatonos", "Omicron", "Omicrontonos", "Omonospace", "Oneroman", "Oogonek", "Oogonekmacron", "Oopen", "Oslash", "Oslashacute", "Oslashsmall", "Osmall", "Ostrokeacute", "Otcyrillic", "Otilde", "Otildeacute", "Otildedieresis", "Otildesmall", "P", "Pacute", "Pcircle", "Pdotaccent", "Pecyrillic", "Peharmenian", "Pemiddlehookcyrillic", "Phi", "Phook", "Pi", "Piwrarmenian", "Pmonospace", "Psi", "Psicyrillic", "Psmall", "Q", "Qcircle", "Qmonospace", "Qsmall", "R", "Raarmenian", "Racute", "Rcaron", "Rcedilla", "Rcircle", "Rcommaaccent", "Rdblgrave", "Rdotaccent", "Rdotbelow", "Rdotbelowmacron", "Reharmenian", "Rfraktur", "Rho", "Ringsmall", "Rinvertedbreve", "Rlinebelow", "Rmonospace", "Rsmall", "Rsmallinverted", "Rsmallinvertedsuperior", "S", "SF010000", "SF020000", "SF030000", "SF040000", "SF050000", "SF060000", "SF070000", "SF080000", "SF090000", "SF100000", "SF110000", "SF190000", "SF200000", "SF210000", "SF220000", "SF230000", "SF240000", "SF250000", "SF260000", "SF270000", "SF280000", "SF360000", "SF370000", "SF380000", "SF390000", "SF400000", "SF410000", "SF420000", "SF430000", "SF440000", "SF450000", "SF460000", "SF470000", "SF480000", "SF490000", "SF500000", "SF510000", "SF520000", "SF530000", "SF540000", "Sacute", "Sacutedotaccent", "Sampigreek", "Scaron", "Scarondotaccent", "Scaronsmall", "Scedilla", "Schwa", "Schwacyrillic", "Schwadieresiscyrillic", "Scircle", "Scircumflex", "Scommaaccent", "Sdotaccent", "Sdotbelow", "Sdotbelowdotaccent", "Seharmenian", "Sevenroman", "Shaarmenian", "Shacyrillic", "Shchacyrillic", "Sheicoptic", "Shhacyrillic", "Shimacoptic", "Sigma", "Sixroman", "Smonospace", "Softsigncyrillic", "Ssmall", "Stigmagreek", "T", "Tau", "Tbar", "Tcaron", "Tcedilla", "Tcircle", "Tcircumflexbelow", "Tcommaaccent", "Tdotaccent", "Tdotbelow", "Tecyrillic", "Tedescendercyrillic", "Tenroman", "Tetsecyrillic", "Theta", "Thook", "Thorn", "Thornsmall", "Threeroman", "Tildesmall", "Tiwnarmenian", "Tlinebelow", "Tmonospace", "Toarmenian", "Tonefive", "Tonesix", "Tonetwo", "Tretroflexhook", "Tsecyrillic", "Tshecyrillic", "Tsmall", "Twelveroman", "Tworoman", "U", "Uacute", "Uacutesmall", "Ubreve", "Ucaron", "Ucircle", "Ucircumflex", "Ucircumflexbelow", "Ucircumflexsmall", "Ucyrillic", "Udblacute", "Udblgrave", "Udieresis", "Udieresisacute", "Udieresisbelow", "Udieresiscaron", "Udieresiscyrillic", "Udieresisgrave", "Udieresismacron", "Udieresissmall", "Udotbelow", "Ugrave", "Ugravesmall", "Uhookabove", "Uhorn", "Uhornacute", "Uhorndotbelow", "Uhorngrave", "Uhornhookabove", "Uhorntilde", "Uhungarumlaut", "Uhungarumlautcyrillic", "Uinvertedbreve", "Ukcyrillic", "Umacron", "Umacroncyrillic", "Umacrondieresis", "Umonospace", "Uogonek", "Upsilon", "Upsilon1", "Upsilonacutehooksymbolgreek", "Upsilonafrican", "Upsilondieresis", "Upsilondieresishooksymbolgreek", "Upsilonhooksymbol", "Upsilontonos", "Uring", "Ushortcyrillic", "Usmall", "Ustraightcyrillic", "Ustraightstrokecyrillic", "Utilde", "Utildeacute", "Utildebelow", "V", "Vcircle", "Vdotbelow", "Vecyrillic", "Vewarmenian", "Vhook", "Vmonospace", "Voarmenian", "Vsmall", "Vtilde", "W", "Wacute", "Wcircle", "Wcircumflex", "Wdieresis", "Wdotaccent", "Wdotbelow", "Wgrave", "Wmonospace", "Wsmall", "Xcircle", "Xdieresis", "Xdotaccent", "Xeharmenian", "Xi", "Xmonospace", "Xsmall", "Yacute", "Yacutesmall", "Yatcyrillic", "Ycircle", "Ycircumflex", "Ydieresis", "Ydieresissmall", "Ydotaccent", "Ydotbelow", "Yericyrillic", "Yerudieresiscyrillic", "Ygrave", "Yhook", "Yhookabove", "Yiarmenian", "Yicyrillic", "Yiwnarmenian", "Ymonospace", "Ysmall", "Ytilde", "Yusbigcyrillic", "Yusbigiotifiedcyrillic", "Yuslittlecyrillic", "Yuslittleiotifiedcyrillic", "Zaarmenian", "Zacute", "Zcaron", "Zcaronsmall", "Zcircle", "Zcircumflex", "Zdot", "Zdotaccent", "Zdotbelow", "Zecyrillic", "Zedescendercyrillic", "Zedieresiscyrillic", "Zeta", "Zhearmenian", "Zhebrevecyrillic", "Zhecyrillic", "Zhedescendercyrillic", "Zhedieresiscyrillic", "Zlinebelow", "Zmonospace", "Zsmall", "Zstroke", "aabengali", "aacute", "aadeva", "aagujarati", "aagurmukhi", "aamatragurmukhi", "aarusquare", "aavowelsignbengali", "aavowelsigndeva", "aavowelsigngujarati", "abbreviationmarkarmenian", "abbreviationsigndeva", "abengali", "abopomofo", "abreve", "abreveacute", "abrevecyrillic", "abrevedotbelow", "abrevegrave", "abrevehookabove", "abrevetilde", "acaron", "acircle", "acircumflex", "acircumflexacute", "acircumflexdotbelow", "acircumflexgrave", "acircumflexhookabove", "acircumflextilde", "acute", "acutebelowcmb", "acutecmb", "acutecomb", "acutedeva", "acutelowmod", "acutetonecmb", "acyrillic", "adblgrave", "addakgurmukhi", "adeva", "adieresis", "adieresiscyrillic", "adieresismacron", "adotbelow", "adotmacron", "ae", "aeacute", "aekorean", "aemacron", "afii00208", "afii08941", "afii10017", "afii10018", "afii10019", "afii10020", "afii10021", "afii10022", "afii10023", "afii10024", "afii10025", "afii10026", "afii10027", "afii10028", "afii10029", "afii10030", "afii10031", "afii10032", "afii10033", "afii10034", "afii10035", "afii10036", "afii10037", "afii10038", "afii10039", "afii10040", "afii10041", "afii10042", "afii10043", "afii10044", "afii10045", "afii10046", "afii10047", "afii10048", "afii10049", "afii10050", "afii10051", "afii10052", "afii10053", "afii10054", "afii10055", "afii10056", "afii10057", "afii10058", "afii10059", "afii10060", "afii10061", "afii10062", "afii10063", "afii10064", "afii10065", "afii10066", "afii10067", "afii10068", "afii10069", "afii10070", "afii10071", "afii10072", "afii10073", "afii10074", "afii10075", "afii10076", "afii10077", "afii10078", "afii10079", "afii10080", "afii10081", "afii10082", "afii10083", "afii10084", "afii10085", "afii10086", "afii10087", "afii10088", "afii10089", "afii10090", "afii10091", "afii10092", "afii10093", "afii10094", "afii10095", "afii10096", "afii10097", "afii10098", "afii10099", "afii10100", "afii10101", "afii10102", "afii10103", "afii10104", "afii10105", "afii10106", "afii10107", "afii10108", "afii10109", "afii10110", "afii10145", "afii10146", "afii10147", "afii10148", "afii10192", "afii10193", "afii10194", "afii10195", "afii10196", "afii10831", "afii10832", "afii10846", "afii299", "afii300", "afii301", "afii57381", "afii57388", "afii57392", "afii57393", "afii57394", "afii57395", "afii57396", "afii57397", "afii57398", "afii57399", "afii57400", "afii57401", "afii57403", "afii57407", "afii57409", "afii57410", "afii57411", "afii57412", "afii57413", "afii57414", "afii57415", "afii57416", "afii57417", "afii57418", "afii57419", "afii57420", "afii57421", "afii57422", "afii57423", "afii57424", "afii57425", "afii57426", "afii57427", "afii57428", "afii57429", "afii57430", "afii57431", "afii57432", "afii57433", "afii57434", "afii57440", "afii57441", "afii57442", "afii57443", "afii57444", "afii57445", "afii57446", "afii57448", "afii57449", "afii57450", "afii57451", "afii57452", "afii57453", "afii57454", "afii57455", "afii57456", "afii57457", "afii57458", "afii57470", "afii57505", "afii57506", "afii57507", "afii57508", "afii57509", "afii57511", "afii57512", "afii57513", "afii57514", "afii57519", "afii57534", "afii57636", "afii57645", "afii57658", "afii57664", "afii57665", "afii57666", "afii57667", "afii57668", "afii57669", "afii57670", "afii57671", "afii57672", "afii57673", "afii57674", "afii57675", "afii57676", "afii57677", "afii57678", "afii57679", "afii57680", "afii57681", "afii57682", "afii57683", "afii57684", "afii57685", "afii57686", "afii57687", "afii57688", "afii57689", "afii57690", "afii57694", "afii57695", "afii57700", "afii57705", "afii57716", "afii57717", "afii57718", "afii57723", "afii57793", "afii57794", "afii57795", "afii57796", "afii57797", "afii57798", "afii57799", "afii57800", "afii57801", "afii57802", "afii57803", "afii57804", "afii57806", "afii57807", "afii57839", "afii57841", "afii57842", "afii57929", "afii61248", "afii61289", "afii61352", "afii61573", "afii61574", "afii61575", "afii61664", "afii63167", "afii64937", "agrave", "agujarati", "agurmukhi", "ahiragana", "ahookabove", "aibengali", "aibopomofo", "aideva", "aiecyrillic", "aigujarati", "aigurmukhi", "aimatragurmukhi", "ainarabic", "ainfinalarabic", "aininitialarabic", "ainmedialarabic", "ainvertedbreve", "aivowelsignbengali", "aivowelsigndeva", "aivowelsigngujarati", "akatakana", "akatakanahalfwidth", "akorean", "alef", "alefarabic", "alefdageshhebrew", "aleffinalarabic", "alefhamzaabovearabic", "alefhamzaabovefinalarabic", "alefhamzabelowarabic", "alefhamzabelowfinalarabic", "alefhebrew", "aleflamedhebrew", "alefmaddaabovearabic", "alefmaddaabovefinalarabic", "alefmaksuraarabic", "alefmaksurafinalarabic", "alefmaksurainitialarabic", "alefmaksuramedialarabic", "alefpatahhebrew", "alefqamatshebrew", "aleph", "allequal", "alphatonos", "amacron", "amonospace", "ampersand", "ampersandmonospace", "ampersandsmall", "amsquare", "anbopomofo", "angbopomofo", "angbracketleft", "angbracketright", "angkhankhuthai", "anglebracketleft", "anglebracketleftvertical", "anglebracketright", "anglebracketrightvertical", "angleleft", "angleright", "angstrom", "anoteleia", "anudattadeva", "anusvarabengali", "anusvaradeva", "anusvaragujarati", "aogonek", "apaatosquare", "aparen", "apostrophearmenian", "apostrophemod", "apple", "approaches", "approxequal", "approxequalorimage", "approximatelyequal", "araeaekorean", "araeakorean", "arc", "arighthalfring", "aring", "aringacute", "aringbelow", "arrowboth", "arrowdashdown", "arrowdashleft", "arrowdashright", "arrowdashup", "arrowdblboth", "arrowdbldown", "arrowdblleft", "arrowdblright", "arrowdblup", "arrowdown", "arrowdownleft", "arrowdownright", "arrowdownwhite", "arrowheaddownmod", "arrowheadleftmod", "arrowheadrightmod", "arrowheadupmod", "arrowhorizex", "arrowleft", "arrowleftdbl", "arrowleftdblstroke", "arrowleftoverright", "arrowleftwhite", "arrowright", "arrowrightdblstroke", "arrowrightheavy", "arrowrightoverleft", "arrowrightwhite", "arrowtableft", "arrowtabright", "arrowup", "arrowupdn", "arrowupdnbse", "arrowupdownbase", "arrowupleft", "arrowupleftofdown", "arrowupright", "arrowupwhite", "arrowvertex", "asciicircum", "asciicircummonospace", "asciitilde", "asciitildemonospace", "ascript", "ascriptturned", "asmallhiragana", "asmallkatakana", "asmallkatakanahalfwidth", "asterisk", "asteriskaltonearabic", "asteriskarabic", "asteriskmath", "asteriskmonospace", "asterisksmall", "asterism", "asuperior", "asymptoticallyequal", "atilde", "atmonospace", "atsmall", "aturned", "aubengali", "aubopomofo", "audeva", "augujarati", "augurmukhi", "aulengthmarkbengali", "aumatragurmukhi", "auvowelsignbengali", "auvowelsigndeva", "auvowelsigngujarati", "avagrahadeva", "aybarmenian", "ayin", "ayinaltonehebrew", "ayinhebrew", "babengali", "backslash", "backslashmonospace", "badeva", "bagujarati", "bagurmukhi", "bahiragana", "bahtthai", "bakatakana", "bar", "barmonospace", "bbopomofo", "bcircle", "bdotaccent", "bdotbelow", "beamedsixteenthnotes", "because", "becyrillic", "beharabic", "behfinalarabic", "behinitialarabic", "behiragana", "behmedialarabic", "behmeeminitialarabic", "behmeemisolatedarabic", "behnoonfinalarabic", "bekatakana", "benarmenian", "bet", "betasymbolgreek", "betdagesh", "betdageshhebrew", "bethebrew", "betrafehebrew", "bhabengali", "bhadeva", "bhagujarati", "bhagurmukhi", "bhook", "bihiragana", "bikatakana", "bilabialclick", "bindigurmukhi", "birusquare", "blackcircle", "blackdiamond", "blackdownpointingtriangle", "blackleftpointingpointer", "blackleftpointingtriangle", "blacklenticularbracketleft", "blacklenticularbracketleftvertical", "blacklenticularbracketright", "blacklenticularbracketrightvertical", "blacklowerlefttriangle", "blacklowerrighttriangle", "blackrectangle", "blackrightpointingpointer", "blackrightpointingtriangle", "blacksmallsquare", "blacksmilingface", "blacksquare", "blackstar", "blackupperlefttriangle", "blackupperrighttriangle", "blackuppointingsmalltriangle", "blackuppointingtriangle", "blank", "blinebelow", "bmonospace", "bobaimaithai", "bohiragana", "bokatakana", "bparen", "bqsquare", "braceex", "braceleft", "braceleftbt", "braceleftmid", "braceleftmonospace", "braceleftsmall", "bracelefttp", "braceleftvertical", "braceright", "bracerightbt", "bracerightmid", "bracerightmonospace", "bracerightsmall", "bracerighttp", "bracerightvertical", "bracketleft", "bracketleftbt", "bracketleftex", "bracketleftmonospace", "bracketlefttp", "bracketright", "bracketrightbt", "bracketrightex", "bracketrightmonospace", "bracketrighttp", "breve", "brevebelowcmb", "brevecmb", "breveinvertedbelowcmb", "breveinvertedcmb", "breveinverteddoublecmb", "bridgebelowcmb", "bridgeinvertedbelowcmb", "brokenbar", "bstroke", "bsuperior", "btopbar", "buhiragana", "bukatakana", "bullet", "bulletinverse", "bulletoperator", "bullseye", "caarmenian", "cabengali", "cacute", "cadeva", "cagujarati", "cagurmukhi", "calsquare", "candrabindubengali", "candrabinducmb", "candrabindudeva", "candrabindugujarati", "capslock", "careof", "caron", "caronbelowcmb", "caroncmb", "carriagereturn", "cbopomofo", "ccaron", "ccedilla", "ccedillaacute", "ccircle", "ccircumflex", "ccurl", "cdot", "cdotaccent", "cdsquare", "cedilla", "cedillacmb", "cent", "centigrade", "centinferior", "centmonospace", "centoldstyle", "centsuperior", "chaarmenian", "chabengali", "chadeva", "chagujarati", "chagurmukhi", "chbopomofo", "cheabkhasiancyrillic", "checkmark", "checyrillic", "chedescenderabkhasiancyrillic", "chedescendercyrillic", "chedieresiscyrillic", "cheharmenian", "chekhakassiancyrillic", "cheverticalstrokecyrillic", "chi", "chieuchacirclekorean", "chieuchaparenkorean", "chieuchcirclekorean", "chieuchkorean", "chieuchparenkorean", "chochangthai", "chochanthai", "chochingthai", "chochoethai", "chook", "cieucacirclekorean", "cieucaparenkorean", "cieuccirclekorean", "cieuckorean", "cieucparenkorean", "cieucuparenkorean", "circle", "circlecopyrt", "circlemultiply", "circleot", "circleplus", "circlepostalmark", "circlewithlefthalfblack", "circlewithrighthalfblack", "circumflex", "circumflexbelowcmb", "circumflexcmb", "clickalveolar", "clickdental", "clicklateral", "clickretroflex", "club", "clubsuitblack", "clubsuitwhite", "cmcubedsquare", "cmonospace", "cmsquaredsquare", "coarmenian", "colon", "colonmonetary", "colonmonospace", "colonsign", "colonsmall", "colontriangularhalfmod", "colontriangularmod", "comma", "commaabovecmb", "commaaboverightcmb", "commaaccent", "commaarabic", "commaarmenian", "commainferior", "commamonospace", "commareversedabovecmb", "commareversedmod", "commasmall", "commasuperior", "commaturnedabovecmb", "commaturnedmod", "compass", "congruent", "contourintegral", "control", "controlACK", "controlBEL", "controlBS", "controlCAN", "controlCR", "controlDC1", "controlDC2", "controlDC3", "controlDC4", "controlDEL", "controlDLE", "controlEM", "controlENQ", "controlEOT", "controlESC", "controlETB", "controlETX", "controlFF", "controlFS", "controlGS", "controlHT", "controlLF", "controlNAK", "controlNULL", "controlRS", "controlSI", "controlSO", "controlSOT", "controlSTX", "controlSUB", "controlSYN", "controlUS", "controlVT", "copyright", "copyrightsans", "copyrightserif", "cornerbracketleft", "cornerbracketlefthalfwidth", "cornerbracketleftvertical", "cornerbracketright", "cornerbracketrighthalfwidth", "cornerbracketrightvertical", "corporationsquare", "cosquare", "coverkgsquare", "cparen", "cruzeiro", "cstretched", "curlyand", "curlyor", "currency", "cyrBreve", "cyrFlex", "cyrbreve", "cyrflex", "daarmenian", "dabengali", "dadarabic", "dadeva", "dadfinalarabic", "dadinitialarabic", "dadmedialarabic", "dagesh", "dageshhebrew", "dagger", "daggerdbl", "dagujarati", "dagurmukhi", "dahiragana", "dakatakana", "dalarabic", "dalet", "daletdagesh", "daletdageshhebrew", "dalethebrew", "dalfinalarabic", "dammaarabic", "dammalowarabic", "dammatanaltonearabic", "dammatanarabic", "danda", "dargahebrew", "dargalefthebrew", "dasiapneumatacyrilliccmb", "dblGrave", "dblanglebracketleft", "dblanglebracketleftvertical", "dblanglebracketright", "dblanglebracketrightvertical", "dblarchinvertedbelowcmb", "dblarrowleft", "dblarrowright", "dbldanda", "dblgrave", "dblgravecmb", "dblintegral", "dbllowline", "dbllowlinecmb", "dbloverlinecmb", "dblprimemod", "dblverticalbar", "dblverticallineabovecmb", "dbopomofo", "dbsquare", "dcaron", "dcedilla", "dcircle", "dcircumflexbelow", "dcroat", "ddabengali", "ddadeva", "ddagujarati", "ddagurmukhi", "ddalarabic", "ddalfinalarabic", "dddhadeva", "ddhabengali", "ddhadeva", "ddhagujarati", "ddhagurmukhi", "ddotaccent", "ddotbelow", "decimalseparatorarabic", "decimalseparatorpersian", "decyrillic", "degree", "dehihebrew", "dehiragana", "deicoptic", "dekatakana", "deleteleft", "deleteright", "deltaturned", "denominatorminusonenumeratorbengali", "dezh", "dhabengali", "dhadeva", "dhagujarati", "dhagurmukhi", "dhook", "dialytikatonos", "dialytikatonoscmb", "diamond", "diamondsuitwhite", "dieresis", "dieresisacute", "dieresisbelowcmb", "dieresiscmb", "dieresisgrave", "dieresistonos", "dihiragana", "dikatakana", "dittomark", "divide", "divides", "divisionslash", "djecyrillic", "dkshade", "dlinebelow", "dlsquare", "dmacron", "dmonospace", "dnblock", "dochadathai", "dodekthai", "dohiragana", "dokatakana", "dollar", "dollarinferior", "dollarmonospace", "dollaroldstyle", "dollarsmall", "dollarsuperior", "dong", "dorusquare", "dotaccent", "dotaccentcmb", "dotbelowcmb", "dotbelowcomb", "dotkatakana", "dotlessi", "dotlessj", "dotlessjstrokehook", "dotmath", "dottedcircle", "doubleyodpatah", "doubleyodpatahhebrew", "downtackbelowcmb", "downtackmod", "dparen", "dsuperior", "dtail", "dtopbar", "duhiragana", "dukatakana", "dz", "dzaltone", "dzcaron", "dzcurl", "dzeabkhasiancyrillic", "dzecyrillic", "dzhecyrillic", "eacute", "earth", "ebengali", "ebopomofo", "ebreve", "ecandradeva", "ecandragujarati", "ecandravowelsigndeva", "ecandravowelsigngujarati", "ecaron", "ecedillabreve", "echarmenian", "echyiwnarmenian", "ecircle", "ecircumflex", "ecircumflexacute", "ecircumflexbelow", "ecircumflexdotbelow", "ecircumflexgrave", "ecircumflexhookabove", "ecircumflextilde", "ecyrillic", "edblgrave", "edeva", "edieresis", "edot", "edotaccent", "edotbelow", "eegurmukhi", "eematragurmukhi", "efcyrillic", "egrave", "egujarati", "eharmenian", "ehbopomofo", "ehiragana", "ehookabove", "eibopomofo", "eight", "eightarabic", "eightbengali", "eightcircle", "eightcircleinversesansserif", "eightdeva", "eighteencircle", "eighteenparen", "eighteenperiod", "eightgujarati", "eightgurmukhi", "eighthackarabic", "eighthangzhou", "eighthnotebeamed", "eightideographicparen", "eightinferior", "eightmonospace", "eightoldstyle", "eightparen", "eightperiod", "eightpersian", "eightroman", "eightsuperior", "eightthai", "einvertedbreve", "eiotifiedcyrillic", "ekatakana", "ekatakanahalfwidth", "ekonkargurmukhi", "ekorean", "elcyrillic", "elevencircle", "elevenparen", "elevenperiod", "elevenroman", "ellipsis", "ellipsisvertical", "emacron", "emacronacute", "emacrongrave", "emcyrillic", "emdash", "emdashvertical", "emonospace", "emphasismarkarmenian", "emptyset", "enbopomofo", "encyrillic", "endash", "endashvertical", "endescendercyrillic", "eng", "engbopomofo", "enghecyrillic", "enhookcyrillic", "enspace", "eogonek", "eokorean", "eopen", "eopenclosed", "eopenreversed", "eopenreversedclosed", "eopenreversedhook", "eparen", "epsilontonos", "equal", "equalmonospace", "equalsmall", "equalsuperior", "equivalence", "erbopomofo", "ercyrillic", "ereversed", "ereversedcyrillic", "escyrillic", "esdescendercyrillic", "esh", "eshcurl", "eshortdeva", "eshortvowelsigndeva", "eshreversedloop", "eshsquatreversed", "esmallhiragana", "esmallkatakana", "esmallkatakanahalfwidth", "estimated", "esuperior", "eta", "etarmenian", "etatonos", "eth", "etilde", "etildebelow", "etnahtafoukhhebrew", "etnahtafoukhlefthebrew", "etnahtahebrew", "etnahtalefthebrew", "eturned", "eukorean", "euro", "evowelsignbengali", "evowelsigndeva", "evowelsigngujarati", "exclam", "exclamarmenian", "exclamdbl", "exclamdown", "exclamdownsmall", "exclammonospace", "exclamsmall", "existential", "ezh", "ezhcaron", "ezhcurl", "ezhreversed", "ezhtail", "fadeva", "fagurmukhi", "fahrenheit", "fathaarabic", "fathalowarabic", "fathatanarabic", "fbopomofo", "fcircle", "fdotaccent", "feharabic", "feharmenian", "fehfinalarabic", "fehinitialarabic", "fehmedialarabic", "feicoptic", "female", "ff", "f_f", "ffi", "ffl", "fi", "fifteencircle", "fifteenparen", "fifteenperiod", "figuredash", "filledbox", "filledrect", "finalkaf", "finalkafdagesh", "finalkafdageshhebrew", "finalkafhebrew", "finalmem", "finalmemhebrew", "finalnun", "finalnunhebrew", "finalpe", "finalpehebrew", "finaltsadi", "finaltsadihebrew", "firsttonechinese", "fisheye", "fitacyrillic", "five", "fivearabic", "fivebengali", "fivecircle", "fivecircleinversesansserif", "fivedeva", "fiveeighths", "fivegujarati", "fivegurmukhi", "fivehackarabic", "fivehangzhou", "fiveideographicparen", "fiveinferior", "fivemonospace", "fiveoldstyle", "fiveparen", "fiveperiod", "fivepersian", "fiveroman", "fivesuperior", "fivethai", "fl", "florin", "fmonospace", "fmsquare", "fofanthai", "fofathai", "fongmanthai", "forall", "four", "fourarabic", "fourbengali", "fourcircle", "fourcircleinversesansserif", "fourdeva", "fourgujarati", "fourgurmukhi", "fourhackarabic", "fourhangzhou", "fourideographicparen", "fourinferior", "fourmonospace", "fournumeratorbengali", "fouroldstyle", "fourparen", "fourperiod", "fourpersian", "fourroman", "foursuperior", "fourteencircle", "fourteenparen", "fourteenperiod", "fourthai", "fourthtonechinese", "fparen", "fraction", "franc", "gabengali", "gacute", "gadeva", "gafarabic", "gaffinalarabic", "gafinitialarabic", "gafmedialarabic", "gagujarati", "gagurmukhi", "gahiragana", "gakatakana", "gammalatinsmall", "gammasuperior", "gangiacoptic", "gbopomofo", "gbreve", "gcaron", "gcedilla", "gcircle", "gcircumflex", "gcommaaccent", "gdot", "gdotaccent", "gecyrillic", "gehiragana", "gekatakana", "geometricallyequal", "gereshaccenthebrew", "gereshhebrew", "gereshmuqdamhebrew", "germandbls", "gershayimaccenthebrew", "gershayimhebrew", "getamark", "ghabengali", "ghadarmenian", "ghadeva", "ghagujarati", "ghagurmukhi", "ghainarabic", "ghainfinalarabic", "ghaininitialarabic", "ghainmedialarabic", "ghemiddlehookcyrillic", "ghestrokecyrillic", "gheupturncyrillic", "ghhadeva", "ghhagurmukhi", "ghook", "ghzsquare", "gihiragana", "gikatakana", "gimarmenian", "gimel", "gimeldagesh", "gimeldageshhebrew", "gimelhebrew", "gjecyrillic", "glottalinvertedstroke", "glottalstop", "glottalstopinverted", "glottalstopmod", "glottalstopreversed", "glottalstopreversedmod", "glottalstopreversedsuperior", "glottalstopstroke", "glottalstopstrokereversed", "gmacron", "gmonospace", "gohiragana", "gokatakana", "gparen", "gpasquare", "gradient", "grave", "gravebelowcmb", "gravecmb", "gravecomb", "gravedeva", "gravelowmod", "gravemonospace", "gravetonecmb", "greater", "greaterequal", "greaterequalorless", "greatermonospace", "greaterorequivalent", "greaterorless", "greateroverequal", "greatersmall", "gscript", "gstroke", "guhiragana", "guillemotleft", "guillemotright", "guilsinglleft", "guilsinglright", "gukatakana", "guramusquare", "gysquare", "haabkhasiancyrillic", "haaltonearabic", "habengali", "hadescendercyrillic", "hadeva", "hagujarati", "hagurmukhi", "haharabic", "hahfinalarabic", "hahinitialarabic", "hahiragana", "hahmedialarabic", "haitusquare", "hakatakana", "hakatakanahalfwidth", "halantgurmukhi", "hamzaarabic", "hamzalowarabic", "hangulfiller", "hardsigncyrillic", "harpoonleftbarbup", "harpoonrightbarbup", "hasquare", "hatafpatah", "hatafpatah16", "hatafpatah23", "hatafpatah2f", "hatafpatahhebrew", "hatafpatahnarrowhebrew", "hatafpatahquarterhebrew", "hatafpatahwidehebrew", "hatafqamats", "hatafqamats1b", "hatafqamats28", "hatafqamats34", "hatafqamatshebrew", "hatafqamatsnarrowhebrew", "hatafqamatsquarterhebrew", "hatafqamatswidehebrew", "hatafsegol", "hatafsegol17", "hatafsegol24", "hatafsegol30", "hatafsegolhebrew", "hatafsegolnarrowhebrew", "hatafsegolquarterhebrew", "hatafsegolwidehebrew", "hbar", "hbopomofo", "hbrevebelow", "hcedilla", "hcircle", "hcircumflex", "hdieresis", "hdotaccent", "hdotbelow", "he", "heart", "heartsuitblack", "heartsuitwhite", "hedagesh", "hedageshhebrew", "hehaltonearabic", "heharabic", "hehebrew", "hehfinalaltonearabic", "hehfinalalttwoarabic", "hehfinalarabic", "hehhamzaabovefinalarabic", "hehhamzaaboveisolatedarabic", "hehinitialaltonearabic", "hehinitialarabic", "hehiragana", "hehmedialaltonearabic", "hehmedialarabic", "heiseierasquare", "hekatakana", "hekatakanahalfwidth", "hekutaarusquare", "henghook", "herutusquare", "het", "hethebrew", "hhook", "hhooksuperior", "hieuhacirclekorean", "hieuhaparenkorean", "hieuhcirclekorean", "hieuhkorean", "hieuhparenkorean", "hihiragana", "hikatakana", "hikatakanahalfwidth", "hiriq", "hiriq14", "hiriq21", "hiriq2d", "hiriqhebrew", "hiriqnarrowhebrew", "hiriqquarterhebrew", "hiriqwidehebrew", "hlinebelow", "hmonospace", "hoarmenian", "hohipthai", "hohiragana", "hokatakana", "hokatakanahalfwidth", "holam", "holam19", "holam26", "holam32", "holamhebrew", "holamnarrowhebrew", "holamquarterhebrew", "holamwidehebrew", "honokhukthai", "hookabovecomb", "hookcmb", "hookpalatalizedbelowcmb", "hookretroflexbelowcmb", "hoonsquare", "horicoptic", "horizontalbar", "horncmb", "hotsprings", "house", "hparen", "hsuperior", "hturned", "huhiragana", "huiitosquare", "hukatakana", "hukatakanahalfwidth", "hungarumlaut", "hungarumlautcmb", "hv", "hyphen", "hypheninferior", "hyphenmonospace", "hyphensmall", "hyphensuperior", "hyphentwo", "iacute", "iacyrillic", "ibengali", "ibopomofo", "ibreve", "icaron", "icircle", "icircumflex", "icyrillic", "idblgrave", "ideographearthcircle", "ideographfirecircle", "ideographicallianceparen", "ideographiccallparen", "ideographiccentrecircle", "ideographicclose", "ideographiccomma", "ideographiccommaleft", "ideographiccongratulationparen", "ideographiccorrectcircle", "ideographicearthparen", "ideographicenterpriseparen", "ideographicexcellentcircle", "ideographicfestivalparen", "ideographicfinancialcircle", "ideographicfinancialparen", "ideographicfireparen", "ideographichaveparen", "ideographichighcircle", "ideographiciterationmark", "ideographiclaborcircle", "ideographiclaborparen", "ideographicleftcircle", "ideographiclowcircle", "ideographicmedicinecircle", "ideographicmetalparen", "ideographicmoonparen", "ideographicnameparen", "ideographicperiod", "ideographicprintcircle", "ideographicreachparen", "ideographicrepresentparen", "ideographicresourceparen", "ideographicrightcircle", "ideographicsecretcircle", "ideographicselfparen", "ideographicsocietyparen", "ideographicspace", "ideographicspecialparen", "ideographicstockparen", "ideographicstudyparen", "ideographicsunparen", "ideographicsuperviseparen", "ideographicwaterparen", "ideographicwoodparen", "ideographiczero", "ideographmetalcircle", "ideographmooncircle", "ideographnamecircle", "ideographsuncircle", "ideographwatercircle", "ideographwoodcircle", "ideva", "idieresis", "idieresisacute", "idieresiscyrillic", "idotbelow", "iebrevecyrillic", "iecyrillic", "ieungacirclekorean", "ieungaparenkorean", "ieungcirclekorean", "ieungkorean", "ieungparenkorean", "igrave", "igujarati", "igurmukhi", "ihiragana", "ihookabove", "iibengali", "iicyrillic", "iideva", "iigujarati", "iigurmukhi", "iimatragurmukhi", "iinvertedbreve", "iishortcyrillic", "iivowelsignbengali", "iivowelsigndeva", "iivowelsigngujarati", "ij", "ikatakana", "ikatakanahalfwidth", "ikorean", "ilde", "iluyhebrew", "imacron", "imacroncyrillic", "imageorapproximatelyequal", "imatragurmukhi", "imonospace", "increment", "infinity", "iniarmenian", "integral", "integralbottom", "integralbt", "integralex", "integraltop", "integraltp", "intersection", "intisquare", "invbullet", "invcircle", "invsmileface", "iocyrillic", "iogonek", "iota", "iotadieresis", "iotadieresistonos", "iotalatin", "iotatonos", "iparen", "irigurmukhi", "ismallhiragana", "ismallkatakana", "ismallkatakanahalfwidth", "issharbengali", "istroke", "isuperior", "iterationhiragana", "iterationkatakana", "itilde", "itildebelow", "iubopomofo", "iucyrillic", "ivowelsignbengali", "ivowelsigndeva", "ivowelsigngujarati", "izhitsacyrillic", "izhitsadblgravecyrillic", "jaarmenian", "jabengali", "jadeva", "jagujarati", "jagurmukhi", "jbopomofo", "jcaron", "jcircle", "jcircumflex", "jcrossedtail", "jdotlessstroke", "jecyrillic", "jeemarabic", "jeemfinalarabic", "jeeminitialarabic", "jeemmedialarabic", "jeharabic", "jehfinalarabic", "jhabengali", "jhadeva", "jhagujarati", "jhagurmukhi", "jheharmenian", "jis", "jmonospace", "jparen", "jsuperior", "kabashkircyrillic", "kabengali", "kacute", "kacyrillic", "kadescendercyrillic", "kadeva", "kaf", "kafarabic", "kafdagesh", "kafdageshhebrew", "kaffinalarabic", "kafhebrew", "kafinitialarabic", "kafmedialarabic", "kafrafehebrew", "kagujarati", "kagurmukhi", "kahiragana", "kahookcyrillic", "kakatakana", "kakatakanahalfwidth", "kappa", "kappasymbolgreek", "kapyeounmieumkorean", "kapyeounphieuphkorean", "kapyeounpieupkorean", "kapyeounssangpieupkorean", "karoriisquare", "kashidaautoarabic", "kashidaautonosidebearingarabic", "kasmallkatakana", "kasquare", "kasraarabic", "kasratanarabic", "kastrokecyrillic", "katahiraprolongmarkhalfwidth", "kaverticalstrokecyrillic", "kbopomofo", "kcalsquare", "kcaron", "kcedilla", "kcircle", "kcommaaccent", "kdotbelow", "keharmenian", "kehiragana", "kekatakana", "kekatakanahalfwidth", "kenarmenian", "kesmallkatakana", "kgreenlandic", "khabengali", "khacyrillic", "khadeva", "khagujarati", "khagurmukhi", "khaharabic", "khahfinalarabic", "khahinitialarabic", "khahmedialarabic", "kheicoptic", "khhadeva", "khhagurmukhi", "khieukhacirclekorean", "khieukhaparenkorean", "khieukhcirclekorean", "khieukhkorean", "khieukhparenkorean", "khokhaithai", "khokhonthai", "khokhuatthai", "khokhwaithai", "khomutthai", "khook", "khorakhangthai", "khzsquare", "kihiragana", "kikatakana", "kikatakanahalfwidth", "kiroguramusquare", "kiromeetorusquare", "kirosquare", "kiyeokacirclekorean", "kiyeokaparenkorean", "kiyeokcirclekorean", "kiyeokkorean", "kiyeokparenkorean", "kiyeoksioskorean", "kjecyrillic", "klinebelow", "klsquare", "kmcubedsquare", "kmonospace", "kmsquaredsquare", "kohiragana", "kohmsquare", "kokaithai", "kokatakana", "kokatakanahalfwidth", "kooposquare", "koppacyrillic", "koreanstandardsymbol", "koroniscmb", "kparen", "kpasquare", "ksicyrillic", "ktsquare", "kturned", "kuhiragana", "kukatakana", "kukatakanahalfwidth", "kvsquare", "kwsquare", "labengali", "lacute", "ladeva", "lagujarati", "lagurmukhi", "lakkhangyaothai", "lamaleffinalarabic", "lamalefhamzaabovefinalarabic", "lamalefhamzaaboveisolatedarabic", "lamalefhamzabelowfinalarabic", "lamalefhamzabelowisolatedarabic", "lamalefisolatedarabic", "lamalefmaddaabovefinalarabic", "lamalefmaddaaboveisolatedarabic", "lamarabic", "lambda", "lambdastroke", "lamed", "lameddagesh", "lameddageshhebrew", "lamedhebrew", "lamfinalarabic", "lamhahinitialarabic", "laminitialarabic", "lamjeeminitialarabic", "lamkhahinitialarabic", "lamlamhehisolatedarabic", "lammedialarabic", "lammeemhahinitialarabic", "lammeeminitialarabic", "largecircle", "lbar", "lbelt", "lbopomofo", "lcaron", "lcedilla", "lcircle", "lcircumflexbelow", "lcommaaccent", "ldot", "ldotaccent", "ldotbelow", "ldotbelowmacron", "leftangleabovecmb", "lefttackbelowcmb", "less", "lessequal", "lessequalorgreater", "lessmonospace", "lessorequivalent", "lessorgreater", "lessoverequal", "lesssmall", "lezh", "lfblock", "lhookretroflex", "lira", "liwnarmenian", "lj", "ljecyrillic", "lladeva", "llagujarati", "llinebelow", "llladeva", "llvocalicbengali", "llvocalicdeva", "llvocalicvowelsignbengali", "llvocalicvowelsigndeva", "lmiddletilde", "lmonospace", "lmsquare", "lochulathai", "logicaland", "logicalnot", "logicalnotreversed", "logicalor", "lolingthai", "longs", "lowlinecenterline", "lowlinecmb", "lowlinedashed", "lozenge", "lparen", "lslash", "lsquare", "lsuperior", "ltshade", "luthai", "lvocalicbengali", "lvocalicdeva", "lvocalicvowelsignbengali", "lvocalicvowelsigndeva", "lxsquare", "mabengali", "macron", "macronbelowcmb", "macroncmb", "macronlowmod", "macronmonospace", "macute", "madeva", "magujarati", "magurmukhi", "mahapakhhebrew", "mahapakhlefthebrew", "mahiragana", "maichattawalowleftthai", "maichattawalowrightthai", "maichattawathai", "maichattawaupperleftthai", "maieklowleftthai", "maieklowrightthai", "maiekthai", "maiekupperleftthai", "maihanakatleftthai", "maihanakatthai", "maitaikhuleftthai", "maitaikhuthai", "maitholowleftthai", "maitholowrightthai", "maithothai", "maithoupperleftthai", "maitrilowleftthai", "maitrilowrightthai", "maitrithai", "maitriupperleftthai", "maiyamokthai", "makatakana", "makatakanahalfwidth", "male", "mansyonsquare", "maqafhebrew", "mars", "masoracirclehebrew", "masquare", "mbopomofo", "mbsquare", "mcircle", "mcubedsquare", "mdotaccent", "mdotbelow", "meemarabic", "meemfinalarabic", "meeminitialarabic", "meemmedialarabic", "meemmeeminitialarabic", "meemmeemisolatedarabic", "meetorusquare", "mehiragana", "meizierasquare", "mekatakana", "mekatakanahalfwidth", "mem", "memdagesh", "memdageshhebrew", "memhebrew", "menarmenian", "merkhahebrew", "merkhakefulahebrew", "merkhakefulalefthebrew", "merkhalefthebrew", "mhook", "mhzsquare", "middledotkatakanahalfwidth", "middot", "mieumacirclekorean", "mieumaparenkorean", "mieumcirclekorean", "mieumkorean", "mieumpansioskorean", "mieumparenkorean", "mieumpieupkorean", "mieumsioskorean", "mihiragana", "mikatakana", "mikatakanahalfwidth", "minus", "minusbelowcmb", "minuscircle", "minusmod", "minusplus", "minute", "miribaarusquare", "mirisquare", "mlonglegturned", "mlsquare", "mmcubedsquare", "mmonospace", "mmsquaredsquare", "mohiragana", "mohmsquare", "mokatakana", "mokatakanahalfwidth", "molsquare", "momathai", "moverssquare", "moverssquaredsquare", "mparen", "mpasquare", "mssquare", "msuperior", "mturned", "mu1", "muasquare", "muchgreater", "muchless", "mufsquare", "mugreek", "mugsquare", "muhiragana", "mukatakana", "mukatakanahalfwidth", "mulsquare", "multiply", "mumsquare", "munahhebrew", "munahlefthebrew", "musicalnote", "musicalnotedbl", "musicflatsign", "musicsharpsign", "mussquare", "muvsquare", "muwsquare", "mvmegasquare", "mvsquare", "mwmegasquare", "mwsquare", "nabengali", "nabla", "nacute", "nadeva", "nagujarati", "nagurmukhi", "nahiragana", "nakatakana", "nakatakanahalfwidth", "napostrophe", "nasquare", "nbopomofo", "nbspace", "ncaron", "ncedilla", "ncircle", "ncircumflexbelow", "ncommaaccent", "ndotaccent", "ndotbelow", "nehiragana", "nekatakana", "nekatakanahalfwidth", "newsheqelsign", "nfsquare", "ngabengali", "ngadeva", "ngagujarati", "ngagurmukhi", "ngonguthai", "nhiragana", "nhookleft", "nhookretroflex", "nieunacirclekorean", "nieunaparenkorean", "nieuncieuckorean", "nieuncirclekorean", "nieunhieuhkorean", "nieunkorean", "nieunpansioskorean", "nieunparenkorean", "nieunsioskorean", "nieuntikeutkorean", "nihiragana", "nikatakana", "nikatakanahalfwidth", "nikhahitleftthai", "nikhahitthai", "nine", "ninearabic", "ninebengali", "ninecircle", "ninecircleinversesansserif", "ninedeva", "ninegujarati", "ninegurmukhi", "ninehackarabic", "ninehangzhou", "nineideographicparen", "nineinferior", "ninemonospace", "nineoldstyle", "nineparen", "nineperiod", "ninepersian", "nineroman", "ninesuperior", "nineteencircle", "nineteenparen", "nineteenperiod", "ninethai", "nj", "njecyrillic", "nkatakana", "nkatakanahalfwidth", "nlegrightlong", "nlinebelow", "nmonospace", "nmsquare", "nnabengali", "nnadeva", "nnagujarati", "nnagurmukhi", "nnnadeva", "nohiragana", "nokatakana", "nokatakanahalfwidth", "nonbreakingspace", "nonenthai", "nonuthai", "noonarabic", "noonfinalarabic", "noonghunnaarabic", "noonghunnafinalarabic", "nooninitialarabic", "noonjeeminitialarabic", "noonjeemisolatedarabic", "noonmedialarabic", "noonmeeminitialarabic", "noonmeemisolatedarabic", "noonnoonfinalarabic", "notcontains", "notelement", "notelementof", "notequal", "notgreater", "notgreaternorequal", "notgreaternorless", "notidentical", "notless", "notlessnorequal", "notparallel", "notprecedes", "notsubset", "notsucceeds", "notsuperset", "nowarmenian", "nparen", "nssquare", "nsuperior", "ntilde", "nu", "nuhiragana", "nukatakana", "nukatakanahalfwidth", "nuktabengali", "nuktadeva", "nuktagujarati", "nuktagurmukhi", "numbersign", "numbersignmonospace", "numbersignsmall", "numeralsigngreek", "numeralsignlowergreek", "numero", "nun", "nundagesh", "nundageshhebrew", "nunhebrew", "nvsquare", "nwsquare", "nyabengali", "nyadeva", "nyagujarati", "nyagurmukhi", "o", "oacute", "oangthai", "obarred", "obarredcyrillic", "obarreddieresiscyrillic", "obengali", "obopomofo", "obreve", "ocandradeva", "ocandragujarati", "ocandravowelsigndeva", "ocandravowelsigngujarati", "ocaron", "ocircle", "ocircumflex", "ocircumflexacute", "ocircumflexdotbelow", "ocircumflexgrave", "ocircumflexhookabove", "ocircumflextilde", "ocyrillic", "odblacute", "odblgrave", "odeva", "odieresis", "odieresiscyrillic", "odotbelow", "oe", "oekorean", "ogonek", "ogonekcmb", "ograve", "ogujarati", "oharmenian", "ohiragana", "ohookabove", "ohorn", "ohornacute", "ohorndotbelow", "ohorngrave", "ohornhookabove", "ohorntilde", "ohungarumlaut", "oi", "oinvertedbreve", "okatakana", "okatakanahalfwidth", "okorean", "olehebrew", "omacron", "omacronacute", "omacrongrave", "omdeva", "omega", "omega1", "omegacyrillic", "omegalatinclosed", "omegaroundcyrillic", "omegatitlocyrillic", "omegatonos", "omgujarati", "omicron", "omicrontonos", "omonospace", "one", "onearabic", "onebengali", "onecircle", "onecircleinversesansserif", "onedeva", "onedotenleader", "oneeighth", "onefitted", "onegujarati", "onegurmukhi", "onehackarabic", "onehalf", "onehangzhou", "oneideographicparen", "oneinferior", "onemonospace", "onenumeratorbengali", "oneoldstyle", "oneparen", "oneperiod", "onepersian", "onequarter", "oneroman", "onesuperior", "onethai", "onethird", "oogonek", "oogonekmacron", "oogurmukhi", "oomatragurmukhi", "oopen", "oparen", "openbullet", "ordfeminine", "ordmasculine", "orthogonal", "oshortdeva", "oshortvowelsigndeva", "oslash", "oslashacute", "osmallhiragana", "osmallkatakana", "osmallkatakanahalfwidth", "ostrokeacute", "osuperior", "otcyrillic", "otilde", "otildeacute", "otildedieresis", "oubopomofo", "overline", "overlinecenterline", "overlinecmb", "overlinedashed", "overlinedblwavy", "overlinewavy", "overscore", "ovowelsignbengali", "ovowelsigndeva", "ovowelsigngujarati", "paampssquare", "paasentosquare", "pabengali", "pacute", "padeva", "pagedown", "pageup", "pagujarati", "pagurmukhi", "pahiragana", "paiyannoithai", "pakatakana", "palatalizationcyrilliccmb", "palochkacyrillic", "pansioskorean", "paragraph", "parallel", "parenleft", "parenleftaltonearabic", "parenleftbt", "parenleftex", "parenleftinferior", "parenleftmonospace", "parenleftsmall", "parenleftsuperior", "parenlefttp", "parenleftvertical", "parenright", "parenrightaltonearabic", "parenrightbt", "parenrightex", "parenrightinferior", "parenrightmonospace", "parenrightsmall", "parenrightsuperior", "parenrighttp", "parenrightvertical", "partialdiff", "paseqhebrew", "pashtahebrew", "pasquare", "patah", "patah11", "patah1d", "patah2a", "patahhebrew", "patahnarrowhebrew", "patahquarterhebrew", "patahwidehebrew", "pazerhebrew", "pbopomofo", "pcircle", "pdotaccent", "pe", "pecyrillic", "pedagesh", "pedageshhebrew", "peezisquare", "pefinaldageshhebrew", "peharabic", "peharmenian", "pehebrew", "pehfinalarabic", "pehinitialarabic", "pehiragana", "pehmedialarabic", "pekatakana", "pemiddlehookcyrillic", "perafehebrew", "percent", "percentarabic", "percentmonospace", "percentsmall", "period", "periodarmenian", "periodcentered", "periodhalfwidth", "periodinferior", "periodmonospace", "periodsmall", "periodsuperior", "perispomenigreekcmb", "perpendicular", "perthousand", "peseta", "pfsquare", "phabengali", "phadeva", "phagujarati", "phagurmukhi", "phi", "phi1", "phieuphacirclekorean", "phieuphaparenkorean", "phieuphcirclekorean", "phieuphkorean", "phieuphparenkorean", "philatin", "phinthuthai", "phisymbolgreek", "phook", "phophanthai", "phophungthai", "phosamphaothai", "pieupacirclekorean", "pieupaparenkorean", "pieupcieuckorean", "pieupcirclekorean", "pieupkiyeokkorean", "pieupkorean", "pieupparenkorean", "pieupsioskiyeokkorean", "pieupsioskorean", "pieupsiostikeutkorean", "pieupthieuthkorean", "pieuptikeutkorean", "pihiragana", "pikatakana", "pisymbolgreek", "piwrarmenian", "plus", "plusbelowcmb", "pluscircle", "plusminus", "plusmod", "plusmonospace", "plussmall", "plussuperior", "pmonospace", "pmsquare", "pohiragana", "pointingindexdownwhite", "pointingindexleftwhite", "pointingindexrightwhite", "pointingindexupwhite", "pokatakana", "poplathai", "postalmark", "postalmarkface", "pparen", "precedes", "prescription", "primemod", "primereversed", "product", "projective", "prolongedkana", "propellor", "propersubset", "propersuperset", "proportion", "proportional", "psi", "psicyrillic", "psilipneumatacyrilliccmb", "pssquare", "puhiragana", "pukatakana", "pvsquare", "pwsquare", "qadeva", "qadmahebrew", "qafarabic", "qaffinalarabic", "qafinitialarabic", "qafmedialarabic", "qamats", "qamats10", "qamats1a", "qamats1c", "qamats27", "qamats29", "qamats33", "qamatsde", "qamatshebrew", "qamatsnarrowhebrew", "qamatsqatanhebrew", "qamatsqatannarrowhebrew", "qamatsqatanquarterhebrew", "qamatsqatanwidehebrew", "qamatsquarterhebrew", "qamatswidehebrew", "qarneyparahebrew", "qbopomofo", "qcircle", "qhook", "qmonospace", "qof", "qofdagesh", "qofdageshhebrew", "qofhebrew", "qparen", "quarternote", "qubuts", "qubuts18", "qubuts25", "qubuts31", "qubutshebrew", "qubutsnarrowhebrew", "qubutsquarterhebrew", "qubutswidehebrew", "question", "questionarabic", "questionarmenian", "questiondown", "questiondownsmall", "questiongreek", "questionmonospace", "questionsmall", "quotedbl", "quotedblbase", "quotedblleft", "quotedblmonospace", "quotedblprime", "quotedblprimereversed", "quotedblright", "quoteleft", "quoteleftreversed", "quotereversed", "quoteright", "quoterightn", "quotesinglbase", "quotesingle", "quotesinglemonospace", "raarmenian", "rabengali", "racute", "radeva", "radical", "radicalex", "radoverssquare", "radoverssquaredsquare", "radsquare", "rafe", "rafehebrew", "ragujarati", "ragurmukhi", "rahiragana", "rakatakana", "rakatakanahalfwidth", "ralowerdiagonalbengali", "ramiddlediagonalbengali", "ramshorn", "ratio", "rbopomofo", "rcaron", "rcedilla", "rcircle", "rcommaaccent", "rdblgrave", "rdotaccent", "rdotbelow", "rdotbelowmacron", "referencemark", "reflexsubset", "reflexsuperset", "registered", "registersans", "registerserif", "reharabic", "reharmenian", "rehfinalarabic", "rehiragana", "rekatakana", "rekatakanahalfwidth", "resh", "reshdageshhebrew", "reshhebrew", "reversedtilde", "reviahebrew", "reviamugrashhebrew", "revlogicalnot", "rfishhook", "rfishhookreversed", "rhabengali", "rhadeva", "rho", "rhook", "rhookturned", "rhookturnedsuperior", "rhosymbolgreek", "rhotichookmod", "rieulacirclekorean", "rieulaparenkorean", "rieulcirclekorean", "rieulhieuhkorean", "rieulkiyeokkorean", "rieulkiyeoksioskorean", "rieulkorean", "rieulmieumkorean", "rieulpansioskorean", "rieulparenkorean", "rieulphieuphkorean", "rieulpieupkorean", "rieulpieupsioskorean", "rieulsioskorean", "rieulthieuthkorean", "rieultikeutkorean", "rieulyeorinhieuhkorean", "rightangle", "righttackbelowcmb", "righttriangle", "rihiragana", "rikatakana", "rikatakanahalfwidth", "ring", "ringbelowcmb", "ringcmb", "ringhalfleft", "ringhalfleftarmenian", "ringhalfleftbelowcmb", "ringhalfleftcentered", "ringhalfright", "ringhalfrightbelowcmb", "ringhalfrightcentered", "rinvertedbreve", "rittorusquare", "rlinebelow", "rlongleg", "rlonglegturned", "rmonospace", "rohiragana", "rokatakana", "rokatakanahalfwidth", "roruathai", "rparen", "rrabengali", "rradeva", "rragurmukhi", "rreharabic", "rrehfinalarabic", "rrvocalicbengali", "rrvocalicdeva", "rrvocalicgujarati", "rrvocalicvowelsignbengali", "rrvocalicvowelsigndeva", "rrvocalicvowelsigngujarati", "rsuperior", "rtblock", "rturned", "rturnedsuperior", "ruhiragana", "rukatakana", "rukatakanahalfwidth", "rupeemarkbengali", "rupeesignbengali", "rupiah", "ruthai", "rvocalicbengali", "rvocalicdeva", "rvocalicgujarati", "rvocalicvowelsignbengali", "rvocalicvowelsigndeva", "rvocalicvowelsigngujarati", "sabengali", "sacute", "sacutedotaccent", "sadarabic", "sadeva", "sadfinalarabic", "sadinitialarabic", "sadmedialarabic", "sagujarati", "sagurmukhi", "sahiragana", "sakatakana", "sakatakanahalfwidth", "sallallahoualayhewasallamarabic", "samekh", "samekhdagesh", "samekhdageshhebrew", "samekhhebrew", "saraaathai", "saraaethai", "saraaimaimalaithai", "saraaimaimuanthai", "saraamthai", "saraathai", "saraethai", "saraiileftthai", "saraiithai", "saraileftthai", "saraithai", "saraothai", "saraueeleftthai", "saraueethai", "saraueleftthai", "sarauethai", "sarauthai", "sarauuthai", "sbopomofo", "scaron", "scarondotaccent", "scedilla", "schwa", "schwacyrillic", "schwadieresiscyrillic", "schwahook", "scircle", "scircumflex", "scommaaccent", "sdotaccent", "sdotbelow", "sdotbelowdotaccent", "seagullbelowcmb", "secondtonechinese", "section", "seenarabic", "seenfinalarabic", "seeninitialarabic", "seenmedialarabic", "segol", "segol13", "segol1f", "segol2c", "segolhebrew", "segolnarrowhebrew", "segolquarterhebrew", "segoltahebrew", "segolwidehebrew", "seharmenian", "sehiragana", "sekatakana", "sekatakanahalfwidth", "semicolon", "semicolonarabic", "semicolonmonospace", "semicolonsmall", "semivoicedmarkkana", "semivoicedmarkkanahalfwidth", "sentisquare", "sentosquare", "seven", "sevenarabic", "sevenbengali", "sevencircle", "sevencircleinversesansserif", "sevendeva", "seveneighths", "sevengujarati", "sevengurmukhi", "sevenhackarabic", "sevenhangzhou", "sevenideographicparen", "seveninferior", "sevenmonospace", "sevenoldstyle", "sevenparen", "sevenperiod", "sevenpersian", "sevenroman", "sevensuperior", "seventeencircle", "seventeenparen", "seventeenperiod", "seventhai", "sfthyphen", "shaarmenian", "shabengali", "shacyrillic", "shaddaarabic", "shaddadammaarabic", "shaddadammatanarabic", "shaddafathaarabic", "shaddakasraarabic", "shaddakasratanarabic", "shade", "shadedark", "shadelight", "shademedium", "shadeva", "shagujarati", "shagurmukhi", "shalshelethebrew", "shbopomofo", "shchacyrillic", "sheenarabic", "sheenfinalarabic", "sheeninitialarabic", "sheenmedialarabic", "sheicoptic", "sheqel", "sheqelhebrew", "sheva", "sheva115", "sheva15", "sheva22", "sheva2e", "shevahebrew", "shevanarrowhebrew", "shevaquarterhebrew", "shevawidehebrew", "shhacyrillic", "shimacoptic", "shin", "shindagesh", "shindageshhebrew", "shindageshshindot", "shindageshshindothebrew", "shindageshsindot", "shindageshsindothebrew", "shindothebrew", "shinhebrew", "shinshindot", "shinshindothebrew", "shinsindot", "shinsindothebrew", "shook", "sigma1", "sigmafinal", "sigmalunatesymbolgreek", "sihiragana", "sikatakana", "sikatakanahalfwidth", "siluqhebrew", "siluqlefthebrew", "similar", "sindothebrew", "siosacirclekorean", "siosaparenkorean", "sioscieuckorean", "sioscirclekorean", "sioskiyeokkorean", "sioskorean", "siosnieunkorean", "siosparenkorean", "siospieupkorean", "siostikeutkorean", "six", "sixarabic", "sixbengali", "sixcircle", "sixcircleinversesansserif", "sixdeva", "sixgujarati", "sixgurmukhi", "sixhackarabic", "sixhangzhou", "sixideographicparen", "sixinferior", "sixmonospace", "sixoldstyle", "sixparen", "sixperiod", "sixpersian", "sixroman", "sixsuperior", "sixteencircle", "sixteencurrencydenominatorbengali", "sixteenparen", "sixteenperiod", "sixthai", "slash", "slashmonospace", "slong", "slongdotaccent", "smileface", "smonospace", "sofpasuqhebrew", "softhyphen", "softsigncyrillic", "sohiragana", "sokatakana", "sokatakanahalfwidth", "soliduslongoverlaycmb", "solidusshortoverlaycmb", "sorusithai", "sosalathai", "sosothai", "sosuathai", "space", "spacehackarabic", "spade", "spadesuitblack", "spadesuitwhite", "sparen", "squarebelowcmb", "squarecc", "squarecm", "squarediagonalcrosshatchfill", "squarehorizontalfill", "squarekg", "squarekm", "squarekmcapital", "squareln", "squarelog", "squaremg", "squaremil", "squaremm", "squaremsquared", "squareorthogonalcrosshatchfill", "squareupperlefttolowerrightfill", "squareupperrighttolowerleftfill", "squareverticalfill", "squarewhitewithsmallblack", "srsquare", "ssabengali", "ssadeva", "ssagujarati", "ssangcieuckorean", "ssanghieuhkorean", "ssangieungkorean", "ssangkiyeokkorean", "ssangnieunkorean", "ssangpieupkorean", "ssangsioskorean", "ssangtikeutkorean", "ssuperior", "sterling", "sterlingmonospace", "strokelongoverlaycmb", "strokeshortoverlaycmb", "subset", "subsetnotequal", "subsetorequal", "succeeds", "suchthat", "suhiragana", "sukatakana", "sukatakanahalfwidth", "sukunarabic", "summation", "sun", "superset", "supersetnotequal", "supersetorequal", "svsquare", "syouwaerasquare", "tabengali", "tackdown", "tackleft", "tadeva", "tagujarati", "tagurmukhi", "taharabic", "tahfinalarabic", "tahinitialarabic", "tahiragana", "tahmedialarabic", "taisyouerasquare", "takatakana", "takatakanahalfwidth", "tatweelarabic", "tau", "tav", "tavdages", "tavdagesh", "tavdageshhebrew", "tavhebrew", "tbar", "tbopomofo", "tcaron", "tccurl", "tcedilla", "tcheharabic", "tchehfinalarabic", "tchehinitialarabic", "tchehmedialarabic", "tcircle", "tcircumflexbelow", "tcommaaccent", "tdieresis", "tdotaccent", "tdotbelow", "tecyrillic", "tedescendercyrillic", "teharabic", "tehfinalarabic", "tehhahinitialarabic", "tehhahisolatedarabic", "tehinitialarabic", "tehiragana", "tehjeeminitialarabic", "tehjeemisolatedarabic", "tehmarbutaarabic", "tehmarbutafinalarabic", "tehmedialarabic", "tehmeeminitialarabic", "tehmeemisolatedarabic", "tehnoonfinalarabic", "tekatakana", "tekatakanahalfwidth", "telephone", "telephoneblack", "telishagedolahebrew", "telishaqetanahebrew", "tencircle", "tenideographicparen", "tenparen", "tenperiod", "tenroman", "tesh", "tet", "tetdagesh", "tetdageshhebrew", "tethebrew", "tetsecyrillic", "tevirhebrew", "tevirlefthebrew", "thabengali", "thadeva", "thagujarati", "thagurmukhi", "thalarabic", "thalfinalarabic", "thanthakhatlowleftthai", "thanthakhatlowrightthai", "thanthakhatthai", "thanthakhatupperleftthai", "theharabic", "thehfinalarabic", "thehinitialarabic", "thehmedialarabic", "thereexists", "therefore", "theta", "theta1", "thetasymbolgreek", "thieuthacirclekorean", "thieuthaparenkorean", "thieuthcirclekorean", "thieuthkorean", "thieuthparenkorean", "thirteencircle", "thirteenparen", "thirteenperiod", "thonangmonthothai", "thook", "thophuthaothai", "thorn", "thothahanthai", "thothanthai", "thothongthai", "thothungthai", "thousandcyrillic", "thousandsseparatorarabic", "thousandsseparatorpersian", "three", "threearabic", "threebengali", "threecircle", "threecircleinversesansserif", "threedeva", "threeeighths", "threegujarati", "threegurmukhi", "threehackarabic", "threehangzhou", "threeideographicparen", "threeinferior", "threemonospace", "threenumeratorbengali", "threeoldstyle", "threeparen", "threeperiod", "threepersian", "threequarters", "threequartersemdash", "threeroman", "threesuperior", "threethai", "thzsquare", "tihiragana", "tikatakana", "tikatakanahalfwidth", "tikeutacirclekorean", "tikeutaparenkorean", "tikeutcirclekorean", "tikeutkorean", "tikeutparenkorean", "tilde", "tildebelowcmb", "tildecmb", "tildecomb", "tildedoublecmb", "tildeoperator", "tildeoverlaycmb", "tildeverticalcmb", "timescircle", "tipehahebrew", "tipehalefthebrew", "tippigurmukhi", "titlocyrilliccmb", "tiwnarmenian", "tlinebelow", "tmonospace", "toarmenian", "tohiragana", "tokatakana", "tokatakanahalfwidth", "tonebarextrahighmod", "tonebarextralowmod", "tonebarhighmod", "tonebarlowmod", "tonebarmidmod", "tonefive", "tonesix", "tonetwo", "tonos", "tonsquare", "topatakthai", "tortoiseshellbracketleft", "tortoiseshellbracketleftsmall", "tortoiseshellbracketleftvertical", "tortoiseshellbracketright", "tortoiseshellbracketrightsmall", "tortoiseshellbracketrightvertical", "totaothai", "tpalatalhook", "tparen", "trademark", "trademarksans", "trademarkserif", "tretroflexhook", "triagdn", "triaglf", "triagrt", "triagup", "ts", "tsadi", "tsadidagesh", "tsadidageshhebrew", "tsadihebrew", "tsecyrillic", "tsere", "tsere12", "tsere1e", "tsere2b", "tserehebrew", "tserenarrowhebrew", "tserequarterhebrew", "tserewidehebrew", "tshecyrillic", "tsuperior", "ttabengali", "ttadeva", "ttagujarati", "ttagurmukhi", "tteharabic", "ttehfinalarabic", "ttehinitialarabic", "ttehmedialarabic", "tthabengali", "tthadeva", "tthagujarati", "tthagurmukhi", "tturned", "tuhiragana", "tukatakana", "tukatakanahalfwidth", "tusmallhiragana", "tusmallkatakana", "tusmallkatakanahalfwidth", "twelvecircle", "twelveparen", "twelveperiod", "twelveroman", "twentycircle", "twentyhangzhou", "twentyparen", "twentyperiod", "two", "twoarabic", "twobengali", "twocircle", "twocircleinversesansserif", "twodeva", "twodotenleader", "twodotleader", "twodotleadervertical", "twogujarati", "twogurmukhi", "twohackarabic", "twohangzhou", "twoideographicparen", "twoinferior", "twomonospace", "twonumeratorbengali", "twooldstyle", "twoparen", "twoperiod", "twopersian", "tworoman", "twostroke", "twosuperior", "twothai", "twothirds", "uacute", "ubar", "ubengali", "ubopomofo", "ubreve", "ucaron", "ucircle", "ucircumflex", "ucircumflexbelow", "ucyrillic", "udattadeva", "udblacute", "udblgrave", "udeva", "udieresis", "udieresisacute", "udieresisbelow", "udieresiscaron", "udieresiscyrillic", "udieresisgrave", "udieresismacron", "udotbelow", "ugrave", "ugujarati", "ugurmukhi", "uhiragana", "uhookabove", "uhorn", "uhornacute", "uhorndotbelow", "uhorngrave", "uhornhookabove", "uhorntilde", "uhungarumlaut", "uhungarumlautcyrillic", "uinvertedbreve", "ukatakana", "ukatakanahalfwidth", "ukcyrillic", "ukorean", "umacron", "umacroncyrillic", "umacrondieresis", "umatragurmukhi", "umonospace", "underscore", "underscoredbl", "underscoremonospace", "underscorevertical", "underscorewavy", "union", "universal", "uogonek", "uparen", "upblock", "upperdothebrew", "upsilon", "upsilondieresis", "upsilondieresistonos", "upsilonlatin", "upsilontonos", "uptackbelowcmb", "uptackmod", "uragurmukhi", "uring", "ushortcyrillic", "usmallhiragana", "usmallkatakana", "usmallkatakanahalfwidth", "ustraightcyrillic", "ustraightstrokecyrillic", "utilde", "utildeacute", "utildebelow", "uubengali", "uudeva", "uugujarati", "uugurmukhi", "uumatragurmukhi", "uuvowelsignbengali", "uuvowelsigndeva", "uuvowelsigngujarati", "uvowelsignbengali", "uvowelsigndeva", "uvowelsigngujarati", "vadeva", "vagujarati", "vagurmukhi", "vakatakana", "vav", "vavdagesh", "vavdagesh65", "vavdageshhebrew", "vavhebrew", "vavholam", "vavholamhebrew", "vavvavhebrew", "vavyodhebrew", "vcircle", "vdotbelow", "vecyrillic", "veharabic", "vehfinalarabic", "vehinitialarabic", "vehmedialarabic", "vekatakana", "venus", "verticalbar", "verticallineabovecmb", "verticallinebelowcmb", "verticallinelowmod", "verticallinemod", "vewarmenian", "vhook", "vikatakana", "viramabengali", "viramadeva", "viramagujarati", "visargabengali", "visargadeva", "visargagujarati", "vmonospace", "voarmenian", "voicediterationhiragana", "voicediterationkatakana", "voicedmarkkana", "voicedmarkkanahalfwidth", "vokatakana", "vparen", "vtilde", "vturned", "vuhiragana", "vukatakana", "wacute", "waekorean", "wahiragana", "wakatakana", "wakatakanahalfwidth", "wakorean", "wasmallhiragana", "wasmallkatakana", "wattosquare", "wavedash", "wavyunderscorevertical", "wawarabic", "wawfinalarabic", "wawhamzaabovearabic", "wawhamzaabovefinalarabic", "wbsquare", "wcircle", "wcircumflex", "wdieresis", "wdotaccent", "wdotbelow", "wehiragana", "weierstrass", "wekatakana", "wekorean", "weokorean", "wgrave", "whitebullet", "whitecircle", "whitecircleinverse", "whitecornerbracketleft", "whitecornerbracketleftvertical", "whitecornerbracketright", "whitecornerbracketrightvertical", "whitediamond", "whitediamondcontainingblacksmalldiamond", "whitedownpointingsmalltriangle", "whitedownpointingtriangle", "whiteleftpointingsmalltriangle", "whiteleftpointingtriangle", "whitelenticularbracketleft", "whitelenticularbracketright", "whiterightpointingsmalltriangle", "whiterightpointingtriangle", "whitesmallsquare", "whitesmilingface", "whitesquare", "whitestar", "whitetelephone", "whitetortoiseshellbracketleft", "whitetortoiseshellbracketright", "whiteuppointingsmalltriangle", "whiteuppointingtriangle", "wihiragana", "wikatakana", "wikorean", "wmonospace", "wohiragana", "wokatakana", "wokatakanahalfwidth", "won", "wonmonospace", "wowaenthai", "wparen", "wring", "wsuperior", "wturned", "wynn", "xabovecmb", "xbopomofo", "xcircle", "xdieresis", "xdotaccent", "xeharmenian", "xi", "xmonospace", "xparen", "xsuperior", "yaadosquare", "yabengali", "yacute", "yadeva", "yaekorean", "yagujarati", "yagurmukhi", "yahiragana", "yakatakana", "yakatakanahalfwidth", "yakorean", "yamakkanthai", "yasmallhiragana", "yasmallkatakana", "yasmallkatakanahalfwidth", "yatcyrillic", "ycircle", "ycircumflex", "ydieresis", "ydotaccent", "ydotbelow", "yeharabic", "yehbarreearabic", "yehbarreefinalarabic", "yehfinalarabic", "yehhamzaabovearabic", "yehhamzaabovefinalarabic", "yehhamzaaboveinitialarabic", "yehhamzaabovemedialarabic", "yehinitialarabic", "yehmedialarabic", "yehmeeminitialarabic", "yehmeemisolatedarabic", "yehnoonfinalarabic", "yehthreedotsbelowarabic", "yekorean", "yen", "yenmonospace", "yeokorean", "yeorinhieuhkorean", "yerahbenyomohebrew", "yerahbenyomolefthebrew", "yericyrillic", "yerudieresiscyrillic", "yesieungkorean", "yesieungpansioskorean", "yesieungsioskorean", "yetivhebrew", "ygrave", "yhook", "yhookabove", "yiarmenian", "yicyrillic", "yikorean", "yinyang", "yiwnarmenian", "ymonospace", "yod", "yoddagesh", "yoddageshhebrew", "yodhebrew", "yodyodhebrew", "yodyodpatahhebrew", "yohiragana", "yoikorean", "yokatakana", "yokatakanahalfwidth", "yokorean", "yosmallhiragana", "yosmallkatakana", "yosmallkatakanahalfwidth", "yotgreek", "yoyaekorean", "yoyakorean", "yoyakthai", "yoyingthai", "yparen", "ypogegrammeni", "ypogegrammenigreekcmb", "yr", "yring", "ysuperior", "ytilde", "yturned", "yuhiragana", "yuikorean", "yukatakana", "yukatakanahalfwidth", "yukorean", "yusbigcyrillic", "yusbigiotifiedcyrillic", "yuslittlecyrillic", "yuslittleiotifiedcyrillic", "yusmallhiragana", "yusmallkatakana", "yusmallkatakanahalfwidth", "yuyekorean", "yuyeokorean", "yyabengali", "yyadeva", "zaarmenian", "zacute", "zadeva", "zagurmukhi", "zaharabic", "zahfinalarabic", "zahinitialarabic", "zahiragana", "zahmedialarabic", "zainarabic", "zainfinalarabic", "zakatakana", "zaqefgadolhebrew", "zaqefqatanhebrew", "zarqahebrew", "zayin", "zayindagesh", "zayindageshhebrew", "zayinhebrew", "zbopomofo", "zcaron", "zcircle", "zcircumflex", "zcurl", "zdot", "zdotaccent", "zdotbelow", "zecyrillic", "zedescendercyrillic", "zedieresiscyrillic", "zehiragana", "zekatakana", "zero", "zeroarabic", "zerobengali", "zerodeva", "zerogujarati", "zerogurmukhi", "zerohackarabic", "zeroinferior", "zeromonospace", "zerooldstyle", "zeropersian", "zerosuperior", "zerothai", "zerowidthjoiner", "zerowidthnonjoiner", "zerowidthspace", "zeta", "zhbopomofo", "zhearmenian", "zhebrevecyrillic", "zhecyrillic", "zhedescendercyrillic", "zhedieresiscyrillic", "zihiragana", "zikatakana", "zinorhebrew", "zlinebelow", "zmonospace", "zohiragana", "zokatakana", "zparen", "zretroflexhook", "zstroke", "zuhiragana", "zukatakana", "angbracketleftbig", "angbracketleftBig", "angbracketleftbigg", "angbracketleftBigg", "angbracketrightBig", "angbracketrightbig", "angbracketrightBigg", "angbracketrightbigg", "arrowhookleft", "arrowhookright", "arrowlefttophalf", "arrowleftbothalf", "arrownortheast", "arrownorthwest", "arrowrighttophalf", "arrowrightbothalf", "arrowsoutheast", "arrowsouthwest", "backslashbig", "backslashBig", "backslashBigg", "backslashbigg", "bardbl", "bracehtipdownleft", "bracehtipdownright", "bracehtipupleft", "bracehtipupright", "braceleftBig", "braceleftbig", "braceleftbigg", "braceleftBigg", "bracerightBig", "bracerightbig", "bracerightbigg", "bracerightBigg", "bracketleftbig", "bracketleftBig", "bracketleftbigg", "bracketleftBigg", "bracketrightBig", "bracketrightbig", "bracketrightbigg", "bracketrightBigg", "ceilingleftbig", "ceilingleftBig", "ceilingleftBigg", "ceilingleftbigg", "ceilingrightbig", "ceilingrightBig", "ceilingrightbigg", "ceilingrightBigg", "circledotdisplay", "circledottext", "circlemultiplydisplay", "circlemultiplytext", "circleplusdisplay", "circleplustext", "contintegraldisplay", "contintegraltext", "coproductdisplay", "coproducttext", "floorleftBig", "floorleftbig", "floorleftbigg", "floorleftBigg", "floorrightbig", "floorrightBig", "floorrightBigg", "floorrightbigg", "hatwide", "hatwider", "hatwidest", "intercal", "integraldisplay", "integraltext", "intersectiondisplay", "intersectiontext", "logicalanddisplay", "logicalandtext", "logicalordisplay", "logicalortext", "parenleftBig", "parenleftbig", "parenleftBigg", "parenleftbigg", "parenrightBig", "parenrightbig", "parenrightBigg", "parenrightbigg", "prime", "productdisplay", "producttext", "radicalbig", "radicalBig", "radicalBigg", "radicalbigg", "radicalbt", "radicaltp", "radicalvertex", "slashbig", "slashBig", "slashBigg", "slashbigg", "summationdisplay", "summationtext", "tildewide", "tildewider", "tildewidest", "uniondisplay", "unionmultidisplay", "unionmultitext", "unionsqdisplay", "unionsqtext", "uniontext", "vextenddouble", "vextendsingle", "getDingbatsGlyphsUnicode", "a2", "a202", "a3", "a4", "a5", "a119", "a118", "a117", "a11", "a12", "a13", "a14", "a15", "a16", "a105", "a17", "a18", "a19", "a20", "a21", "a22", "a23", "a24", "a25", "a26", "a27", "a28", "a6", "a7", "a8", "a9", "a10", "a29", "a30", "a31", "a32", "a33", "a34", "a35", "a36", "a37", "a38", "a39", "a40", "a41", "a42", "a43", "a44", "a45", "a46", "a47", "a48", "a49", "a50", "a51", "a52", "a53", "a54", "a55", "a56", "a57", "a58", "a59", "a60", "a61", "a62", "a63", "a64", "a65", "a66", "a67", "a68", "a69", "a70", "a71", "a72", "a73", "a74", "a203", "a75", "a204", "a76", "a77", "a78", "a79", "a81", "a82", "a83", "a84", "a97", "a98", "a99", "a100", "a101", "a102", "a103", "a104", "a106", "a107", "a108", "a112", "a111", "a110", "a109", "a120", "a121", "a122", "a123", "a124", "a125", "a126", "a127", "a128", "a129", "a130", "a131", "a132", "a133", "a134", "a135", "a136", "a137", "a138", "a139", "a140", "a141", "a142", "a143", "a144", "a145", "a146", "a147", "a148", "a149", "a150", "a151", "a152", "a153", "a154", "a155", "a156", "a157", "a158", "a159", "a160", "a161", "a163", "a164", "a196", "a165", "a192", "a166", "a167", "a168", "a169", "a170", "a171", "a172", "a173", "a162", "a174", "a175", "a176", "a177", "a178", "a179", "a193", "a180", "a199", "a181", "a200", "a182", "a201", "a183", "a184", "a197", "a185", "a194", "a198", "a186", "a195", "a187", "a188", "a189", "a190", "a191", "a89", "a90", "a93", "a94", "a91", "a92", "a205", "a85", "a206", "a86", "a87", "a88", "a95", "a96", "getStdFontMap", "getNonStdFontMap", "getSerifFonts", "getSymbolsFonts", "getGlyphMapForStandardFonts", "getSupplementalGlyphMapForArialBlack", "getSupplementalGlyphMapForCalibri", "getSpecialPUASymbols", "undefined", "nameLen", "hexStr", "substring", "toUpperCase", "UnicodeRanges", "isRTLRangeFor", "getNormalizedUnicodes", "charsLength", "charCodeAt", "numSubrs", "getUshort", "getLong", "idOffset", "groups", "idDelta", "gsubrs", "isCFFCIDFont", "cmds", "numberOfContours", "arg1", "arg2", "scale01", "scale10", "subglyph", "compileGlyf", "endPtsOfContours", "instructionLength", "numberOfPoints", "points", "startPoint", "contour", "quadraticCurveTo", "stems", "stackClean", "xa", "ya", "xb", "yb", "bezierCurveTo", "subrCode", "getSubroutineBias", "y3", "achar", "bchar", "lookupCmap", "compileCharString", "NOOP", "getPathJs", "compileGlyph", "compileGlyphImpl", "hasBuiltPath", "cffInfo", "glyphNameMap", "create", "parseCmap", "parseCff", "parseGlyfTable", "HINTING_ENABLED", "Type1CharString", "COMMAND_MAP", "hstem", "vstem", "vmoveto", "rlineto", "hlineto", "vlineto", "rrcurveto", "callsubr", "flex", "drop", "endchar", "rmoveto", "hmoveto", "vhcurveto", "hvcurveto", "encoded", "dy", "wx", "sbx", "sby", "num2", "num1", "flexArgs", "executeCommand", "stackLength", "howManyArgs", "Type1Parser", "EEXEC_ENCRYPT_KEY", "CHAR_STRS_ENCRYPT_KEY", "discardNumber", "c1", "c2", "decrypted", "digit1", "isHexDigit", "digit2", "isBinary", "decryptAscii", "readNumberArray", "readInt", "readBoolean", "getToken", "isSpecial", "readCharStrings", "lenIV", "extractFontProgram", "privateData", "program", "blueArray", "charString", "charStringObject", "lsb", "extractFontHeader", "encodingArg", "ShadingType", "FUNCTION_BASED", "AXIAL", "RADIAL", "FREE_FORM_MESH", "LATTICE_FORM_MESH", "COONS_PATCH_MESH", "TENSOR_PATCH_MESH", "getPattern", "Shadings", "t0", "domainArr", "extendStart", "extendEnd", "extendArr", "x1", "r1", "r2", "distance", "fnObj", "NUMBER_OF_SAMPLES", "colorStops", "cssColor", "background", "RadialAxial", "coordsArr", "shadingType", "r0", "csNumComps", "MeshStreamReader", "align", "readFlag", "readCoordinate", "bitsPerCoordinate", "yi", "readComponents", "ci", "coords", "mesh", "operators", "ps", "verticesLeft", "coord", "MIN_SPLIT_PATCH_CHUNKS_AMOUNT", "MAX_SPLIT_PATCH_CHUNKS_AMOUNT", "TRIANGLE_DENSITY", "getB", "lut", "t_", "buildB", "figure", "figureMinX", "figureMinY", "figureMaxX", "figureMaxY", "splitXBy", "splitYBy", "verticesPerRow", "figureCoords", "figureColors", "cl", "cr", "c0", "c3", "bRow", "bCol", "newColor", "tmp4", "maxY", "coordsPacked", "xy", "colorsPacked", "figures", "decodeContext", "bitsPerFlag", "colorFn", "patchMesh", "decodeType4Shading", "decodeType5Shading", "decodeType6Shading", "decodeType7Shading", "updateBounds", "buildFigureFromPatch", "packData", "Mesh", "Dummy", "xstep", "ystep", "paintType", "tilingType", "baseTypes", "arabicTypes", "temp", "isLTR", "strLength", "createBidiText", "numBidi", "charType", "startLevel", "levels", "isOdd", "sor", "eor", "lastType", "findUnequal", "before", "after", "setValues", "isEven", "highestLevel", "lowestOddLevel", "reverseValues", "getMetrics", "createFromArray", "PDFFunction", "CONSTRUCT_SAMPLED", "CONSTRUCT_INTERPOLATED", "CONSTRUCT_STICHED", "CONSTRUCT_POSTSCRIPT", "getSampleArray", "sampleMul", "strBytes", "strIdx", "typeFn", "fromIR", "parseArray", "constructSampled", "domain", "toNumberArray", "inputSize", "outputSize", "toMultiArray", "bps", "encode", "samples", "constructSampledFromIR", "ymin", "cubeVertices", "cubeN", "cubeVertex", "domain_2i", "domain_2i_1", "interpolate", "size_i", "e0", "n0", "n1", "rj", "constructInterpolated", "constructInterpolatedFromIR", "constructStiched", "fnRefs", "fns", "bounds", "constructStichedFromIR", "dmin", "dmax", "rmin", "rmax", "constructPostScript", "constructPostScriptFromIR", "numOutputs", "numInputs", "MAX_CACHE_SIZE", "cache_available", "cachedValue", "stackIndex", "bound", "fnDict", "PostScriptStack", "MAX_STACK_SIZE", "pop", "copy", "roll", "PostScriptEvaluator", "execute", "counter", "operator", "PostScriptCompiler", "AstNode", "AstArgument", "AstLiteral", "AstBinaryOperation", "AstMin", "AstVariable", "AstVariableDefinition", "ExpressionBuilderVisitor", "visitArgument", "visitVariable", "variable", "visitLiteral", "literal", "visitBinaryOperation", "visitVariableDefinition", "definition", "visitMin", "max", "instructions", "lastRegister", "buildAddOperation", "buildMulOperation", "buildSubOperation", "ast1", "ast2", "tmpVar", "buildMinOperation", "statementBuilder", "instruction", "expr", "nextToken", "accept", "expect", "PostScriptTokenTypes", "parseBlock", "parseCondition", "conditionLocation", "jumpLocation", "endOfTrue", "LBRACE", "RBRACE", "NUMBER", "OPERATOR", "IF", "IFELSE", "PostScriptToken", "opCache", "opValue", "SEED", "MASK_HIGH", "MASK_LOW", "seed", "update", "blockCounts", "tailLength", "dataUint32", "k2", "C1", "C2", "C1_LOW", "C2_LOW", "hexdigest", "hex1", "hex2", "PDFImage", "addend", "isMask", "isIndexed", "maskDict", "imageData", "smaskData", "maskData", "computedLength", "haveFullData", "decodeBuffer", "decodeAddends", "decodeCoefficients", "decodeAndClamp", "getComponents", "bufferPos", "rowComps", "loop1End", "loop2End", "buf", "remainingBits", "fillOpacity", "sw", "sh", "alphaBuf", "resizeImageMask", "opacity", "imageOffset", "maskOffset", "rgbaBuf", "undoPreblend", "matte", "matteRgb", "matteR", "matteG", "matteB", "createImageData", "forceRGBA", "drawWidth", "drawHeight", "newArray", "imageLength", "actualHeight", "maybeUndoPreblend", "fillGrayBuffer", "getImageBytes", "CallbackKind", "DATA", "ERROR", "StreamKind", "CANCEL", "CANCEL_COMPLETE", "CLOSE", "ENQUEUE", "PULL", "PULL_COMPLETE", "START_COMPLETE", "event", "callbackId", "wrapReason", "cbSourceName", "cbTargetName", "comObj", "sourceName", "targetName", "on", "ah", "sendWithPromise", "sendWithStream", "streamId", "controller", "startCapability", "startCall", "pullCall", "cancelCall", "isClosed", "desiredSize", "pull", "pullCapability", "cancel", "cancelCapability", "_createStreamSink", "lastDesiredSize", "close", "sinkCapability", "onPull", "onCancel", "isCancelled", "ready", "success", "_processStreamMessage", "_postMessage", "destroy", "getFullReader", "getRangeReader", "cancelAllRequests", "readers"]
}
